// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
ScimDeleteUserFromOrg performs requests for "scim/delete-user-from-org"

Delete a SCIM user from an organization.

  DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization
*/
func ScimDeleteUserFromOrg(ctx context.Context, req *ScimDeleteUserFromOrgReq, opt ...RequestOption) (*ScimDeleteUserFromOrgResponse, error) {
	if req == nil {
		req = new(ScimDeleteUserFromOrgReq)
	}
	resp := &ScimDeleteUserFromOrgResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ScimDeleteUserFromOrg performs requests for "scim/delete-user-from-org"

Delete a SCIM user from an organization.

  DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization
*/
func (c Client) ScimDeleteUserFromOrg(ctx context.Context, req *ScimDeleteUserFromOrgReq, opt ...RequestOption) (*ScimDeleteUserFromOrgResponse, error) {
	return ScimDeleteUserFromOrg(ctx, req, append(c, opt...)...)
}

/*
ScimDeleteUserFromOrgReq is request data for Client.ScimDeleteUserFromOrg

https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization
*/
type ScimDeleteUserFromOrgReq struct {
	_url string
	Org  string

	// Identifier generated by the GitHub SCIM endpoint.
	ScimUserId int64
}

func (r *ScimDeleteUserFromOrgReq) url() string {
	return r._url
}

func (r *ScimDeleteUserFromOrgReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r *ScimDeleteUserFromOrgReq) method() string {
	return "DELETE"
}

func (r *ScimDeleteUserFromOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ScimDeleteUserFromOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ScimDeleteUserFromOrgReq) body() interface{} {
	return nil
}

func (r *ScimDeleteUserFromOrgReq) dataStatuses() []int {
	return []int{}
}

func (r *ScimDeleteUserFromOrgReq) validStatuses() []int {
	return []int{204}
}

func (r *ScimDeleteUserFromOrgReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *ScimDeleteUserFromOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ScimDeleteUserFromOrgReq) Rel(link RelName, resp *ScimDeleteUserFromOrgResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ScimDeleteUserFromOrgResponse is a response for ScimDeleteUserFromOrg

https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization
*/
type ScimDeleteUserFromOrgResponse struct {
	response
	request *ScimDeleteUserFromOrgReq
}

/*
ScimGetProvisioningInformationForUser performs requests for "scim/get-provisioning-information-for-user"

Get SCIM provisioning information for a user.

  GET /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user
*/
func ScimGetProvisioningInformationForUser(ctx context.Context, req *ScimGetProvisioningInformationForUserReq, opt ...RequestOption) (*ScimGetProvisioningInformationForUserResponse, error) {
	if req == nil {
		req = new(ScimGetProvisioningInformationForUserReq)
	}
	resp := &ScimGetProvisioningInformationForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ScimGetProvisioningInformationForUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ScimGetProvisioningInformationForUser performs requests for "scim/get-provisioning-information-for-user"

Get SCIM provisioning information for a user.

  GET /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user
*/
func (c Client) ScimGetProvisioningInformationForUser(ctx context.Context, req *ScimGetProvisioningInformationForUserReq, opt ...RequestOption) (*ScimGetProvisioningInformationForUserResponse, error) {
	return ScimGetProvisioningInformationForUser(ctx, req, append(c, opt...)...)
}

/*
ScimGetProvisioningInformationForUserReq is request data for Client.ScimGetProvisioningInformationForUser

https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user
*/
type ScimGetProvisioningInformationForUserReq struct {
	_url string
	Org  string

	// Identifier generated by the GitHub SCIM endpoint.
	ScimUserId int64
}

func (r *ScimGetProvisioningInformationForUserReq) url() string {
	return r._url
}

func (r *ScimGetProvisioningInformationForUserReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r *ScimGetProvisioningInformationForUserReq) method() string {
	return "GET"
}

func (r *ScimGetProvisioningInformationForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ScimGetProvisioningInformationForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ScimGetProvisioningInformationForUserReq) body() interface{} {
	return nil
}

func (r *ScimGetProvisioningInformationForUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ScimGetProvisioningInformationForUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ScimGetProvisioningInformationForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *ScimGetProvisioningInformationForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ScimGetProvisioningInformationForUserReq) Rel(link RelName, resp *ScimGetProvisioningInformationForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ScimGetProvisioningInformationForUserResponseBody is a response body for ScimGetProvisioningInformationForUser

https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user
*/
type ScimGetProvisioningInformationForUserResponseBody struct {
	components.ScimUser
}

/*
ScimGetProvisioningInformationForUserResponse is a response for ScimGetProvisioningInformationForUser

https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user
*/
type ScimGetProvisioningInformationForUserResponse struct {
	response
	request *ScimGetProvisioningInformationForUserReq
	Data    *ScimGetProvisioningInformationForUserResponseBody
}

/*
ScimListProvisionedIdentities performs requests for "scim/list-provisioned-identities"

List SCIM provisioned identities.

  GET /scim/v2/organizations/{org}/Users

https://developer.github.com/v3/scim/#list-scim-provisioned-identities
*/
func ScimListProvisionedIdentities(ctx context.Context, req *ScimListProvisionedIdentitiesReq, opt ...RequestOption) (*ScimListProvisionedIdentitiesResponse, error) {
	if req == nil {
		req = new(ScimListProvisionedIdentitiesReq)
	}
	resp := &ScimListProvisionedIdentitiesResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ScimListProvisionedIdentitiesResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ScimListProvisionedIdentities performs requests for "scim/list-provisioned-identities"

List SCIM provisioned identities.

  GET /scim/v2/organizations/{org}/Users

https://developer.github.com/v3/scim/#list-scim-provisioned-identities
*/
func (c Client) ScimListProvisionedIdentities(ctx context.Context, req *ScimListProvisionedIdentitiesReq, opt ...RequestOption) (*ScimListProvisionedIdentitiesResponse, error) {
	return ScimListProvisionedIdentities(ctx, req, append(c, opt...)...)
}

/*
ScimListProvisionedIdentitiesReq is request data for Client.ScimListProvisionedIdentities

https://developer.github.com/v3/scim/#list-scim-provisioned-identities
*/
type ScimListProvisionedIdentitiesReq struct {
	_url string
	Org  string

	// Used for pagination: the index of the first result to return.
	StartIndex *int64

	// Used for pagination: the number of results to return.
	Count *int64

	/*
	Filters results using the equals query parameter operator (`eq`). You can filter
	results that are equal to `id`, `userName`, `emails`, and `external_id`. For
	example, to search for an identity with the `userName` Octocat, you would use
	this query:

	`?filter=userName%20eq%20\"Octocat\"`.

	To filter results for for the identity with the email `octocat@github.com`, you
	would use this query:

	`?filter=emails%20eq%20\"octocat@github.com\"`.
	*/
	Filter *string
}

func (r *ScimListProvisionedIdentitiesReq) url() string {
	return r._url
}

func (r *ScimListProvisionedIdentitiesReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users", r.Org)
}

func (r *ScimListProvisionedIdentitiesReq) method() string {
	return "GET"
}

func (r *ScimListProvisionedIdentitiesReq) urlQuery() url.Values {
	query := url.Values{}
	if r.StartIndex != nil {
		query.Set("startIndex", strconv.FormatInt(*r.StartIndex, 10))
	}
	if r.Count != nil {
		query.Set("count", strconv.FormatInt(*r.Count, 10))
	}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	return query
}

func (r *ScimListProvisionedIdentitiesReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ScimListProvisionedIdentitiesReq) body() interface{} {
	return nil
}

func (r *ScimListProvisionedIdentitiesReq) dataStatuses() []int {
	return []int{200}
}

func (r *ScimListProvisionedIdentitiesReq) validStatuses() []int {
	return []int{200}
}

func (r *ScimListProvisionedIdentitiesReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *ScimListProvisionedIdentitiesReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ScimListProvisionedIdentitiesReq) Rel(link RelName, resp *ScimListProvisionedIdentitiesResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ScimListProvisionedIdentitiesResponseBody is a response body for ScimListProvisionedIdentities

https://developer.github.com/v3/scim/#list-scim-provisioned-identities
*/
type ScimListProvisionedIdentitiesResponseBody struct {
	components.ScimUserList
}

/*
ScimListProvisionedIdentitiesResponse is a response for ScimListProvisionedIdentities

https://developer.github.com/v3/scim/#list-scim-provisioned-identities
*/
type ScimListProvisionedIdentitiesResponse struct {
	response
	request *ScimListProvisionedIdentitiesReq
	Data    *ScimListProvisionedIdentitiesResponseBody
}

/*
ScimProvisionAndInviteUser performs requests for "scim/provision-and-invite-user"

Provision and invite a SCIM user.

  POST /scim/v2/organizations/{org}/Users

https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
*/
func ScimProvisionAndInviteUser(ctx context.Context, req *ScimProvisionAndInviteUserReq, opt ...RequestOption) (*ScimProvisionAndInviteUserResponse, error) {
	if req == nil {
		req = new(ScimProvisionAndInviteUserReq)
	}
	resp := &ScimProvisionAndInviteUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ScimProvisionAndInviteUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ScimProvisionAndInviteUser performs requests for "scim/provision-and-invite-user"

Provision and invite a SCIM user.

  POST /scim/v2/organizations/{org}/Users

https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
*/
func (c Client) ScimProvisionAndInviteUser(ctx context.Context, req *ScimProvisionAndInviteUserReq, opt ...RequestOption) (*ScimProvisionAndInviteUserResponse, error) {
	return ScimProvisionAndInviteUser(ctx, req, append(c, opt...)...)
}

/*
ScimProvisionAndInviteUserReq is request data for Client.ScimProvisionAndInviteUser

https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
*/
type ScimProvisionAndInviteUserReq struct {
	_url        string
	Org         string
	RequestBody ScimProvisionAndInviteUserReqBody
}

func (r *ScimProvisionAndInviteUserReq) url() string {
	return r._url
}

func (r *ScimProvisionAndInviteUserReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users", r.Org)
}

func (r *ScimProvisionAndInviteUserReq) method() string {
	return "POST"
}

func (r *ScimProvisionAndInviteUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ScimProvisionAndInviteUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ScimProvisionAndInviteUserReq) body() interface{} {
	return r.RequestBody
}

func (r *ScimProvisionAndInviteUserReq) dataStatuses() []int {
	return []int{201}
}

func (r *ScimProvisionAndInviteUserReq) validStatuses() []int {
	return []int{201}
}

func (r *ScimProvisionAndInviteUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *ScimProvisionAndInviteUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ScimProvisionAndInviteUserReq) Rel(link RelName, resp *ScimProvisionAndInviteUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

// ScimProvisionAndInviteUserReqBodyEmails is a value for ScimProvisionAndInviteUserReqBody's Emails field
type ScimProvisionAndInviteUserReqBodyEmails struct {

	// Whether this email address is the primary address.
	Primary *bool `json:"primary"`

	// The type of email address.
	Type *string `json:"type"`

	// The email address.
	Value *string `json:"value"`
}

// ScimProvisionAndInviteUserReqBodyName is a value for ScimProvisionAndInviteUserReqBody's Name field
type ScimProvisionAndInviteUserReqBodyName struct {

	// The last name of the user.
	FamilyName *string `json:"familyName"`

	// The first name of the user.
	GivenName *string `json:"givenName"`
}

/*
ScimProvisionAndInviteUserReqBody is a request body for scim/provision-and-invite-user

https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
*/
type ScimProvisionAndInviteUserReqBody struct {

	// List of user emails.
	Emails []ScimProvisionAndInviteUserReqBodyEmails `json:"emails"`
	Name   *ScimProvisionAndInviteUserReqBodyName    `json:"name"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`

	// The username for the user.
	UserName *string `json:"userName"`
}

/*
ScimProvisionAndInviteUserResponseBody is a response body for ScimProvisionAndInviteUser

https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
*/
type ScimProvisionAndInviteUserResponseBody struct {
	components.ScimUser
}

/*
ScimProvisionAndInviteUserResponse is a response for ScimProvisionAndInviteUser

https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user
*/
type ScimProvisionAndInviteUserResponse struct {
	response
	request *ScimProvisionAndInviteUserReq
	Data    *ScimProvisionAndInviteUserResponseBody
}

/*
ScimSetInformationForProvisionedUser performs requests for "scim/set-information-for-provisioned-user"

Set SCIM information for a provisioned user.

  PUT /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
*/
func ScimSetInformationForProvisionedUser(ctx context.Context, req *ScimSetInformationForProvisionedUserReq, opt ...RequestOption) (*ScimSetInformationForProvisionedUserResponse, error) {
	if req == nil {
		req = new(ScimSetInformationForProvisionedUserReq)
	}
	resp := &ScimSetInformationForProvisionedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ScimSetInformationForProvisionedUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ScimSetInformationForProvisionedUser performs requests for "scim/set-information-for-provisioned-user"

Set SCIM information for a provisioned user.

  PUT /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
*/
func (c Client) ScimSetInformationForProvisionedUser(ctx context.Context, req *ScimSetInformationForProvisionedUserReq, opt ...RequestOption) (*ScimSetInformationForProvisionedUserResponse, error) {
	return ScimSetInformationForProvisionedUser(ctx, req, append(c, opt...)...)
}

/*
ScimSetInformationForProvisionedUserReq is request data for Client.ScimSetInformationForProvisionedUser

https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
*/
type ScimSetInformationForProvisionedUserReq struct {
	_url string
	Org  string

	// Identifier generated by the GitHub SCIM endpoint.
	ScimUserId  int64
	RequestBody ScimSetInformationForProvisionedUserReqBody
}

func (r *ScimSetInformationForProvisionedUserReq) url() string {
	return r._url
}

func (r *ScimSetInformationForProvisionedUserReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r *ScimSetInformationForProvisionedUserReq) method() string {
	return "PUT"
}

func (r *ScimSetInformationForProvisionedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ScimSetInformationForProvisionedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ScimSetInformationForProvisionedUserReq) body() interface{} {
	return r.RequestBody
}

func (r *ScimSetInformationForProvisionedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ScimSetInformationForProvisionedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ScimSetInformationForProvisionedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *ScimSetInformationForProvisionedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ScimSetInformationForProvisionedUserReq) Rel(link RelName, resp *ScimSetInformationForProvisionedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

// ScimSetInformationForProvisionedUserReqBodyEmails is a value for ScimSetInformationForProvisionedUserReqBody's Emails field
type ScimSetInformationForProvisionedUserReqBodyEmails struct {

	// Whether this email address is the primary address.
	Primary *bool `json:"primary"`

	// The type of email address.
	Type *string `json:"type"`

	// The email address.
	Value *string `json:"value"`
}

// ScimSetInformationForProvisionedUserReqBodyName is a value for ScimSetInformationForProvisionedUserReqBody's Name field
type ScimSetInformationForProvisionedUserReqBodyName struct {

	// The last name of the user.
	FamilyName *string `json:"familyName"`

	// The first name of the user.
	GivenName *string `json:"givenName"`
}

/*
ScimSetInformationForProvisionedUserReqBody is a request body for scim/set-information-for-provisioned-user

https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
*/
type ScimSetInformationForProvisionedUserReqBody struct {

	// List of user emails.
	Emails []ScimSetInformationForProvisionedUserReqBodyEmails `json:"emails"`
	Name   *ScimSetInformationForProvisionedUserReqBodyName    `json:"name"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`

	// The username for the user.
	UserName *string `json:"userName"`
}

/*
ScimSetInformationForProvisionedUserResponseBody is a response body for ScimSetInformationForProvisionedUser

https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
*/
type ScimSetInformationForProvisionedUserResponseBody struct {
	components.ScimUser
}

/*
ScimSetInformationForProvisionedUserResponse is a response for ScimSetInformationForProvisionedUser

https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user
*/
type ScimSetInformationForProvisionedUserResponse struct {
	response
	request *ScimSetInformationForProvisionedUserReq
	Data    *ScimSetInformationForProvisionedUserResponseBody
}

/*
ScimUpdateAttributeForUser performs requests for "scim/update-attribute-for-user"

Update an attribute for a SCIM user.

  PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
*/
func ScimUpdateAttributeForUser(ctx context.Context, req *ScimUpdateAttributeForUserReq, opt ...RequestOption) (*ScimUpdateAttributeForUserResponse, error) {
	if req == nil {
		req = new(ScimUpdateAttributeForUserReq)
	}
	resp := &ScimUpdateAttributeForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ScimUpdateAttributeForUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ScimUpdateAttributeForUser performs requests for "scim/update-attribute-for-user"

Update an attribute for a SCIM user.

  PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
*/
func (c Client) ScimUpdateAttributeForUser(ctx context.Context, req *ScimUpdateAttributeForUserReq, opt ...RequestOption) (*ScimUpdateAttributeForUserResponse, error) {
	return ScimUpdateAttributeForUser(ctx, req, append(c, opt...)...)
}

/*
ScimUpdateAttributeForUserReq is request data for Client.ScimUpdateAttributeForUser

https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
*/
type ScimUpdateAttributeForUserReq struct {
	_url string
	Org  string

	// Identifier generated by the GitHub SCIM endpoint.
	ScimUserId  int64
	RequestBody ScimUpdateAttributeForUserReqBody
}

func (r *ScimUpdateAttributeForUserReq) url() string {
	return r._url
}

func (r *ScimUpdateAttributeForUserReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r *ScimUpdateAttributeForUserReq) method() string {
	return "PATCH"
}

func (r *ScimUpdateAttributeForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ScimUpdateAttributeForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ScimUpdateAttributeForUserReq) body() interface{} {
	return r.RequestBody
}

func (r *ScimUpdateAttributeForUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ScimUpdateAttributeForUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ScimUpdateAttributeForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *ScimUpdateAttributeForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ScimUpdateAttributeForUserReq) Rel(link RelName, resp *ScimUpdateAttributeForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ScimUpdateAttributeForUserReqBody is a request body for scim/update-attribute-for-user

https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
*/
type ScimUpdateAttributeForUserReqBody struct {

	// Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
	Operations []interface{} `json:"Operations"`

	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
}

/*
ScimUpdateAttributeForUserResponseBody is a response body for ScimUpdateAttributeForUser

https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
*/
type ScimUpdateAttributeForUserResponseBody struct {
	components.ScimUser2
}

/*
ScimUpdateAttributeForUserResponse is a response for ScimUpdateAttributeForUser

https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user
*/
type ScimUpdateAttributeForUserResponse struct {
	response
	request *ScimUpdateAttributeForUserReq
	Data    *ScimUpdateAttributeForUserResponseBody
}
