// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

/*
ScimGetProvisioningDetailsForUserReq builds requests for "scim/get-provisioning-details-for-user"

Get provisioning details for a single user.

  GET /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#get-provisioning-details-for-a-single-user
*/
type ScimGetProvisioningDetailsForUserReq struct {
	Org        string
	ScimUserId int64
}

func (r ScimGetProvisioningDetailsForUserReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r ScimGetProvisioningDetailsForUserReq) method() string {
	return "GET"
}

func (r ScimGetProvisioningDetailsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ScimGetProvisioningDetailsForUserReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r ScimGetProvisioningDetailsForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ScimGetProvisioningDetailsForUserResponseBody200 is a response body for scim/get-provisioning-details-for-user

API documentation: https://developer.github.com/v3/scim/#get-provisioning-details-for-a-single-user
*/
type ScimGetProvisioningDetailsForUserResponseBody200 struct {
	Active bool `json:"active,omitempty"`
	Emails []struct {
		Primary bool   `json:"primary,omitempty"`
		Type    string `json:"type,omitempty"`
		Value   string `json:"value,omitempty"`
	} `json:"emails,omitempty"`
	ExternalId string `json:"externalId,omitempty"`
	Id         string `json:"id,omitempty"`
	Meta       struct {
		Created      string `json:"created,omitempty"`
		LastModified string `json:"lastModified,omitempty"`
		Location     string `json:"location,omitempty"`
		ResourceType string `json:"resourceType,omitempty"`
	} `json:"meta,omitempty"`
	Name struct {
		FamilyName string `json:"familyName,omitempty"`
		GivenName  string `json:"givenName,omitempty"`
	} `json:"name,omitempty"`
	Schemas  []string `json:"schemas,omitempty"`
	UserName string   `json:"userName,omitempty"`
}

/*
ScimListProvisionedIdentitiesReq builds requests for "scim/list-provisioned-identities"

Get a list of provisioned identities.

  GET /scim/v2/organizations/{org}/Users

https://developer.github.com/v3/scim/#get-a-list-of-provisioned-identities
*/
type ScimListProvisionedIdentitiesReq struct {
	Org string

	// Used for pagination: the index of the first result to return.
	StartIndex *int64

	// Used for pagination: the number of results to return.
	Count *int64

	/*
	Filters results using the equals query parameter operator (`eq`). You can filter
	results that are equal to `id`, `userName`, `emails`, and `external_id`. For
	example, to search for an identity with the `userName` Octocat, you would use
	this query: `?filter=userName%20eq%20\"Octocat\"`.
	*/
	Filter *string
}

func (r ScimListProvisionedIdentitiesReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users", r.Org)
}

func (r ScimListProvisionedIdentitiesReq) method() string {
	return "GET"
}

func (r ScimListProvisionedIdentitiesReq) urlQuery() url.Values {
	query := url.Values{}
	if r.StartIndex != nil {
		query.Set("startIndex", strconv.FormatInt(*r.StartIndex, 10))
	}
	if r.Count != nil {
		query.Set("count", strconv.FormatInt(*r.Count, 10))
	}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	return query
}

func (r ScimListProvisionedIdentitiesReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r ScimListProvisionedIdentitiesReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ScimListProvisionedIdentitiesResponseBody200 is a response body for scim/list-provisioned-identities

API documentation: https://developer.github.com/v3/scim/#get-a-list-of-provisioned-identities
*/
type ScimListProvisionedIdentitiesResponseBody200 struct {
	Resources []struct {
		Active bool `json:"active,omitempty"`
		Emails []struct {
			Primary bool   `json:"primary,omitempty"`
			Type    string `json:"type,omitempty"`
			Value   string `json:"value,omitempty"`
		} `json:"emails,omitempty"`
		ExternalId string `json:"externalId,omitempty"`
		Id         string `json:"id,omitempty"`
		Meta       struct {
			Created      string `json:"created,omitempty"`
			LastModified string `json:"lastModified,omitempty"`
			Location     string `json:"location,omitempty"`
			ResourceType string `json:"resourceType,omitempty"`
		} `json:"meta,omitempty"`
		Name struct {
			FamilyName string `json:"familyName,omitempty"`
			GivenName  string `json:"givenName,omitempty"`
		} `json:"name,omitempty"`
		Schemas  []string `json:"schemas,omitempty"`
		UserName string   `json:"userName,omitempty"`
	} `json:"Resources,omitempty"`
	ItemsPerPage int64    `json:"itemsPerPage,omitempty"`
	Schemas      []string `json:"schemas,omitempty"`
	StartIndex   int64    `json:"startIndex,omitempty"`
	TotalResults int64    `json:"totalResults,omitempty"`
}

/*
ScimProvisionAndInviteUsersReq builds requests for "scim/provision-and-invite-users"

Provision and invite users.

  POST /scim/v2/organizations/{org}/Users

https://developer.github.com/v3/scim/#provision-and-invite-users
*/
type ScimProvisionAndInviteUsersReq struct {
	Org string
}

func (r ScimProvisionAndInviteUsersReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users", r.Org)
}

func (r ScimProvisionAndInviteUsersReq) method() string {
	return "POST"
}

func (r ScimProvisionAndInviteUsersReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ScimProvisionAndInviteUsersReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r ScimProvisionAndInviteUsersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ScimProvisionAndInviteUsersResponseBody201 is a response body for scim/provision-and-invite-users

API documentation: https://developer.github.com/v3/scim/#provision-and-invite-users
*/
type ScimProvisionAndInviteUsersResponseBody201 struct {
	Active bool `json:"active,omitempty"`
	Emails []struct {
		Primary bool   `json:"primary,omitempty"`
		Type    string `json:"type,omitempty"`
		Value   string `json:"value,omitempty"`
	} `json:"emails,omitempty"`
	ExternalId string `json:"externalId,omitempty"`
	Id         string `json:"id,omitempty"`
	Meta       struct {
		Created      string `json:"created,omitempty"`
		LastModified string `json:"lastModified,omitempty"`
		Location     string `json:"location,omitempty"`
		ResourceType string `json:"resourceType,omitempty"`
	} `json:"meta,omitempty"`
	Name struct {
		FamilyName string `json:"familyName,omitempty"`
		GivenName  string `json:"givenName,omitempty"`
	} `json:"name,omitempty"`
	Schemas  []string `json:"schemas,omitempty"`
	UserName string   `json:"userName,omitempty"`
}

/*
ScimRemoveUserFromOrgReq builds requests for "scim/remove-user-from-org"

Remove a user from the organization.

  DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#remove-a-user-from-the-organization
*/
type ScimRemoveUserFromOrgReq struct {
	Org        string
	ScimUserId int64
}

func (r ScimRemoveUserFromOrgReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r ScimRemoveUserFromOrgReq) method() string {
	return "DELETE"
}

func (r ScimRemoveUserFromOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ScimRemoveUserFromOrgReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r ScimRemoveUserFromOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ScimReplaceProvisionedUserInformationReq builds requests for "scim/replace-provisioned-user-information"

Replace a provisioned user's information.

  PUT /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#replace-a-provisioned-users-information
*/
type ScimReplaceProvisionedUserInformationReq struct {
	Org        string
	ScimUserId int64
}

func (r ScimReplaceProvisionedUserInformationReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r ScimReplaceProvisionedUserInformationReq) method() string {
	return "PUT"
}

func (r ScimReplaceProvisionedUserInformationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ScimReplaceProvisionedUserInformationReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r ScimReplaceProvisionedUserInformationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ScimReplaceProvisionedUserInformationResponseBody200 is a response body for scim/replace-provisioned-user-information

API documentation: https://developer.github.com/v3/scim/#replace-a-provisioned-users-information
*/
type ScimReplaceProvisionedUserInformationResponseBody200 struct {
	Active bool `json:"active,omitempty"`
	Emails []struct {
		Primary bool   `json:"primary,omitempty"`
		Type    string `json:"type,omitempty"`
		Value   string `json:"value,omitempty"`
	} `json:"emails,omitempty"`
	ExternalId string `json:"externalId,omitempty"`
	Id         string `json:"id,omitempty"`
	Meta       struct {
		Created      string `json:"created,omitempty"`
		LastModified string `json:"lastModified,omitempty"`
		Location     string `json:"location,omitempty"`
		ResourceType string `json:"resourceType,omitempty"`
	} `json:"meta,omitempty"`
	Name struct {
		FamilyName string `json:"familyName,omitempty"`
		GivenName  string `json:"givenName,omitempty"`
	} `json:"name,omitempty"`
	Schemas  []string `json:"schemas,omitempty"`
	UserName string   `json:"userName,omitempty"`
}

/*
ScimUpdateUserAttributeReq builds requests for "scim/update-user-attribute"

Update a user attribute.

  PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}

https://developer.github.com/v3/scim/#update-a-user-attribute
*/
type ScimUpdateUserAttributeReq struct {
	Org        string
	ScimUserId int64
}

func (r ScimUpdateUserAttributeReq) urlPath() string {
	return fmt.Sprintf("/scim/v2/organizations/%v/Users/%v", r.Org, r.ScimUserId)
}

func (r ScimUpdateUserAttributeReq) method() string {
	return "PATCH"
}

func (r ScimUpdateUserAttributeReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ScimUpdateUserAttributeReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r ScimUpdateUserAttributeReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ScimUpdateUserAttributeResponseBody200 is a response body for scim/update-user-attribute

API documentation: https://developer.github.com/v3/scim/#update-a-user-attribute
*/
type ScimUpdateUserAttributeResponseBody200 struct {
	Active bool `json:"active,omitempty"`
	Emails []struct {
		Primary bool   `json:"primary,omitempty"`
		Type    string `json:"type"`
		Value   string `json:"value"`
	} `json:"emails,omitempty"`
	ExternalId string `json:"externalId,omitempty"`
	Id         string `json:"id,omitempty"`
	Meta       struct {
		Created      string `json:"created,omitempty"`
		LastModified string `json:"lastModified,omitempty"`
		Location     string `json:"location,omitempty"`
		ResourceType string `json:"resourceType,omitempty"`
	} `json:"meta,omitempty"`
	Name struct {
		FamilyName string `json:"familyName,omitempty"`
		GivenName  string `json:"givenName,omitempty"`
	} `json:"name,omitempty"`
	Schemas  []string `json:"schemas,omitempty"`
	UserName string   `json:"userName,omitempty"`
}
