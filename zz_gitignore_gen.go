// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
)

/*
GitignoreGetTemplate performs requests for "gitignore/get-template"

Get a single template.

  GET /gitignore/templates/{name}

https://developer.github.com/v3/gitignore/#get-a-single-template
*/
func (c *Client) GitignoreGetTemplate(ctx context.Context, req *GitignoreGetTemplateReq, opt ...RequestOption) (*GitignoreGetTemplateResponse, error) {
	resp := &GitignoreGetTemplateResponse{request: req}
	r, err := c.doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GitignoreGetTemplateResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GitignoreGetTemplateReq is request data for Client.GitignoreGetTemplate

https://developer.github.com/v3/gitignore/#get-a-single-template
*/
type GitignoreGetTemplateReq struct {
	pgURL string
	Name  string
}

func (r *GitignoreGetTemplateReq) pagingURL() string {
	return r.pgURL
}

func (r *GitignoreGetTemplateReq) urlPath() string {
	return fmt.Sprintf("/gitignore/templates/%v", r.Name)
}

func (r *GitignoreGetTemplateReq) method() string {
	return "GET"
}

func (r *GitignoreGetTemplateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GitignoreGetTemplateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GitignoreGetTemplateReq) body() interface{} {
	return nil
}

func (r *GitignoreGetTemplateReq) dataStatuses() []int {
	return []int{200}
}

func (r *GitignoreGetTemplateReq) validStatuses() []int {
	return []int{200}
}

func (r *GitignoreGetTemplateReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *GitignoreGetTemplateReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GitignoreGetTemplateReq) Rel(link RelName, resp *GitignoreGetTemplateResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
GitignoreGetTemplateResponseBody is a response body for GitignoreGetTemplate

https://developer.github.com/v3/gitignore/#get-a-single-template
*/
type GitignoreGetTemplateResponseBody struct {
	components.GitignoreTemplate
}

/*
GitignoreGetTemplateResponse is a response for GitignoreGetTemplate

https://developer.github.com/v3/gitignore/#get-a-single-template
*/
type GitignoreGetTemplateResponse struct {
	response
	request *GitignoreGetTemplateReq
	Data    *GitignoreGetTemplateResponseBody
}

/*
GitignoreListTemplates performs requests for "gitignore/list-templates"

Listing available templates.

  GET /gitignore/templates

https://developer.github.com/v3/gitignore/#listing-available-templates
*/
func (c *Client) GitignoreListTemplates(ctx context.Context, req *GitignoreListTemplatesReq, opt ...RequestOption) (*GitignoreListTemplatesResponse, error) {
	resp := &GitignoreListTemplatesResponse{request: req}
	r, err := c.doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GitignoreListTemplatesResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GitignoreListTemplatesReq is request data for Client.GitignoreListTemplates

https://developer.github.com/v3/gitignore/#listing-available-templates
*/
type GitignoreListTemplatesReq struct {
	pgURL string
}

func (r *GitignoreListTemplatesReq) pagingURL() string {
	return r.pgURL
}

func (r *GitignoreListTemplatesReq) urlPath() string {
	return fmt.Sprintf("/gitignore/templates")
}

func (r *GitignoreListTemplatesReq) method() string {
	return "GET"
}

func (r *GitignoreListTemplatesReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GitignoreListTemplatesReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GitignoreListTemplatesReq) body() interface{} {
	return nil
}

func (r *GitignoreListTemplatesReq) dataStatuses() []int {
	return []int{200}
}

func (r *GitignoreListTemplatesReq) validStatuses() []int {
	return []int{200}
}

func (r *GitignoreListTemplatesReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *GitignoreListTemplatesReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GitignoreListTemplatesReq) Rel(link RelName, resp *GitignoreListTemplatesResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
GitignoreListTemplatesResponseBody is a response body for GitignoreListTemplates

https://developer.github.com/v3/gitignore/#listing-available-templates
*/
type GitignoreListTemplatesResponseBody []string

/*
GitignoreListTemplatesResponse is a response for GitignoreListTemplates

https://developer.github.com/v3/gitignore/#listing-available-templates
*/
type GitignoreListTemplatesResponse struct {
	response
	request *GitignoreListTemplatesReq
	Data    *GitignoreListTemplatesResponseBody
}
