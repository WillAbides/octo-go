// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

/*
ReactionsListForTeamDiscussionCommentLegacyReq builds requests for "reactions/list-for-team-discussion-comment-legacy"

List reactions for a team discussion comment (Legacy).

  GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
*/
type ReactionsListForTeamDiscussionCommentLegacyReq struct {
	TeamId           int64
	DiscussionNumber int64
	CommentNumber    int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForTeamDiscussionCommentLegacyReq) urlPath() string {
	return fmt.Sprintf("/teams/%v/discussions/%v/comments/%v/reactions", r.TeamId, r.DiscussionNumber, r.CommentNumber)
}

func (r ReactionsListForTeamDiscussionCommentLegacyReq) method() string {
	return "GET"
}

func (r ReactionsListForTeamDiscussionCommentLegacyReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForTeamDiscussionCommentLegacyReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForTeamDiscussionCommentLegacyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForTeamDiscussionCommentLegacyResponseBody200 is a response body for reactions/list-for-team-discussion-comment-legacy

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
*/
type ReactionsListForTeamDiscussionCommentLegacyResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForTeamDiscussionCommentLegacyReq builds requests for "reactions/create-for-team-discussion-comment-legacy"

Create reaction for a team discussion comment (Legacy).

  POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
type ReactionsCreateForTeamDiscussionCommentLegacyReq struct {
	TeamId           int64
	DiscussionNumber int64
	CommentNumber    int64
	RequestBody      ReactionsCreateForTeamDiscussionCommentLegacyReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForTeamDiscussionCommentLegacyReq) urlPath() string {
	return fmt.Sprintf("/teams/%v/discussions/%v/comments/%v/reactions", r.TeamId, r.DiscussionNumber, r.CommentNumber)
}

func (r ReactionsCreateForTeamDiscussionCommentLegacyReq) method() string {
	return "POST"
}

func (r ReactionsCreateForTeamDiscussionCommentLegacyReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForTeamDiscussionCommentLegacyReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForTeamDiscussionCommentLegacyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForTeamDiscussionCommentLegacyReqBody is a request body for reactions/create-for-team-discussion-comment-legacy

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
type ReactionsCreateForTeamDiscussionCommentLegacyReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the team discussion comment.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForTeamDiscussionCommentLegacyResponseBody201 is a response body for reactions/create-for-team-discussion-comment-legacy

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
type ReactionsCreateForTeamDiscussionCommentLegacyResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsListForTeamDiscussionInOrgReq builds requests for "reactions/list-for-team-discussion-in-org"

List reactions for a team discussion.

  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
*/
type ReactionsListForTeamDiscussionInOrgReq struct {
	Org              string
	TeamSlug         string
	DiscussionNumber int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForTeamDiscussionInOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber)
}

func (r ReactionsListForTeamDiscussionInOrgReq) method() string {
	return "GET"
}

func (r ReactionsListForTeamDiscussionInOrgReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForTeamDiscussionInOrgReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForTeamDiscussionInOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForTeamDiscussionInOrgResponseBody200 is a response body for reactions/list-for-team-discussion-in-org

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
*/
type ReactionsListForTeamDiscussionInOrgResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForTeamDiscussionInOrgReq builds requests for "reactions/create-for-team-discussion-in-org"

Create reaction for a team discussion.

  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
type ReactionsCreateForTeamDiscussionInOrgReq struct {
	Org              string
	TeamSlug         string
	DiscussionNumber int64
	RequestBody      ReactionsCreateForTeamDiscussionInOrgReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForTeamDiscussionInOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber)
}

func (r ReactionsCreateForTeamDiscussionInOrgReq) method() string {
	return "POST"
}

func (r ReactionsCreateForTeamDiscussionInOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForTeamDiscussionInOrgReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForTeamDiscussionInOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForTeamDiscussionInOrgReqBody is a request body for reactions/create-for-team-discussion-in-org

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
type ReactionsCreateForTeamDiscussionInOrgReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the team discussion.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForTeamDiscussionInOrgResponseBody201 is a response body for reactions/create-for-team-discussion-in-org

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
type ReactionsCreateForTeamDiscussionInOrgResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsDeleteForTeamDiscussionReq builds requests for "reactions/delete-for-team-discussion"

Delete team discussion reaction.

  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-team-discussion-reaction
*/
type ReactionsDeleteForTeamDiscussionReq struct {
	Org              string
	TeamSlug         string
	DiscussionNumber int64
	ReactionId       int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteForTeamDiscussionReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/reactions/%v", r.Org, r.TeamSlug, r.DiscussionNumber, r.ReactionId)
}

func (r ReactionsDeleteForTeamDiscussionReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteForTeamDiscussionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteForTeamDiscussionReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteForTeamDiscussionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsDeleteForIssueReq builds requests for "reactions/delete-for-issue"

Delete an issue reaction.

  DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-an-issue-reaction
*/
type ReactionsDeleteForIssueReq struct {
	Owner       string
	Repo        string
	IssueNumber int64
	ReactionId  int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteForIssueReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/issues/%v/reactions/%v", r.Owner, r.Repo, r.IssueNumber, r.ReactionId)
}

func (r ReactionsDeleteForIssueReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteForIssueReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteForIssueReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteForIssueReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsDeleteForPullRequestCommentReq builds requests for "reactions/delete-for-pull-request-comment"

Delete a pull request comment reaction.

  DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction
*/
type ReactionsDeleteForPullRequestCommentReq struct {
	Owner      string
	Repo       string
	CommentId  int64
	ReactionId int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteForPullRequestCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/pulls/comments/%v/reactions/%v", r.Owner, r.Repo, r.CommentId, r.ReactionId)
}

func (r ReactionsDeleteForPullRequestCommentReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteForPullRequestCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteForPullRequestCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteForPullRequestCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsDeleteForIssueCommentReq builds requests for "reactions/delete-for-issue-comment"

Delete an issue comment reaction.

  DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction
*/
type ReactionsDeleteForIssueCommentReq struct {
	Owner      string
	Repo       string
	CommentId  int64
	ReactionId int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteForIssueCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/issues/comments/%v/reactions/%v", r.Owner, r.Repo, r.CommentId, r.ReactionId)
}

func (r ReactionsDeleteForIssueCommentReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteForIssueCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteForIssueCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForIssueCommentReq builds requests for "reactions/list-for-issue-comment"

List reactions for an issue comment.

  GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
*/
type ReactionsListForIssueCommentReq struct {
	Owner     string
	Repo      string
	CommentId int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to an issue comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForIssueCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/issues/comments/%v/reactions", r.Owner, r.Repo, r.CommentId)
}

func (r ReactionsListForIssueCommentReq) method() string {
	return "GET"
}

func (r ReactionsListForIssueCommentReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForIssueCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForIssueCommentResponseBody200 is a response body for reactions/list-for-issue-comment

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
*/
type ReactionsListForIssueCommentResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForIssueCommentReq builds requests for "reactions/create-for-issue-comment"

Create reaction for an issue comment.

  POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
type ReactionsCreateForIssueCommentReq struct {
	Owner       string
	Repo        string
	CommentId   int64
	RequestBody ReactionsCreateForIssueCommentReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForIssueCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/issues/comments/%v/reactions", r.Owner, r.Repo, r.CommentId)
}

func (r ReactionsCreateForIssueCommentReq) method() string {
	return "POST"
}

func (r ReactionsCreateForIssueCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForIssueCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForIssueCommentReqBody is a request body for reactions/create-for-issue-comment

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
type ReactionsCreateForIssueCommentReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the issue comment.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForIssueCommentResponseBody201 is a response body for reactions/create-for-issue-comment

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
type ReactionsCreateForIssueCommentResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsListForTeamDiscussionCommentInOrgReq builds requests for "reactions/list-for-team-discussion-comment-in-org"

List reactions for a team discussion comment.

  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
*/
type ReactionsListForTeamDiscussionCommentInOrgReq struct {
	Org              string
	TeamSlug         string
	DiscussionNumber int64
	CommentNumber    int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForTeamDiscussionCommentInOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber)
}

func (r ReactionsListForTeamDiscussionCommentInOrgReq) method() string {
	return "GET"
}

func (r ReactionsListForTeamDiscussionCommentInOrgReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForTeamDiscussionCommentInOrgReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForTeamDiscussionCommentInOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForTeamDiscussionCommentInOrgResponseBody200 is a response body for reactions/list-for-team-discussion-comment-in-org

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
*/
type ReactionsListForTeamDiscussionCommentInOrgResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForTeamDiscussionCommentInOrgReq builds requests for "reactions/create-for-team-discussion-comment-in-org"

Create reaction for a team discussion comment.

  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
type ReactionsCreateForTeamDiscussionCommentInOrgReq struct {
	Org              string
	TeamSlug         string
	DiscussionNumber int64
	CommentNumber    int64
	RequestBody      ReactionsCreateForTeamDiscussionCommentInOrgReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForTeamDiscussionCommentInOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber)
}

func (r ReactionsCreateForTeamDiscussionCommentInOrgReq) method() string {
	return "POST"
}

func (r ReactionsCreateForTeamDiscussionCommentInOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForTeamDiscussionCommentInOrgReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForTeamDiscussionCommentInOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForTeamDiscussionCommentInOrgReqBody is a request body for reactions/create-for-team-discussion-comment-in-org

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
type ReactionsCreateForTeamDiscussionCommentInOrgReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the team discussion comment.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForTeamDiscussionCommentInOrgResponseBody201 is a response body for reactions/create-for-team-discussion-comment-in-org

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
type ReactionsCreateForTeamDiscussionCommentInOrgResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsListForIssueReq builds requests for "reactions/list-for-issue"

List reactions for an issue.

  GET /repos/{owner}/{repo}/issues/{issue_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
*/
type ReactionsListForIssueReq struct {
	Owner       string
	Repo        string
	IssueNumber int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to an issue.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForIssueReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/issues/%v/reactions", r.Owner, r.Repo, r.IssueNumber)
}

func (r ReactionsListForIssueReq) method() string {
	return "GET"
}

func (r ReactionsListForIssueReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForIssueReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForIssueReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForIssueResponseBody200 is a response body for reactions/list-for-issue

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
*/
type ReactionsListForIssueResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForIssueReq builds requests for "reactions/create-for-issue"

Create reaction for an issue.

  POST /repos/{owner}/{repo}/issues/{issue_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
type ReactionsCreateForIssueReq struct {
	Owner       string
	Repo        string
	IssueNumber int64
	RequestBody ReactionsCreateForIssueReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForIssueReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/issues/%v/reactions", r.Owner, r.Repo, r.IssueNumber)
}

func (r ReactionsCreateForIssueReq) method() string {
	return "POST"
}

func (r ReactionsCreateForIssueReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForIssueReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForIssueReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForIssueReqBody is a request body for reactions/create-for-issue

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
type ReactionsCreateForIssueReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the issue.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForIssueResponseBody201 is a response body for reactions/create-for-issue

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
type ReactionsCreateForIssueResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsListForPullRequestReviewCommentReq builds requests for "reactions/list-for-pull-request-review-comment"

List reactions for a pull request review comment.

  GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
*/
type ReactionsListForPullRequestReviewCommentReq struct {
	Owner     string
	Repo      string
	CommentId int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a pull request review comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForPullRequestReviewCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/pulls/comments/%v/reactions", r.Owner, r.Repo, r.CommentId)
}

func (r ReactionsListForPullRequestReviewCommentReq) method() string {
	return "GET"
}

func (r ReactionsListForPullRequestReviewCommentReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForPullRequestReviewCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForPullRequestReviewCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForPullRequestReviewCommentResponseBody200 is a response body for reactions/list-for-pull-request-review-comment

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
*/
type ReactionsListForPullRequestReviewCommentResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForPullRequestReviewCommentReq builds requests for "reactions/create-for-pull-request-review-comment"

Create reaction for a pull request review comment.

  POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
type ReactionsCreateForPullRequestReviewCommentReq struct {
	Owner       string
	Repo        string
	CommentId   int64
	RequestBody ReactionsCreateForPullRequestReviewCommentReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForPullRequestReviewCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/pulls/comments/%v/reactions", r.Owner, r.Repo, r.CommentId)
}

func (r ReactionsCreateForPullRequestReviewCommentReq) method() string {
	return "POST"
}

func (r ReactionsCreateForPullRequestReviewCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForPullRequestReviewCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForPullRequestReviewCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForPullRequestReviewCommentReqBody is a request body for reactions/create-for-pull-request-review-comment

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
type ReactionsCreateForPullRequestReviewCommentReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the pull request review comment.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForPullRequestReviewCommentResponseBody201 is a response body for reactions/create-for-pull-request-review-comment

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
type ReactionsCreateForPullRequestReviewCommentResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsDeleteForCommitCommentReq builds requests for "reactions/delete-for-commit-comment"

Delete a commit comment reaction.

  DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction
*/
type ReactionsDeleteForCommitCommentReq struct {
	Owner      string
	Repo       string
	CommentId  int64
	ReactionId int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteForCommitCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/comments/%v/reactions/%v", r.Owner, r.Repo, r.CommentId, r.ReactionId)
}

func (r ReactionsDeleteForCommitCommentReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteForCommitCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteForCommitCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteForCommitCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsDeleteForTeamDiscussionCommentReq builds requests for "reactions/delete-for-team-discussion-comment"

Delete team discussion comment reaction.

  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction
*/
type ReactionsDeleteForTeamDiscussionCommentReq struct {
	Org              string
	TeamSlug         string
	DiscussionNumber int64
	CommentNumber    int64
	ReactionId       int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteForTeamDiscussionCommentReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions/%v", r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber, r.ReactionId)
}

func (r ReactionsDeleteForTeamDiscussionCommentReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteForTeamDiscussionCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteForTeamDiscussionCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteForTeamDiscussionCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsDeleteLegacyReq builds requests for "reactions/delete-legacy"

Delete a reaction (Legacy).

  DELETE /reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-reaction-legacy
*/
type ReactionsDeleteLegacyReq struct {
	ReactionId int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsDeleteLegacyReq) urlPath() string {
	return fmt.Sprintf("/reactions/%v", r.ReactionId)
}

func (r ReactionsDeleteLegacyReq) method() string {
	return "DELETE"
}

func (r ReactionsDeleteLegacyReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsDeleteLegacyReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsDeleteLegacyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForTeamDiscussionLegacyReq builds requests for "reactions/list-for-team-discussion-legacy"

List reactions for a team discussion (Legacy).

  GET /teams/{team_id}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
*/
type ReactionsListForTeamDiscussionLegacyReq struct {
	TeamId           int64
	DiscussionNumber int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForTeamDiscussionLegacyReq) urlPath() string {
	return fmt.Sprintf("/teams/%v/discussions/%v/reactions", r.TeamId, r.DiscussionNumber)
}

func (r ReactionsListForTeamDiscussionLegacyReq) method() string {
	return "GET"
}

func (r ReactionsListForTeamDiscussionLegacyReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForTeamDiscussionLegacyReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForTeamDiscussionLegacyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForTeamDiscussionLegacyResponseBody200 is a response body for reactions/list-for-team-discussion-legacy

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
*/
type ReactionsListForTeamDiscussionLegacyResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForTeamDiscussionLegacyReq builds requests for "reactions/create-for-team-discussion-legacy"

Create reaction for a team discussion (Legacy).

  POST /teams/{team_id}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
type ReactionsCreateForTeamDiscussionLegacyReq struct {
	TeamId           int64
	DiscussionNumber int64
	RequestBody      ReactionsCreateForTeamDiscussionLegacyReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForTeamDiscussionLegacyReq) urlPath() string {
	return fmt.Sprintf("/teams/%v/discussions/%v/reactions", r.TeamId, r.DiscussionNumber)
}

func (r ReactionsCreateForTeamDiscussionLegacyReq) method() string {
	return "POST"
}

func (r ReactionsCreateForTeamDiscussionLegacyReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForTeamDiscussionLegacyReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForTeamDiscussionLegacyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForTeamDiscussionLegacyReqBody is a request body for reactions/create-for-team-discussion-legacy

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
type ReactionsCreateForTeamDiscussionLegacyReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the team discussion.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForTeamDiscussionLegacyResponseBody201 is a response body for reactions/create-for-team-discussion-legacy

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
type ReactionsCreateForTeamDiscussionLegacyResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsListForCommitCommentReq builds requests for "reactions/list-for-commit-comment"

List reactions for a commit comment.

  GET /repos/{owner}/{repo}/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
*/
type ReactionsListForCommitCommentReq struct {
	Owner     string
	Repo      string
	CommentId int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a commit comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsListForCommitCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/comments/%v/reactions", r.Owner, r.Repo, r.CommentId)
}

func (r ReactionsListForCommitCommentReq) method() string {
	return "GET"
}

func (r ReactionsListForCommitCommentReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ReactionsListForCommitCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsListForCommitCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ReactionsListForCommitCommentResponseBody200 is a response body for reactions/list-for-commit-comment

API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
*/
type ReactionsListForCommitCommentResponseBody200 []struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}

/*
ReactionsCreateForCommitCommentReq builds requests for "reactions/create-for-commit-comment"

Create reaction for a commit comment.

  POST /repos/{owner}/{repo}/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
type ReactionsCreateForCommitCommentReq struct {
	Owner       string
	Repo        string
	CommentId   int64
	RequestBody ReactionsCreateForCommitCommentReqBody

	/*
	APIs for managing reactions are currently available for developers to preview.
	See the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details. To access the API during the preview period, you must set this to
	true.
	*/
	SquirrelGirlPreview bool
}

func (r ReactionsCreateForCommitCommentReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/comments/%v/reactions", r.Owner, r.Repo, r.CommentId)
}

func (r ReactionsCreateForCommitCommentReq) method() string {
	return "POST"
}

func (r ReactionsCreateForCommitCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ReactionsCreateForCommitCommentReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"squirrel-girl": r.SquirrelGirlPreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ReactionsCreateForCommitCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ReactionsCreateForCommitCommentReqBody is a request body for reactions/create-for-commit-comment

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
type ReactionsCreateForCommitCommentReqBody struct {

	/*
	   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	   to add to the commit comment.
	*/
	Content *string `json:"content"`
}

/*
ReactionsCreateForCommitCommentResponseBody201 is a response body for reactions/create-for-commit-comment

API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
type ReactionsCreateForCommitCommentResponseBody201 struct {
	Content   string `json:"content,omitempty"`
	CreatedAt string `json:"created_at,omitempty"`
	Id        int64  `json:"id,omitempty"`
	NodeId    string `json:"node_id,omitempty"`
	User      struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"user,omitempty"`
}
