// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
)

/*
LicensesGetReq builds requests for "licenses/get"

Get an individual license.

  GET /licenses/{license}

https://developer.github.com/v3/licenses/#get-an-individual-license
*/
type LicensesGetReq struct {
	License string
}

func (r *LicensesGetReq) urlPath() string {
	return fmt.Sprintf("/licenses/%v", r.License)
}

func (r *LicensesGetReq) method() string {
	return "GET"
}

func (r *LicensesGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *LicensesGetReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *LicensesGetReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *LicensesGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
LicensesGetResponseBody200 is a response body for licenses/get

API documentation: https://developer.github.com/v3/licenses/#get-an-individual-license
*/
type LicensesGetResponseBody200 struct {
	components.License
}

/*
LicensesGetForRepoReq builds requests for "licenses/get-for-repo"

Get the contents of a repository's license.

  GET /repos/{owner}/{repo}/license

https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license
*/
type LicensesGetForRepoReq struct {
	Owner string
	Repo  string
}

func (r *LicensesGetForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/license", r.Owner, r.Repo)
}

func (r *LicensesGetForRepoReq) method() string {
	return "GET"
}

func (r *LicensesGetForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *LicensesGetForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *LicensesGetForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *LicensesGetForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
LicensesGetForRepoResponseBody200 is a response body for licenses/get-for-repo

API documentation: https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license
*/
type LicensesGetForRepoResponseBody200 struct {
	components.LicenseContent
}

/*
LicensesListCommonlyUsedReq builds requests for "licenses/list-commonly-used"

List commonly used licenses.

  GET /licenses

https://developer.github.com/v3/licenses/#list-commonly-used-licenses
*/
type LicensesListCommonlyUsedReq struct{}

func (r *LicensesListCommonlyUsedReq) urlPath() string {
	return fmt.Sprintf("/licenses")
}

func (r *LicensesListCommonlyUsedReq) method() string {
	return "GET"
}

func (r *LicensesListCommonlyUsedReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *LicensesListCommonlyUsedReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *LicensesListCommonlyUsedReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *LicensesListCommonlyUsedReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
LicensesListCommonlyUsedResponseBody200 is a response body for licenses/list-commonly-used

API documentation: https://developer.github.com/v3/licenses/#list-commonly-used-licenses
*/
type LicensesListCommonlyUsedResponseBody200 []struct {
	components.LicenseSimple
}
