// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

/*
LicensesGetReq builds requests for "licenses/get"

Get an individual license.

  GET /licenses/{license}

https://developer.github.com/v3/licenses/#get-an-individual-license
*/
type LicensesGetReq struct {
	License string
}

func (r LicensesGetReq) urlPath() string {
	return fmt.Sprintf("/licenses/%v", r.License)
}

func (r LicensesGetReq) method() string {
	return "GET"
}

func (r LicensesGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r LicensesGetReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r LicensesGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
LicensesGetResponseBody200 is a response body for licenses/get

API documentation: https://developer.github.com/v3/licenses/#get-an-individual-license
*/
type LicensesGetResponseBody200 struct {
	Body           string   `json:"body,omitempty"`
	Conditions     []string `json:"conditions,omitempty"`
	Description    string   `json:"description,omitempty"`
	Featured       bool     `json:"featured,omitempty"`
	HtmlUrl        string   `json:"html_url,omitempty"`
	Implementation string   `json:"implementation,omitempty"`
	Key            string   `json:"key,omitempty"`
	Limitations    []string `json:"limitations,omitempty"`
	Name           string   `json:"name,omitempty"`
	NodeId         string   `json:"node_id,omitempty"`
	Permissions    []string `json:"permissions,omitempty"`
	SpdxId         string   `json:"spdx_id,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
LicensesGetForRepoReq builds requests for "licenses/get-for-repo"

Get the contents of a repository's license.

  GET /repos/{owner}/{repo}/license

https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license
*/
type LicensesGetForRepoReq struct {
	Owner string
	Repo  string
}

func (r LicensesGetForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/license", r.Owner, r.Repo)
}

func (r LicensesGetForRepoReq) method() string {
	return "GET"
}

func (r LicensesGetForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r LicensesGetForRepoReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r LicensesGetForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
LicensesGetForRepoResponseBody200 is a response body for licenses/get-for-repo

API documentation: https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license
*/
type LicensesGetForRepoResponseBody200 struct {
	Links struct {
		Git  string `json:"git,omitempty"`
		Html string `json:"html,omitempty"`
		Self string `json:"self,omitempty"`
	} `json:"_links,omitempty"`
	Content     string `json:"content,omitempty"`
	DownloadUrl string `json:"download_url,omitempty"`
	Encoding    string `json:"encoding,omitempty"`
	GitUrl      string `json:"git_url,omitempty"`
	HtmlUrl     string `json:"html_url,omitempty"`
	License     struct {
		Key    string `json:"key,omitempty"`
		Name   string `json:"name,omitempty"`
		NodeId string `json:"node_id,omitempty"`
		SpdxId string `json:"spdx_id,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"license,omitempty"`
	Name string      `json:"name,omitempty"`
	Path string      `json:"path,omitempty"`
	Sha  string      `json:"sha,omitempty"`
	Size json.Number `json:"size,omitempty"`
	Type string      `json:"type,omitempty"`
	Url  string      `json:"url,omitempty"`
}

/*
LicensesListCommonlyUsedReq builds requests for "licenses/list-commonly-used"

List commonly used licenses.

  GET /licenses

https://developer.github.com/v3/licenses/#list-commonly-used-licenses
*/
type LicensesListCommonlyUsedReq struct{}

func (r LicensesListCommonlyUsedReq) urlPath() string {
	return fmt.Sprintf("/licenses")
}

func (r LicensesListCommonlyUsedReq) method() string {
	return "GET"
}

func (r LicensesListCommonlyUsedReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r LicensesListCommonlyUsedReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r LicensesListCommonlyUsedReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
LicensesListCommonlyUsedResponseBody200 is a response body for licenses/list-commonly-used

API documentation: https://developer.github.com/v3/licenses/#list-commonly-used-licenses
*/
type LicensesListCommonlyUsedResponseBody200 []struct {
	Key    string `json:"key,omitempty"`
	Name   string `json:"name,omitempty"`
	NodeId string `json:"node_id,omitempty"`
	SpdxId string `json:"spdx_id,omitempty"`
	Url    string `json:"url,omitempty"`
}
