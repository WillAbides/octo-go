// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
OrgsBlockUser performs requests for "orgs/block-user"

Block a user from an organization.

  PUT /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization
*/
func OrgsBlockUser(ctx context.Context, req *OrgsBlockUserReq, opt ...RequestOption) (*OrgsBlockUserResponse, error) {
	if req == nil {
		req = new(OrgsBlockUserReq)
	}
	resp := &OrgsBlockUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsBlockUser performs requests for "orgs/block-user"

Block a user from an organization.

  PUT /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization
*/
func (c Client) OrgsBlockUser(ctx context.Context, req *OrgsBlockUserReq, opt ...RequestOption) (*OrgsBlockUserResponse, error) {
	return OrgsBlockUser(ctx, req, append(c, opt...)...)
}

/*
OrgsBlockUserReq is request data for Client.OrgsBlockUser

https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization
*/
type OrgsBlockUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsBlockUserReq) url() string {
	return r._url
}

func (r *OrgsBlockUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks/%v", r.Org, r.Username)
}

func (r *OrgsBlockUserReq) method() string {
	return "PUT"
}

func (r *OrgsBlockUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsBlockUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsBlockUserReq) body() interface{} {
	return nil
}

func (r *OrgsBlockUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsBlockUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsBlockUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsBlockUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsBlockUserReq) Rel(link RelName, resp *OrgsBlockUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsBlockUserResponse is a response for OrgsBlockUser

https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization
*/
type OrgsBlockUserResponse struct {
	response
	request *OrgsBlockUserReq
}

/*
OrgsCheckBlockedUser performs requests for "orgs/check-blocked-user"

Check if a user is blocked by an organization.

  GET /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization
*/
func OrgsCheckBlockedUser(ctx context.Context, req *OrgsCheckBlockedUserReq, opt ...RequestOption) (*OrgsCheckBlockedUserResponse, error) {
	if req == nil {
		req = new(OrgsCheckBlockedUserReq)
	}
	resp := &OrgsCheckBlockedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.setBoolResult(&resp.Data)
	if err != nil {
		return nil, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsCheckBlockedUser performs requests for "orgs/check-blocked-user"

Check if a user is blocked by an organization.

  GET /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization
*/
func (c Client) OrgsCheckBlockedUser(ctx context.Context, req *OrgsCheckBlockedUserReq, opt ...RequestOption) (*OrgsCheckBlockedUserResponse, error) {
	return OrgsCheckBlockedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsCheckBlockedUserReq is request data for Client.OrgsCheckBlockedUser

https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization
*/
type OrgsCheckBlockedUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsCheckBlockedUserReq) url() string {
	return r._url
}

func (r *OrgsCheckBlockedUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks/%v", r.Org, r.Username)
}

func (r *OrgsCheckBlockedUserReq) method() string {
	return "GET"
}

func (r *OrgsCheckBlockedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCheckBlockedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCheckBlockedUserReq) body() interface{} {
	return nil
}

func (r *OrgsCheckBlockedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsCheckBlockedUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsCheckBlockedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrBoolean}
}

// HTTPRequest builds an *http.Request
func (r *OrgsCheckBlockedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsCheckBlockedUserReq) Rel(link RelName, resp *OrgsCheckBlockedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsCheckBlockedUserResponse is a response for OrgsCheckBlockedUser

https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization
*/
type OrgsCheckBlockedUserResponse struct {
	response
	request *OrgsCheckBlockedUserReq
	Data    bool
}

/*
OrgsCheckMembershipForUser performs requests for "orgs/check-membership-for-user"

Check organization membership for a user.

  GET /orgs/{org}/members/{username}

https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user
*/
func OrgsCheckMembershipForUser(ctx context.Context, req *OrgsCheckMembershipForUserReq, opt ...RequestOption) (*OrgsCheckMembershipForUserResponse, error) {
	if req == nil {
		req = new(OrgsCheckMembershipForUserReq)
	}
	resp := &OrgsCheckMembershipForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsCheckMembershipForUser performs requests for "orgs/check-membership-for-user"

Check organization membership for a user.

  GET /orgs/{org}/members/{username}

https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user
*/
func (c Client) OrgsCheckMembershipForUser(ctx context.Context, req *OrgsCheckMembershipForUserReq, opt ...RequestOption) (*OrgsCheckMembershipForUserResponse, error) {
	return OrgsCheckMembershipForUser(ctx, req, append(c, opt...)...)
}

/*
OrgsCheckMembershipForUserReq is request data for Client.OrgsCheckMembershipForUser

https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user
*/
type OrgsCheckMembershipForUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsCheckMembershipForUserReq) url() string {
	return r._url
}

func (r *OrgsCheckMembershipForUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/members/%v", r.Org, r.Username)
}

func (r *OrgsCheckMembershipForUserReq) method() string {
	return "GET"
}

func (r *OrgsCheckMembershipForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCheckMembershipForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCheckMembershipForUserReq) body() interface{} {
	return nil
}

func (r *OrgsCheckMembershipForUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsCheckMembershipForUserReq) validStatuses() []int {
	return []int{204, 302}
}

func (r *OrgsCheckMembershipForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsCheckMembershipForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsCheckMembershipForUserReq) Rel(link RelName, resp *OrgsCheckMembershipForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsCheckMembershipForUserResponse is a response for OrgsCheckMembershipForUser

https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user
*/
type OrgsCheckMembershipForUserResponse struct {
	response
	request *OrgsCheckMembershipForUserReq
}

/*
OrgsCheckPublicMembershipForUser performs requests for "orgs/check-public-membership-for-user"

Check public organization membership for a user.

  GET /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user
*/
func OrgsCheckPublicMembershipForUser(ctx context.Context, req *OrgsCheckPublicMembershipForUserReq, opt ...RequestOption) (*OrgsCheckPublicMembershipForUserResponse, error) {
	if req == nil {
		req = new(OrgsCheckPublicMembershipForUserReq)
	}
	resp := &OrgsCheckPublicMembershipForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.setBoolResult(&resp.Data)
	if err != nil {
		return nil, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsCheckPublicMembershipForUser performs requests for "orgs/check-public-membership-for-user"

Check public organization membership for a user.

  GET /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user
*/
func (c Client) OrgsCheckPublicMembershipForUser(ctx context.Context, req *OrgsCheckPublicMembershipForUserReq, opt ...RequestOption) (*OrgsCheckPublicMembershipForUserResponse, error) {
	return OrgsCheckPublicMembershipForUser(ctx, req, append(c, opt...)...)
}

/*
OrgsCheckPublicMembershipForUserReq is request data for Client.OrgsCheckPublicMembershipForUser

https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user
*/
type OrgsCheckPublicMembershipForUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsCheckPublicMembershipForUserReq) url() string {
	return r._url
}

func (r *OrgsCheckPublicMembershipForUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members/%v", r.Org, r.Username)
}

func (r *OrgsCheckPublicMembershipForUserReq) method() string {
	return "GET"
}

func (r *OrgsCheckPublicMembershipForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCheckPublicMembershipForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCheckPublicMembershipForUserReq) body() interface{} {
	return nil
}

func (r *OrgsCheckPublicMembershipForUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsCheckPublicMembershipForUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsCheckPublicMembershipForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrBoolean}
}

// HTTPRequest builds an *http.Request
func (r *OrgsCheckPublicMembershipForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsCheckPublicMembershipForUserReq) Rel(link RelName, resp *OrgsCheckPublicMembershipForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsCheckPublicMembershipForUserResponse is a response for OrgsCheckPublicMembershipForUser

https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user
*/
type OrgsCheckPublicMembershipForUserResponse struct {
	response
	request *OrgsCheckPublicMembershipForUserReq
	Data    bool
}

/*
OrgsConvertMemberToOutsideCollaborator performs requests for "orgs/convert-member-to-outside-collaborator"

Convert an organization member to outside collaborator.

  PUT /orgs/{org}/outside_collaborators/{username}

https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator
*/
func OrgsConvertMemberToOutsideCollaborator(ctx context.Context, req *OrgsConvertMemberToOutsideCollaboratorReq, opt ...RequestOption) (*OrgsConvertMemberToOutsideCollaboratorResponse, error) {
	if req == nil {
		req = new(OrgsConvertMemberToOutsideCollaboratorReq)
	}
	resp := &OrgsConvertMemberToOutsideCollaboratorResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsConvertMemberToOutsideCollaborator performs requests for "orgs/convert-member-to-outside-collaborator"

Convert an organization member to outside collaborator.

  PUT /orgs/{org}/outside_collaborators/{username}

https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator
*/
func (c Client) OrgsConvertMemberToOutsideCollaborator(ctx context.Context, req *OrgsConvertMemberToOutsideCollaboratorReq, opt ...RequestOption) (*OrgsConvertMemberToOutsideCollaboratorResponse, error) {
	return OrgsConvertMemberToOutsideCollaborator(ctx, req, append(c, opt...)...)
}

/*
OrgsConvertMemberToOutsideCollaboratorReq is request data for Client.OrgsConvertMemberToOutsideCollaborator

https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator
*/
type OrgsConvertMemberToOutsideCollaboratorReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) url() string {
	return r._url
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/outside_collaborators/%v", r.Org, r.Username)
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) method() string {
	return "PUT"
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) body() interface{} {
	return nil
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsConvertMemberToOutsideCollaboratorReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsConvertMemberToOutsideCollaboratorReq) Rel(link RelName, resp *OrgsConvertMemberToOutsideCollaboratorResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsConvertMemberToOutsideCollaboratorResponse is a response for OrgsConvertMemberToOutsideCollaborator

https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator
*/
type OrgsConvertMemberToOutsideCollaboratorResponse struct {
	response
	request *OrgsConvertMemberToOutsideCollaboratorReq
}

/*
OrgsCreateInvitation performs requests for "orgs/create-invitation"

Create an organization invitation.

  POST /orgs/{org}/invitations

https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
*/
func OrgsCreateInvitation(ctx context.Context, req *OrgsCreateInvitationReq, opt ...RequestOption) (*OrgsCreateInvitationResponse, error) {
	if req == nil {
		req = new(OrgsCreateInvitationReq)
	}
	resp := &OrgsCreateInvitationResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsCreateInvitationResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsCreateInvitation performs requests for "orgs/create-invitation"

Create an organization invitation.

  POST /orgs/{org}/invitations

https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
*/
func (c Client) OrgsCreateInvitation(ctx context.Context, req *OrgsCreateInvitationReq, opt ...RequestOption) (*OrgsCreateInvitationResponse, error) {
	return OrgsCreateInvitation(ctx, req, append(c, opt...)...)
}

/*
OrgsCreateInvitationReq is request data for Client.OrgsCreateInvitation

https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
*/
type OrgsCreateInvitationReq struct {
	_url        string
	Org         string
	RequestBody OrgsCreateInvitationReqBody
}

func (r *OrgsCreateInvitationReq) url() string {
	return r._url
}

func (r *OrgsCreateInvitationReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/invitations", r.Org)
}

func (r *OrgsCreateInvitationReq) method() string {
	return "POST"
}

func (r *OrgsCreateInvitationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCreateInvitationReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCreateInvitationReq) body() interface{} {
	return r.RequestBody
}

func (r *OrgsCreateInvitationReq) dataStatuses() []int {
	return []int{201}
}

func (r *OrgsCreateInvitationReq) validStatuses() []int {
	return []int{201}
}

func (r *OrgsCreateInvitationReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *OrgsCreateInvitationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsCreateInvitationReq) Rel(link RelName, resp *OrgsCreateInvitationResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsCreateInvitationReqBody is a request body for orgs/create-invitation

https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
*/
type OrgsCreateInvitationReqBody struct {

	/*
	   **Required unless you provide `invitee_id`**. Email address of the person you
	   are inviting, which can be an existing GitHub user.
	*/
	Email *string `json:"email,omitempty"`

	/*
	   **Required unless you provide `email`**. GitHub user ID for the person you are
	   inviting.
	*/
	InviteeId *int64 `json:"invitee_id,omitempty"`

	/*
	   Specify role for new member. Can be one of:
	   \* `admin` - Organization owners with full administrative rights to the
	   organization and complete access to all repositories and teams.
	   \* `direct_member` - Non-owner organization members with ability to see other
	   members and join teams by invitation.
	   \* `billing_manager` - Non-owner organization members with ability to manage the
	   billing settings of your organization.
	*/
	Role *string `json:"role,omitempty"`

	// Specify IDs for the teams you want to invite new members to.
	TeamIds []int64 `json:"team_ids,omitempty"`
}

/*
OrgsCreateInvitationResponseBody is a response body for OrgsCreateInvitation

https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
*/
type OrgsCreateInvitationResponseBody components.OrganizationInvitation

/*
OrgsCreateInvitationResponse is a response for OrgsCreateInvitation

https://developer.github.com/v3/orgs/members/#create-an-organization-invitation
*/
type OrgsCreateInvitationResponse struct {
	response
	request *OrgsCreateInvitationReq
	Data    OrgsCreateInvitationResponseBody
}

/*
OrgsCreateWebhook performs requests for "orgs/create-webhook"

Create an organization webhook.

  POST /orgs/{org}/hooks

https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
*/
func OrgsCreateWebhook(ctx context.Context, req *OrgsCreateWebhookReq, opt ...RequestOption) (*OrgsCreateWebhookResponse, error) {
	if req == nil {
		req = new(OrgsCreateWebhookReq)
	}
	resp := &OrgsCreateWebhookResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsCreateWebhookResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsCreateWebhook performs requests for "orgs/create-webhook"

Create an organization webhook.

  POST /orgs/{org}/hooks

https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
*/
func (c Client) OrgsCreateWebhook(ctx context.Context, req *OrgsCreateWebhookReq, opt ...RequestOption) (*OrgsCreateWebhookResponse, error) {
	return OrgsCreateWebhook(ctx, req, append(c, opt...)...)
}

/*
OrgsCreateWebhookReq is request data for Client.OrgsCreateWebhook

https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
*/
type OrgsCreateWebhookReq struct {
	_url        string
	Org         string
	RequestBody OrgsCreateWebhookReqBody
}

func (r *OrgsCreateWebhookReq) url() string {
	return r._url
}

func (r *OrgsCreateWebhookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks", r.Org)
}

func (r *OrgsCreateWebhookReq) method() string {
	return "POST"
}

func (r *OrgsCreateWebhookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCreateWebhookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCreateWebhookReq) body() interface{} {
	return r.RequestBody
}

func (r *OrgsCreateWebhookReq) dataStatuses() []int {
	return []int{201}
}

func (r *OrgsCreateWebhookReq) validStatuses() []int {
	return []int{201}
}

func (r *OrgsCreateWebhookReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *OrgsCreateWebhookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsCreateWebhookReq) Rel(link RelName, resp *OrgsCreateWebhookResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

// OrgsCreateWebhookReqBodyConfig is a value for OrgsCreateWebhookReqBody's Config field
type OrgsCreateWebhookReqBodyConfig struct {

	/*
	   The media type used to serialize the payloads. Supported values include `json`
	   and `form`. The default is `form`.
	*/
	ContentType *string `json:"content_type,omitempty"`

	/*
	   Determines whether the SSL certificate of the host for `url` will be verified
	   when delivering payloads. Supported values include `0` (verification is
	   performed) and `1` (verification is not performed). The default is `0`. **We
	   strongly recommend not setting this to `1` as you are subject to
	   man-in-the-middle and other attacks.**
	*/
	InsecureSsl *string `json:"insecure_ssl,omitempty"`

	/*
	   If provided, the `secret` will be used as the `key` to generate the HMAC hex
	   digest value in the
	   [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers)
	   header.
	*/
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *string `json:"url"`
}

/*
OrgsCreateWebhookReqBody is a request body for orgs/create-webhook

https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
*/
type OrgsCreateWebhookReqBody struct {

	/*
	   Determines if notifications are sent when the webhook is triggered. Set to
	   `true` to send notifications.
	*/
	Active *bool `json:"active,omitempty"`

	/*
	   Key/value pairs to provide settings for this webhook. [These are defined
	   below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).
	*/
	Config *OrgsCreateWebhookReqBodyConfig `json:"config"`

	/*
	   Determines what [events](https://developer.github.com/webhooks/event-payloads)
	   the hook is triggered for.
	*/
	Events []string `json:"events,omitempty"`

	// Must be passed as "web".
	Name *string `json:"name"`
}

/*
OrgsCreateWebhookResponseBody is a response body for OrgsCreateWebhook

https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
*/
type OrgsCreateWebhookResponseBody components.OrgHook

/*
OrgsCreateWebhookResponse is a response for OrgsCreateWebhook

https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook
*/
type OrgsCreateWebhookResponse struct {
	response
	request *OrgsCreateWebhookReq
	Data    OrgsCreateWebhookResponseBody
}

/*
OrgsDeleteWebhook performs requests for "orgs/delete-webhook"

Delete an organization webhook.

  DELETE /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook
*/
func OrgsDeleteWebhook(ctx context.Context, req *OrgsDeleteWebhookReq, opt ...RequestOption) (*OrgsDeleteWebhookResponse, error) {
	if req == nil {
		req = new(OrgsDeleteWebhookReq)
	}
	resp := &OrgsDeleteWebhookResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsDeleteWebhook performs requests for "orgs/delete-webhook"

Delete an organization webhook.

  DELETE /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook
*/
func (c Client) OrgsDeleteWebhook(ctx context.Context, req *OrgsDeleteWebhookReq, opt ...RequestOption) (*OrgsDeleteWebhookResponse, error) {
	return OrgsDeleteWebhook(ctx, req, append(c, opt...)...)
}

/*
OrgsDeleteWebhookReq is request data for Client.OrgsDeleteWebhook

https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook
*/
type OrgsDeleteWebhookReq struct {
	_url   string
	Org    string
	HookId int64
}

func (r *OrgsDeleteWebhookReq) url() string {
	return r._url
}

func (r *OrgsDeleteWebhookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v", r.Org, r.HookId)
}

func (r *OrgsDeleteWebhookReq) method() string {
	return "DELETE"
}

func (r *OrgsDeleteWebhookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsDeleteWebhookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsDeleteWebhookReq) body() interface{} {
	return nil
}

func (r *OrgsDeleteWebhookReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsDeleteWebhookReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsDeleteWebhookReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsDeleteWebhookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsDeleteWebhookReq) Rel(link RelName, resp *OrgsDeleteWebhookResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsDeleteWebhookResponse is a response for OrgsDeleteWebhook

https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook
*/
type OrgsDeleteWebhookResponse struct {
	response
	request *OrgsDeleteWebhookReq
}

/*
OrgsGet performs requests for "orgs/get"

Get an organization.

  GET /orgs/{org}

https://developer.github.com/v3/orgs/#get-an-organization
*/
func OrgsGet(ctx context.Context, req *OrgsGetReq, opt ...RequestOption) (*OrgsGetResponse, error) {
	if req == nil {
		req = new(OrgsGetReq)
	}
	resp := &OrgsGetResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsGetResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsGet performs requests for "orgs/get"

Get an organization.

  GET /orgs/{org}

https://developer.github.com/v3/orgs/#get-an-organization
*/
func (c Client) OrgsGet(ctx context.Context, req *OrgsGetReq, opt ...RequestOption) (*OrgsGetResponse, error) {
	return OrgsGet(ctx, req, append(c, opt...)...)
}

/*
OrgsGetReq is request data for Client.OrgsGet

https://developer.github.com/v3/orgs/#get-an-organization
*/
type OrgsGetReq struct {
	_url string
	Org  string

	/*
	New repository creation permissions are available to preview. You can now use
	`members_can_create_public_repositories`,
	`members_can_create_private_repositories`, and
	`members_can_create_internal_repositories`. You can only allow members to create
	internal repositories if your organization is associated with an enterprise
	account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These
	parameters provide more granular permissions to configure the type of
	repositories organization members can create.

	To access these new parameters during the preview period, you must set this to
	true.
	*/
	SurturPreview bool
}

func (r *OrgsGetReq) url() string {
	return r._url
}

func (r *OrgsGetReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v", r.Org)
}

func (r *OrgsGetReq) method() string {
	return "GET"
}

func (r *OrgsGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"surtur": r.SurturPreview}
	if allPreviews {
		previewVals["surtur"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetReq) body() interface{} {
	return nil
}

func (r *OrgsGetReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsGetReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsGetReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsGetReq) Rel(link RelName, resp *OrgsGetResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsGetResponseBody is a response body for OrgsGet

https://developer.github.com/v3/orgs/#get-an-organization
*/
type OrgsGetResponseBody components.OrganizationFull

/*
OrgsGetResponse is a response for OrgsGet

https://developer.github.com/v3/orgs/#get-an-organization
*/
type OrgsGetResponse struct {
	response
	request *OrgsGetReq
	Data    OrgsGetResponseBody
}

/*
OrgsGetMembershipForAuthenticatedUser performs requests for "orgs/get-membership-for-authenticated-user"

Get an organization membership for the authenticated user.

  GET /user/memberships/orgs/{org}

https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user
*/
func OrgsGetMembershipForAuthenticatedUser(ctx context.Context, req *OrgsGetMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsGetMembershipForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(OrgsGetMembershipForAuthenticatedUserReq)
	}
	resp := &OrgsGetMembershipForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsGetMembershipForAuthenticatedUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsGetMembershipForAuthenticatedUser performs requests for "orgs/get-membership-for-authenticated-user"

Get an organization membership for the authenticated user.

  GET /user/memberships/orgs/{org}

https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user
*/
func (c Client) OrgsGetMembershipForAuthenticatedUser(ctx context.Context, req *OrgsGetMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsGetMembershipForAuthenticatedUserResponse, error) {
	return OrgsGetMembershipForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsGetMembershipForAuthenticatedUserReq is request data for Client.OrgsGetMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user
*/
type OrgsGetMembershipForAuthenticatedUserReq struct {
	_url string
	Org  string
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/memberships/orgs/%v", r.Org)
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsGetMembershipForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsGetMembershipForAuthenticatedUserReq) Rel(link RelName, resp *OrgsGetMembershipForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsGetMembershipForAuthenticatedUserResponseBody is a response body for OrgsGetMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user
*/
type OrgsGetMembershipForAuthenticatedUserResponseBody components.OrgMembership

/*
OrgsGetMembershipForAuthenticatedUserResponse is a response for OrgsGetMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user
*/
type OrgsGetMembershipForAuthenticatedUserResponse struct {
	response
	request *OrgsGetMembershipForAuthenticatedUserReq
	Data    OrgsGetMembershipForAuthenticatedUserResponseBody
}

/*
OrgsGetMembershipForUser performs requests for "orgs/get-membership-for-user"

Get organization membership for a user.

  GET /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user
*/
func OrgsGetMembershipForUser(ctx context.Context, req *OrgsGetMembershipForUserReq, opt ...RequestOption) (*OrgsGetMembershipForUserResponse, error) {
	if req == nil {
		req = new(OrgsGetMembershipForUserReq)
	}
	resp := &OrgsGetMembershipForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsGetMembershipForUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsGetMembershipForUser performs requests for "orgs/get-membership-for-user"

Get organization membership for a user.

  GET /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user
*/
func (c Client) OrgsGetMembershipForUser(ctx context.Context, req *OrgsGetMembershipForUserReq, opt ...RequestOption) (*OrgsGetMembershipForUserResponse, error) {
	return OrgsGetMembershipForUser(ctx, req, append(c, opt...)...)
}

/*
OrgsGetMembershipForUserReq is request data for Client.OrgsGetMembershipForUser

https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user
*/
type OrgsGetMembershipForUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsGetMembershipForUserReq) url() string {
	return r._url
}

func (r *OrgsGetMembershipForUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/memberships/%v", r.Org, r.Username)
}

func (r *OrgsGetMembershipForUserReq) method() string {
	return "GET"
}

func (r *OrgsGetMembershipForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetMembershipForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetMembershipForUserReq) body() interface{} {
	return nil
}

func (r *OrgsGetMembershipForUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsGetMembershipForUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsGetMembershipForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsGetMembershipForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsGetMembershipForUserReq) Rel(link RelName, resp *OrgsGetMembershipForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsGetMembershipForUserResponseBody is a response body for OrgsGetMembershipForUser

https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user
*/
type OrgsGetMembershipForUserResponseBody components.OrgMembership

/*
OrgsGetMembershipForUserResponse is a response for OrgsGetMembershipForUser

https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user
*/
type OrgsGetMembershipForUserResponse struct {
	response
	request *OrgsGetMembershipForUserReq
	Data    OrgsGetMembershipForUserResponseBody
}

/*
OrgsGetWebhook performs requests for "orgs/get-webhook"

Get an organization webhook.

  GET /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook
*/
func OrgsGetWebhook(ctx context.Context, req *OrgsGetWebhookReq, opt ...RequestOption) (*OrgsGetWebhookResponse, error) {
	if req == nil {
		req = new(OrgsGetWebhookReq)
	}
	resp := &OrgsGetWebhookResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsGetWebhookResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsGetWebhook performs requests for "orgs/get-webhook"

Get an organization webhook.

  GET /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook
*/
func (c Client) OrgsGetWebhook(ctx context.Context, req *OrgsGetWebhookReq, opt ...RequestOption) (*OrgsGetWebhookResponse, error) {
	return OrgsGetWebhook(ctx, req, append(c, opt...)...)
}

/*
OrgsGetWebhookReq is request data for Client.OrgsGetWebhook

https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook
*/
type OrgsGetWebhookReq struct {
	_url   string
	Org    string
	HookId int64
}

func (r *OrgsGetWebhookReq) url() string {
	return r._url
}

func (r *OrgsGetWebhookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v", r.Org, r.HookId)
}

func (r *OrgsGetWebhookReq) method() string {
	return "GET"
}

func (r *OrgsGetWebhookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetWebhookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetWebhookReq) body() interface{} {
	return nil
}

func (r *OrgsGetWebhookReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsGetWebhookReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsGetWebhookReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsGetWebhookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsGetWebhookReq) Rel(link RelName, resp *OrgsGetWebhookResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsGetWebhookResponseBody is a response body for OrgsGetWebhook

https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook
*/
type OrgsGetWebhookResponseBody components.OrgHook

/*
OrgsGetWebhookResponse is a response for OrgsGetWebhook

https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook
*/
type OrgsGetWebhookResponse struct {
	response
	request *OrgsGetWebhookReq
	Data    OrgsGetWebhookResponseBody
}

/*
OrgsList performs requests for "orgs/list"

List organizations.

  GET /organizations

https://developer.github.com/v3/orgs/#list-organizations
*/
func OrgsList(ctx context.Context, req *OrgsListReq, opt ...RequestOption) (*OrgsListResponse, error) {
	if req == nil {
		req = new(OrgsListReq)
	}
	resp := &OrgsListResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsList performs requests for "orgs/list"

List organizations.

  GET /organizations

https://developer.github.com/v3/orgs/#list-organizations
*/
func (c Client) OrgsList(ctx context.Context, req *OrgsListReq, opt ...RequestOption) (*OrgsListResponse, error) {
	return OrgsList(ctx, req, append(c, opt...)...)
}

/*
OrgsListReq is request data for Client.OrgsList

https://developer.github.com/v3/orgs/#list-organizations
*/
type OrgsListReq struct {
	_url string

	// The integer ID of the last organization that you've seen.
	Since *int64
}

func (r *OrgsListReq) url() string {
	return r._url
}

func (r *OrgsListReq) urlPath() string {
	return fmt.Sprintf("/organizations")
}

func (r *OrgsListReq) method() string {
	return "GET"
}

func (r *OrgsListReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", strconv.FormatInt(*r.Since, 10))
	}
	return query
}

func (r *OrgsListReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListReq) body() interface{} {
	return nil
}

func (r *OrgsListReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListReq) Rel(link RelName, resp *OrgsListResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListResponseBody is a response body for OrgsList

https://developer.github.com/v3/orgs/#list-organizations
*/
type OrgsListResponseBody []components.OrganizationSimple

/*
OrgsListResponse is a response for OrgsList

https://developer.github.com/v3/orgs/#list-organizations
*/
type OrgsListResponse struct {
	response
	request *OrgsListReq
	Data    OrgsListResponseBody
}

/*
OrgsListAppInstallations performs requests for "orgs/list-app-installations"

List app installations for an organization.

  GET /orgs/{org}/installations

https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization
*/
func OrgsListAppInstallations(ctx context.Context, req *OrgsListAppInstallationsReq, opt ...RequestOption) (*OrgsListAppInstallationsResponse, error) {
	if req == nil {
		req = new(OrgsListAppInstallationsReq)
	}
	resp := &OrgsListAppInstallationsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListAppInstallationsResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListAppInstallations performs requests for "orgs/list-app-installations"

List app installations for an organization.

  GET /orgs/{org}/installations

https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization
*/
func (c Client) OrgsListAppInstallations(ctx context.Context, req *OrgsListAppInstallationsReq, opt ...RequestOption) (*OrgsListAppInstallationsResponse, error) {
	return OrgsListAppInstallations(ctx, req, append(c, opt...)...)
}

/*
OrgsListAppInstallationsReq is request data for Client.OrgsListAppInstallations

https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization
*/
type OrgsListAppInstallationsReq struct {
	_url string
	Org  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	To access the API with your GitHub App, you must set this to true for your
	requests.
	*/
	MachineManPreview bool
}

func (r *OrgsListAppInstallationsReq) url() string {
	return r._url
}

func (r *OrgsListAppInstallationsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/installations", r.Org)
}

func (r *OrgsListAppInstallationsReq) method() string {
	return "GET"
}

func (r *OrgsListAppInstallationsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListAppInstallationsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"machine-man": r.MachineManPreview}
	if requiredPreviews {
		previewVals["machine-man"] = true
	}
	if allPreviews {
		previewVals["machine-man"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListAppInstallationsReq) body() interface{} {
	return nil
}

func (r *OrgsListAppInstallationsReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListAppInstallationsReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListAppInstallationsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListAppInstallationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListAppInstallationsReq) Rel(link RelName, resp *OrgsListAppInstallationsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListAppInstallationsResponseBody is a response body for OrgsListAppInstallations

https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization
*/
type OrgsListAppInstallationsResponseBody struct {
	Installations []components.Installation2 `json:"installations,omitempty"`
	TotalCount    int64                      `json:"total_count,omitempty"`
}

/*
OrgsListAppInstallationsResponse is a response for OrgsListAppInstallations

https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization
*/
type OrgsListAppInstallationsResponse struct {
	response
	request *OrgsListAppInstallationsReq
	Data    OrgsListAppInstallationsResponseBody
}

/*
OrgsListBlockedUsers performs requests for "orgs/list-blocked-users"

List users blocked by an organization.

  GET /orgs/{org}/blocks

https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization
*/
func OrgsListBlockedUsers(ctx context.Context, req *OrgsListBlockedUsersReq, opt ...RequestOption) (*OrgsListBlockedUsersResponse, error) {
	if req == nil {
		req = new(OrgsListBlockedUsersReq)
	}
	resp := &OrgsListBlockedUsersResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListBlockedUsersResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListBlockedUsers performs requests for "orgs/list-blocked-users"

List users blocked by an organization.

  GET /orgs/{org}/blocks

https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization
*/
func (c Client) OrgsListBlockedUsers(ctx context.Context, req *OrgsListBlockedUsersReq, opt ...RequestOption) (*OrgsListBlockedUsersResponse, error) {
	return OrgsListBlockedUsers(ctx, req, append(c, opt...)...)
}

/*
OrgsListBlockedUsersReq is request data for Client.OrgsListBlockedUsers

https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization
*/
type OrgsListBlockedUsersReq struct {
	_url string
	Org  string
}

func (r *OrgsListBlockedUsersReq) url() string {
	return r._url
}

func (r *OrgsListBlockedUsersReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks", r.Org)
}

func (r *OrgsListBlockedUsersReq) method() string {
	return "GET"
}

func (r *OrgsListBlockedUsersReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsListBlockedUsersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListBlockedUsersReq) body() interface{} {
	return nil
}

func (r *OrgsListBlockedUsersReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListBlockedUsersReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListBlockedUsersReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListBlockedUsersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListBlockedUsersReq) Rel(link RelName, resp *OrgsListBlockedUsersResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListBlockedUsersResponseBody is a response body for OrgsListBlockedUsers

https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization
*/
type OrgsListBlockedUsersResponseBody []components.SimpleUser

/*
OrgsListBlockedUsersResponse is a response for OrgsListBlockedUsers

https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization
*/
type OrgsListBlockedUsersResponse struct {
	response
	request *OrgsListBlockedUsersReq
	Data    OrgsListBlockedUsersResponseBody
}

/*
OrgsListForAuthenticatedUser performs requests for "orgs/list-for-authenticated-user"

List organizations for the authenticated user.

  GET /user/orgs

https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user
*/
func OrgsListForAuthenticatedUser(ctx context.Context, req *OrgsListForAuthenticatedUserReq, opt ...RequestOption) (*OrgsListForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(OrgsListForAuthenticatedUserReq)
	}
	resp := &OrgsListForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListForAuthenticatedUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListForAuthenticatedUser performs requests for "orgs/list-for-authenticated-user"

List organizations for the authenticated user.

  GET /user/orgs

https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user
*/
func (c Client) OrgsListForAuthenticatedUser(ctx context.Context, req *OrgsListForAuthenticatedUserReq, opt ...RequestOption) (*OrgsListForAuthenticatedUserResponse, error) {
	return OrgsListForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsListForAuthenticatedUserReq is request data for Client.OrgsListForAuthenticatedUser

https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user
*/
type OrgsListForAuthenticatedUserReq struct {
	_url string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *OrgsListForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/orgs")
}

func (r *OrgsListForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *OrgsListForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *OrgsListForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListForAuthenticatedUserReq) Rel(link RelName, resp *OrgsListForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListForAuthenticatedUserResponseBody is a response body for OrgsListForAuthenticatedUser

https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user
*/
type OrgsListForAuthenticatedUserResponseBody []components.OrganizationSimple

/*
OrgsListForAuthenticatedUserResponse is a response for OrgsListForAuthenticatedUser

https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user
*/
type OrgsListForAuthenticatedUserResponse struct {
	response
	request *OrgsListForAuthenticatedUserReq
	Data    OrgsListForAuthenticatedUserResponseBody
}

/*
OrgsListForUser performs requests for "orgs/list-for-user"

List organizations for a user.

  GET /users/{username}/orgs

https://developer.github.com/v3/orgs/#list-organizations-for-a-user
*/
func OrgsListForUser(ctx context.Context, req *OrgsListForUserReq, opt ...RequestOption) (*OrgsListForUserResponse, error) {
	if req == nil {
		req = new(OrgsListForUserReq)
	}
	resp := &OrgsListForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListForUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListForUser performs requests for "orgs/list-for-user"

List organizations for a user.

  GET /users/{username}/orgs

https://developer.github.com/v3/orgs/#list-organizations-for-a-user
*/
func (c Client) OrgsListForUser(ctx context.Context, req *OrgsListForUserReq, opt ...RequestOption) (*OrgsListForUserResponse, error) {
	return OrgsListForUser(ctx, req, append(c, opt...)...)
}

/*
OrgsListForUserReq is request data for Client.OrgsListForUser

https://developer.github.com/v3/orgs/#list-organizations-for-a-user
*/
type OrgsListForUserReq struct {
	_url     string
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListForUserReq) url() string {
	return r._url
}

func (r *OrgsListForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/orgs", r.Username)
}

func (r *OrgsListForUserReq) method() string {
	return "GET"
}

func (r *OrgsListForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListForUserReq) body() interface{} {
	return nil
}

func (r *OrgsListForUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListForUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListForUserReq) Rel(link RelName, resp *OrgsListForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListForUserResponseBody is a response body for OrgsListForUser

https://developer.github.com/v3/orgs/#list-organizations-for-a-user
*/
type OrgsListForUserResponseBody []components.OrganizationSimple

/*
OrgsListForUserResponse is a response for OrgsListForUser

https://developer.github.com/v3/orgs/#list-organizations-for-a-user
*/
type OrgsListForUserResponse struct {
	response
	request *OrgsListForUserReq
	Data    OrgsListForUserResponseBody
}

/*
OrgsListInvitationTeams performs requests for "orgs/list-invitation-teams"

List organization invitation teams.

  GET /orgs/{org}/invitations/{invitation_id}/teams

https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
func OrgsListInvitationTeams(ctx context.Context, req *OrgsListInvitationTeamsReq, opt ...RequestOption) (*OrgsListInvitationTeamsResponse, error) {
	if req == nil {
		req = new(OrgsListInvitationTeamsReq)
	}
	resp := &OrgsListInvitationTeamsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListInvitationTeamsResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListInvitationTeams performs requests for "orgs/list-invitation-teams"

List organization invitation teams.

  GET /orgs/{org}/invitations/{invitation_id}/teams

https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
func (c Client) OrgsListInvitationTeams(ctx context.Context, req *OrgsListInvitationTeamsReq, opt ...RequestOption) (*OrgsListInvitationTeamsResponse, error) {
	return OrgsListInvitationTeams(ctx, req, append(c, opt...)...)
}

/*
OrgsListInvitationTeamsReq is request data for Client.OrgsListInvitationTeams

https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
type OrgsListInvitationTeamsReq struct {
	_url         string
	Org          string
	InvitationId int64

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListInvitationTeamsReq) url() string {
	return r._url
}

func (r *OrgsListInvitationTeamsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/invitations/%v/teams", r.Org, r.InvitationId)
}

func (r *OrgsListInvitationTeamsReq) method() string {
	return "GET"
}

func (r *OrgsListInvitationTeamsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListInvitationTeamsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListInvitationTeamsReq) body() interface{} {
	return nil
}

func (r *OrgsListInvitationTeamsReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListInvitationTeamsReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListInvitationTeamsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListInvitationTeamsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListInvitationTeamsReq) Rel(link RelName, resp *OrgsListInvitationTeamsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListInvitationTeamsResponseBody is a response body for OrgsListInvitationTeams

https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
type OrgsListInvitationTeamsResponseBody []components.Team

/*
OrgsListInvitationTeamsResponse is a response for OrgsListInvitationTeams

https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
type OrgsListInvitationTeamsResponse struct {
	response
	request *OrgsListInvitationTeamsReq
	Data    OrgsListInvitationTeamsResponseBody
}

/*
OrgsListMembers performs requests for "orgs/list-members"

List organization members.

  GET /orgs/{org}/members

https://developer.github.com/v3/orgs/members/#list-organization-members
*/
func OrgsListMembers(ctx context.Context, req *OrgsListMembersReq, opt ...RequestOption) (*OrgsListMembersResponse, error) {
	if req == nil {
		req = new(OrgsListMembersReq)
	}
	resp := &OrgsListMembersResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListMembersResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListMembers performs requests for "orgs/list-members"

List organization members.

  GET /orgs/{org}/members

https://developer.github.com/v3/orgs/members/#list-organization-members
*/
func (c Client) OrgsListMembers(ctx context.Context, req *OrgsListMembersReq, opt ...RequestOption) (*OrgsListMembersResponse, error) {
	return OrgsListMembers(ctx, req, append(c, opt...)...)
}

/*
OrgsListMembersReq is request data for Client.OrgsListMembers

https://developer.github.com/v3/orgs/members/#list-organization-members
*/
type OrgsListMembersReq struct {
	_url string
	Org  string

	/*
	Filter members returned in the list. Can be one of:
	\* `2fa_disabled` - Members without [two-factor
	authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
	Available for organization owners.
	\* `all` - All members the authenticated user can see.
	*/
	Filter *string

	/*
	Filter members returned by their role. Can be one of:
	\* `all` - All members of the organization, regardless of role.
	\* `admin` - Organization owners.
	\* `member` - Non-owner organization members.
	*/
	Role *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListMembersReq) url() string {
	return r._url
}

func (r *OrgsListMembersReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/members", r.Org)
}

func (r *OrgsListMembersReq) method() string {
	return "GET"
}

func (r *OrgsListMembersReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.Role != nil {
		query.Set("role", *r.Role)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListMembersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListMembersReq) body() interface{} {
	return nil
}

func (r *OrgsListMembersReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListMembersReq) validStatuses() []int {
	return []int{200, 302}
}

func (r *OrgsListMembersReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListMembersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListMembersReq) Rel(link RelName, resp *OrgsListMembersResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListMembersResponseBody is a response body for OrgsListMembers

https://developer.github.com/v3/orgs/members/#list-organization-members
*/
type OrgsListMembersResponseBody []components.SimpleUser

/*
OrgsListMembersResponse is a response for OrgsListMembers

https://developer.github.com/v3/orgs/members/#list-organization-members
*/
type OrgsListMembersResponse struct {
	response
	request *OrgsListMembersReq
	Data    OrgsListMembersResponseBody
}

/*
OrgsListMembershipsForAuthenticatedUser performs requests for "orgs/list-memberships-for-authenticated-user"

List organization memberships for the authenticated user.

  GET /user/memberships/orgs

https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user
*/
func OrgsListMembershipsForAuthenticatedUser(ctx context.Context, req *OrgsListMembershipsForAuthenticatedUserReq, opt ...RequestOption) (*OrgsListMembershipsForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(OrgsListMembershipsForAuthenticatedUserReq)
	}
	resp := &OrgsListMembershipsForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListMembershipsForAuthenticatedUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListMembershipsForAuthenticatedUser performs requests for "orgs/list-memberships-for-authenticated-user"

List organization memberships for the authenticated user.

  GET /user/memberships/orgs

https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user
*/
func (c Client) OrgsListMembershipsForAuthenticatedUser(ctx context.Context, req *OrgsListMembershipsForAuthenticatedUserReq, opt ...RequestOption) (*OrgsListMembershipsForAuthenticatedUserResponse, error) {
	return OrgsListMembershipsForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsListMembershipsForAuthenticatedUserReq is request data for Client.OrgsListMembershipsForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user
*/
type OrgsListMembershipsForAuthenticatedUserReq struct {
	_url string

	/*
	Indicates the state of the memberships to return. Can be either `active` or
	`pending`. If not specified, the API returns both active and pending
	memberships.
	*/
	State *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/memberships/orgs")
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.State != nil {
		query.Set("state", *r.State)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListMembershipsForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListMembershipsForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListMembershipsForAuthenticatedUserReq) Rel(link RelName, resp *OrgsListMembershipsForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListMembershipsForAuthenticatedUserResponseBody is a response body for OrgsListMembershipsForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user
*/
type OrgsListMembershipsForAuthenticatedUserResponseBody []components.OrgMembership

/*
OrgsListMembershipsForAuthenticatedUserResponse is a response for OrgsListMembershipsForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user
*/
type OrgsListMembershipsForAuthenticatedUserResponse struct {
	response
	request *OrgsListMembershipsForAuthenticatedUserReq
	Data    OrgsListMembershipsForAuthenticatedUserResponseBody
}

/*
OrgsListOutsideCollaborators performs requests for "orgs/list-outside-collaborators"

List outside collaborators for an organization.

  GET /orgs/{org}/outside_collaborators

https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization
*/
func OrgsListOutsideCollaborators(ctx context.Context, req *OrgsListOutsideCollaboratorsReq, opt ...RequestOption) (*OrgsListOutsideCollaboratorsResponse, error) {
	if req == nil {
		req = new(OrgsListOutsideCollaboratorsReq)
	}
	resp := &OrgsListOutsideCollaboratorsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListOutsideCollaboratorsResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListOutsideCollaborators performs requests for "orgs/list-outside-collaborators"

List outside collaborators for an organization.

  GET /orgs/{org}/outside_collaborators

https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization
*/
func (c Client) OrgsListOutsideCollaborators(ctx context.Context, req *OrgsListOutsideCollaboratorsReq, opt ...RequestOption) (*OrgsListOutsideCollaboratorsResponse, error) {
	return OrgsListOutsideCollaborators(ctx, req, append(c, opt...)...)
}

/*
OrgsListOutsideCollaboratorsReq is request data for Client.OrgsListOutsideCollaborators

https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization
*/
type OrgsListOutsideCollaboratorsReq struct {
	_url string
	Org  string

	/*
	Filter the list of outside collaborators. Can be one of:
	\* `2fa_disabled`: Outside collaborators without [two-factor
	authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
	\* `all`: All outside collaborators.
	*/
	Filter *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListOutsideCollaboratorsReq) url() string {
	return r._url
}

func (r *OrgsListOutsideCollaboratorsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/outside_collaborators", r.Org)
}

func (r *OrgsListOutsideCollaboratorsReq) method() string {
	return "GET"
}

func (r *OrgsListOutsideCollaboratorsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListOutsideCollaboratorsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListOutsideCollaboratorsReq) body() interface{} {
	return nil
}

func (r *OrgsListOutsideCollaboratorsReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListOutsideCollaboratorsReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListOutsideCollaboratorsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListOutsideCollaboratorsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListOutsideCollaboratorsReq) Rel(link RelName, resp *OrgsListOutsideCollaboratorsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListOutsideCollaboratorsResponseBody is a response body for OrgsListOutsideCollaborators

https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization
*/
type OrgsListOutsideCollaboratorsResponseBody []components.SimpleUser

/*
OrgsListOutsideCollaboratorsResponse is a response for OrgsListOutsideCollaborators

https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization
*/
type OrgsListOutsideCollaboratorsResponse struct {
	response
	request *OrgsListOutsideCollaboratorsReq
	Data    OrgsListOutsideCollaboratorsResponseBody
}

/*
OrgsListPendingInvitations performs requests for "orgs/list-pending-invitations"

List pending organization invitations.

  GET /orgs/{org}/invitations

https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
func OrgsListPendingInvitations(ctx context.Context, req *OrgsListPendingInvitationsReq, opt ...RequestOption) (*OrgsListPendingInvitationsResponse, error) {
	if req == nil {
		req = new(OrgsListPendingInvitationsReq)
	}
	resp := &OrgsListPendingInvitationsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListPendingInvitationsResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListPendingInvitations performs requests for "orgs/list-pending-invitations"

List pending organization invitations.

  GET /orgs/{org}/invitations

https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
func (c Client) OrgsListPendingInvitations(ctx context.Context, req *OrgsListPendingInvitationsReq, opt ...RequestOption) (*OrgsListPendingInvitationsResponse, error) {
	return OrgsListPendingInvitations(ctx, req, append(c, opt...)...)
}

/*
OrgsListPendingInvitationsReq is request data for Client.OrgsListPendingInvitations

https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
type OrgsListPendingInvitationsReq struct {
	_url string
	Org  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListPendingInvitationsReq) url() string {
	return r._url
}

func (r *OrgsListPendingInvitationsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/invitations", r.Org)
}

func (r *OrgsListPendingInvitationsReq) method() string {
	return "GET"
}

func (r *OrgsListPendingInvitationsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListPendingInvitationsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListPendingInvitationsReq) body() interface{} {
	return nil
}

func (r *OrgsListPendingInvitationsReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListPendingInvitationsReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListPendingInvitationsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListPendingInvitationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListPendingInvitationsReq) Rel(link RelName, resp *OrgsListPendingInvitationsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListPendingInvitationsResponseBody is a response body for OrgsListPendingInvitations

https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
type OrgsListPendingInvitationsResponseBody []components.OrganizationInvitation

/*
OrgsListPendingInvitationsResponse is a response for OrgsListPendingInvitations

https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
type OrgsListPendingInvitationsResponse struct {
	response
	request *OrgsListPendingInvitationsReq
	Data    OrgsListPendingInvitationsResponseBody
}

/*
OrgsListPublicMembers performs requests for "orgs/list-public-members"

List public organization members.

  GET /orgs/{org}/public_members

https://developer.github.com/v3/orgs/members/#list-public-organization-members
*/
func OrgsListPublicMembers(ctx context.Context, req *OrgsListPublicMembersReq, opt ...RequestOption) (*OrgsListPublicMembersResponse, error) {
	if req == nil {
		req = new(OrgsListPublicMembersReq)
	}
	resp := &OrgsListPublicMembersResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListPublicMembersResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListPublicMembers performs requests for "orgs/list-public-members"

List public organization members.

  GET /orgs/{org}/public_members

https://developer.github.com/v3/orgs/members/#list-public-organization-members
*/
func (c Client) OrgsListPublicMembers(ctx context.Context, req *OrgsListPublicMembersReq, opt ...RequestOption) (*OrgsListPublicMembersResponse, error) {
	return OrgsListPublicMembers(ctx, req, append(c, opt...)...)
}

/*
OrgsListPublicMembersReq is request data for Client.OrgsListPublicMembers

https://developer.github.com/v3/orgs/members/#list-public-organization-members
*/
type OrgsListPublicMembersReq struct {
	_url string
	Org  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListPublicMembersReq) url() string {
	return r._url
}

func (r *OrgsListPublicMembersReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members", r.Org)
}

func (r *OrgsListPublicMembersReq) method() string {
	return "GET"
}

func (r *OrgsListPublicMembersReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListPublicMembersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListPublicMembersReq) body() interface{} {
	return nil
}

func (r *OrgsListPublicMembersReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListPublicMembersReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListPublicMembersReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListPublicMembersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListPublicMembersReq) Rel(link RelName, resp *OrgsListPublicMembersResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListPublicMembersResponseBody is a response body for OrgsListPublicMembers

https://developer.github.com/v3/orgs/members/#list-public-organization-members
*/
type OrgsListPublicMembersResponseBody []components.SimpleUser

/*
OrgsListPublicMembersResponse is a response for OrgsListPublicMembers

https://developer.github.com/v3/orgs/members/#list-public-organization-members
*/
type OrgsListPublicMembersResponse struct {
	response
	request *OrgsListPublicMembersReq
	Data    OrgsListPublicMembersResponseBody
}

/*
OrgsListSamlSsoAuthorizations performs requests for "orgs/list-saml-sso-authorizations"

List SAML SSO authorizations for an organization.

  GET /orgs/{org}/credential-authorizations

https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization
*/
func OrgsListSamlSsoAuthorizations(ctx context.Context, req *OrgsListSamlSsoAuthorizationsReq, opt ...RequestOption) (*OrgsListSamlSsoAuthorizationsResponse, error) {
	if req == nil {
		req = new(OrgsListSamlSsoAuthorizationsReq)
	}
	resp := &OrgsListSamlSsoAuthorizationsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListSamlSsoAuthorizationsResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListSamlSsoAuthorizations performs requests for "orgs/list-saml-sso-authorizations"

List SAML SSO authorizations for an organization.

  GET /orgs/{org}/credential-authorizations

https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization
*/
func (c Client) OrgsListSamlSsoAuthorizations(ctx context.Context, req *OrgsListSamlSsoAuthorizationsReq, opt ...RequestOption) (*OrgsListSamlSsoAuthorizationsResponse, error) {
	return OrgsListSamlSsoAuthorizations(ctx, req, append(c, opt...)...)
}

/*
OrgsListSamlSsoAuthorizationsReq is request data for Client.OrgsListSamlSsoAuthorizations

https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization
*/
type OrgsListSamlSsoAuthorizationsReq struct {
	_url string
	Org  string
}

func (r *OrgsListSamlSsoAuthorizationsReq) url() string {
	return r._url
}

func (r *OrgsListSamlSsoAuthorizationsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/credential-authorizations", r.Org)
}

func (r *OrgsListSamlSsoAuthorizationsReq) method() string {
	return "GET"
}

func (r *OrgsListSamlSsoAuthorizationsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsListSamlSsoAuthorizationsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListSamlSsoAuthorizationsReq) body() interface{} {
	return nil
}

func (r *OrgsListSamlSsoAuthorizationsReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListSamlSsoAuthorizationsReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListSamlSsoAuthorizationsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListSamlSsoAuthorizationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListSamlSsoAuthorizationsReq) Rel(link RelName, resp *OrgsListSamlSsoAuthorizationsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListSamlSsoAuthorizationsResponseBody is a response body for OrgsListSamlSsoAuthorizations

https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization
*/
type OrgsListSamlSsoAuthorizationsResponseBody []components.CredentialAuthorization

/*
OrgsListSamlSsoAuthorizationsResponse is a response for OrgsListSamlSsoAuthorizations

https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization
*/
type OrgsListSamlSsoAuthorizationsResponse struct {
	response
	request *OrgsListSamlSsoAuthorizationsReq
	Data    OrgsListSamlSsoAuthorizationsResponseBody
}

/*
OrgsListWebhooks performs requests for "orgs/list-webhooks"

List organization webhooks.

  GET /orgs/{org}/hooks

https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks
*/
func OrgsListWebhooks(ctx context.Context, req *OrgsListWebhooksReq, opt ...RequestOption) (*OrgsListWebhooksResponse, error) {
	if req == nil {
		req = new(OrgsListWebhooksReq)
	}
	resp := &OrgsListWebhooksResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsListWebhooksResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsListWebhooks performs requests for "orgs/list-webhooks"

List organization webhooks.

  GET /orgs/{org}/hooks

https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks
*/
func (c Client) OrgsListWebhooks(ctx context.Context, req *OrgsListWebhooksReq, opt ...RequestOption) (*OrgsListWebhooksResponse, error) {
	return OrgsListWebhooks(ctx, req, append(c, opt...)...)
}

/*
OrgsListWebhooksReq is request data for Client.OrgsListWebhooks

https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks
*/
type OrgsListWebhooksReq struct {
	_url string
	Org  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListWebhooksReq) url() string {
	return r._url
}

func (r *OrgsListWebhooksReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks", r.Org)
}

func (r *OrgsListWebhooksReq) method() string {
	return "GET"
}

func (r *OrgsListWebhooksReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListWebhooksReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListWebhooksReq) body() interface{} {
	return nil
}

func (r *OrgsListWebhooksReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsListWebhooksReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsListWebhooksReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsListWebhooksReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsListWebhooksReq) Rel(link RelName, resp *OrgsListWebhooksResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsListWebhooksResponseBody is a response body for OrgsListWebhooks

https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks
*/
type OrgsListWebhooksResponseBody []components.OrgHook

/*
OrgsListWebhooksResponse is a response for OrgsListWebhooks

https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks
*/
type OrgsListWebhooksResponse struct {
	response
	request *OrgsListWebhooksReq
	Data    OrgsListWebhooksResponseBody
}

/*
OrgsPingWebhook performs requests for "orgs/ping-webhook"

Ping an organization webhook.

  POST /orgs/{org}/hooks/{hook_id}/pings

https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook
*/
func OrgsPingWebhook(ctx context.Context, req *OrgsPingWebhookReq, opt ...RequestOption) (*OrgsPingWebhookResponse, error) {
	if req == nil {
		req = new(OrgsPingWebhookReq)
	}
	resp := &OrgsPingWebhookResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsPingWebhook performs requests for "orgs/ping-webhook"

Ping an organization webhook.

  POST /orgs/{org}/hooks/{hook_id}/pings

https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook
*/
func (c Client) OrgsPingWebhook(ctx context.Context, req *OrgsPingWebhookReq, opt ...RequestOption) (*OrgsPingWebhookResponse, error) {
	return OrgsPingWebhook(ctx, req, append(c, opt...)...)
}

/*
OrgsPingWebhookReq is request data for Client.OrgsPingWebhook

https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook
*/
type OrgsPingWebhookReq struct {
	_url   string
	Org    string
	HookId int64
}

func (r *OrgsPingWebhookReq) url() string {
	return r._url
}

func (r *OrgsPingWebhookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v/pings", r.Org, r.HookId)
}

func (r *OrgsPingWebhookReq) method() string {
	return "POST"
}

func (r *OrgsPingWebhookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsPingWebhookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsPingWebhookReq) body() interface{} {
	return nil
}

func (r *OrgsPingWebhookReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsPingWebhookReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsPingWebhookReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsPingWebhookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsPingWebhookReq) Rel(link RelName, resp *OrgsPingWebhookResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsPingWebhookResponse is a response for OrgsPingWebhook

https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook
*/
type OrgsPingWebhookResponse struct {
	response
	request *OrgsPingWebhookReq
}

/*
OrgsRemoveMember performs requests for "orgs/remove-member"

Remove an organization member.

  DELETE /orgs/{org}/members/{username}

https://developer.github.com/v3/orgs/members/#remove-an-organization-member
*/
func OrgsRemoveMember(ctx context.Context, req *OrgsRemoveMemberReq, opt ...RequestOption) (*OrgsRemoveMemberResponse, error) {
	if req == nil {
		req = new(OrgsRemoveMemberReq)
	}
	resp := &OrgsRemoveMemberResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsRemoveMember performs requests for "orgs/remove-member"

Remove an organization member.

  DELETE /orgs/{org}/members/{username}

https://developer.github.com/v3/orgs/members/#remove-an-organization-member
*/
func (c Client) OrgsRemoveMember(ctx context.Context, req *OrgsRemoveMemberReq, opt ...RequestOption) (*OrgsRemoveMemberResponse, error) {
	return OrgsRemoveMember(ctx, req, append(c, opt...)...)
}

/*
OrgsRemoveMemberReq is request data for Client.OrgsRemoveMember

https://developer.github.com/v3/orgs/members/#remove-an-organization-member
*/
type OrgsRemoveMemberReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsRemoveMemberReq) url() string {
	return r._url
}

func (r *OrgsRemoveMemberReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/members/%v", r.Org, r.Username)
}

func (r *OrgsRemoveMemberReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveMemberReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveMemberReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveMemberReq) body() interface{} {
	return nil
}

func (r *OrgsRemoveMemberReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsRemoveMemberReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsRemoveMemberReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsRemoveMemberReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsRemoveMemberReq) Rel(link RelName, resp *OrgsRemoveMemberResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsRemoveMemberResponse is a response for OrgsRemoveMember

https://developer.github.com/v3/orgs/members/#remove-an-organization-member
*/
type OrgsRemoveMemberResponse struct {
	response
	request *OrgsRemoveMemberReq
}

/*
OrgsRemoveMembershipForUser performs requests for "orgs/remove-membership-for-user"

Remove organization membership for a user.

  DELETE /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user
*/
func OrgsRemoveMembershipForUser(ctx context.Context, req *OrgsRemoveMembershipForUserReq, opt ...RequestOption) (*OrgsRemoveMembershipForUserResponse, error) {
	if req == nil {
		req = new(OrgsRemoveMembershipForUserReq)
	}
	resp := &OrgsRemoveMembershipForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsRemoveMembershipForUser performs requests for "orgs/remove-membership-for-user"

Remove organization membership for a user.

  DELETE /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user
*/
func (c Client) OrgsRemoveMembershipForUser(ctx context.Context, req *OrgsRemoveMembershipForUserReq, opt ...RequestOption) (*OrgsRemoveMembershipForUserResponse, error) {
	return OrgsRemoveMembershipForUser(ctx, req, append(c, opt...)...)
}

/*
OrgsRemoveMembershipForUserReq is request data for Client.OrgsRemoveMembershipForUser

https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user
*/
type OrgsRemoveMembershipForUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsRemoveMembershipForUserReq) url() string {
	return r._url
}

func (r *OrgsRemoveMembershipForUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/memberships/%v", r.Org, r.Username)
}

func (r *OrgsRemoveMembershipForUserReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveMembershipForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveMembershipForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveMembershipForUserReq) body() interface{} {
	return nil
}

func (r *OrgsRemoveMembershipForUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsRemoveMembershipForUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsRemoveMembershipForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsRemoveMembershipForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsRemoveMembershipForUserReq) Rel(link RelName, resp *OrgsRemoveMembershipForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsRemoveMembershipForUserResponse is a response for OrgsRemoveMembershipForUser

https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user
*/
type OrgsRemoveMembershipForUserResponse struct {
	response
	request *OrgsRemoveMembershipForUserReq
}

/*
OrgsRemoveOutsideCollaborator performs requests for "orgs/remove-outside-collaborator"

Remove outside collaborator from an organization.

  DELETE /orgs/{org}/outside_collaborators/{username}

https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization
*/
func OrgsRemoveOutsideCollaborator(ctx context.Context, req *OrgsRemoveOutsideCollaboratorReq, opt ...RequestOption) (*OrgsRemoveOutsideCollaboratorResponse, error) {
	if req == nil {
		req = new(OrgsRemoveOutsideCollaboratorReq)
	}
	resp := &OrgsRemoveOutsideCollaboratorResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsRemoveOutsideCollaborator performs requests for "orgs/remove-outside-collaborator"

Remove outside collaborator from an organization.

  DELETE /orgs/{org}/outside_collaborators/{username}

https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization
*/
func (c Client) OrgsRemoveOutsideCollaborator(ctx context.Context, req *OrgsRemoveOutsideCollaboratorReq, opt ...RequestOption) (*OrgsRemoveOutsideCollaboratorResponse, error) {
	return OrgsRemoveOutsideCollaborator(ctx, req, append(c, opt...)...)
}

/*
OrgsRemoveOutsideCollaboratorReq is request data for Client.OrgsRemoveOutsideCollaborator

https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization
*/
type OrgsRemoveOutsideCollaboratorReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsRemoveOutsideCollaboratorReq) url() string {
	return r._url
}

func (r *OrgsRemoveOutsideCollaboratorReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/outside_collaborators/%v", r.Org, r.Username)
}

func (r *OrgsRemoveOutsideCollaboratorReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveOutsideCollaboratorReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveOutsideCollaboratorReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveOutsideCollaboratorReq) body() interface{} {
	return nil
}

func (r *OrgsRemoveOutsideCollaboratorReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsRemoveOutsideCollaboratorReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsRemoveOutsideCollaboratorReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsRemoveOutsideCollaboratorReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsRemoveOutsideCollaboratorReq) Rel(link RelName, resp *OrgsRemoveOutsideCollaboratorResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsRemoveOutsideCollaboratorResponse is a response for OrgsRemoveOutsideCollaborator

https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization
*/
type OrgsRemoveOutsideCollaboratorResponse struct {
	response
	request *OrgsRemoveOutsideCollaboratorReq
}

/*
OrgsRemovePublicMembershipForAuthenticatedUser performs requests for "orgs/remove-public-membership-for-authenticated-user"

Remove public organization membership for the authenticated user.

  DELETE /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user
*/
func OrgsRemovePublicMembershipForAuthenticatedUser(ctx context.Context, req *OrgsRemovePublicMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsRemovePublicMembershipForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(OrgsRemovePublicMembershipForAuthenticatedUserReq)
	}
	resp := &OrgsRemovePublicMembershipForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsRemovePublicMembershipForAuthenticatedUser performs requests for "orgs/remove-public-membership-for-authenticated-user"

Remove public organization membership for the authenticated user.

  DELETE /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user
*/
func (c Client) OrgsRemovePublicMembershipForAuthenticatedUser(ctx context.Context, req *OrgsRemovePublicMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsRemovePublicMembershipForAuthenticatedUserResponse, error) {
	return OrgsRemovePublicMembershipForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsRemovePublicMembershipForAuthenticatedUserReq is request data for Client.OrgsRemovePublicMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user
*/
type OrgsRemovePublicMembershipForAuthenticatedUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members/%v", r.Org, r.Username)
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) method() string {
	return "DELETE"
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsRemovePublicMembershipForAuthenticatedUserReq) Rel(link RelName, resp *OrgsRemovePublicMembershipForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsRemovePublicMembershipForAuthenticatedUserResponse is a response for OrgsRemovePublicMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user
*/
type OrgsRemovePublicMembershipForAuthenticatedUserResponse struct {
	response
	request *OrgsRemovePublicMembershipForAuthenticatedUserReq
}

/*
OrgsRemoveSamlSsoAuthorization performs requests for "orgs/remove-saml-sso-authorization"

Remove a SAML SSO authorization for an organization.

  DELETE /orgs/{org}/credential-authorizations/{credential_id}

https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization
*/
func OrgsRemoveSamlSsoAuthorization(ctx context.Context, req *OrgsRemoveSamlSsoAuthorizationReq, opt ...RequestOption) (*OrgsRemoveSamlSsoAuthorizationResponse, error) {
	if req == nil {
		req = new(OrgsRemoveSamlSsoAuthorizationReq)
	}
	resp := &OrgsRemoveSamlSsoAuthorizationResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsRemoveSamlSsoAuthorization performs requests for "orgs/remove-saml-sso-authorization"

Remove a SAML SSO authorization for an organization.

  DELETE /orgs/{org}/credential-authorizations/{credential_id}

https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization
*/
func (c Client) OrgsRemoveSamlSsoAuthorization(ctx context.Context, req *OrgsRemoveSamlSsoAuthorizationReq, opt ...RequestOption) (*OrgsRemoveSamlSsoAuthorizationResponse, error) {
	return OrgsRemoveSamlSsoAuthorization(ctx, req, append(c, opt...)...)
}

/*
OrgsRemoveSamlSsoAuthorizationReq is request data for Client.OrgsRemoveSamlSsoAuthorization

https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization
*/
type OrgsRemoveSamlSsoAuthorizationReq struct {
	_url         string
	Org          string
	CredentialId int64
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) url() string {
	return r._url
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/credential-authorizations/%v", r.Org, r.CredentialId)
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) body() interface{} {
	return nil
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsRemoveSamlSsoAuthorizationReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsRemoveSamlSsoAuthorizationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsRemoveSamlSsoAuthorizationReq) Rel(link RelName, resp *OrgsRemoveSamlSsoAuthorizationResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsRemoveSamlSsoAuthorizationResponse is a response for OrgsRemoveSamlSsoAuthorization

https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization
*/
type OrgsRemoveSamlSsoAuthorizationResponse struct {
	response
	request *OrgsRemoveSamlSsoAuthorizationReq
}

/*
OrgsSetMembershipForUser performs requests for "orgs/set-membership-for-user"

Set organization membership for a user.

  PUT /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
*/
func OrgsSetMembershipForUser(ctx context.Context, req *OrgsSetMembershipForUserReq, opt ...RequestOption) (*OrgsSetMembershipForUserResponse, error) {
	if req == nil {
		req = new(OrgsSetMembershipForUserReq)
	}
	resp := &OrgsSetMembershipForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsSetMembershipForUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsSetMembershipForUser performs requests for "orgs/set-membership-for-user"

Set organization membership for a user.

  PUT /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
*/
func (c Client) OrgsSetMembershipForUser(ctx context.Context, req *OrgsSetMembershipForUserReq, opt ...RequestOption) (*OrgsSetMembershipForUserResponse, error) {
	return OrgsSetMembershipForUser(ctx, req, append(c, opt...)...)
}

/*
OrgsSetMembershipForUserReq is request data for Client.OrgsSetMembershipForUser

https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
*/
type OrgsSetMembershipForUserReq struct {
	_url        string
	Org         string
	Username    string
	RequestBody OrgsSetMembershipForUserReqBody
}

func (r *OrgsSetMembershipForUserReq) url() string {
	return r._url
}

func (r *OrgsSetMembershipForUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/memberships/%v", r.Org, r.Username)
}

func (r *OrgsSetMembershipForUserReq) method() string {
	return "PUT"
}

func (r *OrgsSetMembershipForUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsSetMembershipForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsSetMembershipForUserReq) body() interface{} {
	return r.RequestBody
}

func (r *OrgsSetMembershipForUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsSetMembershipForUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsSetMembershipForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *OrgsSetMembershipForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsSetMembershipForUserReq) Rel(link RelName, resp *OrgsSetMembershipForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsSetMembershipForUserReqBody is a request body for orgs/set-membership-for-user

https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
*/
type OrgsSetMembershipForUserReqBody struct {

	/*
	   The role to give the user in the organization. Can be one of:
	   \* `admin` - The user will become an owner of the organization.
	   \* `member` - The user will become a non-owner member of the organization.
	*/
	Role *string `json:"role,omitempty"`
}

/*
OrgsSetMembershipForUserResponseBody is a response body for OrgsSetMembershipForUser

https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
*/
type OrgsSetMembershipForUserResponseBody components.OrgMembership

/*
OrgsSetMembershipForUserResponse is a response for OrgsSetMembershipForUser

https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user
*/
type OrgsSetMembershipForUserResponse struct {
	response
	request *OrgsSetMembershipForUserReq
	Data    OrgsSetMembershipForUserResponseBody
}

/*
OrgsSetPublicMembershipForAuthenticatedUser performs requests for "orgs/set-public-membership-for-authenticated-user"

Set public organization membership for the authenticated user.

  PUT /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user
*/
func OrgsSetPublicMembershipForAuthenticatedUser(ctx context.Context, req *OrgsSetPublicMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsSetPublicMembershipForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(OrgsSetPublicMembershipForAuthenticatedUserReq)
	}
	resp := &OrgsSetPublicMembershipForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsSetPublicMembershipForAuthenticatedUser performs requests for "orgs/set-public-membership-for-authenticated-user"

Set public organization membership for the authenticated user.

  PUT /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user
*/
func (c Client) OrgsSetPublicMembershipForAuthenticatedUser(ctx context.Context, req *OrgsSetPublicMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsSetPublicMembershipForAuthenticatedUserResponse, error) {
	return OrgsSetPublicMembershipForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsSetPublicMembershipForAuthenticatedUserReq is request data for Client.OrgsSetPublicMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user
*/
type OrgsSetPublicMembershipForAuthenticatedUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members/%v", r.Org, r.Username)
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) method() string {
	return "PUT"
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsSetPublicMembershipForAuthenticatedUserReq) Rel(link RelName, resp *OrgsSetPublicMembershipForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsSetPublicMembershipForAuthenticatedUserResponse is a response for OrgsSetPublicMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user
*/
type OrgsSetPublicMembershipForAuthenticatedUserResponse struct {
	response
	request *OrgsSetPublicMembershipForAuthenticatedUserReq
}

/*
OrgsUnblockUser performs requests for "orgs/unblock-user"

Unblock a user from an organization.

  DELETE /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization
*/
func OrgsUnblockUser(ctx context.Context, req *OrgsUnblockUserReq, opt ...RequestOption) (*OrgsUnblockUserResponse, error) {
	if req == nil {
		req = new(OrgsUnblockUserReq)
	}
	resp := &OrgsUnblockUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsUnblockUser performs requests for "orgs/unblock-user"

Unblock a user from an organization.

  DELETE /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization
*/
func (c Client) OrgsUnblockUser(ctx context.Context, req *OrgsUnblockUserReq, opt ...RequestOption) (*OrgsUnblockUserResponse, error) {
	return OrgsUnblockUser(ctx, req, append(c, opt...)...)
}

/*
OrgsUnblockUserReq is request data for Client.OrgsUnblockUser

https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization
*/
type OrgsUnblockUserReq struct {
	_url     string
	Org      string
	Username string
}

func (r *OrgsUnblockUserReq) url() string {
	return r._url
}

func (r *OrgsUnblockUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks/%v", r.Org, r.Username)
}

func (r *OrgsUnblockUserReq) method() string {
	return "DELETE"
}

func (r *OrgsUnblockUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUnblockUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUnblockUserReq) body() interface{} {
	return nil
}

func (r *OrgsUnblockUserReq) dataStatuses() []int {
	return []int{}
}

func (r *OrgsUnblockUserReq) validStatuses() []int {
	return []int{204}
}

func (r *OrgsUnblockUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *OrgsUnblockUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsUnblockUserReq) Rel(link RelName, resp *OrgsUnblockUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsUnblockUserResponse is a response for OrgsUnblockUser

https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization
*/
type OrgsUnblockUserResponse struct {
	response
	request *OrgsUnblockUserReq
}

/*
OrgsUpdate performs requests for "orgs/update"

Update an organization.

  PATCH /orgs/{org}

https://developer.github.com/v3/orgs/#update-an-organization
*/
func OrgsUpdate(ctx context.Context, req *OrgsUpdateReq, opt ...RequestOption) (*OrgsUpdateResponse, error) {
	if req == nil {
		req = new(OrgsUpdateReq)
	}
	resp := &OrgsUpdateResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsUpdateResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsUpdate performs requests for "orgs/update"

Update an organization.

  PATCH /orgs/{org}

https://developer.github.com/v3/orgs/#update-an-organization
*/
func (c Client) OrgsUpdate(ctx context.Context, req *OrgsUpdateReq, opt ...RequestOption) (*OrgsUpdateResponse, error) {
	return OrgsUpdate(ctx, req, append(c, opt...)...)
}

/*
OrgsUpdateReq is request data for Client.OrgsUpdate

https://developer.github.com/v3/orgs/#update-an-organization
*/
type OrgsUpdateReq struct {
	_url        string
	Org         string
	RequestBody OrgsUpdateReqBody

	/*
	New repository creation permissions are available to preview. You can now use
	`members_can_create_public_repositories`,
	`members_can_create_private_repositories`, and
	`members_can_create_internal_repositories`. You can only allow members to create
	internal repositories if your organization is associated with an enterprise
	account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These
	parameters provide more granular permissions to configure the type of
	repositories organization members can create.

	To access these new parameters during the preview period, you must set this to
	true.
	*/
	SurturPreview bool
}

func (r *OrgsUpdateReq) url() string {
	return r._url
}

func (r *OrgsUpdateReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v", r.Org)
}

func (r *OrgsUpdateReq) method() string {
	return "PATCH"
}

func (r *OrgsUpdateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUpdateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"surtur": r.SurturPreview}
	if allPreviews {
		previewVals["surtur"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUpdateReq) body() interface{} {
	return r.RequestBody
}

func (r *OrgsUpdateReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsUpdateReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsUpdateReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *OrgsUpdateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsUpdateReq) Rel(link RelName, resp *OrgsUpdateResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsUpdateReqBody is a request body for orgs/update

https://developer.github.com/v3/orgs/#update-an-organization
*/
type OrgsUpdateReqBody struct {

	// Billing email address. This address is not publicized.
	BillingEmail *string `json:"billing_email,omitempty"`

	// The company name.
	Company *string `json:"company,omitempty"`

	/*
	   Default permission level members have for organization repositories:
	   \* `read` - can pull, but not push to or administer this repository.
	   \* `write` - can pull and push, but not administer this repository.
	   \* `admin` - can pull, push, and administer this repository.
	   \* `none` - no permissions granted by default.
	*/
	DefaultRepositoryPermission *string `json:"default_repository_permission,omitempty"`

	// The description of the company.
	Description *string `json:"description,omitempty"`

	// The publicly visible email address.
	Email *string `json:"email,omitempty"`

	// Toggles whether an organization can use organization projects.
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`

	/*
	   Toggles whether repositories that belong to the organization can use repository
	   projects.
	*/
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`

	// The location.
	Location *string `json:"location,omitempty"`

	/*
	   Specifies which types of repositories non-admin organization members can create.
	   Can be one of:
	   \* `all` - all organization members can create public and private repositories.
	   \* `private` - members can create private repositories. This option is only
	   available to repositories that are part of an organization on GitHub Enterprise
	   Cloud.
	   \* `none` - only admin members can create repositories.
	   **Note:** This parameter is deprecated and will be removed in the future. Its
	   return value ignores internal repositories. Using this parameter overrides
	   values set in `members_can_create_repositories`. See [this
	   note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for
	   details.
	*/
	MembersAllowedRepositoryCreationType *string `json:"members_allowed_repository_creation_type,omitempty"`

	/*
	   Toggles whether organization members can create internal repositories, which are
	   visible to all enterprise members. You can only allow members to create internal
	   repositories if your organization is associated with an enterprise account using
	   GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
	   \* `true` - all organization members can create internal repositories.
	   \* `false` - only organization owners can create internal repositories.
	   Default: `true`. For more information, see "[Restricting repository creation in
	   your
	   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)".
	*/
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`

	/*
	   Toggles whether organization members can create private repositories, which are
	   visible to organization members with permission. Can be one of:
	   \* `true` - all organization members can create private repositories.
	   \* `false` - only organization owners can create private repositories.
	   Default: `true`. For more information, see "[Restricting repository creation in
	   your
	   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)".
	*/
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`

	/*
	   Toggles whether organization members can create public repositories, which are
	   visible to anyone. Can be one of:
	   \* `true` - all organization members can create public repositories.
	   \* `false` - only organization owners can create public repositories.
	   Default: `true`. For more information, see "[Restricting repository creation in
	   your
	   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)".
	*/
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`

	/*
	   Toggles the ability of non-admin organization members to create repositories.
	   Can be one of:
	   \* `true` - all organization members can create repositories.
	   \* `false` - only organization owners can create repositories.
	   Default: `true`
	   **Note:** A parameter can override this parameter. See
	   `members_allowed_repository_creation_type` in this table for details. **Note:**
	   A parameter can override this parameter. See
	   `members_allowed_repository_creation_type` in this table for details.
	*/
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`

	// The shorthand name of the company.
	Name *string `json:"name,omitempty"`

	// The Twitter username of the company.
	TwitterUsername *string `json:"twitter_username,omitempty"`
}

/*
OrgsUpdateResponseBody is a response body for OrgsUpdate

https://developer.github.com/v3/orgs/#update-an-organization
*/
type OrgsUpdateResponseBody components.OrganizationFull

/*
OrgsUpdateResponse is a response for OrgsUpdate

https://developer.github.com/v3/orgs/#update-an-organization
*/
type OrgsUpdateResponse struct {
	response
	request *OrgsUpdateReq
	Data    OrgsUpdateResponseBody
}

/*
OrgsUpdateMembershipForAuthenticatedUser performs requests for "orgs/update-membership-for-authenticated-user"

Update an organization membership for the authenticated user.

  PATCH /user/memberships/orgs/{org}

https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
*/
func OrgsUpdateMembershipForAuthenticatedUser(ctx context.Context, req *OrgsUpdateMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsUpdateMembershipForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(OrgsUpdateMembershipForAuthenticatedUserReq)
	}
	resp := &OrgsUpdateMembershipForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsUpdateMembershipForAuthenticatedUserResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsUpdateMembershipForAuthenticatedUser performs requests for "orgs/update-membership-for-authenticated-user"

Update an organization membership for the authenticated user.

  PATCH /user/memberships/orgs/{org}

https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
*/
func (c Client) OrgsUpdateMembershipForAuthenticatedUser(ctx context.Context, req *OrgsUpdateMembershipForAuthenticatedUserReq, opt ...RequestOption) (*OrgsUpdateMembershipForAuthenticatedUserResponse, error) {
	return OrgsUpdateMembershipForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
OrgsUpdateMembershipForAuthenticatedUserReq is request data for Client.OrgsUpdateMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
*/
type OrgsUpdateMembershipForAuthenticatedUserReq struct {
	_url        string
	Org         string
	RequestBody OrgsUpdateMembershipForAuthenticatedUserReqBody
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/memberships/orgs/%v", r.Org)
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) method() string {
	return "PATCH"
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) body() interface{} {
	return r.RequestBody
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsUpdateMembershipForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *OrgsUpdateMembershipForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsUpdateMembershipForAuthenticatedUserReq) Rel(link RelName, resp *OrgsUpdateMembershipForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
OrgsUpdateMembershipForAuthenticatedUserReqBody is a request body for orgs/update-membership-for-authenticated-user

https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
*/
type OrgsUpdateMembershipForAuthenticatedUserReqBody struct {

	// The state that the membership should be in. Only `"active"` will be accepted.
	State *string `json:"state"`
}

/*
OrgsUpdateMembershipForAuthenticatedUserResponseBody is a response body for OrgsUpdateMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
*/
type OrgsUpdateMembershipForAuthenticatedUserResponseBody components.OrgMembership

/*
OrgsUpdateMembershipForAuthenticatedUserResponse is a response for OrgsUpdateMembershipForAuthenticatedUser

https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user
*/
type OrgsUpdateMembershipForAuthenticatedUserResponse struct {
	response
	request *OrgsUpdateMembershipForAuthenticatedUserReq
	Data    OrgsUpdateMembershipForAuthenticatedUserResponseBody
}

/*
OrgsUpdateWebhook performs requests for "orgs/update-webhook"

Update an organization webhook.

  PATCH /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
*/
func OrgsUpdateWebhook(ctx context.Context, req *OrgsUpdateWebhookReq, opt ...RequestOption) (*OrgsUpdateWebhookResponse, error) {
	if req == nil {
		req = new(OrgsUpdateWebhookReq)
	}
	resp := &OrgsUpdateWebhookResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = OrgsUpdateWebhookResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
OrgsUpdateWebhook performs requests for "orgs/update-webhook"

Update an organization webhook.

  PATCH /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
*/
func (c Client) OrgsUpdateWebhook(ctx context.Context, req *OrgsUpdateWebhookReq, opt ...RequestOption) (*OrgsUpdateWebhookResponse, error) {
	return OrgsUpdateWebhook(ctx, req, append(c, opt...)...)
}

/*
OrgsUpdateWebhookReq is request data for Client.OrgsUpdateWebhook

https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
*/
type OrgsUpdateWebhookReq struct {
	_url        string
	Org         string
	HookId      int64
	RequestBody OrgsUpdateWebhookReqBody
}

func (r *OrgsUpdateWebhookReq) url() string {
	return r._url
}

func (r *OrgsUpdateWebhookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v", r.Org, r.HookId)
}

func (r *OrgsUpdateWebhookReq) method() string {
	return "PATCH"
}

func (r *OrgsUpdateWebhookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUpdateWebhookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUpdateWebhookReq) body() interface{} {
	return r.RequestBody
}

func (r *OrgsUpdateWebhookReq) dataStatuses() []int {
	return []int{200}
}

func (r *OrgsUpdateWebhookReq) validStatuses() []int {
	return []int{200}
}

func (r *OrgsUpdateWebhookReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *OrgsUpdateWebhookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *OrgsUpdateWebhookReq) Rel(link RelName, resp *OrgsUpdateWebhookResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

// OrgsUpdateWebhookReqBodyConfig is a value for OrgsUpdateWebhookReqBody's Config field
type OrgsUpdateWebhookReqBodyConfig struct {

	/*
	   The media type used to serialize the payloads. Supported values include `json`
	   and `form`. The default is `form`.
	*/
	ContentType *string `json:"content_type,omitempty"`

	/*
	   Determines whether the SSL certificate of the host for `url` will be verified
	   when delivering payloads. Supported values include `0` (verification is
	   performed) and `1` (verification is not performed). The default is `0`. **We
	   strongly recommend not setting this to `1` as you are subject to
	   man-in-the-middle and other attacks.**
	*/
	InsecureSsl *string `json:"insecure_ssl,omitempty"`

	/*
	   If provided, the `secret` will be used as the `key` to generate the HMAC hex
	   digest value in the
	   [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers)
	   header.
	*/
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *string `json:"url"`
}

/*
OrgsUpdateWebhookReqBody is a request body for orgs/update-webhook

https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
*/
type OrgsUpdateWebhookReqBody struct {

	/*
	   Determines if notifications are sent when the webhook is triggered. Set to
	   `true` to send notifications.
	*/
	Active *bool `json:"active,omitempty"`

	/*
	   Key/value pairs to provide settings for this webhook. [These are defined
	   below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).
	*/
	Config *OrgsUpdateWebhookReqBodyConfig `json:"config,omitempty"`

	/*
	   Determines what [events](https://developer.github.com/webhooks/event-payloads)
	   the hook is triggered for.
	*/
	Events []string `json:"events,omitempty"`
}

/*
OrgsUpdateWebhookResponseBody is a response body for OrgsUpdateWebhook

https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
*/
type OrgsUpdateWebhookResponseBody components.OrgHook

/*
OrgsUpdateWebhookResponse is a response for OrgsUpdateWebhook

https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook
*/
type OrgsUpdateWebhookResponse struct {
	response
	request *OrgsUpdateWebhookReq
	Data    OrgsUpdateWebhookResponseBody
}
