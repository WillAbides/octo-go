// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
OrgsAddOrUpdateMembershipReq builds requests for "orgs/add-or-update-membership"

Add or update organization membership.

  PUT /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership
*/
type OrgsAddOrUpdateMembershipReq struct {
	Org         string
	Username    string
	RequestBody OrgsAddOrUpdateMembershipReqBody
}

func (r *OrgsAddOrUpdateMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/memberships/%v", r.Org, r.Username)
}

func (r *OrgsAddOrUpdateMembershipReq) method() string {
	return "PUT"
}

func (r *OrgsAddOrUpdateMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsAddOrUpdateMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsAddOrUpdateMembershipReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *OrgsAddOrUpdateMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsAddOrUpdateMembershipReqBody is a request body for orgs/add-or-update-membership

API documentation: https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership
*/
type OrgsAddOrUpdateMembershipReqBody struct {

	/*
	   The role to give the user in the organization. Can be one of:
	   \* `admin` - The user will become an owner of the organization.
	   \* `member` - The user will become a non-owner member of the organization.
	*/
	Role *string `json:"role,omitempty"`
}

/*
OrgsAddOrUpdateMembershipResponseBody200 is a response body for orgs/add-or-update-membership

API documentation: https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership
*/
type OrgsAddOrUpdateMembershipResponseBody200 struct {
	components.OrgMembership
}

/*
OrgsBlockUserReq builds requests for "orgs/block-user"

Block a user.

  PUT /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#block-a-user
*/
type OrgsBlockUserReq struct {
	Org      string
	Username string
}

func (r *OrgsBlockUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks/%v", r.Org, r.Username)
}

func (r *OrgsBlockUserReq) method() string {
	return "PUT"
}

func (r *OrgsBlockUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsBlockUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsBlockUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsBlockUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsCheckBlockedUserReq builds requests for "orgs/check-blocked-user"

Check whether a user is blocked from an organization.

  GET /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization
*/
type OrgsCheckBlockedUserReq struct {
	Org      string
	Username string
}

func (r *OrgsCheckBlockedUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks/%v", r.Org, r.Username)
}

func (r *OrgsCheckBlockedUserReq) method() string {
	return "GET"
}

func (r *OrgsCheckBlockedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCheckBlockedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCheckBlockedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsCheckBlockedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsCheckMembershipReq builds requests for "orgs/check-membership"

Check membership.

  GET /orgs/{org}/members/{username}

https://developer.github.com/v3/orgs/members/#check-membership
*/
type OrgsCheckMembershipReq struct {
	Org      string
	Username string
}

func (r *OrgsCheckMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/members/%v", r.Org, r.Username)
}

func (r *OrgsCheckMembershipReq) method() string {
	return "GET"
}

func (r *OrgsCheckMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCheckMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCheckMembershipReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsCheckMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsCheckPublicMembershipReq builds requests for "orgs/check-public-membership"

Check public membership.

  GET /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#check-public-membership
*/
type OrgsCheckPublicMembershipReq struct {
	Org      string
	Username string
}

func (r *OrgsCheckPublicMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members/%v", r.Org, r.Username)
}

func (r *OrgsCheckPublicMembershipReq) method() string {
	return "GET"
}

func (r *OrgsCheckPublicMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCheckPublicMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCheckPublicMembershipReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsCheckPublicMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsConcealMembershipReq builds requests for "orgs/conceal-membership"

Conceal a user's membership.

  DELETE /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#conceal-a-users-membership
*/
type OrgsConcealMembershipReq struct {
	Org      string
	Username string
}

func (r *OrgsConcealMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members/%v", r.Org, r.Username)
}

func (r *OrgsConcealMembershipReq) method() string {
	return "DELETE"
}

func (r *OrgsConcealMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsConcealMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsConcealMembershipReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsConcealMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsConvertMemberToOutsideCollaboratorReq builds requests for "orgs/convert-member-to-outside-collaborator"

Convert member to outside collaborator.

  PUT /orgs/{org}/outside_collaborators/{username}

https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator
*/
type OrgsConvertMemberToOutsideCollaboratorReq struct {
	Org      string
	Username string
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/outside_collaborators/%v", r.Org, r.Username)
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) method() string {
	return "PUT"
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsConvertMemberToOutsideCollaboratorReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsConvertMemberToOutsideCollaboratorReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsCreateHookReq builds requests for "orgs/create-hook"

Create a hook.

  POST /orgs/{org}/hooks

https://developer.github.com/v3/orgs/hooks/#create-a-hook
*/
type OrgsCreateHookReq struct {
	Org         string
	RequestBody OrgsCreateHookReqBody
}

func (r *OrgsCreateHookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks", r.Org)
}

func (r *OrgsCreateHookReq) method() string {
	return "POST"
}

func (r *OrgsCreateHookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCreateHookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCreateHookReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *OrgsCreateHookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

// OrgsCreateHookReqBodyConfig is a value for OrgsCreateHookReqBody's Config field
type OrgsCreateHookReqBodyConfig struct {

	/*
	   The media type used to serialize the payloads. Supported values include `json`
	   and `form`. The default is `form`.
	*/
	ContentType *string `json:"content_type,omitempty"`

	/*
	   Determines whether the SSL certificate of the host for `url` will be verified
	   when delivering payloads. Supported values include `0` (verification is
	   performed) and `1` (verification is not performed). The default is `0`. **We
	   strongly recommend not setting this to `1` as you are subject to
	   man-in-the-middle and other attacks.**
	*/
	InsecureSsl *string `json:"insecure_ssl,omitempty"`

	/*
	   If provided, the `secret` will be used as the `key` to generate the HMAC hex
	   digest value in the
	   [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers)
	   header.
	*/
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *string `json:"url"`
}

/*
OrgsCreateHookReqBody is a request body for orgs/create-hook

API documentation: https://developer.github.com/v3/orgs/hooks/#create-a-hook
*/
type OrgsCreateHookReqBody struct {

	/*
	   Determines if notifications are sent when the webhook is triggered. Set to
	   `true` to send notifications.
	*/
	Active *bool `json:"active,omitempty"`

	/*
	   Key/value pairs to provide settings for this webhook. [These are defined
	   below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).
	*/
	Config *OrgsCreateHookReqBodyConfig `json:"config"`

	/*
	   Determines what [events](https://developer.github.com/webhooks/event-payloads)
	   the hook is triggered for.
	*/
	Events []string `json:"events,omitempty"`

	// Must be passed as "web".
	Name *string `json:"name"`
}

/*
OrgsCreateHookResponseBody201 is a response body for orgs/create-hook

API documentation: https://developer.github.com/v3/orgs/hooks/#create-a-hook
*/
type OrgsCreateHookResponseBody201 struct {
	components.OrgHook
}

/*
OrgsCreateInvitationReq builds requests for "orgs/create-invitation"

Create organization invitation.

  POST /orgs/{org}/invitations

https://developer.github.com/v3/orgs/members/#create-organization-invitation
*/
type OrgsCreateInvitationReq struct {
	Org         string
	RequestBody OrgsCreateInvitationReqBody
}

func (r *OrgsCreateInvitationReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/invitations", r.Org)
}

func (r *OrgsCreateInvitationReq) method() string {
	return "POST"
}

func (r *OrgsCreateInvitationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsCreateInvitationReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsCreateInvitationReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *OrgsCreateInvitationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsCreateInvitationReqBody is a request body for orgs/create-invitation

API documentation: https://developer.github.com/v3/orgs/members/#create-organization-invitation
*/
type OrgsCreateInvitationReqBody struct {

	/*
	   **Required unless you provide `invitee_id`**. Email address of the person you
	   are inviting, which can be an existing GitHub user.
	*/
	Email *string `json:"email,omitempty"`

	/*
	   **Required unless you provide `email`**. GitHub user ID for the person you are
	   inviting.
	*/
	InviteeId *int64 `json:"invitee_id,omitempty"`

	/*
	   Specify role for new member. Can be one of:
	   \* `admin` - Organization owners with full administrative rights to the
	   organization and complete access to all repositories and teams.
	   \* `direct_member` - Non-owner organization members with ability to see other
	   members and join teams by invitation.
	   \* `billing_manager` - Non-owner organization members with ability to manage the
	   billing settings of your organization.
	*/
	Role *string `json:"role,omitempty"`

	// Specify IDs for the teams you want to invite new members to.
	TeamIds []int64 `json:"team_ids,omitempty"`
}

/*
OrgsCreateInvitationResponseBody201 is a response body for orgs/create-invitation

API documentation: https://developer.github.com/v3/orgs/members/#create-organization-invitation
*/
type OrgsCreateInvitationResponseBody201 struct {
	components.OrganizationInvitation
}

/*
OrgsDeleteHookReq builds requests for "orgs/delete-hook"

Delete a hook.

  DELETE /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#delete-a-hook
*/
type OrgsDeleteHookReq struct {
	Org    string
	HookId int64
}

func (r *OrgsDeleteHookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v", r.Org, r.HookId)
}

func (r *OrgsDeleteHookReq) method() string {
	return "DELETE"
}

func (r *OrgsDeleteHookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsDeleteHookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsDeleteHookReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsDeleteHookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsGetReq builds requests for "orgs/get"

Get an organization.

  GET /orgs/{org}

https://developer.github.com/v3/orgs/#get-an-organization
*/
type OrgsGetReq struct {
	Org string

	/*
	New repository creation permissions are available to preview. You can now use
	`members_can_create_public_repositories`,
	`members_can_create_private_repositories`, and
	`members_can_create_internal_repositories`. You can only allow members to create
	internal repositories if your organization is associated with an enterprise
	account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These
	parameters provide more granular permissions to configure the type of
	repositories organization members can create.

	To access these new parameters during the preview period, you must set this to
	true.
	*/
	SurturPreview bool
}

func (r *OrgsGetReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v", r.Org)
}

func (r *OrgsGetReq) method() string {
	return "GET"
}

func (r *OrgsGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"surtur": r.SurturPreview}
	if allPreviews {
		previewVals["surtur"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsGetResponseBody200 is a response body for orgs/get

API documentation: https://developer.github.com/v3/orgs/#get-an-organization
*/
type OrgsGetResponseBody200 struct {
	components.OrganizationFull
}

/*
OrgsGetHookReq builds requests for "orgs/get-hook"

Get single hook.

  GET /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#get-single-hook
*/
type OrgsGetHookReq struct {
	Org    string
	HookId int64
}

func (r *OrgsGetHookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v", r.Org, r.HookId)
}

func (r *OrgsGetHookReq) method() string {
	return "GET"
}

func (r *OrgsGetHookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetHookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetHookReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsGetHookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsGetHookResponseBody200 is a response body for orgs/get-hook

API documentation: https://developer.github.com/v3/orgs/hooks/#get-single-hook
*/
type OrgsGetHookResponseBody200 struct {
	components.OrgHook
}

/*
OrgsGetMembershipReq builds requests for "orgs/get-membership"

Get organization membership.

  GET /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#get-organization-membership
*/
type OrgsGetMembershipReq struct {
	Org      string
	Username string
}

func (r *OrgsGetMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/memberships/%v", r.Org, r.Username)
}

func (r *OrgsGetMembershipReq) method() string {
	return "GET"
}

func (r *OrgsGetMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetMembershipReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsGetMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsGetMembershipResponseBody200 is a response body for orgs/get-membership

API documentation: https://developer.github.com/v3/orgs/members/#get-organization-membership
*/
type OrgsGetMembershipResponseBody200 struct {
	components.OrgMembership
}

/*
OrgsGetMembershipForAuthenticatedUserReq builds requests for "orgs/get-membership-for-authenticated-user"

Get your organization membership.

  GET /user/memberships/orgs/{org}

https://developer.github.com/v3/orgs/members/#get-your-organization-membership
*/
type OrgsGetMembershipForAuthenticatedUserReq struct {
	Org string
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/memberships/orgs/%v", r.Org)
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsGetMembershipForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsGetMembershipForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsGetMembershipForAuthenticatedUserResponseBody200 is a response body for orgs/get-membership-for-authenticated-user

API documentation: https://developer.github.com/v3/orgs/members/#get-your-organization-membership
*/
type OrgsGetMembershipForAuthenticatedUserResponseBody200 struct {
	components.OrgMembership
}

/*
OrgsListReq builds requests for "orgs/list"

List all organizations.

  GET /organizations

https://developer.github.com/v3/orgs/#list-all-organizations
*/
type OrgsListReq struct {

	// The integer ID of the last organization that you've seen.
	Since *int64
}

func (r *OrgsListReq) urlPath() string {
	return fmt.Sprintf("/organizations")
}

func (r *OrgsListReq) method() string {
	return "GET"
}

func (r *OrgsListReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", strconv.FormatInt(*r.Since, 10))
	}
	return query
}

func (r *OrgsListReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListResponseBody200 is a response body for orgs/list

API documentation: https://developer.github.com/v3/orgs/#list-all-organizations
*/
type OrgsListResponseBody200 []struct {
	components.OrganizationSimple
}

/*
OrgsListBlockedUsersReq builds requests for "orgs/list-blocked-users"

List blocked users.

  GET /orgs/{org}/blocks

https://developer.github.com/v3/orgs/blocking/#list-blocked-users
*/
type OrgsListBlockedUsersReq struct {
	Org string
}

func (r *OrgsListBlockedUsersReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks", r.Org)
}

func (r *OrgsListBlockedUsersReq) method() string {
	return "GET"
}

func (r *OrgsListBlockedUsersReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsListBlockedUsersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListBlockedUsersReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListBlockedUsersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListBlockedUsersResponseBody200 is a response body for orgs/list-blocked-users

API documentation: https://developer.github.com/v3/orgs/blocking/#list-blocked-users
*/
type OrgsListBlockedUsersResponseBody200 []struct {
	components.SimpleUser
}

/*
OrgsListCredentialAuthorizationsReq builds requests for "orgs/list-credential-authorizations"

List credential authorizations for an organization.

  GET /orgs/{org}/credential-authorizations

https://developer.github.com/v3/orgs/#list-credential-authorizations-for-an-organization
*/
type OrgsListCredentialAuthorizationsReq struct {
	Org string
}

func (r *OrgsListCredentialAuthorizationsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/credential-authorizations", r.Org)
}

func (r *OrgsListCredentialAuthorizationsReq) method() string {
	return "GET"
}

func (r *OrgsListCredentialAuthorizationsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsListCredentialAuthorizationsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListCredentialAuthorizationsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListCredentialAuthorizationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListCredentialAuthorizationsResponseBody200 is a response body for orgs/list-credential-authorizations

API documentation: https://developer.github.com/v3/orgs/#list-credential-authorizations-for-an-organization
*/
type OrgsListCredentialAuthorizationsResponseBody200 []struct {
	components.CredentialAuthorization
}

/*
OrgsListForAuthenticatedUserReq builds requests for "orgs/list-for-authenticated-user"

List your organizations.

  GET /user/orgs

https://developer.github.com/v3/orgs/#list-your-organizations
*/
type OrgsListForAuthenticatedUserReq struct {

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/orgs")
}

func (r *OrgsListForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *OrgsListForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListForAuthenticatedUserResponseBody200 is a response body for orgs/list-for-authenticated-user

API documentation: https://developer.github.com/v3/orgs/#list-your-organizations
*/
type OrgsListForAuthenticatedUserResponseBody200 []struct {
	components.OrganizationSimple
}

/*
OrgsListForUserReq builds requests for "orgs/list-for-user"

List user organizations.

  GET /users/{username}/orgs

https://developer.github.com/v3/orgs/#list-user-organizations
*/
type OrgsListForUserReq struct {
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/orgs", r.Username)
}

func (r *OrgsListForUserReq) method() string {
	return "GET"
}

func (r *OrgsListForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListForUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListForUserResponseBody200 is a response body for orgs/list-for-user

API documentation: https://developer.github.com/v3/orgs/#list-user-organizations
*/
type OrgsListForUserResponseBody200 []struct {
	components.OrganizationSimple
}

/*
OrgsListHooksReq builds requests for "orgs/list-hooks"

List hooks.

  GET /orgs/{org}/hooks

https://developer.github.com/v3/orgs/hooks/#list-hooks
*/
type OrgsListHooksReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListHooksReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks", r.Org)
}

func (r *OrgsListHooksReq) method() string {
	return "GET"
}

func (r *OrgsListHooksReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListHooksReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListHooksReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListHooksReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListHooksResponseBody200 is a response body for orgs/list-hooks

API documentation: https://developer.github.com/v3/orgs/hooks/#list-hooks
*/
type OrgsListHooksResponseBody200 []struct {
	components.OrgHook
}

/*
OrgsListInstallationsReq builds requests for "orgs/list-installations"

List installations for an organization.

  GET /orgs/{org}/installations

https://developer.github.com/v3/orgs/#list-installations-for-an-organization
*/
type OrgsListInstallationsReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	To access the API with your GitHub App, you must set this to true for your
	requests.
	*/
	MachineManPreview bool
}

func (r *OrgsListInstallationsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/installations", r.Org)
}

func (r *OrgsListInstallationsReq) method() string {
	return "GET"
}

func (r *OrgsListInstallationsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListInstallationsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"machine-man": r.MachineManPreview}
	if requiredPreviews {
		previewVals["machine-man"] = true
	}
	if allPreviews {
		previewVals["machine-man"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListInstallationsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListInstallationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListInstallationsResponseBody200 is a response body for orgs/list-installations

API documentation: https://developer.github.com/v3/orgs/#list-installations-for-an-organization
*/
type OrgsListInstallationsResponseBody200 struct {
	Installations []struct {
		components.Installation3
	} `json:"installations,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
OrgsListInvitationTeamsReq builds requests for "orgs/list-invitation-teams"

List organization invitation teams.

  GET /orgs/{org}/invitations/{invitation_id}/teams

https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
type OrgsListInvitationTeamsReq struct {
	Org          string
	InvitationId int64

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListInvitationTeamsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/invitations/%v/teams", r.Org, r.InvitationId)
}

func (r *OrgsListInvitationTeamsReq) method() string {
	return "GET"
}

func (r *OrgsListInvitationTeamsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListInvitationTeamsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListInvitationTeamsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListInvitationTeamsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListInvitationTeamsResponseBody200 is a response body for orgs/list-invitation-teams

API documentation: https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams
*/
type OrgsListInvitationTeamsResponseBody200 []struct {
	components.Team
}

/*
OrgsListMembersReq builds requests for "orgs/list-members"

Members list.

  GET /orgs/{org}/members

https://developer.github.com/v3/orgs/members/#members-list
*/
type OrgsListMembersReq struct {
	Org string

	/*
	Filter members returned in the list. Can be one of:
	\* `2fa_disabled` - Members without [two-factor
	authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
	Available for organization owners.
	\* `all` - All members the authenticated user can see.
	*/
	Filter *string

	/*
	Filter members returned by their role. Can be one of:
	\* `all` - All members of the organization, regardless of role.
	\* `admin` - Organization owners.
	\* `member` - Non-owner organization members.
	*/
	Role *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListMembersReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/members", r.Org)
}

func (r *OrgsListMembersReq) method() string {
	return "GET"
}

func (r *OrgsListMembersReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.Role != nil {
		query.Set("role", *r.Role)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListMembersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListMembersReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListMembersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListMembersResponseBody200 is a response body for orgs/list-members

API documentation: https://developer.github.com/v3/orgs/members/#members-list
*/
type OrgsListMembersResponseBody200 []struct {
	components.SimpleUser
}

/*
OrgsListMembershipsReq builds requests for "orgs/list-memberships"

List your organization memberships.

  GET /user/memberships/orgs

https://developer.github.com/v3/orgs/members/#list-your-organization-memberships
*/
type OrgsListMembershipsReq struct {

	/*
	Indicates the state of the memberships to return. Can be either `active` or
	`pending`. If not specified, the API returns both active and pending
	memberships.
	*/
	State *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListMembershipsReq) urlPath() string {
	return fmt.Sprintf("/user/memberships/orgs")
}

func (r *OrgsListMembershipsReq) method() string {
	return "GET"
}

func (r *OrgsListMembershipsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.State != nil {
		query.Set("state", *r.State)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListMembershipsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListMembershipsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListMembershipsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListMembershipsResponseBody200 is a response body for orgs/list-memberships

API documentation: https://developer.github.com/v3/orgs/members/#list-your-organization-memberships
*/
type OrgsListMembershipsResponseBody200 []struct {
	components.OrgMembership
}

/*
OrgsListOutsideCollaboratorsReq builds requests for "orgs/list-outside-collaborators"

List outside collaborators.

  GET /orgs/{org}/outside_collaborators

https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators
*/
type OrgsListOutsideCollaboratorsReq struct {
	Org string

	/*
	Filter the list of outside collaborators. Can be one of:
	\* `2fa_disabled`: Outside collaborators without [two-factor
	authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
	\* `all`: All outside collaborators.
	*/
	Filter *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListOutsideCollaboratorsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/outside_collaborators", r.Org)
}

func (r *OrgsListOutsideCollaboratorsReq) method() string {
	return "GET"
}

func (r *OrgsListOutsideCollaboratorsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListOutsideCollaboratorsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListOutsideCollaboratorsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListOutsideCollaboratorsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListOutsideCollaboratorsResponseBody200 is a response body for orgs/list-outside-collaborators

API documentation: https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators
*/
type OrgsListOutsideCollaboratorsResponseBody200 []struct {
	components.SimpleUser
}

/*
OrgsListPendingInvitationsReq builds requests for "orgs/list-pending-invitations"

List pending organization invitations.

  GET /orgs/{org}/invitations

https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
type OrgsListPendingInvitationsReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListPendingInvitationsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/invitations", r.Org)
}

func (r *OrgsListPendingInvitationsReq) method() string {
	return "GET"
}

func (r *OrgsListPendingInvitationsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListPendingInvitationsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListPendingInvitationsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListPendingInvitationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListPendingInvitationsResponseBody200 is a response body for orgs/list-pending-invitations

API documentation: https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations
*/
type OrgsListPendingInvitationsResponseBody200 []struct {
	components.OrganizationInvitation
}

/*
OrgsListPublicMembersReq builds requests for "orgs/list-public-members"

Public members list.

  GET /orgs/{org}/public_members

https://developer.github.com/v3/orgs/members/#public-members-list
*/
type OrgsListPublicMembersReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *OrgsListPublicMembersReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members", r.Org)
}

func (r *OrgsListPublicMembersReq) method() string {
	return "GET"
}

func (r *OrgsListPublicMembersReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *OrgsListPublicMembersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsListPublicMembersReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsListPublicMembersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsListPublicMembersResponseBody200 is a response body for orgs/list-public-members

API documentation: https://developer.github.com/v3/orgs/members/#public-members-list
*/
type OrgsListPublicMembersResponseBody200 []struct {
	components.SimpleUser
}

/*
OrgsPingHookReq builds requests for "orgs/ping-hook"

Ping a hook.

  POST /orgs/{org}/hooks/{hook_id}/pings

https://developer.github.com/v3/orgs/hooks/#ping-a-hook
*/
type OrgsPingHookReq struct {
	Org    string
	HookId int64
}

func (r *OrgsPingHookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v/pings", r.Org, r.HookId)
}

func (r *OrgsPingHookReq) method() string {
	return "POST"
}

func (r *OrgsPingHookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsPingHookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsPingHookReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsPingHookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsPublicizeMembershipReq builds requests for "orgs/publicize-membership"

Publicize a user's membership.

  PUT /orgs/{org}/public_members/{username}

https://developer.github.com/v3/orgs/members/#publicize-a-users-membership
*/
type OrgsPublicizeMembershipReq struct {
	Org      string
	Username string
}

func (r *OrgsPublicizeMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/public_members/%v", r.Org, r.Username)
}

func (r *OrgsPublicizeMembershipReq) method() string {
	return "PUT"
}

func (r *OrgsPublicizeMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsPublicizeMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsPublicizeMembershipReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsPublicizeMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsRemoveCredentialAuthorizationReq builds requests for "orgs/remove-credential-authorization"

Remove a credential authorization for an organization.

  DELETE /orgs/{org}/credential-authorizations/{credential_id}

https://developer.github.com/v3/orgs/#remove-a-credential-authorization-for-an-organization
*/
type OrgsRemoveCredentialAuthorizationReq struct {
	Org          string
	CredentialId int64
}

func (r *OrgsRemoveCredentialAuthorizationReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/credential-authorizations/%v", r.Org, r.CredentialId)
}

func (r *OrgsRemoveCredentialAuthorizationReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveCredentialAuthorizationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveCredentialAuthorizationReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveCredentialAuthorizationReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsRemoveCredentialAuthorizationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsRemoveMemberReq builds requests for "orgs/remove-member"

Remove a member.

  DELETE /orgs/{org}/members/{username}

https://developer.github.com/v3/orgs/members/#remove-a-member
*/
type OrgsRemoveMemberReq struct {
	Org      string
	Username string
}

func (r *OrgsRemoveMemberReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/members/%v", r.Org, r.Username)
}

func (r *OrgsRemoveMemberReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveMemberReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveMemberReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveMemberReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsRemoveMemberReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsRemoveMembershipReq builds requests for "orgs/remove-membership"

Remove organization membership.

  DELETE /orgs/{org}/memberships/{username}

https://developer.github.com/v3/orgs/members/#remove-organization-membership
*/
type OrgsRemoveMembershipReq struct {
	Org      string
	Username string
}

func (r *OrgsRemoveMembershipReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/memberships/%v", r.Org, r.Username)
}

func (r *OrgsRemoveMembershipReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveMembershipReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsRemoveMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsRemoveOutsideCollaboratorReq builds requests for "orgs/remove-outside-collaborator"

Remove outside collaborator.

  DELETE /orgs/{org}/outside_collaborators/{username}

https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator
*/
type OrgsRemoveOutsideCollaboratorReq struct {
	Org      string
	Username string
}

func (r *OrgsRemoveOutsideCollaboratorReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/outside_collaborators/%v", r.Org, r.Username)
}

func (r *OrgsRemoveOutsideCollaboratorReq) method() string {
	return "DELETE"
}

func (r *OrgsRemoveOutsideCollaboratorReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsRemoveOutsideCollaboratorReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsRemoveOutsideCollaboratorReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsRemoveOutsideCollaboratorReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsUnblockUserReq builds requests for "orgs/unblock-user"

Unblock a user.

  DELETE /orgs/{org}/blocks/{username}

https://developer.github.com/v3/orgs/blocking/#unblock-a-user
*/
type OrgsUnblockUserReq struct {
	Org      string
	Username string
}

func (r *OrgsUnblockUserReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/blocks/%v", r.Org, r.Username)
}

func (r *OrgsUnblockUserReq) method() string {
	return "DELETE"
}

func (r *OrgsUnblockUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUnblockUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUnblockUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *OrgsUnblockUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsUpdateReq builds requests for "orgs/update"

Edit an organization.

  PATCH /orgs/{org}

https://developer.github.com/v3/orgs/#edit-an-organization
*/
type OrgsUpdateReq struct {
	Org         string
	RequestBody OrgsUpdateReqBody

	/*
	New repository creation permissions are available to preview. You can now use
	`members_can_create_public_repositories`,
	`members_can_create_private_repositories`, and
	`members_can_create_internal_repositories`. You can only allow members to create
	internal repositories if your organization is associated with an enterprise
	account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These
	parameters provide more granular permissions to configure the type of
	repositories organization members can create.

	To access these new parameters during the preview period, you must set this to
	true.
	*/
	SurturPreview bool
}

func (r *OrgsUpdateReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v", r.Org)
}

func (r *OrgsUpdateReq) method() string {
	return "PATCH"
}

func (r *OrgsUpdateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUpdateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"surtur": r.SurturPreview}
	if allPreviews {
		previewVals["surtur"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUpdateReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *OrgsUpdateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsUpdateReqBody is a request body for orgs/update

API documentation: https://developer.github.com/v3/orgs/#edit-an-organization
*/
type OrgsUpdateReqBody struct {

	// Billing email address. This address is not publicized.
	BillingEmail *string `json:"billing_email,omitempty"`

	// The company name.
	Company *string `json:"company,omitempty"`

	/*
	   Default permission level members have for organization repositories:
	   \* `read` - can pull, but not push to or administer this repository.
	   \* `write` - can pull and push, but not administer this repository.
	   \* `admin` - can pull, push, and administer this repository.
	   \* `none` - no permissions granted by default.
	*/
	DefaultRepositoryPermission *string `json:"default_repository_permission,omitempty"`

	// The description of the company.
	Description *string `json:"description,omitempty"`

	// The publicly visible email address.
	Email *string `json:"email,omitempty"`

	// Toggles whether an organization can use organization projects.
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`

	/*
	   Toggles whether repositories that belong to the organization can use repository
	   projects.
	*/
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`

	// The location.
	Location *string `json:"location,omitempty"`

	/*
	   Specifies which types of repositories non-admin organization members can create.
	   Can be one of:
	   \* `all` - all organization members can create public and private repositories.
	   \* `private` - members can create private repositories. This option is only
	   available to repositories that are part of an organization on GitHub Enterprise
	   Cloud.
	   \* `none` - only admin members can create repositories.
	   **Note:** This parameter is deprecated and will be removed in the future. Its
	   return value ignores internal repositories. Using this parameter overrides
	   values set in `members_can_create_repositories`. See [this
	   note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for
	   details.
	*/
	MembersAllowedRepositoryCreationType *string `json:"members_allowed_repository_creation_type,omitempty"`

	/*
	   Toggles whether organization members can create internal repositories, which are
	   visible to all enterprise members. You can only allow members to create internal
	   repositories if your organization is associated with an enterprise account using
	   GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
	   \* `true` - all organization members can create internal repositories.
	   \* `false` - only organization owners can create internal repositories.
	   Default: `true`. For more information, see "[Restricting repository creation in
	   your
	   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
	   in the GitHub Help documentation.
	*/
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`

	/*
	   Toggles whether organization members can create private repositories, which are
	   visible to organization members with permission. Can be one of:
	   \* `true` - all organization members can create private repositories.
	   \* `false` - only organization owners can create private repositories.
	   Default: `true`. For more information, see "[Restricting repository creation in
	   your
	   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
	   in the GitHub Help documentation.
	*/
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`

	/*
	   Toggles whether organization members can create public repositories, which are
	   visible to anyone. Can be one of:
	   \* `true` - all organization members can create public repositories.
	   \* `false` - only organization owners can create public repositories.
	   Default: `true`. For more information, see "[Restricting repository creation in
	   your
	   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)"
	   in the GitHub Help documentation.
	*/
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`

	/*
	   Toggles the ability of non-admin organization members to create repositories.
	   Can be one of:
	   \* `true` - all organization members can create repositories.
	   \* `false` - only organization owners can create repositories.
	   Default: `true`
	   **Note:** A parameter can override this parameter. See
	   `members_allowed_repository_creation_type` in this table for details. **Note:**
	   A parameter can override this parameter. See
	   `members_allowed_repository_creation_type` in this table for details.
	*/
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`

	// The shorthand name of the company.
	Name *string `json:"name,omitempty"`
}

/*
OrgsUpdateResponseBody200 is a response body for orgs/update

API documentation: https://developer.github.com/v3/orgs/#edit-an-organization
*/
type OrgsUpdateResponseBody200 struct {
	components.OrganizationFull
}

/*
OrgsUpdateHookReq builds requests for "orgs/update-hook"

Edit a hook.

  PATCH /orgs/{org}/hooks/{hook_id}

https://developer.github.com/v3/orgs/hooks/#edit-a-hook
*/
type OrgsUpdateHookReq struct {
	Org         string
	HookId      int64
	RequestBody OrgsUpdateHookReqBody
}

func (r *OrgsUpdateHookReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/hooks/%v", r.Org, r.HookId)
}

func (r *OrgsUpdateHookReq) method() string {
	return "PATCH"
}

func (r *OrgsUpdateHookReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUpdateHookReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUpdateHookReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *OrgsUpdateHookReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

// OrgsUpdateHookReqBodyConfig is a value for OrgsUpdateHookReqBody's Config field
type OrgsUpdateHookReqBodyConfig struct {

	/*
	   The media type used to serialize the payloads. Supported values include `json`
	   and `form`. The default is `form`.
	*/
	ContentType *string `json:"content_type,omitempty"`

	/*
	   Determines whether the SSL certificate of the host for `url` will be verified
	   when delivering payloads. Supported values include `0` (verification is
	   performed) and `1` (verification is not performed). The default is `0`. **We
	   strongly recommend not setting this to `1` as you are subject to
	   man-in-the-middle and other attacks.**
	*/
	InsecureSsl *string `json:"insecure_ssl,omitempty"`

	/*
	   If provided, the `secret` will be used as the `key` to generate the HMAC hex
	   digest value in the
	   [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers)
	   header.
	*/
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	Url *string `json:"url"`
}

/*
OrgsUpdateHookReqBody is a request body for orgs/update-hook

API documentation: https://developer.github.com/v3/orgs/hooks/#edit-a-hook
*/
type OrgsUpdateHookReqBody struct {

	/*
	   Determines if notifications are sent when the webhook is triggered. Set to
	   `true` to send notifications.
	*/
	Active *bool `json:"active,omitempty"`

	/*
	   Key/value pairs to provide settings for this webhook. [These are defined
	   below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).
	*/
	Config *OrgsUpdateHookReqBodyConfig `json:"config,omitempty"`

	/*
	   Determines what [events](https://developer.github.com/webhooks/event-payloads)
	   the hook is triggered for.
	*/
	Events []string `json:"events,omitempty"`
}

/*
OrgsUpdateHookResponseBody200 is a response body for orgs/update-hook

API documentation: https://developer.github.com/v3/orgs/hooks/#edit-a-hook
*/
type OrgsUpdateHookResponseBody200 struct {
	components.OrgHook
}

/*
OrgsUpdateMembershipReq builds requests for "orgs/update-membership"

Edit your organization membership.

  PATCH /user/memberships/orgs/{org}

https://developer.github.com/v3/orgs/members/#edit-your-organization-membership
*/
type OrgsUpdateMembershipReq struct {
	Org         string
	RequestBody OrgsUpdateMembershipReqBody
}

func (r *OrgsUpdateMembershipReq) urlPath() string {
	return fmt.Sprintf("/user/memberships/orgs/%v", r.Org)
}

func (r *OrgsUpdateMembershipReq) method() string {
	return "PATCH"
}

func (r *OrgsUpdateMembershipReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *OrgsUpdateMembershipReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *OrgsUpdateMembershipReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *OrgsUpdateMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
OrgsUpdateMembershipReqBody is a request body for orgs/update-membership

API documentation: https://developer.github.com/v3/orgs/members/#edit-your-organization-membership
*/
type OrgsUpdateMembershipReqBody struct {

	// The state that the membership should be in. Only `"active"` will be accepted.
	State *string `json:"state"`
}

/*
OrgsUpdateMembershipResponseBody200 is a response body for orgs/update-membership

API documentation: https://developer.github.com/v3/orgs/members/#edit-your-organization-membership
*/
type OrgsUpdateMembershipResponseBody200 struct {
	components.OrgMembership
}
