{
  "openapi": "3.0.1",
  "info": {
    "version": "9.0.0",
    "title": "GitHub v3 REST API",
    "description": "# Introduction\n\nThis describes the resources that make up the official GitHub REST API v3. If you have any problems or requests, please contact [GitHub Support](https://github.com/contact).",
    "license": {
      "name": "MIT"
    },
    "termsOfService": "https://help.github.com/articles/github-terms-of-service/",
    "contact": {
      "name": "Support",
      "email": "support@github.com"
    }
  },
  "servers": [
    {
      "url": "https://api.github.com"
    }
  ],
  "externalDocs": {
    "description": "GitHub v3 REST API",
    "url": "https://developer.github.com/v3/"
  },
  "paths": {
    "/app": {
      "get": {
        "summary": "Get the authenticated app",
        "description": "Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the \"[List installations for the authenticated app](https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app)\" endpoint.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-authenticated",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installed_integration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installed_integration"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/app"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /app', {\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.authenticated()"
          }
        ]
      }
    },
    "/app-manifests/{code}/conversions": {
      "post": {
        "summary": "Create a GitHub App from a manifest",
        "description": "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.",
        "operationId": "apps/create-from-manifest",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#create-a-github-app-from-a-manifest"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/code"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration-from-manifest"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/integration-from-manifest"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/app-manifests/CODE/conversions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /app-manifests/{code}/conversions', {\n  code: 'code'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_from_manifest(\n  'code'\n)"
          }
        ]
      }
    },
    "/app/installations": {
      "get": {
        "summary": "List installations for the authenticated app",
        "description": "You must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.",
        "operationId": "apps/list-installations",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#list-installations-for-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "The permissions the installation has are included under the `permissions` key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/base-installation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-installation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/app/installations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /app/installations', {\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.installations_for_authenticated()"
          }
        ]
      }
    },
    "/app/installations/{installation_id}": {
      "get": {
        "summary": "Get an installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-an-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/installation_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/base-installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-installation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/app/installations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /app/installations/{installation_id}', {\n  installation_id: 42,\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.installation_for_authenticated(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an installation for the authenticated app",
        "description": "Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"[Suspend an app installation](https://developer.github.com/v3/apps/#suspend-an-app-installation)\" endpoint.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/delete-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#delete-an-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/installation_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/app/installations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /app/installations/{installation_id}', {\n  installation_id: 42,\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_installation_for_authenticated(\n  42\n)"
          }
        ]
      }
    },
    "/app/installations/{installation_id}/access_tokens": {
      "post": {
        "summary": "Create an installation access token for an app",
        "description": "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/create-installation-access-token",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/installation_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation-token"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repository_ids": {
                    "type": "array",
                    "description": "The `id`s of the repositories that the installation token can access. Providing repository `id`s restricts the access of an installation token to specific repositories. You can use the \"[List repositories accessible to the app installation](https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-app-installation)\" endpoint to get the `id` of all repositories that an installation can access. For example, you can select specific repositories when creating an installation token to restrict the number of repositories that can be cloned using the token.",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "permissions": {
                    "type": "object",
                    "description": "The permissions granted to the access token. The permissions object includes the permission names and their access type. For a complete list of permissions and allowable values, see \"[GitHub App permissions](https://developer.github.com/apps/building-github-apps/creating-github-apps-using-url-parameters/#github-app-permissions).\"",
                    "properties": {},
                    "additionalProperties": true
                  }
                }
              },
              "example": {
                "repository_ids": [
                  1296269
                ],
                "permissions": {
                  "issues": "write",
                  "contents": "read"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"apps/create-installation-token\" operation ID is now \"apps/create-installation-access-token\"",
            "before": {
              "operationId": "apps/create-installation-token"
            },
            "after": {
              "operationId": "apps/create-installation-access-token"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/app/installations/42/access_tokens \\\n  -d '{\"repository_ids\":[42]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /app/installations/{installation_id}/access_tokens', {\n  installation_id: 42,\n  repository_ids: [\n    42\n  ],\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_installation_access_token(\n  42,\n  [\n    42\n  ]\n)"
          }
        ]
      }
    },
    "/app/installations/{installation_id}/suspended": {
      "put": {
        "summary": "Suspend an app installation",
        "description": "**Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see \"[Suspending a GitHub App installation](https://developer.github.com/apps/managing-github-apps/suspending-a-github-app-installation/).\"\n\nSuspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nTo suspend a GitHub App, you must be an account owner or have admin permissions in the repository or organization where the app is installed.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/suspend-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#suspend-an-app-installation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/installation_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/app/installations/42/suspended"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /app/installations/{installation_id}/suspended', {\n  installation_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.suspend_installation(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unsuspend an app installation",
        "description": "**Note:** Suspending a GitHub App installation is currently in beta and subject to change. Before you can suspend a GitHub App, the app owner must enable suspending installations for the app by opting-in to the beta. For more information, see \"[Suspending a GitHub App installation](https://developer.github.com/apps/managing-github-apps/suspending-a-github-app-installation/).\"\n\nRemoves a GitHub App installation suspension.\n\nTo unsuspend a GitHub App, you must be an account owner or have admin permissions in the repository or organization where the app is installed and suspended.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/unsuspend-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#unsuspend-an-app-installation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/installation_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/app/installations/42/suspended"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /app/installations/{installation_id}/suspended', {\n  installation_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unsuspend_installation(\n  42\n)"
          }
        ]
      }
    },
    "/applications/grants": {
      "get": {
        "summary": "List your grants",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nYou can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `[\"repo\", \"user\"]`.",
        "operationId": "oauth-authorizations/list-grants",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#list-your-grants"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/application-grant"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/application-grant-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/grants"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /applications/grants')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.grants()"
          }
        ]
      }
    },
    "/applications/grants/{grant_id}": {
      "get": {
        "summary": "Get a single grant",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/get-grant",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/grant_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/application-grant"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/application-grant"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/grants/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /applications/grants/{grant_id}', {\n  grant_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.grant(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a grant",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
        "operationId": "oauth-authorizations/delete-grant",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#delete-a-grant"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/grant_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/grants/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /applications/grants/{grant_id}', {\n  grant_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_grant(\n  42\n)"
          }
        ]
      }
    },
    "/applications/{client_id}/grant": {
      "delete": {
        "summary": "Delete an app authorization",
        "description": "OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
        "operationId": "apps/delete-authorization",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "The OAuth access token used to authenticate to the GitHub API."
                  }
                }
              },
              "example": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/grant \\\n  -d '{\"access_token\":\"access_token\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /applications/{client_id}/grant', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_authorization(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      }
    },
    "/applications/{client_id}/grants/{access_token}": {
      "delete": {
        "summary": "Revoke a grant for an application",
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.\n\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under \"Authorized OAuth Apps\" on GitHub](https://github.com/settings/applications#authorized).",
        "operationId": "apps/revoke-grant-for-application",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2021-05-05",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-11-05",
            "note": "\"Revoke a grant for an application\" has been moved from \"OAuth Authorizations\" to \"Apps\"",
            "before": {
              "operationId": "oauth-authorizations/revoke-grant-for-application"
            },
            "after": {
              "operationId": "apps/revoke-grant-for-application"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/grants/ACCESS_TOKEN"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /applications/{client_id}/grants/{access_token}', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.revoke_grant_for_application(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      }
    },
    "/applications/{client_id}/token": {
      "post": {
        "summary": "Check a token",
        "description": "OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/check-token",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#check-a-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization-with-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "The OAuth access token used to authenticate to the GitHub API."
                  }
                }
              },
              "example": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/token \\\n  -d '{\"access_token\":\"access_token\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /applications/{client_id}/token', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_token(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Reset a token",
        "description": "OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/reset-token",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#reset-a-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization-with-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "The OAuth access token used to authenticate to the GitHub API."
                  }
                }
              },
              "example": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/token \\\n  -d '{\"access_token\":\"access_token\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /applications/{client_id}/token', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.reset_token(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an app token",
        "description": "OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.",
        "operationId": "apps/delete-token",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "The OAuth access token used to authenticate to the GitHub API."
                  }
                }
              },
              "example": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/token \\\n  -d '{\"access_token\":\"access_token\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /applications/{client_id}/token', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_token(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      }
    },
    "/applications/{client_id}/tokens/{access_token}": {
      "get": {
        "summary": "Check an authorization",
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/check-authorization",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization-with-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2021-05-05",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-11-05",
            "note": "\"Check an authorization\" has been moved from \"OAuth Authorizations\" to \"Apps\"",
            "before": {
              "operationId": "oauth-authorizations/check-authorization"
            },
            "after": {
              "operationId": "apps/check-authorization"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/tokens/ACCESS_TOKEN"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /applications/{client_id}/tokens/{access_token}', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_authorization(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      },
      "post": {
        "summary": "Reset an authorization",
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.",
        "operationId": "apps/reset-authorization",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization-with-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-with-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2021-05-05",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-11-05",
            "note": "\"Reset an authorization\" has been moved from \"OAuth Authorizations\" to \"Apps\"",
            "before": {
              "operationId": "oauth-authorizations/reset-authorization"
            },
            "after": {
              "operationId": "apps/reset-authorization"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/tokens/ACCESS_TOKEN"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /applications/{client_id}/tokens/{access_token}', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.reset_authorization(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Revoke an authorization for an application",
        "description": "**Deprecation Notice:** GitHub will replace and discontinue OAuth endpoints containing `access_token` in the path parameter. We are introducing new endpoints that allow you to securely manage tokens for OAuth Apps by using `access_token` as an input parameter. The OAuth Application API will be removed on May 5, 2021. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).\n\nOAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.",
        "operationId": "apps/revoke-authorization-for-application",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          },
          {
            "$ref": "#/components/parameters/access_token"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2021-05-05",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-11-05",
            "note": "\"Revoke an authorization for an application\" has been moved from \"OAuth Authorizations\" to \"Apps\"",
            "before": {
              "operationId": "oauth-authorizations/revoke-authorization-for-application"
            },
            "after": {
              "operationId": "apps/revoke-authorization-for-application"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/applications/CLIENT_ID/tokens/ACCESS_TOKEN"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /applications/{client_id}/tokens/{access_token}', {\n  client_id: 'client_id',\n  access_token: 'access_token'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.revoke_authorization_for_application(\n  'client_id',\n  'access_token'\n)"
          }
        ]
      }
    },
    "/apps/{app_slug}": {
      "get": {
        "summary": "Get an app",
        "description": "**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n\nIf the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/get-by-slug",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-an-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/app_slug"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/integration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/integration"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/apps/APP_SLUG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /apps/{app_slug}', {\n  app_slug: 'app_slug',\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'app_slug'\n)"
          }
        ]
      }
    },
    "/authorizations": {
      "get": {
        "summary": "List your authorizations",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/list-authorizations",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/authorization"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /authorizations')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.authorizations()"
          }
        ]
      },
      "post": {
        "summary": "Create a new authorization",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nCreates OAuth tokens using [Basic Authentication](https://developer.github.com/v3/auth#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"\n\nTo create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.\n\nYou can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).\n\nOrganizations that enforce SAML SSO require personal access tokens to be whitelisted. Read more about whitelisting tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).",
        "operationId": "oauth-authorizations/create-authorization",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "description": "A list of scopes that this authorization is in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "note": {
                    "type": "string",
                    "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note."
                  },
                  "note_url": {
                    "type": "string",
                    "description": "A URL to remind you what app the OAuth token is for."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The 20 character OAuth app client key for which to create the token."
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The 40 character OAuth app client secret for which to create the token."
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "A unique string to distinguish an authorization from others created for the same client ID and user."
                  }
                },
                "required": [
                  "note"
                ]
              },
              "example": {
                "scopes": [
                  "public_repo"
                ],
                "note": "admin script"
              }
            }
          }
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations \\\n  -d '{\"note\":\"note\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /authorizations', {\n  note: 'note'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_authorization(\n  'note'\n)"
          }
        ]
      }
    },
    "/authorizations/clients/{client_id}": {
      "put": {
        "summary": "Get-or-create an authorization for a specific app",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nCreates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"\n\n**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/get-or-create-authorization-for-app",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if returning an existing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "response-if-returning-an-existing-token": {
                    "$ref": "#/components/examples/authorization-response-if-returning-an-existing-token-2"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_secret": {
                    "type": "string",
                    "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL."
                  },
                  "scopes": {
                    "type": "array",
                    "description": "A list of scopes that this authorization is in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "note": {
                    "type": "string",
                    "description": "A note to remind you what the OAuth token is for."
                  },
                  "note_url": {
                    "type": "string",
                    "description": "A URL to remind you what app the OAuth token is for."
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "A unique string to distinguish an authorization from others created for the same client and user. If provided, this API is functionally equivalent to [Get-or-create an authorization for a specific app and fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint)."
                  }
                },
                "required": [
                  "client_secret"
                ]
              },
              "example": {
                "client_secret": "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
                "scopes": [
                  "public_repo"
                ],
                "note": "admin script"
              }
            }
          }
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations/clients/CLIENT_ID \\\n  -d '{\"client_secret\":\"client_secret\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /authorizations/clients/{client_id}', {\n  client_id: 'client_id',\n  client_secret: 'client_secret'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.or_create_authorization_for_app(\n  'client_id',\n  'client_secret'\n)"
          }
        ]
      }
    },
    "/authorizations/clients/{client_id}/{fingerprint}": {
      "put": {
        "summary": "Get-or-create an authorization for a specific app and fingerprint",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\n**Warning:** Apps must use the [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).\n\nThis method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"",
        "operationId": "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/client_id"
          },
          {
            "$ref": "#/components/parameters/fingerprint"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if returning an existing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "response-if-returning-an-existing-token": {
                    "$ref": "#/components/examples/authorization-response-if-returning-an-existing-token"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Response if returning a new token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-3"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/authorizations/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_secret": {
                    "type": "string",
                    "description": "The 40 character OAuth app client secret associated with the client ID specified in the URL."
                  },
                  "scopes": {
                    "type": "array",
                    "description": "A list of scopes that this authorization is in.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "note": {
                    "type": "string",
                    "description": "A note to remind you what the OAuth token is for."
                  },
                  "note_url": {
                    "type": "string",
                    "description": "A URL to remind you what app the OAuth token is for."
                  }
                },
                "required": [
                  "client_secret"
                ]
              },
              "example": {
                "client_secret": "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd",
                "scopes": [
                  "public_repo"
                ],
                "note": "admin script"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2018-12-27",
            "note": "`idName` changed for \"Get-or-create an authorization for a specific app and fingerprint\". It now includes `-and-`",
            "before": {
              "operationId": "oauth-authorizations/get-or-create-authorization-for-app-fingerprint"
            },
            "after": {
              "operationId": "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations/clients/CLIENT_ID/FINGERPRINT \\\n  -d '{\"client_secret\":\"client_secret\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /authorizations/clients/{client_id}/{fingerprint}', {\n  client_id: 'client_id',\n  fingerprint: 'fingerprint',\n  client_secret: 'client_secret'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.or_create_authorization_for_app_and_fingerprint(\n  'client_id',\n  'fingerprint',\n  'client_secret'\n)"
          }
        ]
      }
    },
    "/authorizations/{authorization_id}": {
      "get": {
        "summary": "Get a single authorization",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/get-authorization",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /authorizations/{authorization_id}', {\n  authorization_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.authorization(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an existing authorization",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).\n\nIf you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"[Working with two-factor authentication](https://developer.github.com/v3/auth/#working-with-two-factor-authentication).\"\n\nYou can only send one of these scope keys at a time.",
        "operationId": "oauth-authorizations/update-authorization",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authorization-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scopes": {
                    "type": "array",
                    "description": "Replaces the authorization scopes with these.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "add_scopes": {
                    "type": "array",
                    "description": "A list of scopes to add to this authorization.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remove_scopes": {
                    "type": "array",
                    "description": "A list of scopes to remove from this authorization.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "note": {
                    "type": "string",
                    "description": "A note to remind you what the OAuth token is for. Tokens not associated with a specific OAuth application (i.e. personal access tokens) must have a unique note."
                  },
                  "note_url": {
                    "type": "string",
                    "description": "A URL to remind you what app the OAuth token is for."
                  },
                  "fingerprint": {
                    "type": "string",
                    "description": "A unique string to distinguish an authorization from others created for the same client ID and user."
                  }
                }
              },
              "example": {
                "add_scopes": [
                  "repo"
                ],
                "note": "admin script"
              }
            }
          }
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations/42 \\\n  -d '{\"scopes\":[\"scopes\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /authorizations/{authorization_id}', {\n  authorization_id: 42,\n  scopes: [\n    'scopes'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_authorization(\n  42,\n  [\n    'scopes'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an authorization",
        "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
        "operationId": "oauth-authorizations/delete-authorization",
        "tags": [
          "oauth-authorizations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/authorization_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-14",
          "removalDate": "2020-11-13",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/authorizations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /authorizations/{authorization_id}', {\n  authorization_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_authorization(\n  42\n)"
          }
        ]
      }
    },
    "/codes_of_conduct": {
      "get": {
        "summary": "Get all codes of conduct",
        "description": "",
        "operationId": "codes-of-conduct/get-all-codes-of-conduct",
        "tags": [
          "codes-of-conduct"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.scarlet-witch-preview+json"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-of-conduct-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-of-conduct-simple-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"codes-of-conduct/list-conduct-codes\" operation ID is now \"codes-of-conduct/get-all-codes-of-conduct\"",
            "before": {
              "operationId": "codes-of-conduct/list-conduct-codes"
            },
            "after": {
              "operationId": "codes-of-conduct/get-all-codes-of-conduct"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.scarlet-witch-preview+json\" \\\n  https://api.github.com/codes_of_conduct"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /codes_of_conduct', {\n  mediaType: {\n    previews: [\n      'scarlet-witch'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.conduct_codes()"
          }
        ]
      }
    },
    "/codes_of_conduct/{key}": {
      "get": {
        "summary": "Get a code of conduct",
        "description": "",
        "operationId": "codes-of-conduct/get-conduct-code",
        "tags": [
          "codes-of-conduct"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.scarlet-witch-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/key"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/code-of-conduct"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-of-conduct"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.scarlet-witch-preview+json\" \\\n  https://api.github.com/codes_of_conduct/KEY"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /codes_of_conduct/{key}', {\n  key: 'key',\n  mediaType: {\n    previews: [\n      'scarlet-witch'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.conduct_code(\n  'key'\n)"
          }
        ]
      }
    },
    "/content_references/{content_reference_id}/attachments": {
      "post": {
        "summary": "Create a content attachment",
        "description": "Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://developer.github.com/webhooks/event-payloads/#content_reference) to create an attachment.\n\nThe app must create a content attachment within six hours of the content reference URL being posted. See \"[Using content attachments](https://developer.github.com/apps/using-content-attachments/)\" for details about content attachments.\n\nYou must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/create-content-attachment",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#create-a-content-attachment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.corsair-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/content_reference_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content-reference-attachment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/content-reference-attachment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "corsair",
              "note": "To access the Content Attachments API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.corsair-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the content attachment displayed in the body or comment of an issue or pull request."
                  },
                  "body": {
                    "type": "string",
                    "description": "The body text of the content attachment displayed in the body or comment of an issue or pull request. This parameter supports markdown."
                  }
                },
                "required": [
                  "title",
                  "body"
                ]
              },
              "example": {
                "title": "[A-1234] Error found in core/models.py file",
                "body": "You have used an email that already exists for the user_email_uniq field.\n ## DETAILS:\n\nThe (email)=(Octocat@github.com) already exists.\n\n The error was found in core/models.py in get_or_create_user at line 62.\n\nself.save()"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.corsair-preview+json\" \\\n  https://api.github.com/content_references/42/attachments \\\n  -d '{\"title\":\"title\",\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /content_references/{content_reference_id}/attachments', {\n  content_reference_id: 42,\n  title: 'title',\n  body: 'body',\n  mediaType: {\n    previews: [\n      'corsair'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_content_attachment(\n  42,\n  'title',\n  'body'\n)"
          }
        ]
      }
    },
    "/emojis": {
      "get": {
        "summary": "Get emojis",
        "description": "Lists all the emojis available to use on GitHub.",
        "operationId": "emojis/get",
        "tags": [
          "emojis"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/emojis/#get-emojis"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/emojis"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /emojis')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get()"
          }
        ]
      }
    },
    "/enterprises/{enterprise_id}/settings/billing/actions": {
      "get": {
        "summary": "Get GitHub Actions billing for an enterprise",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nThe authenticated user must be an enterprise admin.",
        "operationId": "billing/get-github-actions-billing-ghe",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/enterprise_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/enterprises/42/settings/billing/actions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /enterprises/{enterprise_id}/settings/billing/actions', {\n  enterprise_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.actions_for_enterprise(\n  42\n)"
          }
        ]
      }
    },
    "/enterprises/{enterprise_id}/settings/billing/packages": {
      "get": {
        "summary": "Get GitHub Packages billing for an enterprise",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nThe authenticated user must be an enterprise admin.",
        "operationId": "billing/get-github-packages-billing-ghe",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/enterprise_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/packages-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/packages-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/enterprises/42/settings/billing/packages"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /enterprises/{enterprise_id}/settings/billing/packages', {\n  enterprise_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.packages_for_enterprise(\n  42\n)"
          }
        ]
      }
    },
    "/enterprises/{enterprise_id}/settings/billing/shared-storage": {
      "get": {
        "summary": "Get shared storage billing for an enterprise",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nThe authenticated user must be an enterprise admin.",
        "operationId": "billing/get-shared-storage-billing-ghe",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/enterprise_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/combined-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/combined-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/enterprises/42/settings/billing/shared-storage"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /enterprises/{enterprise_id}/settings/billing/shared-storage', {\n  enterprise_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.shared_storage_for_enterprise(\n  42\n)"
          }
        ]
      }
    },
    "/events": {
      "get": {
        "summary": "List public events",
        "description": "We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.",
        "operationId": "activity/list-public-events",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /events')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_events()"
          }
        ]
      }
    },
    "/feeds": {
      "get": {
        "summary": "Get feeds",
        "description": "GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://developer.github.com/v3/#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://developer.github.com/v3/#basic-authentication) since current feed URIs use the older, non revocable auth tokens.",
        "operationId": "activity/get-feeds",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/feeds/#get-feeds"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feed"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/feed"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/list-feeds\" operation ID is now \"activity/get-feeds\"",
            "before": {
              "operationId": "activity/list-feeds"
            },
            "after": {
              "operationId": "activity/get-feeds"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/feeds"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /feeds')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.feeds()"
          }
        ]
      }
    },
    "/gists": {
      "get": {
        "summary": "List gists for the authenticated user",
        "description": "Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:",
        "operationId": "gists/list",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "since",
            "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/base-gist"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-gist-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.list()"
          }
        ]
      },
      "post": {
        "summary": "Create a gist",
        "description": "Allows you to add a new gist with one or more files.\n\n**Note:** Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.",
        "operationId": "gists/create",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#create-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "object",
                    "description": "The filenames and content of each file in the gist. The keys in the `files` object represent the filename and have the type `string`.",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "description": "The content of the file."
                        }
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "A descriptive name for this gist."
                  },
                  "public": {
                    "type": "boolean",
                    "description": "When `true`, the gist will be public and available for anyone to see.",
                    "default": false
                  }
                },
                "required": [
                  "files"
                ]
              },
              "example": {
                "description": "Hello World Examples",
                "public": true,
                "files": {
                  "hello_world.rb": {
                    "content": "class HelloWorld\n   def initialize(name)\n      @name = name.capitalize\n   end\n   def sayHi\n      puts \"Hello !\"\n   end\nend\n\nhello = HelloWorld.new(\"World\")\nhello.sayHi"
                  },
                  "hello_world.py": {
                    "content": "class HelloWorld:\n\n    def __init__(self, name):\n        self.name = name.capitalize()\n       \n    def sayHi(self):\n        print \"Hello \" + self.name + \"!\"\n\nhello = HelloWorld(\"world\")\nhello.sayHi()"
                  },
                  "hello_world_ruby.txt": {
                    "content": "Run `ruby hello_world.rb` to print Hello World"
                  },
                  "hello_world_python.txt": {
                    "content": "Run `python hello_world.py` to print Hello World"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists \\\n  -d '{\"files\":{}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /gists', {\n  files: {}\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create(\n  {}\n)"
          }
        ]
      }
    },
    "/gists/public": {
      "get": {
        "summary": "List public gists",
        "description": "List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://developer.github.com/v3/#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.",
        "operationId": "gists/list-public",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-public-gists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "since",
            "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/base-gist"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-gist-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/public"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/public')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public()"
          }
        ]
      }
    },
    "/gists/starred": {
      "get": {
        "summary": "List starred gists",
        "description": "List the authenticated user's starred gists:",
        "operationId": "gists/list-starred",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-starred-gists"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "since",
            "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/base-gist"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-gist-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/starred"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/starred')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.starred()"
          }
        ]
      }
    },
    "/gists/{gist_id}": {
      "get": {
        "summary": "Get a gist",
        "description": "",
        "operationId": "gists/get",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#get-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'gist_id'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a gist",
        "description": "Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.",
        "operationId": "gists/update",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#update-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A descriptive name for this gist."
                  },
                  "files": {
                    "type": "object",
                    "description": "The filenames and content that make up this gist.",
                    "additionalProperties": {
                      "nullable": true,
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "description": "The updated content of the file."
                        },
                        "filename": {
                          "type": "string",
                          "description": "The new name for this file. To delete a file, set the value of the filename to `null`."
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "description": "Hello World Examples",
                "files": {
                  "hello_world_ruby.txt": {
                    "content": "Run `ruby hello_world.rb` or `python hello_world.py` to print Hello World",
                    "filename": "hello_world.md"
                  },
                  "hello_world_python.txt": null,
                  "new_file.txt": {
                    "content": "This is a new placeholder file."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID \\\n  -d '{\"description\":\"description\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /gists/{gist_id}', {\n  gist_id: 'gist_id',\n  description: 'description'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'gist_id',\n  'description'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a gist",
        "description": "",
        "operationId": "gists/delete",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#delete-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /gists/{gist_id}', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete(\n  'gist_id'\n)"
          }
        ]
      }
    },
    "/gists/{gist_id}/comments": {
      "get": {
        "summary": "List gist comments",
        "description": "",
        "operationId": "gists/list-comments",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#list-gist-comments"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gist-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}/comments', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.comments(\n  'gist_id'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a gist comment",
        "description": "",
        "operationId": "gists/create-comment",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#create-a-gist-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-comment"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The comment text."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Just commenting for the sake of commenting"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/comments \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /gists/{gist_id}/comments', {\n  gist_id: 'gist_id',\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_comment(\n  'gist_id',\n  'body'\n)"
          }
        ]
      }
    },
    "/gists/{gist_id}/comments/{comment_id}": {
      "get": {
        "summary": "Get a gist comment",
        "description": "",
        "operationId": "gists/get-comment",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#get-a-gist-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}/comments/{comment_id}', {\n  gist_id: 'gist_id',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.comment(\n  'gist_id',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a gist comment",
        "description": "",
        "operationId": "gists/update-comment",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#update-a-gist-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The comment text."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Just commenting for the sake of commenting"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/comments/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /gists/{gist_id}/comments/{comment_id}', {\n  gist_id: 'gist_id',\n  comment_id: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_comment(\n  'gist_id',\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a gist comment",
        "description": "",
        "operationId": "gists/delete-comment",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/comments/#delete-a-gist-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /gists/{gist_id}/comments/{comment_id}', {\n  gist_id: 'gist_id',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_comment(\n  'gist_id',\n  42\n)"
          }
        ]
      }
    },
    "/gists/{gist_id}/commits": {
      "get": {
        "summary": "List gist commits",
        "description": "",
        "operationId": "gists/list-commits",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gist-commits"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gist-commit"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-commit-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?page=2>; rel=\"next\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/commits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}/commits', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commits(\n  'gist_id'\n)"
          }
        ]
      }
    },
    "/gists/{gist_id}/forks": {
      "get": {
        "summary": "List gist forks",
        "description": "",
        "operationId": "gists/list-forks",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gist-forks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gist-fork"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-fork-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/forks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}/forks', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.forks(\n  'gist_id'\n)"
          }
        ]
      },
      "post": {
        "summary": "Fork a gist",
        "description": "**Note**: This was previously `/gists/:gist_id/fork`.",
        "operationId": "gists/fork",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#fork-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/base-gist"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-gist"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/forks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /gists/{gist_id}/forks', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.fork(\n  'gist_id'\n)"
          }
        ]
      }
    },
    "/gists/{gist_id}/star": {
      "get": {
        "summary": "Check if a gist is starred",
        "description": "",
        "operationId": "gists/check-is-starred",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#check-if-a-gist-is-starred"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if gist is starred"
          },
          "404": {
            "description": "Response if gist is not starred"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/star"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}/star', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_is_starred(\n  'gist_id'\n)"
          }
        ]
      },
      "put": {
        "summary": "Star a gist",
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "gists/star",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#star-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/star"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /gists/{gist_id}/star', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.star(\n  'gist_id'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unstar a gist",
        "description": "",
        "operationId": "gists/unstar",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#unstar-a-gist"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/star"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /gists/{gist_id}/star', {\n  gist_id: 'gist_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unstar(\n  'gist_id'\n)"
          }
        ]
      }
    },
    "/gists/{gist_id}/{sha}": {
      "get": {
        "summary": "Get a gist revision",
        "description": "",
        "operationId": "gists/get-revision",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#get-a-gist-revision"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gist_id"
          },
          {
            "$ref": "#/components/parameters/sha"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gist"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gist-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gists/GIST_ID/SHA"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gists/{gist_id}/{sha}', {\n  gist_id: 'gist_id',\n  sha: 'sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.revision(\n  'gist_id',\n  'sha'\n)"
          }
        ]
      }
    },
    "/gitignore/templates": {
      "get": {
        "summary": "Get all gitignore templates",
        "description": "List all templates available to pass as an option when [creating a repository](https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user).",
        "operationId": "gitignore/get-all-templates",
        "tags": [
          "gitignore"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gitignore/#get-all-gitignore-templates"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "Actionscript",
                  "Android",
                  "AppceleratorTitanium",
                  "Autotools",
                  "Bancha",
                  "C",
                  "C++"
                ]
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"gitignore/list-templates\" operation ID is now \"gitignore/get-all-templates\"",
            "before": {
              "operationId": "gitignore/list-templates"
            },
            "after": {
              "operationId": "gitignore/get-all-templates"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gitignore/templates"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gitignore/templates')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.templates()"
          }
        ]
      }
    },
    "/gitignore/templates/{name}": {
      "get": {
        "summary": "Get a gitignore template",
        "description": "The API also allows fetching the source of a single template.\n\nUse the raw [media type](https://developer.github.com/v3/media/) to get the raw contents.",
        "operationId": "gitignore/get-template",
        "tags": [
          "gitignore"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gitignore/#get-a-gitignore-template"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gitignore-template"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gitignore-template"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/gitignore/templates/NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /gitignore/templates/{name}', {\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.template(\n  'name'\n)"
          }
        ]
      }
    },
    "/installation/repositories": {
      "get": {
        "summary": "List repositories accessible to the app installation",
        "description": "List repositories that an app installation can access.\n\nYou must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/list-repos-accessible-to-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-app-installation"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-paginated-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"apps/list-repos\" operation ID is now \"apps/list-repos-accessible-to-installation\"",
            "before": {
              "operationId": "apps/list-repos"
            },
            "after": {
              "operationId": "apps/list-repos-accessible-to-installation"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/installation/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /installation/repositories', {\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_accessible_to_installation()"
          }
        ]
      }
    },
    "/installation/token": {
      "delete": {
        "summary": "Revoke an installation access token",
        "description": "Revokes the installation token you're using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"[Create an installation access token for an app](https://developer.github.com/v3/apps/#create-an-installation-access-token-for-an-app)\" endpoint.\n\nYou must use an [installation access token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.",
        "operationId": "apps/revoke-installation-access-token",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#revoke-an-installation-access-token"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"apps/revoke-installation-token\" operation ID is now \"apps/revoke-installation-access-token\"",
            "before": {
              "operationId": "apps/revoke-installation-token"
            },
            "after": {
              "operationId": "apps/revoke-installation-access-token"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/installation/token"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /installation/token')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.revoke_installation_access_token()"
          }
        ]
      }
    },
    "/issues": {
      "get": {
        "summary": "List issues assigned to the authenticated user",
        "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you. See the [Parameters table](https://developer.github.com/v3/issues/#parameters) for more\ninformation.\n\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-with-repo"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-with-repo-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/issues"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /issues')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.list()"
          }
        ]
      }
    },
    "/licenses": {
      "get": {
        "summary": "Get all commonly used licenses",
        "description": "",
        "operationId": "licenses/get-all-commonly-used",
        "tags": [
          "licenses"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/licenses/#get-all-commonly-used-licenses"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/license-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/license-simple-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-03-05",
            "note": "\"List all licenses\" renamed to \"List commonly used licenses\"",
            "before": {
              "operationId": "licenses/list"
            },
            "after": {
              "operationId": "licenses/list-commonly-used"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"licenses/list-commonly-used\" operation ID is now \"licenses/get-all-commonly-used\"",
            "before": {
              "operationId": "licenses/list-commonly-used"
            },
            "after": {
              "operationId": "licenses/get-all-commonly-used"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/licenses"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /licenses')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commonly_used()"
          }
        ]
      }
    },
    "/licenses/{license}": {
      "get": {
        "summary": "Get a license",
        "description": "",
        "operationId": "licenses/get",
        "tags": [
          "licenses"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/licenses/#get-a-license"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/license"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/license"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/licenses/LICENSE"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /licenses/{license}', {\n  license: 'license'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'license'\n)"
          }
        ]
      }
    },
    "/markdown": {
      "post": {
        "summary": "Render a Markdown document",
        "description": "",
        "operationId": "markdown/render",
        "tags": [
          "markdown"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/markdown/#render-a-markdown-document"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Content-Length": {
                "example": "279",
                "schema": {
                  "type": "string"
                }
              },
              "X-CommonMarker-Version": {
                "$ref": "#/components/headers/X-CommonMarker-Version"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The Markdown text to render in HTML. Markdown content must be 400 KB or less."
                  },
                  "mode": {
                    "type": "string",
                    "description": "The rendering mode. Can be either:  \n\\* `markdown` to render a document in plain Markdown, just like README.md files are rendered.  \n\\* `gfm` to render a document in [GitHub Flavored Markdown](https://github.github.com/gfm/), which creates links for user mentions as well as references to SHA-1 hashes, issues, and pull requests.",
                    "enum": [
                      "markdown",
                      "gfm"
                    ],
                    "default": "markdown"
                  },
                  "context": {
                    "type": "string",
                    "description": "The repository context to use when creating references in `gfm` mode. Omit this parameter when using `markdown` mode."
                  }
                },
                "required": [
                  "text"
                ]
              },
              "example": {
                "text": "Hello world github/linguist#1 **cool**, and #1!",
                "mode": "gfm",
                "context": "github/gollum"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/markdown \\\n  -d '{\"text\":\"text\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /markdown', {\n  text: 'text'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.render(\n  'text'\n)"
          }
        ]
      }
    },
    "/markdown/raw": {
      "post": {
        "summary": "Render a Markdown document in raw mode",
        "description": "You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.",
        "operationId": "markdown/render-raw",
        "tags": [
          "markdown"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/content-type"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "headers": {
              "Content-Type": {
                "$ref": "#/components/headers/Content-Type"
              },
              "Content-Length": {
                "$ref": "#/components/headers/Content-Length"
              },
              "X-CommonMarker-Version": {
                "$ref": "#/components/headers/X-CommonMarker-Version"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "data",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "data parameter"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/markdown/raw \\\n  -d '{\"data\":\"data\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /markdown/raw', {\n  data: 'data',\n  headers: {\n    'content-type': 'text/plain; charset=utf-8'\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.render_raw(\n  'data'\n)"
          }
        ]
      }
    },
    "/marketplace_listing/accounts/{account_id}": {
      "get": {
        "summary": "Get a subscription plan for an account",
        "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/get-subscription-plan-for-account",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/marketplace-purchase"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/marketplace-purchase"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response when the account has not purchased the listing"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-08",
            "note": "\"apps/check-account-is-associated-with-any\" operation ID is now \"apps/get-subscription-plan-for-account\"",
            "before": {
              "operationId": "apps/check-account-is-associated-with-any"
            },
            "after": {
              "operationId": "apps/get-subscription-plan-for-account"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/marketplace_listing/accounts/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /marketplace_listing/accounts/{account_id}', {\n  account_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.subscription_plan_for_account(\n  42\n)"
          }
        ]
      }
    },
    "/marketplace_listing/plans": {
      "get": {
        "summary": "List plans",
        "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-plans",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-plans"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/marketplace-listing-plan"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/marketplace-listing-plan-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/marketplace_listing/plans"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /marketplace_listing/plans')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.plans()"
          }
        ]
      }
    },
    "/marketplace_listing/plans/{plan_id}/accounts": {
      "get": {
        "summary": "List accounts for a plan",
        "description": "Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-accounts-for-plan",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/plan_id"
          },
          {
            "name": "sort",
            "description": "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/marketplace-purchase"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/marketplace-purchase-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"apps/list-accounts-user-or-org-on-plan\" operation ID is now \"apps/list-accounts-for-plan\"",
            "before": {
              "operationId": "apps/list-accounts-user-or-org-on-plan"
            },
            "after": {
              "operationId": "apps/list-accounts-for-plan"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/marketplace_listing/plans/42/accounts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /marketplace_listing/plans/{plan_id}/accounts', {\n  plan_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.accounts_for_plan(\n  42\n)"
          }
        ]
      }
    },
    "/marketplace_listing/stubbed/accounts/{account_id}": {
      "get": {
        "summary": "Get a subscription plan for an account (stubbed)",
        "description": "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/get-subscription-plan-for-account-stubbed",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#get-a-subscription-plan-for-an-account-stubbed"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/marketplace-purchase"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/marketplace-purchase"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response when the account has not purchased the listing"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-08",
            "note": "\"apps/check-account-is-associated-with-any-stubbed\" operation ID is now \"apps/get-subscription-plan-for-account-stubbed\"",
            "before": {
              "operationId": "apps/check-account-is-associated-with-any-stubbed"
            },
            "after": {
              "operationId": "apps/get-subscription-plan-for-account-stubbed"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/marketplace_listing/stubbed/accounts/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /marketplace_listing/stubbed/accounts/{account_id}', {\n  account_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.subscription_plan_for_account_stubbed(\n  42\n)"
          }
        ]
      }
    },
    "/marketplace_listing/stubbed/plans": {
      "get": {
        "summary": "List plans (stubbed)",
        "description": "Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-plans-stubbed",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-plans-stubbed"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/marketplace-listing-plan"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/marketplace-listing-plan-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/marketplace_listing/stubbed/plans"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /marketplace_listing/stubbed/plans')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.plans_stubbed()"
          }
        ]
      }
    },
    "/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
      "get": {
        "summary": "List accounts for a plan (stubbed)",
        "description": "Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://developer.github.com/v3/auth/#basic-authentication) with their client ID and client secret to access this endpoint.",
        "operationId": "apps/list-accounts-for-plan-stubbed",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-accounts-for-a-plan-stubbed"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/plan_id"
          },
          {
            "name": "sort",
            "description": "Sorts the GitHub accounts by the date they were created or last updated. Can be one of `created` or `updated`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/marketplace-purchase"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/marketplace-purchase-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"apps/list-accounts-user-or-org-on-plan-stubbed\" operation ID is now \"apps/list-accounts-for-plan-stubbed\"",
            "before": {
              "operationId": "apps/list-accounts-user-or-org-on-plan-stubbed"
            },
            "after": {
              "operationId": "apps/list-accounts-for-plan-stubbed"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/marketplace_listing/stubbed/plans/42/accounts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /marketplace_listing/stubbed/plans/{plan_id}/accounts', {\n  plan_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.accounts_for_plan_stubbed(\n  42\n)"
          }
        ]
      }
    },
    "/meta": {
      "get": {
        "summary": "Get GitHub meta information",
        "description": "This endpoint provides a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/).\"",
        "operationId": "meta/get",
        "tags": [
          "meta"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/meta/#get-github-meta-information"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api-overview"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/api-overview"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/meta"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /meta')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.information()"
          }
        ]
      }
    },
    "/networks/{owner}/{repo}/events": {
      "get": {
        "summary": "List public events for a network of repositories",
        "description": "",
        "operationId": "activity/list-public-events-for-repo-network",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/networks/octocat/hello-world/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /networks/{owner}/{repo}/events', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_public_events_for_network(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/notifications": {
      "get": {
        "summary": "List notifications for the authenticated user",
        "description": "List all notifications for the current user, sorted by most recently updated.",
        "operationId": "activity/list-notifications-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/all"
          },
          {
            "$ref": "#/components/parameters/participating"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/before"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/thread"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/list-notifications\" operation ID is now \"activity/list-notifications-for-authenticated-user\"",
            "before": {
              "operationId": "activity/list-notifications"
            },
            "after": {
              "operationId": "activity/list-notifications-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /notifications')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.notifications_for_authenticated_user()"
          }
        ]
      },
      "put": {
        "summary": "Mark notifications as read",
        "description": "Marks all notifications as \"read\" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List notifications for the authenticated user](https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.",
        "operationId": "activity/mark-notifications-as-read",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "205": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "last_read_at": {
                    "type": "string",
                    "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp."
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/mark-as-read\" operation ID is now \"activity/mark-notifications-as-read\"",
            "before": {
              "operationId": "activity/mark-as-read"
            },
            "after": {
              "operationId": "activity/mark-notifications-as-read"
            }
          },
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/get-thread-subscription\" operation ID is now \"activity/get-thread-subscription-for-authenticated-user\"",
            "before": {
              "operationId": "activity/get-thread-subscription"
            },
            "after": {
              "operationId": "activity/get-thread-subscription-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications \\\n  -d '{\"last_read_at\":\"last_read_at\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /notifications', {\n  last_read_at: 'last_read_at'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.mark_notifications_as_read(\n  'last_read_at'\n)"
          }
        ]
      }
    },
    "/notifications/threads/{thread_id}": {
      "get": {
        "summary": "Get a thread",
        "description": "",
        "operationId": "activity/get-thread",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#get-a-thread"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/thread_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications/threads/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /notifications/threads/{thread_id}', {\n  thread_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.thread(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Mark a thread as read",
        "description": "",
        "operationId": "activity/mark-thread-as-read",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/thread_id"
          }
        ],
        "responses": {
          "205": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications/threads/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /notifications/threads/{thread_id}', {\n  thread_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.mark_thread_as_read(\n  42\n)"
          }
        ]
      }
    },
    "/notifications/threads/{thread_id}/subscription": {
      "get": {
        "summary": "Get a thread subscription for the authenticated user",
        "description": "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://developer.github.com/v3/activity/watching/#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.",
        "operationId": "activity/get-thread-subscription-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/thread_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread-subscription"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread-subscription"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications/threads/42/subscription"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /notifications/threads/{thread_id}/subscription', {\n  thread_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.thread_subscription_for_authenticated_user(\n  42\n)"
          }
        ]
      },
      "put": {
        "summary": "Set a thread subscription",
        "description": "If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription) endpoint.",
        "operationId": "activity/set-thread-subscription",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/thread_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/thread-subscription"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread-subscription"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ignored": {
                    "type": "boolean",
                    "description": "Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to block all notifications from this thread.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications/threads/42/subscription \\\n  -d '{\"ignored\":true}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /notifications/threads/{thread_id}/subscription', {\n  thread_id: 42,\n  ignored: true\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_thread_subscription(\n  42,\n  true\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a thread subscription",
        "description": "Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription) endpoint and set `ignore` to `true`.",
        "operationId": "activity/delete-thread-subscription",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/thread_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/notifications/threads/42/subscription"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /notifications/threads/{thread_id}/subscription', {\n  thread_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_thread_subscription(\n  42\n)"
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "summary": "List organizations",
        "description": "Lists all organizations, in the order that they were created on GitHub.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of organizations.",
        "operationId": "orgs/list",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-organizations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "since",
            "description": "The integer ID of the last organization that you've seen.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/organization-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/organizations?since=135>; rel=\"next\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/organizations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /organizations')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.list()"
          }
        ]
      }
    },
    "/orgs/{org}": {
      "get": {
        "summary": "Get an organization",
        "description": "To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See \"[Authenticating with GitHub Apps](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/)\" for details. For an example response, see \"[Response with GitHub plan information](https://developer.github.com/v3/orgs/#response-with-github-plan-information).\"",
        "operationId": "orgs/get",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#get-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization-full"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/organization-full-default-response"
                  },
                  "response-with-git-hub-plan-information": {
                    "$ref": "#/components/examples/organization-full-response-with-git-hub-plan-information"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "surtur",
              "note": "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.surtur-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'org'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an organization",
        "description": "**Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nEnables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.",
        "operationId": "orgs/update",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#update-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-full"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "surtur",
              "note": "New repository creation permissions are available to preview. You can now use `members_can_create_public_repositories`, `members_can_create_private_repositories`, and `members_can_create_internal_repositories`. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.\n\nTo access these new parameters during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.surtur-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_email": {
                    "type": "string",
                    "description": "Billing email address. This address is not publicized."
                  },
                  "company": {
                    "type": "string",
                    "description": "The company name."
                  },
                  "email": {
                    "type": "string",
                    "description": "The publicly visible email address."
                  },
                  "twitter_username": {
                    "type": "string",
                    "description": "The Twitter username of the company."
                  },
                  "location": {
                    "type": "string",
                    "description": "The location."
                  },
                  "name": {
                    "type": "string",
                    "description": "The shorthand name of the company."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the company."
                  },
                  "has_organization_projects": {
                    "type": "boolean",
                    "description": "Toggles whether an organization can use organization projects."
                  },
                  "has_repository_projects": {
                    "type": "boolean",
                    "description": "Toggles whether repositories that belong to the organization can use repository projects."
                  },
                  "default_repository_permission": {
                    "type": "string",
                    "description": "Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.",
                    "enum": [
                      "read",
                      "write",
                      "admin",
                      "none"
                    ],
                    "default": "read"
                  },
                  "members_can_create_repositories": {
                    "type": "boolean",
                    "description": "Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only organization owners can create repositories.  \nDefault: `true`  \n**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
                    "default": true
                  },
                  "members_can_create_internal_repositories": {
                    "type": "boolean",
                    "description": "Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  \n\\* `true` - all organization members can create internal repositories.  \n\\* `false` - only organization owners can create internal repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\"."
                  },
                  "members_can_create_private_repositories": {
                    "type": "boolean",
                    "description": "Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  \n\\* `true` - all organization members can create private repositories.  \n\\* `false` - only organization owners can create private repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\"."
                  },
                  "members_can_create_public_repositories": {
                    "type": "boolean",
                    "description": "Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  \n\\* `true` - all organization members can create public repositories.  \n\\* `false` - only organization owners can create public repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\"."
                  },
                  "members_allowed_repository_creation_type": {
                    "type": "string",
                    "description": "Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  \n\\* `none` - only admin members can create repositories.  \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See [this note](https://developer.github.com/v3/orgs/#members_can_create_repositories) for details.",
                    "enum": [
                      "all",
                      "private",
                      "none"
                    ]
                  }
                }
              },
              "example": {
                "billing_email": "support@github.com",
                "company": "GitHub",
                "email": "support@github.com",
                "twitter_username": "github",
                "location": "San Francisco",
                "name": "github",
                "description": "GitHub, the company.",
                "default_repository_permission": "read",
                "members_can_create_repositories": true,
                "members_allowed_repository_creation_type": "all"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG \\\n  -d '{\"billing_email\":\"billing_email\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /orgs/{org}', {\n  org: 'org',\n  billing_email: 'billing_email'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'org',\n  'billing_email'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/runners": {
      "get": {
        "summary": "List self-hosted runners for an organization",
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nLists all self-hosted runners for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/list-self-hosted-runners-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "runners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/runner-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/runners"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/runners', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.self_hosted_runners_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/runners/downloads": {
      "get": {
        "summary": "List runner applications for an organization",
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nLists binaries for the runner application that you can download and run. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/list-runner-applications-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/runner-application"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-application-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/runners/downloads"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/runners/downloads', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.runner_applications_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/runners/registration-token": {
      "post": {
        "summary": "Create a registration token for an organization",
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\n\nReturns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using registration token\n\nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```",
        "operationId": "actions/create-registration-token-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/runners/registration-token"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/actions/runners/registration-token', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_registration_token_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/runners/remove-token": {
      "post": {
        "summary": "Create a remove token for an organization",
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\n\nReturns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The\ntoken expires after one hour. You must authenticate using an access token with the `admin:org` scope to use this\nendpoint.\n\n#### Example using remove token\n\nTo remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\nendpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "operationId": "actions/create-remove-token-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/runners/remove-token"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/actions/runners/remove-token', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_remove_token_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/runners/{runner_id}": {
      "get": {
        "summary": "Get a self-hosted runner for an organization",
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nGets a specific self-hosted runner for an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/get-self-hosted-runner-for-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/runner_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/runners/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/runners/{runner_id}', {\n  org: 'org',\n  runner_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.self_hosted_runner_for_org(\n  'org',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a self-hosted runner from an organization",
        "description": "**Warning:** The self-hosted runners API for organizations is currently in public beta and subject to change.\n\nForces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the `admin:org` scope to use this endpoint.",
        "operationId": "actions/delete-self-hosted-runner-from-org",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/runner_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/runners/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/actions/runners/{runner_id}', {\n  org: 'org',\n  runner_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_self_hosted_runner_from_org(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/secrets": {
      "get": {
        "summary": "List organization secrets",
        "description": "Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/list-org-secrets",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#list-organization-secrets"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "secrets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/organization-actions-secret-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-actions-secret-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/secrets', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.org_secrets(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/secrets/public-key": {
      "get": {
        "summary": "Get an organization public key",
        "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/get-org-public-key",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-public-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-public-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/public-key"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/secrets/public-key', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.org_public_key(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}": {
      "get": {
        "summary": "Get an organization secret",
        "description": "Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/get-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization-actions-secret"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-actions-secret"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/secrets/{secret_name}', {\n  org: 'org',\n  secret_name: 'secret_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.org_secret(\n  'org',\n  'secret_name'\n)"
          }
        ]
      },
      "put": {
        "summary": "Create or update an organization secret",
        "description": "Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\nuse this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n\n```\nconst sodium = require('tweetsodium');\n\nconst key = \"base64-encoded-public-key\";\nconst value = \"plain-text-secret\";\n\n// Convert the message and key to Uint8Array's (Buffer implements that interface)\nconst messageBytes = Buffer.from(value);\nconst keyBytes = Buffer.from(key, 'base64');\n\n// Encrypt using LibSodium.\nconst encryptedBytes = sodium.seal(messageBytes, keyBytes);\n\n// Base64 the encrypted secret\nconst encrypted = Buffer.from(encryptedBytes).toString('base64');\n\nconsole.log(encrypted);\n```\n\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire \"rbnacl\"\nrequire \"base64\"\n\nkey = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(\"my_secret\")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```",
        "operationId": "actions/create-or-update-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "201": {
            "description": "Response when creating a secret"
          },
          "204": {
            "description": "Response when updating a secret"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encrypted_value": {
                    "type": "string",
                    "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key) endpoint."
                  },
                  "key_id": {
                    "type": "string",
                    "description": "ID of the key you used to encrypt the secret."
                  },
                  "visibility": {
                    "type": "string",
                    "description": "Configures the access that repositories have to the organization secret. Can be one of:\n\\- `all` - All repositories in an organization can access the secret.\n\\- `private` - Private repositories in an organization can access the secret.\n\\- `selected` - Only specific repositories can access the secret.",
                    "enum": [
                      "all",
                      "private",
                      "selected"
                    ]
                  },
                  "selected_repository_ids": {
                    "type": "array",
                    "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              },
              "example": {
                "encrypted_value": "****************************************************************************************",
                "key_id": "012345678912345678",
                "visibility": "selected",
                "selected_repository_ids": [
                  1296269,
                  1296280
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME \\\n  -d '{\"encrypted_value\":\"encrypted_value\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/actions/secrets/{secret_name}', {\n  org: 'org',\n  secret_name: 'secret_name',\n  encrypted_value: 'encrypted_value'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_or_update_org_secret(\n  'org',\n  'secret_name',\n  'encrypted_value'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an organization secret",
        "description": "Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/delete-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#delete-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/actions/secrets/{secret_name}', {\n  org: 'org',\n  secret_name: 'secret_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_org_secret(\n  'org',\n  'secret_name'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
      "get": {
        "summary": "List selected repositories for an organization secret",
        "description": "Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/list-selected-repos-for-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/public-repository"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/public-repository-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/actions/secrets/{secret_name}/repositories', {\n  org: 'org',\n  secret_name: 'secret_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.selected_repos_for_org_secret(\n  'org',\n  'secret_name'\n)"
          }
        ]
      },
      "put": {
        "summary": "Set selected repositories for an organization secret",
        "description": "Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/set-selected-repos-for-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "selected_repository_ids": {
                    "type": "array",
                    "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret) endpoints.",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              },
              "example": {
                "selected_repository_ids": [
                  64780797
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories \\\n  -d '{\"selected_repository_ids\":[42]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/actions/secrets/{secret_name}/repositories', {\n  org: 'org',\n  secret_name: 'secret_name',\n  selected_repository_ids: [\n    42\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_selected_repos_for_org_secret(\n  'org',\n  'secret_name',\n  [\n    42\n  ]\n)"
          }
        ]
      }
    },
    "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
      "put": {
        "summary": "Add selected repository to an organization secret",
        "description": "Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/add-selected-repo-to-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#add-selected-repository-to-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          },
          {
            "$ref": "#/components/parameters/repository_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response when repository was added to the selected list"
          },
          "409": {
            "description": "Response when visibility type is not set to selected"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', {\n  org: 'org',\n  secret_name: 'secret_name',\n  repository_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_selected_repo_to_org_secret(\n  'org',\n  'secret_name',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove selected repository from an organization secret",
        "description": "Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.",
        "operationId": "actions/remove-selected-repo-from-org-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          },
          {
            "$ref": "#/components/parameters/repository_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Response when repository was removed from the selected list"
          },
          "409": {
            "description": "Response when visibility type not set to selected"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', {\n  org: 'org',\n  secret_name: 'secret_name',\n  repository_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_selected_repo_from_org_secret(\n  'org',\n  'secret_name',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/blocks": {
      "get": {
        "summary": "List users blocked by an organization",
        "description": "List the users blocked by an organization.",
        "operationId": "orgs/list-blocked-users",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#list-users-blocked-by-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/blocks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/blocks', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.users_blocked_by(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/blocks/{username}": {
      "get": {
        "summary": "Check if a user is blocked by an organization",
        "operationId": "orgs/check-blocked-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#check-if-a-user-is-blocked-by-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "If the user is blocked:"
          },
          "404": {
            "description": "If the user is not blocked:"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/blocks/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/blocks/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_user_is_blocked_by(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Block a user from an organization",
        "description": "",
        "operationId": "orgs/block-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#block-a-user-from-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/blocks/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/blocks/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.block_user(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unblock a user from an organization",
        "description": "",
        "operationId": "orgs/unblock-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/blocking/#unblock-a-user-from-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/blocks/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/blocks/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unblock_user(\n  'org',\n  'username'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/credential-authorizations": {
      "get": {
        "summary": "List SAML SSO authorizations for an organization",
        "description": "Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n\nAn authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).",
        "operationId": "orgs/list-saml-sso-authorizations",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/credential-authorization"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/credential-authorization-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/list-credential-authorizations\" operation ID is now \"orgs/list-saml-sso-authorizations\"",
            "before": {
              "operationId": "orgs/list-credential-authorizations"
            },
            "after": {
              "operationId": "orgs/list-saml-sso-authorizations"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/credential-authorizations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/credential-authorizations', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.saml_sso_authorizations(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/credential-authorizations/{credential_id}": {
      "delete": {
        "summary": "Remove a SAML SSO authorization for an organization",
        "description": "Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).\n\nAn authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.",
        "operationId": "orgs/remove-saml-sso-authorization",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/credential_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/remove-credential-authorization\" operation ID is now \"orgs/remove-saml-sso-authorization\"",
            "before": {
              "operationId": "orgs/remove-credential-authorization"
            },
            "after": {
              "operationId": "orgs/remove-saml-sso-authorization"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/credential-authorizations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/credential-authorizations/{credential_id}', {\n  org: 'org',\n  credential_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_saml_sso_authorization(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/events": {
      "get": {
        "summary": "List public organization events",
        "description": "",
        "operationId": "activity/list-public-org-events",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-organization-events"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/list-public-events-for-org\" operation ID is now \"activity/list-public-org-events\"",
            "before": {
              "operationId": "activity/list-public-events-for-org"
            },
            "after": {
              "operationId": "activity/list-public-org-events"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/events', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_org_events(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/hooks": {
      "get": {
        "summary": "List organization webhooks",
        "description": "",
        "operationId": "orgs/list-webhooks",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#list-organization-webhooks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/org-hook"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-hook-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/list-hooks\" operation ID is now \"orgs/list-webhooks\"",
            "before": {
              "operationId": "orgs/list-hooks"
            },
            "after": {
              "operationId": "orgs/list-webhooks"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/hooks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/hooks', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.webhooks(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create an organization webhook",
        "description": "Here's how you can create a hook that posts payloads in JSON format:",
        "operationId": "orgs/create-webhook",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#create-an-organization-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-hook"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/orgs/octocat/hooks/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Must be passed as \"web\"."
                  },
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The URL to which the payloads will be delivered."
                      },
                      "content_type": {
                        "type": "string",
                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                      },
                      "secret": {
                        "type": "string",
                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header."
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "events": {
                    "type": "array",
                    "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
                    "default": [
                      "push"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                    "default": true
                  }
                },
                "required": [
                  "name",
                  "config"
                ]
              },
              "example": {
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "url": "http://example.com/webhook",
                  "content_type": "json"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/create-hook\" operation ID is now \"orgs/create-webhook\"",
            "before": {
              "operationId": "orgs/create-hook"
            },
            "after": {
              "operationId": "orgs/create-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/hooks \\\n  -d '{\"name\":\"name\",\"config\":{\"url\":\"url\",\"content_type\":\"content_type\",\"secret\":\"secret\",\"insecure_ssl\":\"insecure_ssl\"}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/hooks', {\n  org: 'org',\n  name: 'name',\n  config: {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_webhook(\n  'org',\n  'name',\n  {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n)"
          }
        ]
      }
    },
    "/orgs/{org}/hooks/{hook_id}": {
      "get": {
        "summary": "Get an organization webhook",
        "description": "",
        "operationId": "orgs/get-webhook",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#get-an-organization-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-hook"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/get-hook\" operation ID is now \"orgs/get-webhook\"",
            "before": {
              "operationId": "orgs/get-hook"
            },
            "after": {
              "operationId": "orgs/get-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/hooks/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/hooks/{hook_id}', {\n  org: 'org',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.webhook(\n  'org',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an organization webhook",
        "description": "",
        "operationId": "orgs/update-webhook",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#update-an-organization-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-hook-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The URL to which the payloads will be delivered."
                      },
                      "content_type": {
                        "type": "string",
                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                      },
                      "secret": {
                        "type": "string",
                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header."
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "events": {
                    "type": "array",
                    "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
                    "default": [
                      "push"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                    "default": true
                  }
                }
              },
              "example": {
                "active": true,
                "events": [
                  "pull_request"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/update-hook\" operation ID is now \"orgs/update-webhook\"",
            "before": {
              "operationId": "orgs/update-hook"
            },
            "after": {
              "operationId": "orgs/update-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/hooks/42 \\\n  -d '{\"config\":{\"url\":\"url\",\"content_type\":\"content_type\",\"secret\":\"secret\",\"insecure_ssl\":\"insecure_ssl\"}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /orgs/{org}/hooks/{hook_id}', {\n  org: 'org',\n  hook_id: 42,\n  config: {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_webhook(\n  'org',\n  42,\n  {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an organization webhook",
        "description": "",
        "operationId": "orgs/delete-webhook",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#delete-an-organization-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/delete-hook\" operation ID is now \"orgs/delete-webhook\"",
            "before": {
              "operationId": "orgs/delete-hook"
            },
            "after": {
              "operationId": "orgs/delete-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/hooks/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/hooks/{hook_id}', {\n  org: 'org',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_webhook(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/hooks/{hook_id}/pings": {
      "post": {
        "summary": "Ping an organization webhook",
        "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
        "operationId": "orgs/ping-webhook",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/hooks/#ping-an-organization-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/ping-hook\" operation ID is now \"orgs/ping-webhook\"",
            "before": {
              "operationId": "orgs/ping-hook"
            },
            "after": {
              "operationId": "orgs/ping-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/hooks/42/pings"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/hooks/{hook_id}/pings', {\n  org: 'org',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.ping_webhook(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/installation": {
      "get": {
        "summary": "Get an organization installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-org-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-an-organization-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-04-10",
            "note": "\"Find organization installation\" renamed to \"Get an organization installation\"",
            "before": {
              "operationId": "apps/find-org-installation"
            },
            "after": {
              "operationId": "apps/get-org-installation"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/orgs/ORG/installation"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/installation', {\n  org: 'org',\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.org_installation_for_authenticated(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/installations": {
      "get": {
        "summary": "List app installations for an organization",
        "description": "Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.",
        "operationId": "orgs/list-app-installations",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-app-installations-for-an-organization"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "installations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/installation-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/list-installations\" operation ID is now \"orgs/list-app-installations\"",
            "before": {
              "operationId": "orgs/list-installations"
            },
            "after": {
              "operationId": "orgs/list-app-installations"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/orgs/ORG/installations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/installations', {\n  org: 'org',\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.app_installations(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/interaction-limits": {
      "get": {
        "summary": "Get interaction restrictions for an organization",
        "description": "Shows which group of GitHub users can interact with this organization and when the restriction expires. If there are no restrictions, you will see an empty response.",
        "operationId": "interactions/get-restrictions-for-org",
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.sombra-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/interaction-limit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/interaction-limit"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.sombra-preview+json\" \\\n  https://api.github.com/orgs/ORG/interaction-limits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/interaction-limits', {\n  org: 'org',\n  mediaType: {\n    previews: [\n      'sombra'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.restrictions_for_org(\n  'org'\n)"
          }
        ]
      },
      "put": {
        "summary": "Set interaction restrictions for an organization",
        "description": "Temporarily restricts interactions to certain GitHub users in any public repository in the given organization. You must be an organization owner to set these restrictions.",
        "operationId": "interactions/set-restrictions-for-org",
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/orgs/#set-interaction-restrictions-for-an-organization"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.sombra-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/interaction-limit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/interaction-limit"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "string",
                    "description": "Specifies the group of GitHub users who can comment, open issues, or create pull requests in public repositories for the given organization. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
                    "enum": [
                      "existing_users",
                      "contributors_only",
                      "collaborators_only"
                    ]
                  }
                },
                "required": [
                  "limit"
                ]
              },
              "example": {
                "limit": "collaborators_only"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"interactions/add-or-update-restrictions-for-org\" operation ID is now \"interactions/set-restrictions-for-org\"",
            "before": {
              "operationId": "interactions/add-or-update-restrictions-for-org"
            },
            "after": {
              "operationId": "interactions/set-restrictions-for-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.sombra-preview+json\" \\\n  https://api.github.com/orgs/ORG/interaction-limits \\\n  -d '{\"limit\":\"limit\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/interaction-limits', {\n  org: 'org',\n  limit: 'limit',\n  mediaType: {\n    previews: [\n      'sombra'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_restrictions_for_org(\n  'org',\n  'limit'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove interaction restrictions for an organization",
        "description": "Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.",
        "operationId": "interactions/remove-restrictions-for-org",
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.sombra-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.sombra-preview+json\" \\\n  https://api.github.com/orgs/ORG/interaction-limits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/interaction-limits', {\n  org: 'org',\n  mediaType: {\n    previews: [\n      'sombra'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_restrictions_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/invitations": {
      "get": {
        "summary": "List pending organization invitations",
        "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
        "operationId": "orgs/list-pending-invitations",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/organization-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/invitations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/invitations', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pending_invitations(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create an organization invitation",
        "description": "Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "orgs/create-invitation",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#create-an-organization-invitation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organization-invitation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-invitation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invitee_id": {
                    "type": "integer",
                    "description": "**Required unless you provide `email`**. GitHub user ID for the person you are inviting."
                  },
                  "email": {
                    "type": "string",
                    "description": "**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user."
                  },
                  "role": {
                    "type": "string",
                    "description": "Specify role for new member. Can be one of:  \n\\* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n\\* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n\\* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.",
                    "enum": [
                      "admin",
                      "direct_member",
                      "billing_manager"
                    ],
                    "default": "direct_member"
                  },
                  "team_ids": {
                    "type": "array",
                    "description": "Specify IDs for the teams you want to invite new members to.",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              },
              "example": {
                "email": "octocat@github.com",
                "role": "direct_member",
                "team_ids": [
                  12,
                  26
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/invitations \\\n  -d '{\"invitee_id\":42}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/invitations', {\n  org: 'org',\n  invitee_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_invitation(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/invitations/{invitation_id}/teams": {
      "get": {
        "summary": "List organization invitation teams",
        "description": "List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.",
        "operationId": "orgs/list-invitation-teams",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/invitation_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/invitations/42/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/invitations/{invitation_id}/teams', {\n  org: 'org',\n  invitation_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.invitation_teams(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/issues": {
      "get": {
        "summary": "List organization issues assigned to the authenticated user",
        "description": "List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list-for-org",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-organization-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-with-repo"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-with-repo-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/issues"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/issues', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_org_assigned_to_authenticated_user(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/members": {
      "get": {
        "summary": "List organization members",
        "description": "List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.",
        "operationId": "orgs/list-members",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-organization-members"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "filter",
            "description": "Filter members returned in the list. Can be one of:  \n\\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  \n\\* `all` - All members the authenticated user can see.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "2fa_disabled",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "$ref": "#/components/parameters/role"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          },
          "302": {
            "description": "Response if requester is not an organization member",
            "headers": {
              "Location": {
                "example": "https://api.github.com/orgs/github/public_members",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/members"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/members', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.members(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/members/{username}": {
      "get": {
        "summary": "Check organization membership for a user",
        "description": "Check if a user is, publicly or privately, a member of the organization.",
        "operationId": "orgs/check-membership-for-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#check-organization-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if requester is an organization member and user is a member"
          },
          "302": {
            "description": "Response if requester is not an organization member",
            "headers": {
              "Location": {
                "example": "https://api.github.com/orgs/github/public_members/pezra",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Response if requester is an organization member and user is not a member"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/check-membership\" operation ID is now \"orgs/check-membership-for-user\"",
            "before": {
              "operationId": "orgs/check-membership"
            },
            "after": {
              "operationId": "orgs/check-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/members/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_membership_for_user(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove an organization member",
        "description": "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
        "operationId": "orgs/remove-member",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#remove-an-organization-member"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/members/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_member(\n  'org',\n  'username'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/memberships/{username}": {
      "get": {
        "summary": "Get organization membership for a user",
        "description": "In order to get a user's membership with an organization, the authenticated user must be an organization member.",
        "operationId": "orgs/get-membership-for-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-membership"
                },
                "examples": {
                  "response-if-user-has-an-active-admin-membership-with-organization": {
                    "$ref": "#/components/examples/org-membership-response-if-user-has-an-active-admin-membership-with-organization"
                  },
                  "response-if-user-has-an-active-membership-with-organization": {
                    "$ref": "#/components/examples/org-membership-response-if-user-has-an-active-membership-with-organization"
                  },
                  "response-if-user-has-a-pending-membership-with-organization": {
                    "$ref": "#/components/examples/org-membership-response-if-user-has-a-pending-membership-with-organization"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/get-membership\" operation ID is now \"orgs/get-membership-for-user\"",
            "before": {
              "operationId": "orgs/get-membership"
            },
            "after": {
              "operationId": "orgs/get-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/memberships/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/memberships/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.membership_for_user(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Set organization membership for a user",
        "description": "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://developer.github.com/v3/orgs/members/#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
        "operationId": "orgs/set-membership-for-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#set-organization-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-membership"
                },
                "examples": {
                  "response-if-user-was-previously-unaffiliated-with-organization": {
                    "$ref": "#/components/examples/org-membership-response-if-user-was-previously-unaffiliated-with-organization"
                  },
                  "response-if-user-already-had-membership-with-organization": {
                    "$ref": "#/components/examples/org-membership-response-if-user-already-had-membership-with-organization"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.",
                    "enum": [
                      "admin",
                      "member"
                    ],
                    "default": "member"
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/add-or-update-membership\" operation ID is now \"orgs/set-membership-for-user\"",
            "before": {
              "operationId": "orgs/add-or-update-membership"
            },
            "after": {
              "operationId": "orgs/set-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/memberships/USERNAME \\\n  -d '{\"role\":\"role\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/memberships/{username}', {\n  org: 'org',\n  username: 'username',\n  role: 'role'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_membership_for_user(\n  'org',\n  'username',\n  'role'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove organization membership for a user",
        "description": "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
        "operationId": "orgs/remove-membership-for-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#remove-organization-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/remove-membership\" operation ID is now \"orgs/remove-membership-for-user\"",
            "before": {
              "operationId": "orgs/remove-membership"
            },
            "after": {
              "operationId": "orgs/remove-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/memberships/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/memberships/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_membership_for_user(\n  'org',\n  'username'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/migrations": {
      "get": {
        "summary": "List organization migrations",
        "description": "Lists the most recent migrations.",
        "operationId": "migrations/list-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#list-organization-migrations"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/migration-with-short-org"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-with-short-org-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG/migrations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/migrations', {\n  org: 'org',\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_org(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Start an organization migration",
        "description": "Initiates the generation of a migration archive.",
        "operationId": "migrations/start-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration-with-short-org"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-with-short-org-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repositories": {
                    "type": "array",
                    "description": "A list of arrays indicating which repositories should be migrated.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "lock_repositories": {
                    "type": "boolean",
                    "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
                    "default": false
                  },
                  "exclude_attachments": {
                    "type": "boolean",
                    "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
                    "default": false
                  }
                },
                "required": [
                  "repositories"
                ]
              },
              "example": {
                "repositories": [
                  "github/Hello-World"
                ],
                "lock_repositories": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/migrations \\\n  -d '{\"repositories\":[\"repositories\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/migrations', {\n  org: 'org',\n  repositories: [\n    'repositories'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.start_for_org(\n  'org',\n  [\n    'repositories'\n  ]\n)"
          }
        ]
      }
    },
    "/orgs/{org}/migrations/{migration_id}": {
      "get": {
        "summary": "Get an organization migration status",
        "description": "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
        "operationId": "migrations/get-status-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#get-an-organization-migration-status"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "200": {
            "description": "*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration-with-short-org"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-with-short-org"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG/migrations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/migrations/{migration_id}', {\n  org: 'org',\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.status_for_org(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/migrations/{migration_id}/archive": {
      "get": {
        "summary": "Download an organization migration archive",
        "description": "Fetches the URL to a migration archive.",
        "operationId": "migrations/download-archive-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#download-an-organization-migration-archive"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "302": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-27",
            "note": "\"migrations/get-archive-for-org\" operation ID is now \"migrations/download-archive-for-org\"",
            "before": {
              "operationId": "migrations/get-archive-for-org"
            },
            "after": {
              "operationId": "migrations/download-archive-for-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG/migrations/42/archive"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/migrations/{migration_id}/archive', {\n  org: 'org',\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.archive_for_org(\n  'org',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an organization migration archive",
        "description": "Deletes a previous migration archive. Migration archives are automatically deleted after seven days.",
        "operationId": "migrations/delete-archive-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#delete-an-organization-migration-archive"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG/migrations/42/archive"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/migrations/{migration_id}/archive', {\n  org: 'org',\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_archive_for_org(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
      "delete": {
        "summary": "Unlock an organization repository",
        "description": "Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://developer.github.com/v3/repos/#delete-a-repository) when the migration is complete and you no longer need the source data.",
        "operationId": "migrations/unlock-repo-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#unlock-an-organization-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration_id"
          },
          {
            "$ref": "#/components/parameters/repo_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG/migrations/42/repos/REPO_NAME/lock"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock', {\n  org: 'org',\n  migration_id: 42,\n  repo_name: 'repo_name',\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unlock_org_repo(\n  'org',\n  42,\n  'repo_name'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/migrations/{migration_id}/repositories": {
      "get": {
        "summary": "List repositories in an organization migration",
        "description": "List all the repositories for this organization migration.",
        "operationId": "migrations/list-repos-for-org",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/migration_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/orgs/ORG/migrations/42/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/migrations/{migration_id}/repositories', {\n  org: 'org',\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_for_for_org(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/outside_collaborators": {
      "get": {
        "summary": "List outside collaborators for an organization",
        "description": "List all users who are outside collaborators of an organization.",
        "operationId": "orgs/list-outside-collaborators",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "filter",
            "description": "Filter the list of outside collaborators. Can be one of:  \n\\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  \n\\* `all`: All outside collaborators.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "2fa_disabled",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/outside_collaborators"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/outside_collaborators', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.outside_collaborators(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/outside_collaborators/{username}": {
      "put": {
        "summary": "Convert an organization member to outside collaborator",
        "description": "When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\".",
        "operationId": "orgs/convert-member-to-outside-collaborator",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/outside_collaborators/#convert-an-organization-member-to-outside-collaborator"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response-if-user-is-the-last-owner-of-the-organization": {
                    "summary": "Response if user is the last owner of the organization",
                    "value": {
                      "message": "Cannot convert the last owner to an outside collaborator",
                      "documentation_url": "https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator"
                    }
                  },
                  "response-if-user-is-not-a-member-of-the-organization": {
                    "summary": "Response if user is not a member of the organization",
                    "value": {
                      "message": "<user> is not a member of the <organization> organization.",
                      "documentation_url": "https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/outside_collaborators/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/outside_collaborators/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.convert_member_to_outside_collaborator(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove outside collaborator from an organization",
        "description": "Removing a user from this list will remove them from all the organization's repositories.",
        "operationId": "orgs/remove-outside-collaborator",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator-from-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "422": {
            "description": "Response if user is a member of the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response-if-user-is-a-member-of-the-organization": {
                    "value": {
                      "message": "You cannot specify an organization member to remove as an outside collaborator.",
                      "documentation_url": "https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/outside_collaborators/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/outside_collaborators/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_outside_collaborator(\n  'org',\n  'username'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/projects": {
      "get": {
        "summary": "List organization projects",
        "description": "Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/list-for-org",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#list-organization-projects"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "state",
            "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/orgs/ORG/projects"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/projects', {\n  org: 'org',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_org(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create an organization project",
        "description": "Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/create-for-org",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#create-an-organization-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the project."
                  },
                  "body": {
                    "type": "string",
                    "description": "The description of the project."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Organization Roadmap",
                "body": "High-level roadmap for the upcoming year."
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/orgs/ORG/projects \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/projects', {\n  org: 'org',\n  name: 'name',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_org(\n  'org',\n  'name'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/public_members": {
      "get": {
        "summary": "List public organization members",
        "description": "Members of an organization can choose to have their membership publicized or not.",
        "operationId": "orgs/list-public-members",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-public-organization-members"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/public_members"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/public_members', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_members(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/public_members/{username}": {
      "get": {
        "summary": "Check public organization membership for a user",
        "description": "",
        "operationId": "orgs/check-public-membership-for-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#check-public-organization-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if user is a public member"
          },
          "404": {
            "description": "Response if user is not a public member"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/check-public-membership\" operation ID is now \"orgs/check-public-membership-for-user\"",
            "before": {
              "operationId": "orgs/check-public-membership"
            },
            "after": {
              "operationId": "orgs/check-public-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/public_members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/public_members/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_public_membership_for_user(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Set public organization membership for the authenticated user",
        "description": "The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "orgs/set-public-membership-for-authenticated-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#set-public-organization-membership-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/publicize-membership\" operation ID is now \"orgs/set-public-membership-for-authenticated-user\"",
            "before": {
              "operationId": "orgs/publicize-membership"
            },
            "after": {
              "operationId": "orgs/set-public-membership-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/public_members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/public_members/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_public_membership_for_authenticated_user(\n  'org',\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove public organization membership for the authenticated user",
        "description": "",
        "operationId": "orgs/remove-public-membership-for-authenticated-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#remove-public-organization-membership-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/conceal-membership\" operation ID is now \"orgs/remove-public-membership-for-authenticated-user\"",
            "before": {
              "operationId": "orgs/conceal-membership"
            },
            "after": {
              "operationId": "orgs/remove-public-membership-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/public_members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/public_members/{username}', {\n  org: 'org',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_public_membership_for_authenticated_user(\n  'org',\n  'username'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/repos": {
      "get": {
        "summary": "List organization repositories",
        "description": "Lists repositories for the specified organization.",
        "operationId": "repos/list-for-org",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-organization-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "name": "type",
            "description": "Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "public",
                "private",
                "forks",
                "sources",
                "member",
                "internal"
              ]
            }
          },
          {
            "name": "sort",
            "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```"
            },
            {
              "required": false,
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/repos"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/repos', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_org(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create an organization repository",
        "description": "Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
        "operationId": "repos/create-in-org",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-an-organization-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```"
            },
            {
              "required": false,
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository."
                  },
                  "homepage": {
                    "type": "string",
                    "description": "A URL with more information about the repository."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Either `true` to create a private repository or `false` to create a public one.",
                    "default": false
                  },
                  "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\".  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
                    "enum": [
                      "public",
                      "private",
                      "visibility",
                      "internal"
                    ]
                  },
                  "has_issues": {
                    "type": "boolean",
                    "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                    "default": true
                  },
                  "has_projects": {
                    "type": "boolean",
                    "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                    "default": true
                  },
                  "has_wiki": {
                    "type": "boolean",
                    "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                    "default": true
                  },
                  "is_template": {
                    "type": "boolean",
                    "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                    "default": false
                  },
                  "team_id": {
                    "type": "integer",
                    "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
                  },
                  "auto_init": {
                    "type": "boolean",
                    "description": "Pass `true` to create an initial commit with empty README.",
                    "default": false
                  },
                  "gitignore_template": {
                    "type": "string",
                    "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\"."
                  },
                  "license_template": {
                    "type": "string",
                    "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\"."
                  },
                  "allow_squash_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                    "default": true
                  },
                  "allow_merge_commit": {
                    "type": "boolean",
                    "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                    "default": true
                  },
                  "allow_rebase_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                    "default": true
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                    "default": false
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Hello-World",
                "description": "This is your first repository",
                "homepage": "https://github.com",
                "private": false,
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/repos \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/repos', {\n  org: 'org',\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_org(\n  'org',\n  'name'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/settings/billing/actions": {
      "get": {
        "summary": "Get GitHub Actions billing for an organization",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAccess tokens must have the `read:org` scope.",
        "operationId": "billing/get-github-actions-billing-org",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/settings/billing/actions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/settings/billing/actions', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.actions_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/settings/billing/packages": {
      "get": {
        "summary": "Get GitHub Packages billing for an organization",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the free and paid storage usued for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `read:org` scope.",
        "operationId": "billing/get-github-packages-billing-org",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/packages-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/packages-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/settings/billing/packages"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/settings/billing/packages', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.packages_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/settings/billing/shared-storage": {
      "get": {
        "summary": "Get shared storage billing for an organization",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `read:org` scope.",
        "operationId": "billing/get-shared-storage-billing-org",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/combined-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/combined-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/settings/billing/shared-storage"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/settings/billing/shared-storage', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.shared_storage_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/team-sync/groups": {
      "get": {
        "summary": "List IdP groups for an organization",
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nList IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see \"[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89).\"\n\nThe `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:",
        "operationId": "teams/list-id-p-groups-for-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group-mapping-3"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/group-mapping-3"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/resource?per_page=2&page=url-encoded-next-page-token>; rel=\"next\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/team-sync/groups"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/team-sync/groups', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.id_p_groups_for_org(\n  'org'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams": {
      "get": {
        "summary": "List teams",
        "description": "Lists all teams in an organization that are visible to the authenticated user.",
        "operationId": "teams/list",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-teams"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.list(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a team",
        "description": "To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization).\"\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see \"[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)\".",
        "operationId": "teams/create",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#create-a-team"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-full"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the team."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the team."
                  },
                  "maintainers": {
                    "type": "array",
                    "description": "List GitHub IDs for organization members who will become team maintainers.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "repo_names": {
                    "type": "array",
                    "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "privacy": {
                    "type": "string",
                    "description": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
                    "enum": [
                      "secret",
                      "closed"
                    ]
                  },
                  "permission": {
                    "type": "string",
                    "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
                    "enum": [
                      "pull",
                      "push",
                      "admin"
                    ],
                    "default": "pull"
                  },
                  "parent_team_id": {
                    "type": "integer",
                    "description": "The ID of a team to set as the parent team."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Justice League",
                "description": "A great team",
                "permission": "admin",
                "privacy": "closed"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/teams', {\n  org: 'org',\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create(\n  'org',\n  'name'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}": {
      "get": {
        "summary": "Get a team by name",
        "description": "Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.",
        "operationId": "teams/get-by-name",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#get-a-team-by-name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-full"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.by_name(\n  'org',\n  'team_slug'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a team",
        "description": "To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.",
        "operationId": "teams/update-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#update-a-team"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-full"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the team."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the team."
                  },
                  "privacy": {
                    "type": "string",
                    "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
                    "enum": [
                      "secret",
                      "closed"
                    ]
                  },
                  "permission": {
                    "type": "string",
                    "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
                    "enum": [
                      "pull",
                      "push",
                      "admin"
                    ],
                    "default": "pull"
                  },
                  "parent_team_id": {
                    "type": "integer",
                    "description": "The ID of a team to set as the parent team."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "new team name",
                "description": "new team description",
                "privacy": "closed"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /orgs/{org}/teams/{team_slug}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'org',\n  'team_slug',\n  'name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a team",
        "description": "To delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.",
        "operationId": "teams/delete-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#delete-a-team"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete(\n  'org',\n  'team_slug'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions": {
      "get": {
        "summary": "List discussions",
        "description": "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.",
        "operationId": "teams/list-discussions-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#list-discussions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "name": "direction",
            "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-discussion"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/discussions', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussions(\n  'org',\n  'team_slug'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a discussion",
        "description": "Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.",
        "operationId": "teams/create-discussion-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#create-a-discussion"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The discussion post's title."
                  },
                  "body": {
                    "type": "string",
                    "description": "The discussion post's body text."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
                    "default": false
                  }
                },
                "required": [
                  "title",
                  "body"
                ]
              },
              "example": {
                "title": "Our first team post",
                "body": "Hi! This is an area for us to collaborate as a team."
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions \\\n  -d '{\"title\":\"title\",\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/teams/{team_slug}/discussions', {\n  org: 'org',\n  team_slug: 'team_slug',\n  title: 'title',\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_discussion(\n  'org',\n  'team_slug',\n  'title',\n  'body'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
      "get": {
        "summary": "Get a discussion",
        "description": "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
        "operationId": "teams/get-discussion-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#get-a-discussion"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussion(\n  'org',\n  'team_slug',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a discussion",
        "description": "Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
        "operationId": "teams/update-discussion-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#update-a-discussion"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The discussion post's title."
                  },
                  "body": {
                    "type": "string",
                    "description": "The discussion post's body text."
                  }
                }
              },
              "example": {
                "title": "Welcome to our first team post"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42 \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_discussion(\n  'org',\n  'team_slug',\n  42,\n  'title'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a discussion",
        "description": "Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
        "operationId": "teams/delete-discussion-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#delete-a-discussion"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_discussion(\n  'org',\n  'team_slug',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
      "get": {
        "summary": "List discussion comments",
        "description": "List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.",
        "operationId": "teams/list-discussion-comments-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "name": "direction",
            "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-discussion-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussion_comments(\n  'org',\n  'team_slug',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a discussion comment",
        "description": "Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.",
        "operationId": "teams/create-discussion-comment-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The discussion comment's body text."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Do you like apples?"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  'body'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
      "get": {
        "summary": "Get a discussion comment",
        "description": "Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
        "operationId": "teams/get-discussion-comment-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  comment_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a discussion comment",
        "description": "Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
        "operationId": "teams/update-discussion-comment-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The discussion comment's body text."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Do you like pineapples?"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  comment_number: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a discussion comment",
        "description": "Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.",
        "operationId": "teams/delete-discussion-comment-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  comment_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
      "get": {
        "summary": "List reactions for a team discussion comment",
        "description": "List the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.",
        "operationId": "reactions/list-for-team-discussion-comment-in-org",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  comment_number: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_team_discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for a team discussion comment",
        "description": "Create a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.",
        "operationId": "reactions/create-for-team-discussion-comment-in-org",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  comment_number: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_team_discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete team discussion comment reaction",
        "description": "**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/delete-for-team-discussion-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/comments/42/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  comment_number: 42,\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_team_discussion_comment(\n  'org',\n  'team_slug',\n  42,\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
      "get": {
        "summary": "List reactions for a team discussion",
        "description": "List the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.",
        "operationId": "reactions/list-for-team-discussion-in-org",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_team_discussion(\n  'org',\n  'team_slug',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for a team discussion",
        "description": "Create a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.",
        "operationId": "reactions/create-for-team-discussion-in-org",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_team_discussion(\n  'org',\n  'team_slug',\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete team discussion reaction",
        "description": "**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/delete-for-team-discussion",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-team-discussion-reaction"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/discussions/42/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  discussion_number: 42,\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_team_discussion(\n  'org',\n  'team_slug',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/invitations": {
      "get": {
        "summary": "List pending team invitations",
        "description": "The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.",
        "operationId": "teams/list-pending-invitations-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-pending-team-invitations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/organization-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/invitations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/invitations', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pending_invitations(\n  'org',\n  'team_slug'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/members": {
      "get": {
        "summary": "List team members",
        "description": "Team members will include the members of child teams.\n\nTo list members in a team, the team must be visible to the authenticated user.",
        "operationId": "teams/list-members-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-team-members"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "maintainer",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/members"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/members', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.members(\n  'org',\n  'team_slug'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
      "get": {
        "summary": "Get team membership for a user",
        "description": "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://developer.github.com/v3/teams/#create-a-team).",
        "operationId": "teams/get-membership-for-user-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-membership"
                },
                "examples": {
                  "response-if-user-has-an-active-membership-with-team": {
                    "$ref": "#/components/examples/team-membership-response-if-user-has-an-active-membership-with-team"
                  },
                  "response-if-user-is-a-team-maintainer": {
                    "$ref": "#/components/examples/team-membership-response-if-user-is-a-team-maintainer"
                  },
                  "response-if-user-has-a-pending-membership-with-team": {
                    "$ref": "#/components/examples/team-membership-response-if-user-has-a-pending-membership-with-team"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response if user has no team membership"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/get-membership-in-org\" operation ID is now \"teams/get-membership-for-user-in-org\"",
            "before": {
              "operationId": "teams/get-membership-in-org"
            },
            "after": {
              "operationId": "teams/get-membership-for-user-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/memberships/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/memberships/{username}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.membership_for_user(\n  'org',\n  'team_slug',\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Add or update team membership for a user",
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nAn organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
        "operationId": "teams/add-or-update-membership-for-user-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-membership"
                },
                "examples": {
                  "response-if-users-membership-with-team-is-now-active": {
                    "$ref": "#/components/examples/team-membership-response-if-users-membership-with-team-is-now-active"
                  },
                  "response-if-users-membership-with-team-is-now-pending": {
                    "$ref": "#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Response if team synchronization is set up"
          },
          "422": {
            "description": "Response if you attempt to add an organization to a team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "field": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response-if-you-attempt-to-add-an-organization-to-a-team": {
                    "value": {
                      "message": "Cannot add an organization as a member.",
                      "errors": [
                        {
                          "code": "org",
                          "field": "user",
                          "resource": "TeamMember"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
                    "enum": [
                      "member",
                      "maintainer"
                    ],
                    "default": "member"
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/add-or-update-membership-in-org\" operation ID is now \"teams/add-or-update-membership-for-user-in-org\"",
            "before": {
              "operationId": "teams/add-or-update-membership-in-org"
            },
            "after": {
              "operationId": "teams/add-or-update-membership-for-user-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/memberships/USERNAME \\\n  -d '{\"role\":\"role\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/teams/{team_slug}/memberships/{username}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  username: 'username',\n  role: 'role'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_or_update_membership_for_user(\n  'org',\n  'team_slug',\n  'username',\n  'role'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove team membership for a user",
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
        "operationId": "teams/remove-membership-for-user-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if team synchronization is set up"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/remove-membership-in-org\" operation ID is now \"teams/remove-membership-for-user-in-org\"",
            "before": {
              "operationId": "teams/remove-membership-in-org"
            },
            "after": {
              "operationId": "teams/remove-membership-for-user-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/memberships/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_membership_for_user(\n  'org',\n  'team_slug',\n  'username'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/projects": {
      "get": {
        "summary": "List team projects",
        "description": "Lists the organization projects for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.",
        "operationId": "teams/list-projects-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-projects"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-project"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-project-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/projects"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/projects', {\n  org: 'org',\n  team_slug: 'team_slug',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.projects(\n  'org',\n  'team_slug'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
      "get": {
        "summary": "Check team permissions for a project",
        "description": "Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
        "operationId": "teams/check-permissions-for-project-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-project"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response if project is not managed by this team"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/review-project-in-org\" operation ID is now \"teams/check-permissions-for-project-in-org\"",
            "before": {
              "operationId": "teams/review-project-in-org"
            },
            "after": {
              "operationId": "teams/check-permissions-for-project-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/projects/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/projects/{project_id}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  project_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_permissions_for_project(\n  'org',\n  'team_slug',\n  42\n)"
          }
        ]
      },
      "put": {
        "summary": "Add or update team project permissions",
        "description": "Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
        "operationId": "teams/add-or-update-project-permissions-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-project-permissions"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if the project is not owned by the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response-if-the-project-is-not-owned-by-the-organization": {
                    "value": {
                      "message": "Must have admin rights to Repository.",
                      "documentation_url": "https://developer.github.com/v3/teams/#add-or-update-team-project-permissions"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/add-or-update-project-in-org\" operation ID is now \"teams/add-or-update-project-permissions-in-org\"",
            "before": {
              "operationId": "teams/add-or-update-project-in-org"
            },
            "after": {
              "operationId": "teams/add-or-update-project-permissions-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/projects/42 \\\n  -d '{\"permission\":\"permission\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  project_id: 42,\n  permission: 'permission',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_or_update_project_permissions(\n  'org',\n  'team_slug',\n  42,\n  'permission'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove a project from a team",
        "description": "Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
        "operationId": "teams/remove-project-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-project-from-a-team"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/projects/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  project_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_project(\n  'org',\n  'team_slug',\n  42\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/repos": {
      "get": {
        "summary": "List team repositories",
        "description": "Lists a team's repositories visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.",
        "operationId": "teams/list-repos-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/repos"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/repos', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos(\n  'org',\n  'team_slug'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
      "get": {
        "summary": "Check team permissions for a repository",
        "description": "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
        "operationId": "teams/check-permissions-for-repo-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative response with repository permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-repository"
                },
                "examples": {
                  "alternative-response-with-repository-permissions": {
                    "$ref": "#/components/examples/team-repository-alternative-response-with-repository-permissions"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response if team has permission for the repository"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/check-manages-repo-in-org\" operation ID is now \"teams/check-permissions-for-repo-in-org\"",
            "before": {
              "operationId": "teams/check-manages-repo-in-org"
            },
            "after": {
              "operationId": "teams/check-permissions-for-repo-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/repos/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_permissions_for_repo(\n  'org',\n  'team_slug',\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Add or update team repository permissions",
        "description": "To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n\nFor more information about the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".",
        "operationId": "teams/add-or-update-repo-permissions-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n\\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  \n\\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                    "enum": [
                      "pull",
                      "push",
                      "admin",
                      "maintain",
                      "triage"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"teams/add-or-update-repo-in-org\" operation ID is now \"teams/add-or-update-repo-permissions-in-org\"",
            "before": {
              "operationId": "teams/add-or-update-repo-in-org"
            },
            "after": {
              "operationId": "teams/add-or-update-repo-permissions-in-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/repos/octocat/hello-world \\\n  -d '{\"permission\":\"permission\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  owner: 'octocat',\n  repo: 'hello-world',\n  permission: 'permission'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_or_update_repo_permissions(\n  'org',\n  'team_slug',\n  'hello-world',\n  'permission'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove a repository from a team",
        "description": "If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
        "operationId": "teams/remove-repo-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-repository-from-a-team"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/repos/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}', {\n  org: 'org',\n  team_slug: 'team_slug',\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_repo(\n  'org',\n  'team_slug',\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings": {
      "get": {
        "summary": "List IdP groups for a team",
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nList IdP groups connected to a team on GitHub.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.",
        "operationId": "teams/list-id-p-groups-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group-mapping-3"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/group-mapping-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/team-sync/group-mappings"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/team-sync/group-mappings', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.id_p_groups(\n  'org',\n  'team_slug'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Create or update IdP group connections",
        "description": "Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nCreates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.",
        "operationId": "teams/create-or-update-id-p-group-connections-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group-mapping"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/group-mapping"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "type": "array",
                    "description": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "group_id": {
                          "type": "string",
                          "description": "ID of the IdP group."
                        },
                        "group_name": {
                          "type": "string",
                          "description": "Name of the IdP group."
                        },
                        "group_description": {
                          "type": "string",
                          "description": "Description of the IdP group."
                        }
                      },
                      "required": [
                        "group_id",
                        "group_name",
                        "group_description"
                      ]
                    }
                  }
                },
                "required": [
                  "groups"
                ]
              },
              "example": {
                "groups": [
                  {
                    "group_id": "123",
                    "group_name": "Octocat admins",
                    "group_description": "The people who configure your octoworld."
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/team-sync/group-mappings \\\n  -d '{\"groups\":[{\"group_id\":\"group_id\",\"group_name\":\"group_name\",\"group_description\":\"group_description\"}]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /orgs/{org}/teams/{team_slug}/team-sync/group-mappings', {\n  org: 'org',\n  team_slug: 'team_slug',\n  groups: [\n    {\n      group_id: 'group_id',\n      group_name: 'group_name',\n      group_description: 'group_description'\n    }\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_or_update_id_p_group_connections(\n  'org',\n  'team_slug',\n  [\n    {\n      group_id: 'group_id',\n      group_name: 'group_name',\n      group_description: 'group_description'\n    }\n  ]\n)"
          }
        ]
      }
    },
    "/orgs/{org}/teams/{team_slug}/teams": {
      "get": {
        "summary": "List child teams",
        "description": "Lists the child teams of the team specified by `{team_slug}`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.",
        "operationId": "teams/list-child-in-org",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-child-teams"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/team_slug"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if child teams exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-2"
                  }
                },
                "examples": {
                  "response-if-child-teams-exist": {
                    "$ref": "#/components/examples/team-items-response-if-child-teams-exist"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/orgs/ORG/teams/TEAM_SLUG/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /orgs/{org}/teams/{team_slug}/teams', {\n  org: 'org',\n  team_slug: 'team_slug'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.child(\n  'org',\n  'team_slug'\n)"
          }
        ]
      }
    },
    "/projects/columns/cards/{card_id}": {
      "get": {
        "summary": "Get a project card",
        "description": "",
        "operationId": "projects/get-card",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#get-a-project-card"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-card"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-card"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/cards/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/columns/cards/{card_id}', {\n  card_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.card(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a project card",
        "description": "",
        "operationId": "projects/update-card",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#update-a-project-card"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-card"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-card"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "type": "string",
                    "description": "The card's note content. Only valid for cards without another type of content, so this cannot be specified if the card already has a `content_id` and `content_type`."
                  },
                  "archived": {
                    "type": "boolean",
                    "description": "Use `true` to archive a project card. Specify `false` if you need to restore a previously archived project card."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/cards/42 \\\n  -d '{\"note\":\"note\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /projects/columns/cards/{card_id}', {\n  card_id: 42,\n  note: 'note',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_card(\n  42,\n  'note'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a project card",
        "description": "",
        "operationId": "projects/delete-card",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#delete-a-project-card"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/cards/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /projects/columns/cards/{card_id}', {\n  card_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_card(\n  42\n)"
          }
        ]
      }
    },
    "/projects/columns/cards/{card_id}/moves": {
      "post": {
        "summary": "Move a project card",
        "description": "",
        "operationId": "projects/move-card",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#move-a-project-card"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "position": {
                    "type": "string",
                    "description": "Can be one of `top`, `bottom`, or `after:<card_id>`, where `<card_id>` is the `id` value of a card in the same column, or in the new column specified by `column_id`.",
                    "pattern": "^(top|bottom|after:\\d+)$"
                  },
                  "column_id": {
                    "type": "integer",
                    "description": "The `id` value of a column in the same project."
                  }
                },
                "required": [
                  "position"
                ]
              },
              "example": {
                "position": "after:3",
                "column_id": 5
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/cards/42/moves \\\n  -d '{\"position\":\"position\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /projects/columns/cards/{card_id}/moves', {\n  card_id: 42,\n  position: 'position',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.move_card(\n  42,\n  'position'\n)"
          }
        ]
      }
    },
    "/projects/columns/{column_id}": {
      "get": {
        "summary": "Get a project column",
        "description": "",
        "operationId": "projects/get-column",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#get-a-project-column"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/column_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-column"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-column"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/columns/{column_id}', {\n  column_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.column(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a project column",
        "description": "",
        "operationId": "projects/update-column",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#update-a-project-column"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/column_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-column"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-column"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name of the column."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/42 \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /projects/columns/{column_id}', {\n  column_id: 42,\n  name: 'name',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_column(\n  42,\n  'name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a project column",
        "description": "",
        "operationId": "projects/delete-column",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#delete-a-project-column"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/column_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /projects/columns/{column_id}', {\n  column_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_column(\n  42\n)"
          }
        ]
      }
    },
    "/projects/columns/{column_id}/cards": {
      "get": {
        "summary": "List project cards",
        "description": "",
        "operationId": "projects/list-cards",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#list-project-cards"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/column_id"
          },
          {
            "$ref": "#/components/parameters/archived_state"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project-card"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-card-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/42/cards"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/columns/{column_id}/cards', {\n  column_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.cards(\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a project card",
        "description": "**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.\n\nBe aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull request id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "projects/create-card",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/cards/#create-a-project-card"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/column_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-card"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-card"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "type": "string",
                    "description": "The card's note content. Only valid for cards without another type of content, so you must omit when specifying `content_id` and `content_type`."
                  },
                  "content_id": {
                    "type": "integer",
                    "description": "The issue or pull request id you want to associate with this card. You can use the [List repository issues](https://developer.github.com/v3/issues/#list-repository-issues) and [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoints to find this id.  \n**Note:** Depending on whether you use the issue id or pull request id, you will need to specify `Issue` or `PullRequest` as the `content_type`."
                  },
                  "content_type": {
                    "type": "string",
                    "description": "**Required if you provide `content_id`**. The type of content you want to associate with this card. Use `Issue` when `content_id` is an issue id and use `PullRequest` when `content_id` is a pull request id."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/42/cards \\\n  -d '{\"note\":\"note\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /projects/columns/{column_id}/cards', {\n  column_id: 42,\n  note: 'note',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_card(\n  42,\n  'note'\n)"
          }
        ]
      }
    },
    "/projects/columns/{column_id}/moves": {
      "post": {
        "summary": "Move a project column",
        "description": "",
        "operationId": "projects/move-column",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#move-a-project-column"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/column_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "position": {
                    "type": "string",
                    "description": "Can be one of `first`, `last`, or `after:<column_id>`, where `<column_id>` is the `id` value of a column in the same project.",
                    "pattern": "^(first|last|after:\\d+)$"
                  }
                },
                "required": [
                  "position"
                ]
              },
              "example": {
                "position": "after:3"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/columns/42/moves \\\n  -d '{\"position\":\"position\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /projects/columns/{column_id}/moves', {\n  column_id: 42,\n  position: 'position',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.move_column(\n  42,\n  'position'\n)"
          }
        ]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "summary": "Get a project",
        "description": "Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/get",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#get-a-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/{project_id}', {\n  project_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a project",
        "description": "Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/update",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#update-a-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-3"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response if the authenticated user does not have access to the project"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the project."
                  },
                  "body": {
                    "type": "string",
                    "description": "The description of the project."
                  },
                  "state": {
                    "type": "string",
                    "description": "State of the project. Either `open` or `closed`.",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "organization_permission": {
                    "type": "string",
                    "description": "The permission level that determines whether all members of the project's organization can see and/or make changes to the project. Setting `organization_permission` is only available for organization projects. If an organization member belongs to a team with a higher level of access or is a collaborator with a higher level of access, their permission level is not lowered by `organization_permission`. For information on changing access for a team or collaborator, see [Add or update team project permissions](https://developer.github.com/v3/teams/#add-or-update-team-project-permissions) or [Add project collaborator](https://developer.github.com/v3/projects/collaborators/#add-project-collaborator).  \n  \n**Note:** Updating a project's `organization_permission` requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `read` - Organization members can read, but not write to or administer this project.  \n\\* `write` - Organization members can read and write, but not administer this project.  \n\\* `admin` - Organization members can read, write and administer this project.  \n\\* `none` - Organization members can only see this project if it is public."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Sets the visibility of a project board. Setting `private` is only available for organization and user projects. **Note:** Updating a project's visibility requires `admin` access to the project.  \n  \nCan be one of:  \n\\* `false` - Anyone can see the project.  \n\\* `true` - Only the user can view a project board created on a user account. Organization members with the appropriate `organization_permission` can see project boards in an organization account."
                  }
                }
              },
              "example": {
                "name": "Outcomes Tracker",
                "body": "The board to track work for the Outcomes application."
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42 \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /projects/{project_id}', {\n  project_id: 42,\n  name: 'name',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  42,\n  'name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a project",
        "description": "Deletes a project board. Returns a `404 Not Found` status if projects are disabled.",
        "operationId": "projects/delete",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#delete-a-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /projects/{project_id}', {\n  project_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete(\n  42\n)"
          }
        ]
      }
    },
    "/projects/{project_id}/collaborators": {
      "get": {
        "summary": "List project collaborators",
        "description": "Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.",
        "operationId": "projects/list-collaborators",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#list-project-collaborators"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/affiliation"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42/collaborators"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/{project_id}/collaborators', {\n  project_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.collaborators(\n  42\n)"
          }
        ]
      }
    },
    "/projects/{project_id}/collaborators/{username}": {
      "put": {
        "summary": "Add project collaborator",
        "description": "Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.",
        "operationId": "projects/add-collaborator",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#add-project-collaborator"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant the collaborator. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\" Can be one of:  \n\\* `read` - can read, but not write to or administer this project.  \n\\* `write` - can read and write, but not administer this project.  \n\\* `admin` - can read, write and administer this project.",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ],
                    "default": "write"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42/collaborators/USERNAME \\\n  -d '{\"permission\":\"permission\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /projects/{project_id}/collaborators/{username}', {\n  project_id: 42,\n  username: 'username',\n  permission: 'permission',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_collaborator(\n  42,\n  'username',\n  'permission'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove project collaborator",
        "description": "Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.",
        "operationId": "projects/remove-collaborator",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#remove-project-collaborator"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42/collaborators/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /projects/{project_id}/collaborators/{username}', {\n  project_id: 42,\n  username: 'username',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_collaborator(\n  42,\n  'username'\n)"
          }
        ]
      }
    },
    "/projects/{project_id}/collaborators/{username}/permission": {
      "get": {
        "summary": "Get project permission for a user",
        "description": "Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.",
        "operationId": "projects/get-permission-for-user",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/collaborators/#get-project-permission-for-a-user"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-collaborator-permission"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-collaborator-permission"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"projects/review-user-permission-level\" operation ID is now \"projects/get-permission-for-user\"",
            "before": {
              "operationId": "projects/review-user-permission-level"
            },
            "after": {
              "operationId": "projects/get-permission-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42/collaborators/USERNAME/permission"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/{project_id}/collaborators/{username}/permission', {\n  project_id: 42,\n  username: 'username',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.permission_for_user(\n  42,\n  'username'\n)"
          }
        ]
      }
    },
    "/projects/{project_id}/columns": {
      "get": {
        "summary": "List project columns",
        "description": "",
        "operationId": "projects/list-columns",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#list-project-columns"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project-column"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-column-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42/columns"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /projects/{project_id}/columns', {\n  project_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.columns(\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a project column",
        "description": "",
        "operationId": "projects/create-column",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/columns/#create-a-project-column"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project-column"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-column"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the column."
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/projects/42/columns \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /projects/{project_id}/columns', {\n  project_id: 42,\n  name: 'name',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_column(\n  42,\n  'name'\n)"
          }
        ]
      }
    },
    "/rate_limit": {
      "get": {
        "summary": "Get rate limit status for the authenticated user",
        "description": "**Note:** Accessing this endpoint does not count against your REST API rate limit.\n\n**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
        "operationId": "rate-limit/get",
        "tags": [
          "rate-limit"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/rate_limit/#get-rate-limit-status-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rate-limit-overview"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/rate-limit-overview"
                  }
                }
              }
            },
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/X-RateLimit-Remaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/X-RateLimit-Reset"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/rate_limit"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /rate_limit')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get()"
          }
        ]
      }
    },
    "/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete a reaction (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).\n\nOAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://developer.github.com/v3/teams/discussions/) or [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/).",
        "operationId": "reactions/delete-legacy",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-a-reaction-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-26",
          "removalDate": "2021-02-21",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-02-26",
            "note": "\"reactions/delete\" operation ID is now \"reactions/delete-legacy\"",
            "before": {
              "operationId": "reactions/delete"
            },
            "after": {
              "operationId": "reactions/delete-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /reactions/{reaction_id}', {\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "summary": "Get a repository",
        "description": "When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.\n\nThe `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.",
        "operationId": "repos/get",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#get-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/full-repository"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/full-repository-default-response"
                  },
                  "response-with-scarlet-witch-preview-media-type": {
                    "$ref": "#/components/examples/full-repository-response-with-scarlet-witch-preview-media-type"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```"
            },
            {
              "required": false,
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'hello-world'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a repository",
        "description": "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://developer.github.com/v3/repos/#replace-all-repository-topics) endpoint.",
        "operationId": "repos/update",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#update-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/full-repository-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/full-repository"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```"
            },
            {
              "required": false,
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository."
                  },
                  "homepage": {
                    "type": "string",
                    "description": "A URL with more information about the repository."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
                    "default": false
                  },
                  "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.",
                    "enum": [
                      "public",
                      "private",
                      "visibility",
                      "internal"
                    ]
                  },
                  "has_issues": {
                    "type": "boolean",
                    "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                    "default": true
                  },
                  "has_projects": {
                    "type": "boolean",
                    "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                    "default": true
                  },
                  "has_wiki": {
                    "type": "boolean",
                    "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                    "default": true
                  },
                  "is_template": {
                    "type": "boolean",
                    "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                    "default": false
                  },
                  "default_branch": {
                    "type": "string",
                    "description": "Updates the default branch for this repository."
                  },
                  "allow_squash_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                    "default": true
                  },
                  "allow_merge_commit": {
                    "type": "boolean",
                    "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                    "default": true
                  },
                  "allow_rebase_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                    "default": true
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                    "default": false
                  },
                  "archived": {
                    "type": "boolean",
                    "description": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
                    "default": false
                  }
                }
              },
              "example": {
                "name": "Hello-World",
                "description": "This is your first repository",
                "homepage": "https://github.com",
                "private": true,
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'hello-world',\n  'name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a repository",
        "description": "Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.",
        "operationId": "repos/delete",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#delete-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Organization members cannot delete repositories.",
                  "documentation_url": "https://developer.github.com/v3/repos/#delete-a-repository"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts": {
      "get": {
        "summary": "List artifacts for a repository",
        "description": "Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-artifacts-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/artifact-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/artifact-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/artifacts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/artifacts', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.artifacts_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
      "get": {
        "summary": "Get an artifact",
        "description": "Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-artifact",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#get-an-artifact"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/artifact_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/artifact"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/artifact"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/artifacts/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  artifact_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.artifact(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an artifact",
        "description": "Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/delete-artifact",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#delete-an-artifact"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/artifact_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/artifacts/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  artifact_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_artifact(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
      "get": {
        "summary": "Download an artifact",
        "description": "Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\nGitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/download-artifact",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#download-an-artifact"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/artifact_id"
          },
          {
            "$ref": "#/components/parameters/archive_format"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "$ref": "#/components/headers/Location"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/artifacts/42/ARCHIVE_FORMAT"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  artifact_id: 42,\n  archive_format: 'archive_format'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.artifact(\n  'hello-world',\n  42,\n  'archive_format'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
      "get": {
        "summary": "Get a job for a workflow run",
        "description": "Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-job-for-workflow-run",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-jobs/#get-a-job-for-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/job_id"
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/job"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"actions/get-workflow-job\" operation ID is now \"actions/get-job-for-workflow-run\"",
            "before": {
              "operationId": "actions/get-workflow-job"
            },
            "after": {
              "operationId": "actions/get-job-for-workflow-run"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/jobs/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/jobs/{job_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  job_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.job_for_workflow_run(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
      "get": {
        "summary": "Download job logs for a workflow run",
        "description": "Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\nuse this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\nhave the `actions:read` permission to use this endpoint.",
        "operationId": "actions/download-job-logs-for-workflow-run",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-jobs/#download-job-logs-for-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/job_id"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/jobs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-05-04",
            "note": "\"actions/list-workflow-job-logs\" operation ID is now \"actions/download-workflow-job-logs\"",
            "before": {
              "operationId": "actions/list-workflow-job-logs"
            },
            "after": {
              "operationId": "actions/download-workflow-job-logs"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"actions/download-workflow-job-logs\" operation ID is now \"actions/download-job-logs-for-workflow-run\"",
            "before": {
              "operationId": "actions/download-workflow-job-logs"
            },
            "after": {
              "operationId": "actions/download-job-logs-for-workflow-run"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/jobs/42/logs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  job_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.job_logs_for_workflow_run(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runners": {
      "get": {
        "summary": "List self-hosted runners for a repository",
        "description": "Lists all self-hosted runners for a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/list-self-hosted-runners-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "runners": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/runner-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runners"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runners', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.self_hosted_runners_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runners/downloads": {
      "get": {
        "summary": "List runner applications for a repository",
        "description": "Lists binaries for the runner application that you can download and run. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/list-runner-applications-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/runner-application"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner-application-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-04-22",
            "note": "\"actions/list-downloads-for-self-hosted-runner-application\" operation ID is now \"actions/list-runner-applications-for-repo\"",
            "before": {
              "operationId": "actions/list-downloads-for-self-hosted-runner-application"
            },
            "after": {
              "operationId": "actions/list-runner-applications-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runners/downloads"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runners/downloads', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.runner_applications_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runners/registration-token": {
      "post": {
        "summary": "Create a registration token for a repository",
        "description": "Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `repo` scope to use this endpoint.\n\n#### Example using registration token\n \nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n```",
        "operationId": "actions/create-registration-token-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-04-22",
            "note": "\"actions/create-registration-token\" operation ID is now \"actions/create-registration-token-for-repo\"",
            "before": {
              "operationId": "actions/create-registration-token"
            },
            "after": {
              "operationId": "actions/create-registration-token-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runners/registration-token"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/actions/runners/registration-token', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_registration_token_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runners/remove-token": {
      "post": {
        "summary": "Create a remove token for a repository",
        "description": "Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\n#### Example using remove token\n \nTo remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n\n```\n./config.sh remove --token TOKEN\n```",
        "operationId": "actions/create-remove-token-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authentication-token"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/authentication-token-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-04-22",
            "note": "\"actions/create-remove-token\" operation ID is now \"actions/create-remove-token-for-repo\"",
            "before": {
              "operationId": "actions/create-remove-token"
            },
            "after": {
              "operationId": "actions/create-remove-token-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runners/remove-token"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/actions/runners/remove-token', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_remove_token_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runners/{runner_id}": {
      "get": {
        "summary": "Get a self-hosted runner for a repository",
        "description": "Gets a specific self-hosted runner. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/get-self-hosted-runner-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/runner_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/runner"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/runner"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-04-22",
            "note": "\"actions/get-self-hosted-runner\" operation ID is now \"actions/get-self-hosted-runner-for-repo\"",
            "before": {
              "operationId": "actions/get-self-hosted-runner"
            },
            "after": {
              "operationId": "actions/get-self-hosted-runner-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runners/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runners/{runner_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  runner_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.self_hosted_runner_for_repo(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a self-hosted runner from a repository",
        "description": "Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists. You must authenticate using an access token with the `repo` scope to use this endpoint.",
        "operationId": "actions/delete-self-hosted-runner-from-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/runner_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-04-22",
            "note": "\"actions/remove-self-hosted-runner\" operation ID is now \"actions/delete-self-hosted-runner-from-repo\"",
            "before": {
              "operationId": "actions/remove-self-hosted-runner"
            },
            "after": {
              "operationId": "actions/delete-self-hosted-runner-from-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runners/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  runner_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_self_hosted_runner_from_repo(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs": {
      "get": {
        "summary": "List workflow runs for a repository",
        "description": "Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-workflow-runs-for-repo",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/actor"
          },
          {
            "$ref": "#/components/parameters/branch"
          },
          {
            "$ref": "#/components/parameters/event"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "workflow_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/workflow-run"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"actions/list-repo-workflow-runs\" operation ID is now \"actions/list-workflow-runs-for-repo\"",
            "before": {
              "operationId": "actions/list-repo-workflow-runs"
            },
            "after": {
              "operationId": "actions/list-workflow-runs-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runs', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_runs_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}": {
      "get": {
        "summary": "Get a workflow run",
        "description": "Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow-run",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow-run"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_run(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a workflow run",
        "description": "Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\nprivate you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\nthis endpoint.",
        "operationId": "actions/delete-workflow-run",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#delete-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/actions/runs/{run_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_workflow_run(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
      "get": {
        "summary": "List workflow run artifacts",
        "description": "Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-workflow-run-artifacts",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "artifacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/artifact-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/artifact-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/artifacts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_run_artifacts(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
      "post": {
        "summary": "Cancel a workflow run",
        "description": "Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/cancel-workflow-run",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#cancel-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "202": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/cancel"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.cancel_workflow_run(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
      "get": {
        "summary": "List jobs for a workflow run",
        "description": "Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).",
        "operationId": "actions/list-jobs-for-workflow-run",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          },
          {
            "$ref": "#/components/parameters/filter"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "jobs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/job"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/job-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/jobs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.jobs_for_workflow_run(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
      "get": {
        "summary": "Download workflow run logs",
        "description": "Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\nthis endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\nthe `actions:read` permission to use this endpoint.",
        "operationId": "actions/download-workflow-run-logs",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#download-workflow-run-logs"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-05-04",
            "note": "\"actions/list-workflow-run-logs\" operation ID is now \"actions/download-workflow-run-logs\"",
            "before": {
              "operationId": "actions/list-workflow-run-logs"
            },
            "after": {
              "operationId": "actions/download-workflow-run-logs"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/logs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_run_logs(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete workflow run logs",
        "description": "Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/delete-workflow-run-logs",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#delete-workflow-run-logs"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/logs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_workflow_run_logs(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
      "post": {
        "summary": "Re-run a workflow",
        "description": "Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.",
        "operationId": "actions/re-run-workflow",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#re-run-a-workflow"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/rerun"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.re_run_workflow(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
      "get": {
        "summary": "Get workflow run usage",
        "description": "**Warning:** This GitHub Actions usage endpoint is currently in public beta and subject to change. For more information, see \"[GitHub Actions API workflow usage](https://developer.github.com/changes/2020-05-15-actions-api-workflow-usage).\"\n\nGets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow-run-usage",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#get-workflow-run-usage"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/run_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow-run-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/runs/42/timing"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  run_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_run_usage(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/secrets": {
      "get": {
        "summary": "List repository secrets",
        "description": "Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/list-repo-secrets",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#list-repository-secrets"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "secrets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/actions-secret-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-secret-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-05-14",
            "note": "\"actions/list-secrets-for-repo\" operation ID is now \"actions/list-repo-secrets\"",
            "before": {
              "operationId": "actions/list-secrets-for-repo"
            },
            "after": {
              "operationId": "actions/list-repo-secrets"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/secrets"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/secrets', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_secrets(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/secrets/public-key": {
      "get": {
        "summary": "Get a repository public key",
        "description": "Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/get-repo-public-key",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-public-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-public-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-05-14",
            "note": "\"actions/get-public-key\" operation ID is now \"actions/get-repo-public-key\"",
            "before": {
              "operationId": "actions/get-public-key"
            },
            "after": {
              "operationId": "actions/get-repo-public-key"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/secrets/public-key"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/secrets/public-key', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_public_key(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
      "get": {
        "summary": "Get a repository secret",
        "description": "Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/get-repo-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#get-a-repository-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-secret"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-secret"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2020-05-14",
            "note": "\"name\" parameter renamed to \"secret_name\"",
            "before": {
              "name": "name"
            },
            "after": {
              "name": "secret_name"
            }
          },
          {
            "type": "operation",
            "date": "2020-05-14",
            "note": "\"actions/get-secret\" operation ID is now \"actions/get-repo-secret\"",
            "before": {
              "operationId": "actions/get-secret"
            },
            "after": {
              "operationId": "actions/get-repo-secret"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/secrets/SECRET_NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/secrets/{secret_name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  secret_name: 'secret_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_secret(\n  'hello-world',\n  'secret_name'\n)"
          }
        ]
      },
      "put": {
        "summary": "Create or update a repository secret",
        "description": "Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\nthis endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.\n\n```\nconst sodium = require('tweetsodium');\n\nconst key = \"base64-encoded-public-key\";\nconst value = \"plain-text-secret\";\n\n// Convert the message and key to Uint8Array's (Buffer implements that interface)\nconst messageBytes = Buffer.from(value);\nconst keyBytes = Buffer.from(key, 'base64');\n\n// Encrypt using LibSodium.\nconst encryptedBytes = sodium.seal(messageBytes, keyBytes);\n\n// Base64 the encrypted secret\nconst encrypted = Buffer.from(encryptedBytes).toString('base64');\n\nconsole.log(encrypted);\n```\n\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire \"rbnacl\"\nrequire \"base64\"\n\nkey = Base64.decode64(\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(\"my_secret\")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```",
        "operationId": "actions/create-or-update-repo-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#create-or-update-a-repository-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "201": {
            "description": "Response when creating a secret"
          },
          "204": {
            "description": "Response when updating a secret"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "encrypted_value": {
                    "type": "string",
                    "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key) endpoint."
                  },
                  "key_id": {
                    "type": "string",
                    "description": "ID of the key you used to encrypt the secret."
                  }
                }
              },
              "example": {
                "encrypted_value": "****************************************************************************************",
                "key_id": "012345678912345678"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2020-05-14",
            "note": "\"name\" parameter renamed to \"secret_name\"",
            "before": {
              "name": "name"
            },
            "after": {
              "name": "secret_name"
            }
          },
          {
            "type": "operation",
            "date": "2020-05-14",
            "note": "\"actions/create-or-update-secret-for-repo\" operation ID is now \"actions/create-or-update-repo-secret\"",
            "before": {
              "operationId": "actions/create-or-update-secret-for-repo"
            },
            "after": {
              "operationId": "actions/create-or-update-repo-secret"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/secrets/SECRET_NAME \\\n  -d '{\"encrypted_value\":\"encrypted_value\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  secret_name: 'secret_name',\n  encrypted_value: 'encrypted_value'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_or_update_repo_secret(\n  'hello-world',\n  'secret_name',\n  'encrypted_value'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a repository secret",
        "description": "Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.",
        "operationId": "actions/delete-repo-secret",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/secrets/#delete-a-repository-secret"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/secret_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2020-05-14",
            "note": "\"name\" parameter renamed to \"secret_name\"",
            "before": {
              "name": "name"
            },
            "after": {
              "name": "secret_name"
            }
          },
          {
            "type": "operation",
            "date": "2020-05-14",
            "note": "\"actions/delete-secret-from-repo\" operation ID is now \"actions/delete-repo-secret\"",
            "before": {
              "operationId": "actions/delete-secret-from-repo"
            },
            "after": {
              "operationId": "actions/delete-repo-secret"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/secrets/SECRET_NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  secret_name: 'secret_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_repo_secret(\n  'hello-world',\n  'secret_name'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/workflows": {
      "get": {
        "summary": "List repository workflows",
        "description": "Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/list-repo-workflows",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#list-repository-workflows"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "workflows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/workflow-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/workflows"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/workflows', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_workflows(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
      "get": {
        "summary": "Get a workflow",
        "description": "Gets a specific workflow. You can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#get-a-workflow"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/workflow_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/workflows/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  workflow_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
      "post": {
        "summary": "Create a workflow dispatch event",
        "description": "You can use this endpoint to manually trigger a GitHub Actions workflow run. You can also replace `{workflow_id}` with the workflow file name. For example, you could use `main.yml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line).\"",
        "operationId": "actions/create-workflow-dispatch",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#create-a-workflow-dispatch-event"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/workflow_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "description": "The reference of the workflow run. The reference can be a branch, tag, or a commit SHA."
                  },
                  "inputs": {
                    "type": "object",
                    "description": "Input keys and values configured in the workflow file. The maximum number of properties is 10.",
                    "default": "Any default properties configured in the workflow file will be used when `inputs` are omitted.",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "maxProperties": 10
                  }
                },
                "required": [
                  "ref"
                ]
              },
              "example": {
                "ref": "topic-branch",
                "inputs": {
                  "name": "Mona the Octocat",
                  "home": "San Francisco, CA"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/workflows/42/dispatches \\\n  -d '{\"ref\":\"ref\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  workflow_id: 42,\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_workflow_dispatch_event(\n  'hello-world',\n  42,\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
      "get": {
        "summary": "List workflow runs",
        "description": "List all workflow runs for a workflow. You can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://developer.github.com/v3/#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.",
        "operationId": "actions/list-workflow-runs",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/workflow_id"
          },
          {
            "$ref": "#/components/parameters/actor"
          },
          {
            "$ref": "#/components/parameters/branch"
          },
          {
            "$ref": "#/components/parameters/event"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "workflow_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/workflow-run"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-run-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/workflows/42/runs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  workflow_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_runs(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
      "get": {
        "summary": "Get workflow usage",
        "description": "**Warning:** This GitHub Actions usage endpoint is currently in public beta and subject to change. For more information, see \"[GitHub Actions API workflow usage](https://developer.github.com/changes/2020-05-15-actions-api-workflow-usage).\"\n\nGets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nYou can also replace `:workflow_id` with `:workflow_file_name`. For example, you could use `main.yml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.",
        "operationId": "actions/get-workflow-usage",
        "tags": [
          "actions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/actions/workflows/#get-workflow-usage"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/workflow_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/workflow-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/actions/workflows/42/timing"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  workflow_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.workflow_usage(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/assignees": {
      "get": {
        "summary": "List assignees",
        "description": "Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.",
        "operationId": "issues/list-assignees",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#list-assignees"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/assignees"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/assignees', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.assignees(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/assignees/{assignee}": {
      "get": {
        "summary": "Check if a user can be assigned",
        "description": "Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned.",
        "operationId": "issues/check-user-can-be-assigned",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#check-if-a-user-can-be-assigned"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/assignee"
          }
        ],
        "responses": {
          "204": {
            "description": "If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned."
          },
          "404": {
            "description": "Otherwise a `404` status code is returned."
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"issues/check-assignee\" operation ID is now \"issues/check-user-can-be-assigned\"",
            "before": {
              "operationId": "issues/check-assignee"
            },
            "after": {
              "operationId": "issues/check-user-can-be-assigned"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/assignees/ASSIGNEE"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/assignees/{assignee}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  assignee: 'assignee'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_user_can_be_assigned(\n  'hello-world',\n  'assignee'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/automated-security-fixes": {
      "put": {
        "summary": "Enable automated security fixes",
        "description": "Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".",
        "operationId": "repos/enable-automated-security-fixes",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#enable-automated-security-fixes"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.london-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "london",
              "note": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.london-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/automated-security-fixes"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/automated-security-fixes', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'london'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.enable_automated_security_fixes(\n  'hello-world'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Disable automated security fixes",
        "description": "Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \"[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)\".",
        "operationId": "repos/disable-automated-security-fixes",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#disable-automated-security-fixes"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.london-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "london",
              "note": "Enabling or disabling automated security fixes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.london-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.london-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/automated-security-fixes"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/automated-security-fixes', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'london'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.disable_automated_security_fixes(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches": {
      "get": {
        "summary": "List branches",
        "description": "",
        "operationId": "repos/list-branches",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-branches"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/protected"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/short-branch-with-protection"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/short-branch-with-protection-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.branches(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}": {
      "get": {
        "summary": "Get a branch",
        "description": "",
        "operationId": "repos/get-branch",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-a-branch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch-with-protection"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-with-protection"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.branch(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection": {
      "get": {
        "summary": "Get branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-branch-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-branch-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.luke-cage-preview+json"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch-protection"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-protection"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.luke-cage-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.branch_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "put": {
        "summary": "Update branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users, apps, and teams in total is limited to 100 items.",
        "operationId": "repos/update-branch-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#update-branch-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.luke-cage-preview+json"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch-protection"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-protection"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "required_status_checks": {
                    "type": "object",
                    "description": "Require status checks to pass before merging. Set to `null` to disable.",
                    "nullable": true,
                    "properties": {
                      "strict": {
                        "type": "boolean",
                        "description": "Require branches to be up to date before merging."
                      },
                      "contexts": {
                        "type": "array",
                        "description": "The list of status checks to require in order to merge into this branch",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "strict",
                      "contexts"
                    ]
                  },
                  "enforce_admins": {
                    "type": "boolean",
                    "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
                    "nullable": true
                  },
                  "required_pull_request_reviews": {
                    "type": "object",
                    "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
                    "nullable": true,
                    "properties": {
                      "dismissal_restrictions": {
                        "type": "object",
                        "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                        "properties": {
                          "users": {
                            "type": "array",
                            "description": "The list of user `login`s with dismissal access",
                            "items": {
                              "type": "string"
                            }
                          },
                          "teams": {
                            "type": "array",
                            "description": "The list of team `slug`s with dismissal access",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "dismiss_stale_reviews": {
                        "type": "boolean",
                        "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                      },
                      "require_code_owner_reviews": {
                        "type": "boolean",
                        "description": "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them."
                      },
                      "required_approving_review_count": {
                        "type": "integer",
                        "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6."
                      }
                    }
                  },
                  "restrictions": {
                    "type": "object",
                    "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
                    "nullable": true,
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s with push access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s with push access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "apps": {
                        "type": "array",
                        "description": "The list of app `slug`s with push access",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "users",
                      "teams"
                    ]
                  },
                  "required_linear_history": {
                    "type": "boolean",
                    "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\"."
                  },
                  "allow_force_pushes": {
                    "type": "boolean",
                    "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\".",
                    "nullable": true
                  },
                  "allow_deletions": {
                    "type": "boolean",
                    "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\"."
                  }
                },
                "required": [
                  "required_status_checks",
                  "enforce_admins",
                  "required_pull_request_reviews",
                  "restrictions"
                ]
              },
              "example": {
                "required_status_checks": {
                  "strict": true,
                  "contexts": [
                    "continuous-integration/travis-ci"
                  ]
                },
                "enforce_admins": true,
                "required_pull_request_reviews": {
                  "dismissal_restrictions": {
                    "users": [
                      "octocat"
                    ],
                    "teams": [
                      "justice-league"
                    ]
                  },
                  "dismiss_stale_reviews": true,
                  "require_code_owner_reviews": true,
                  "required_approving_review_count": 2
                },
                "restrictions": {
                  "users": [
                    "octocat"
                  ],
                  "teams": [
                    "justice-league"
                  ],
                  "apps": [
                    "super-ci"
                  ]
                },
                "required_linear_history": true,
                "allow_force_pushes": true,
                "allow_deletions": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.luke-cage-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection \\\n  -d '{\"required_status_checks\":{\"strict\":true,\"contexts\":[\"contexts\"]},\"enforce_admins\":true,\"required_pull_request_reviews\":{\"dismissal_restrictions\":{\"users\":[\"users\"],\"teams\":[\"teams\"]},\"dismiss_stale_reviews\":true,\"require_code_owner_reviews\":true,\"required_approving_review_count\":42},\"restrictions\":{\"users\":[\"users\"],\"teams\":[\"teams\"],\"apps\":[\"apps\"]}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  required_status_checks: {\n    strict: true,\n    contexts: [\n      'contexts'\n    ]\n  },\n  enforce_admins: true,\n  required_pull_request_reviews: {\n    dismissal_restrictions: {\n      users: [\n        'users'\n      ],\n      teams: [\n        'teams'\n      ]\n    },\n    dismiss_stale_reviews: true,\n    require_code_owner_reviews: true,\n    required_approving_review_count: 42\n  },\n  restrictions: {\n    users: [\n      'users'\n    ],\n    teams: [\n      'teams'\n    ],\n    apps: [\n      'apps'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_branch_protection(\n  'hello-world',\n  'branch',\n  {\n    strict: true,\n    contexts: [\n      'contexts'\n    ]\n  },\n  true,\n  {\n    dismissal_restrictions: {\n      users: [\n        'users'\n      ],\n      teams: [\n        'teams'\n      ]\n    },\n    dismiss_stale_reviews: true,\n    require_code_owner_reviews: true,\n    required_approving_review_count: 42\n  },\n  {\n    users: [\n      'users'\n    ],\n    teams: [\n      'teams'\n    ],\n    apps: [\n      'apps'\n    ]\n  }\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/delete-branch-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-branch-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-branch-protection\" operation ID is now \"repos/delete-branch-protection\"",
            "before": {
              "operationId": "repos/remove-branch-protection"
            },
            "after": {
              "operationId": "repos/delete-branch-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_branch_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
      "get": {
        "summary": "Get admin branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-admin-branch-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-admin-branch-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-admin-enforced"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-admin-enforced-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-protected-branch-admin-enforcement\" operation ID is now \"repos/get-admin-branch-protection\"",
            "before": {
              "operationId": "repos/get-protected-branch-admin-enforcement"
            },
            "after": {
              "operationId": "repos/get-admin-branch-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/enforce_admins"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.admin_branch_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "post": {
        "summary": "Set admin branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
        "operationId": "repos/set-admin-branch-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-admin-branch-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-admin-enforced"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-admin-enforced-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-protected-branch-admin-enforcement\" operation ID is now \"repos/set-admin-branch-protection\"",
            "before": {
              "operationId": "repos/add-protected-branch-admin-enforcement"
            },
            "after": {
              "operationId": "repos/set-admin-branch-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/enforce_admins"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_admin_branch_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete admin branch protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
        "operationId": "repos/delete-admin-branch-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-admin-branch-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-admin-enforcement\" operation ID is now \"repos/delete-admin-branch-protection\"",
            "before": {
              "operationId": "repos/remove-protected-branch-admin-enforcement"
            },
            "after": {
              "operationId": "repos/delete-admin-branch-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/enforce_admins"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_admin_branch_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
      "get": {
        "summary": "Get pull request review protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-pull-request-review-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-pull-request-review-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.luke-cage-preview+json"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-pull-request-review"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-protected-branch-pull-request-review-enforcement\" operation ID is now \"repos/get-pull-request-review-protection\"",
            "before": {
              "operationId": "repos/get-protected-branch-pull-request-review-enforcement"
            },
            "after": {
              "operationId": "repos/get-pull-request-review-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.luke-cage-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_pull_request_reviews"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pull_request_review_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update pull request review protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
        "operationId": "repos/update-pull-request-review-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#update-pull-request-review-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.luke-cage-preview+json"
            },
            "required": false
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-pull-request-review"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "luke-cage",
              "note": "The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.luke-cage-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "dismissal_restrictions": {
                    "type": "object",
                    "description": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                    "properties": {
                      "users": {
                        "type": "array",
                        "description": "The list of user `login`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      },
                      "teams": {
                        "type": "array",
                        "description": "The list of team `slug`s with dismissal access",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "dismiss_stale_reviews": {
                    "type": "boolean",
                    "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit."
                  },
                  "require_code_owner_reviews": {
                    "type": "boolean",
                    "description": "Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed."
                  },
                  "required_approving_review_count": {
                    "type": "integer",
                    "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6."
                  }
                }
              },
              "example": {
                "dismissal_restrictions": {
                  "users": [
                    "octocat"
                  ],
                  "teams": [
                    "justice-league"
                  ]
                },
                "dismiss_stale_reviews": true,
                "require_code_owner_reviews": true,
                "required_approving_review_count": 2
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/update-protected-branch-pull-request-review-enforcement\" operation ID is now \"repos/update-pull-request-review-protection\"",
            "before": {
              "operationId": "repos/update-protected-branch-pull-request-review-enforcement"
            },
            "after": {
              "operationId": "repos/update-pull-request-review-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.luke-cage-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_pull_request_reviews \\\n  -d '{\"dismissal_restrictions\":{\"users\":[\"users\"],\"teams\":[\"teams\"]}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  dismissal_restrictions: {\n    users: [\n      'users'\n    ],\n    teams: [\n      'teams'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_pull_request_review_protection(\n  'hello-world',\n  'branch',\n  {\n    users: [\n      'users'\n    ],\n    teams: [\n      'teams'\n    ]\n  }\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete pull request review protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/delete-pull-request-review-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-pull-request-review-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-pull-request-review-enforcement\" operation ID is now \"repos/delete-pull-request-review-protection\"",
            "before": {
              "operationId": "repos/remove-protected-branch-pull-request-review-enforcement"
            },
            "after": {
              "operationId": "repos/delete-pull-request-review-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_pull_request_reviews"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_pull_request_review_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
      "get": {
        "summary": "Get commit signature protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits.",
        "operationId": "repos/get-commit-signature-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-commit-signature-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.zzzax-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-admin-enforced"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-admin-enforced"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "zzzax",
              "note": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-protected-branch-required-signatures\" operation ID is now \"repos/get-commit-signature-protection\"",
            "before": {
              "operationId": "repos/get-protected-branch-required-signatures"
            },
            "after": {
              "operationId": "repos/get-commit-signature-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.zzzax-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_signatures"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  mediaType: {\n    previews: [\n      'zzzax'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_signature_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create commit signature protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
        "operationId": "repos/create-commit-signature-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#create-commit-signature-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.zzzax-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protected-branch-admin-enforced"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/protected-branch-admin-enforced"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "zzzax",
              "note": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-protected-branch-required-signatures\" operation ID is now \"repos/create-commit-signature-protection\"",
            "before": {
              "operationId": "repos/add-protected-branch-required-signatures"
            },
            "after": {
              "operationId": "repos/create-commit-signature-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.zzzax-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_signatures"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  mediaType: {\n    previews: [\n      'zzzax'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_commit_signature_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete commit signature protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
        "operationId": "repos/delete-commit-signature-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-commit-signature-protection"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.zzzax-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "zzzax",
              "note": "Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.zzzax-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-required-signatures\" operation ID is now \"repos/delete-commit-signature-protection\"",
            "before": {
              "operationId": "repos/remove-protected-branch-required-signatures"
            },
            "after": {
              "operationId": "repos/delete-commit-signature-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.zzzax-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_signatures"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  mediaType: {\n    previews: [\n      'zzzax'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_commit_signature_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
      "get": {
        "summary": "Get status checks protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-status-checks-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-status-checks-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-check-policy"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/status-check-policy"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-protected-branch-required-status-checks\" operation ID is now \"repos/get-status-checks-protection\"",
            "before": {
              "operationId": "repos/get-protected-branch-required-status-checks"
            },
            "after": {
              "operationId": "repos/get-status-checks-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.status_checks_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update status check potection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
        "operationId": "repos/update-status-check-potection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#update-status-check-potection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status-check-policy"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/status-check-policy"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "strict": {
                    "type": "boolean",
                    "description": "Require branches to be up to date before merging."
                  },
                  "contexts": {
                    "type": "array",
                    "description": "The list of status checks to require in order to merge into this branch",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "strict": true,
                "contexts": [
                  "continuous-integration/travis-ci"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/update-protected-branch-required-status-checks\" operation ID is now \"repos/update-status-checks-protection\"",
            "before": {
              "operationId": "repos/update-protected-branch-required-status-checks"
            },
            "after": {
              "operationId": "repos/update-status-checks-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks \\\n  -d '{\"strict\":true}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  strict: true\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_status_check_potection(\n  'hello-world',\n  'branch',\n  true\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove status check protection",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/remove-status-check-protection",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-status-check-protection"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-required-status-checks\" operation ID is now \"repos/remove-status-checks-protection\"",
            "before": {
              "operationId": "repos/remove-protected-branch-required-status-checks"
            },
            "after": {
              "operationId": "repos/remove-status-checks-protection"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_status_check_protection(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
      "get": {
        "summary": "Get all status check contexts",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/get-all-status-check-contexts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-all-status-check-contexts"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "continuous-integration/travis-ci"
                ]
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/list-protected-branch-required-status-checks-contexts\" operation ID is now \"repos/get-all-status-check-contexts\"",
            "before": {
              "operationId": "repos/list-protected-branch-required-status-checks-contexts"
            },
            "after": {
              "operationId": "repos/get-all-status-check-contexts"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks/contexts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.status_check_contexts(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "post": {
        "summary": "Add status check contexts",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/add-status-check-contexts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-status-check-contexts"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "continuous-integration/travis-ci",
                  "continuous-integration/jenkins"
                ]
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "contexts",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "contexts parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-protected-branch-required-status-checks-contexts\" operation ID is now \"repos/add-status-check-contexts\"",
            "before": {
              "operationId": "repos/add-protected-branch-required-status-checks-contexts"
            },
            "after": {
              "operationId": "repos/add-status-check-contexts"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks/contexts \\\n  -d '{\"contexts\":[\"contexts\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  contexts: [\n    'contexts'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_status_check_contexts(\n  'hello-world',\n  'branch',\n  [\n    'contexts'\n  ]\n)"
          }
        ]
      },
      "put": {
        "summary": "Set status check contexts",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/set-status-check-contexts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-status-check-contexts"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "continuous-integration/travis-ci"
                ]
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "contexts",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "contexts parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/replace-protected-branch-required-status-checks-contexts\" operation ID is now \"repos/set-status-check-contexts\"",
            "before": {
              "operationId": "repos/replace-protected-branch-required-status-checks-contexts"
            },
            "after": {
              "operationId": "repos/set-status-check-contexts"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks/contexts \\\n  -d '{\"contexts\":[\"contexts\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  contexts: [\n    'contexts'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_status_check_contexts(\n  'hello-world',\n  'branch',\n  [\n    'contexts'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove status check contexts",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "repos/remove-status-check-contexts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-status-check-contexts"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "continuous-integration/travis-ci"
                ]
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "contexts",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "contexts parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-required-status-checks-contexts\" operation ID is now \"repos/remove-status-check-contexts\"",
            "before": {
              "operationId": "repos/remove-protected-branch-required-status-checks-contexts"
            },
            "after": {
              "operationId": "repos/remove-status-check-contexts"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/required_status_checks/contexts \\\n  -d '{\"contexts\":[\"contexts\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  contexts: [\n    'contexts'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_status_check_contexts(\n  'hello-world',\n  'branch',\n  [\n    'contexts'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
      "get": {
        "summary": "Get access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.",
        "operationId": "repos/get-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#get-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch-restriction-policy"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-restriction-policy"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-protected-branch-restrictions\" operation ID is now \"repos/get-access-restrictions\"",
            "before": {
              "operationId": "repos/get-protected-branch-restrictions"
            },
            "after": {
              "operationId": "repos/get-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.access_restrictions(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch.",
        "operationId": "repos/delete-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#delete-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-restrictions\" operation ID is now \"repos/delete-access-restrictions\"",
            "before": {
              "operationId": "repos/remove-protected-branch-restrictions"
            },
            "after": {
              "operationId": "repos/delete-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_access_restrictions(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
      "get": {
        "summary": "Get apps with access to the protected branch",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.",
        "operationId": "repos/get-apps-with-access-to-protected-branch",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-apps-with-access-to-the-protected-branch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/integration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/integration-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-09-13",
            "note": "\"List apps with access to the protected branch\" is now \"Get apps with access to the protected branch\"",
            "before": {
              "operationId": "repos/list-apps-with-access-to-protected-branch"
            },
            "after": {
              "operationId": "repos/get-apps-with-access-to-protected-branch"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/apps"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.apps_with_access_to_protected_branch(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "post": {
        "summary": "Add app access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n\n| Type    | Description                                                                                                                                                |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/add-app-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-app-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/integration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/integration-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "apps",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "apps parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-protected-branch-app-restrictions\" operation ID is now \"repos/add-app-access-restrictions\"",
            "before": {
              "operationId": "repos/add-protected-branch-app-restrictions"
            },
            "after": {
              "operationId": "repos/add-app-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/apps \\\n  -d '{\"apps\":[\"apps\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  apps: [\n    'apps'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_app_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'apps'\n  ]\n)"
          }
        ]
      },
      "put": {
        "summary": "Set app access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n\n| Type    | Description                                                                                                                                                |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/set-app-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-app-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/integration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/integration-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "apps",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "apps parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/replace-protected-branch-app-restrictions\" operation ID is now \"repos/set-app-access-restrictions\"",
            "before": {
              "operationId": "repos/replace-protected-branch-app-restrictions"
            },
            "after": {
              "operationId": "repos/set-app-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/apps \\\n  -d '{\"apps\":[\"apps\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  apps: [\n    'apps'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_app_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'apps'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove app access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.\n\n| Type    | Description                                                                                                                                                |\n| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/remove-app-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-app-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/integration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/integration-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "apps",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "apps parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-app-restrictions\" operation ID is now \"repos/remove-app-access-restrictions\"",
            "before": {
              "operationId": "repos/remove-protected-branch-app-restrictions"
            },
            "after": {
              "operationId": "repos/remove-app-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/apps \\\n  -d '{\"apps\":[\"apps\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  apps: [\n    'apps'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_app_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'apps'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
      "get": {
        "summary": "Get teams with access to the protected branch",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams.",
        "operationId": "repos/get-teams-with-access-to-protected-branch",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-teams-with-access-to-the-protected-branch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-09-09",
            "note": "\"List team restrictions of protected branch\" is now \"Get teams with access to protected branch\"",
            "before": {
              "operationId": "repos/list-protected-branch-team-restrictions"
            },
            "after": {
              "operationId": "repos/get-teams-with-access-to-protected-branch"
            }
          },
          {
            "type": "operation",
            "date": "2019-09-13",
            "note": "\"List teams with access to the protected branch\" is now \"Get teams with access to the protected branch\"",
            "before": {
              "operationId": "repos/list-teams-with-access-to-protected-branch"
            },
            "after": {
              "operationId": "repos/get-teams-with-access-to-protected-branch"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.teams_with_access_to_protected_branch(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "post": {
        "summary": "Add team access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams.\n\n| Type    | Description                                                                                                                                |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/add-team-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-team-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "teams",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "teams parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-protected-branch-team-restrictions\" operation ID is now \"repos/add-team-access-restrictions\"",
            "before": {
              "operationId": "repos/add-protected-branch-team-restrictions"
            },
            "after": {
              "operationId": "repos/add-team-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/teams \\\n  -d '{\"teams\":[\"teams\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  teams: [\n    'teams'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_team_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'teams'\n  ]\n)"
          }
        ]
      },
      "put": {
        "summary": "Set team access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.\n\n| Type    | Description                                                                                                                                |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |\n| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/set-team-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-team-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "teams",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "teams parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/replace-protected-branch-team-restrictions\" operation ID is now \"repos/set-team-access-restrictions\"",
            "before": {
              "operationId": "repos/replace-protected-branch-team-restrictions"
            },
            "after": {
              "operationId": "repos/set-team-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/teams \\\n  -d '{\"teams\":[\"teams\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  teams: [\n    'teams'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_team_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'teams'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove team access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams.\n\n| Type    | Description                                                                                                                                         |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/remove-team-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-team-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "teams",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "teams parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-team-restrictions\" operation ID is now \"repos/remove-team-access-restrictions\"",
            "before": {
              "operationId": "repos/remove-protected-branch-team-restrictions"
            },
            "after": {
              "operationId": "repos/remove-team-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/teams \\\n  -d '{\"teams\":[\"teams\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  teams: [\n    'teams'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_team_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'teams'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
      "get": {
        "summary": "Get users with access to the protected branch",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch.",
        "operationId": "repos/get-users-with-access-to-protected-branch",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#list-users-with-access-to-the-protected-branch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-09-09",
            "note": "\"List user restrictions of protected branch\" is now \"Get users with access to protected branch\"",
            "before": {
              "operationId": "repos/list-protected-branch-user-restrictions"
            },
            "after": {
              "operationId": "repos/get-users-with-access-to-protected-branch"
            }
          },
          {
            "type": "operation",
            "date": "2019-09-13",
            "note": "\"List users with access to the protected branch\" is now \"Get users with access to the protected branch\"",
            "before": {
              "operationId": "repos/list-users-with-access-to-protected-branch"
            },
            "after": {
              "operationId": "repos/get-users-with-access-to-protected-branch"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/users"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.users_with_access_to_protected_branch(\n  'hello-world',\n  'branch'\n)"
          }
        ]
      },
      "post": {
        "summary": "Add user access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/add-user-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#add-user-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "users",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "users parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-protected-branch-user-restrictions\" operation ID is now \"repos/add-user-access-restrictions\"",
            "before": {
              "operationId": "repos/add-protected-branch-user-restrictions"
            },
            "after": {
              "operationId": "repos/add-user-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/users \\\n  -d '{\"users\":[\"users\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  users: [\n    'users'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_user_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'users'\n  ]\n)"
          }
        ]
      },
      "put": {
        "summary": "Set user access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/set-user-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#set-user-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "users",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "users parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/replace-protected-branch-user-restrictions\" operation ID is now \"repos/set-user-access-restrictions\"",
            "before": {
              "operationId": "repos/replace-protected-branch-user-restrictions"
            },
            "after": {
              "operationId": "repos/set-user-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/users \\\n  -d '{\"users\":[\"users\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  users: [\n    'users'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_user_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'users'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove user access restrictions",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
        "operationId": "repos/remove-user-access-restrictions",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/branches/#remove-user-access-restrictions"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "requestBodyParameterName": "users",
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "users parameter",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-protected-branch-user-restrictions\" operation ID is now \"repos/remove-user-access-restrictions\"",
            "before": {
              "operationId": "repos/remove-protected-branch-user-restrictions"
            },
            "after": {
              "operationId": "repos/remove-user-access-restrictions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/branches/BRANCH/protection/restrictions/users \\\n  -d '{\"users\":[\"users\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  branch: 'branch',\n  users: [\n    'users'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_user_access_restrictions(\n  'hello-world',\n  'branch',\n  [\n    'users'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-runs": {
      "post": {
        "summary": "Create a check run",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nCreates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.",
        "operationId": "checks/create",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#create-a-check-run"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-run"
                },
                "examples": {
                  "example-of-in-progress-conclusion": {
                    "$ref": "#/components/examples/check-run-example-of-in-progress-conclusion"
                  },
                  "example-of-completed-conclusion": {
                    "$ref": "#/components/examples/check-run-example-of-completed-conclusion"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check. For example, \"code-coverage\"."
                  },
                  "head_sha": {
                    "type": "string",
                    "description": "The SHA of the commit."
                  },
                  "details_url": {
                    "type": "string",
                    "description": "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used."
                  },
                  "external_id": {
                    "type": "string",
                    "description": "A reference for the run on the integrator's system."
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
                    "enum": [
                      "queued",
                      "in_progress",
                      "completed"
                    ],
                    "default": "queued"
                  },
                  "started_at": {
                    "type": "string",
                    "description": "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                  },
                  "conclusion": {
                    "type": "string",
                    "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.\n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
                    "enum": [
                      "success",
                      "failure",
                      "neutral",
                      "cancelled",
                      "skipped",
                      "timed_out",
                      "action_required"
                    ]
                  },
                  "completed_at": {
                    "type": "string",
                    "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                  },
                  "output": {
                    "type": "object",
                    "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object) description.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "The title of the check run."
                      },
                      "summary": {
                        "type": "string",
                        "description": "The summary of the check run. This parameter supports Markdown."
                      },
                      "text": {
                        "type": "string",
                        "description": "The details of the check run. This parameter supports Markdown."
                      },
                      "annotations": {
                        "type": "array",
                        "description": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object) description for details about how to use this parameter.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`."
                            },
                            "start_line": {
                              "type": "integer",
                              "description": "The start line of the annotation."
                            },
                            "end_line": {
                              "type": "integer",
                              "description": "The end line of the annotation."
                            },
                            "start_column": {
                              "type": "integer",
                              "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values."
                            },
                            "end_column": {
                              "type": "integer",
                              "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values."
                            },
                            "annotation_level": {
                              "type": "string",
                              "description": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                              "enum": [
                                "notice",
                                "warning",
                                "failure"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB."
                            },
                            "title": {
                              "type": "string",
                              "description": "The title that represents the annotation. The maximum size is 255 characters."
                            },
                            "raw_details": {
                              "type": "string",
                              "description": "Details about this annotation. The maximum size is 64 KB."
                            }
                          },
                          "required": [
                            "path",
                            "start_line",
                            "end_line",
                            "annotation_level",
                            "message"
                          ]
                        }
                      },
                      "images": {
                        "type": "array",
                        "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#images-object) description for details.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "alt": {
                              "type": "string",
                              "description": "The alternative text for the image."
                            },
                            "image_url": {
                              "type": "string",
                              "description": "The full URL of the image."
                            },
                            "caption": {
                              "type": "string",
                              "description": "A short image description."
                            }
                          },
                          "required": [
                            "alt",
                            "image_url"
                          ]
                        }
                      }
                    },
                    "required": [
                      "title",
                      "summary"
                    ]
                  },
                  "actions": {
                    "type": "array",
                    "description": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://developer.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\" To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
                    "items": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters."
                        },
                        "description": {
                          "type": "string",
                          "description": "A short explanation of what this action would do. The maximum size is 40 characters."
                        },
                        "identifier": {
                          "type": "string",
                          "description": "A reference for the action on the integrator's system. The maximum size is 20 characters."
                        }
                      },
                      "required": [
                        "label",
                        "description",
                        "identifier"
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "head_sha"
                ]
              },
              "examples": {
                "example-of-in-progress-conclusion": {
                  "summary": "Example of in_progress conclusion",
                  "value": {
                    "name": "mighty_readme",
                    "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                    "status": "in_progress",
                    "external_id": "42",
                    "started_at": "2018-05-04T01:14:52Z",
                    "output": {
                      "title": "Mighty Readme report",
                      "summary": "",
                      "text": ""
                    }
                  }
                },
                "example-of-completed-conclusion": {
                  "summary": "Example of completed conclusion",
                  "value": {
                    "name": "mighty_readme",
                    "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                    "status": "completed",
                    "started_at": "2017-11-30T19:39:10Z",
                    "conclusion": "success",
                    "completed_at": "2017-11-30T19:49:10Z",
                    "output": {
                      "title": "Mighty Readme report",
                      "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                      "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                      "annotations": [
                        {
                          "path": "README.md",
                          "annotation_level": "warning",
                          "title": "Spell Checker",
                          "message": "Check your spelling for 'banaas'.",
                          "raw_details": "Do you mean 'bananas' or 'banana'?",
                          "start_line": 2,
                          "end_line": 2
                        },
                        {
                          "path": "README.md",
                          "annotation_level": "warning",
                          "title": "Spell Checker",
                          "message": "Check your spelling for 'aples'",
                          "raw_details": "Do you mean 'apples' or 'Naples'",
                          "start_line": 4,
                          "end_line": 4
                        }
                      ],
                      "images": [
                        {
                          "alt": "Super bananas",
                          "image_url": "http://example.com/images/42"
                        }
                      ]
                    },
                    "actions": [
                      {
                        "label": "Fix",
                        "identifier": "fix_errors",
                        "description": "Allow us to fix these errors for you"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-runs \\\n  -d '{\"name\":\"name\",\"head_sha\":\"head_sha\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/check-runs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name',\n  head_sha: 'head_sha',\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create(\n  'hello-world',\n  'name',\n  'head_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-runs/{check_run_id}": {
      "get": {
        "summary": "Get a check run",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nGets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
        "operationId": "checks/get",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#get-a-check-run"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check_run_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-run-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-run"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-runs/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/check-runs/{check_run_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  check_run_id: 42,\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a check run",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nUpdates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.",
        "operationId": "checks/update",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#update-a-check-run"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check_run_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-run-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-run"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the check. For example, \"code-coverage\"."
                  },
                  "details_url": {
                    "type": "string",
                    "description": "The URL of the integrator's site that has the full details of the check."
                  },
                  "external_id": {
                    "type": "string",
                    "description": "A reference for the run on the integrator's system."
                  },
                  "started_at": {
                    "type": "string",
                    "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                  },
                  "status": {
                    "type": "string",
                    "description": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
                    "enum": [
                      "queued",
                      "in_progress",
                      "completed"
                    ]
                  },
                  "conclusion": {
                    "type": "string",
                    "description": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `success`, `failure`, `neutral`, `cancelled`, `skipped`, `timed_out`, or `action_required`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. Only GitHub can change a check run conclusion to `stale`.",
                    "enum": [
                      "success",
                      "failure",
                      "neutral",
                      "cancelled",
                      "skipped",
                      "timed_out",
                      "action_required"
                    ]
                  },
                  "completed_at": {
                    "type": "string",
                    "description": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                  },
                  "output": {
                    "type": "object",
                    "description": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://developer.github.com/v3/checks/runs/#output-object-1) description.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "description": "**Required**."
                      },
                      "summary": {
                        "type": "string",
                        "description": "Can contain Markdown."
                      },
                      "text": {
                        "type": "string",
                        "description": "Can contain Markdown."
                      },
                      "annotations": {
                        "type": "array",
                        "description": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://help.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The path of the file to add an annotation to. For example, `assets/css/main.css`."
                            },
                            "start_line": {
                              "type": "integer",
                              "description": "The start line of the annotation."
                            },
                            "end_line": {
                              "type": "integer",
                              "description": "The end line of the annotation."
                            },
                            "start_column": {
                              "type": "integer",
                              "description": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values."
                            },
                            "end_column": {
                              "type": "integer",
                              "description": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values."
                            },
                            "annotation_level": {
                              "type": "string",
                              "description": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                              "enum": [
                                "notice",
                                "warning",
                                "failure"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "description": "A short description of the feedback for these lines of code. The maximum size is 64 KB."
                            },
                            "title": {
                              "type": "string",
                              "description": "The title that represents the annotation. The maximum size is 255 characters."
                            },
                            "raw_details": {
                              "type": "string",
                              "description": "Details about this annotation. The maximum size is 64 KB."
                            }
                          },
                          "required": [
                            "path",
                            "start_line",
                            "end_line",
                            "annotation_level",
                            "message"
                          ]
                        }
                      },
                      "images": {
                        "type": "array",
                        "description": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://developer.github.com/v3/checks/runs/#annotations-object-1) description for details.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "alt": {
                              "type": "string",
                              "description": "The alternative text for the image."
                            },
                            "image_url": {
                              "type": "string",
                              "description": "The full URL of the image."
                            },
                            "caption": {
                              "type": "string",
                              "description": "A short image description."
                            }
                          },
                          "required": [
                            "alt",
                            "image_url"
                          ]
                        }
                      }
                    },
                    "required": [
                      "summary"
                    ]
                  },
                  "actions": {
                    "type": "array",
                    "description": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://developer.github.com/v3/checks/runs/#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"",
                    "items": {
                      "type": "object",
                      "properties": {
                        "label": {
                          "type": "string",
                          "description": "The text to be displayed on a button in the web UI. The maximum size is 20 characters."
                        },
                        "description": {
                          "type": "string",
                          "description": "A short explanation of what this action would do. The maximum size is 40 characters."
                        },
                        "identifier": {
                          "type": "string",
                          "description": "A reference for the action on the integrator's system. The maximum size is 20 characters."
                        }
                      },
                      "required": [
                        "label",
                        "description",
                        "identifier"
                      ]
                    }
                  }
                }
              },
              "example": {
                "name": "mighty_readme",
                "started_at": "2018-05-04T01:14:52Z",
                "status": "completed",
                "conclusion": "success",
                "completed_at": "2018-05-04T01:14:52Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations": [
                    {
                      "path": "README.md",
                      "annotation_level": "warning",
                      "title": "Spell Checker",
                      "message": "Check your spelling for 'banaas'.",
                      "raw_details": "Do you mean 'bananas' or 'banana'?",
                      "start_line": 2,
                      "end_line": 2
                    },
                    {
                      "path": "README.md",
                      "annotation_level": "warning",
                      "title": "Spell Checker",
                      "message": "Check your spelling for 'aples'",
                      "raw_details": "Do you mean 'apples' or 'Naples'",
                      "start_line": 4,
                      "end_line": 4
                    }
                  ],
                  "images": [
                    {
                      "alt": "Super bananas",
                      "image_url": "http://example.com/images/42"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-runs/42 \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  check_run_id: 42,\n  name: 'name',\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'hello-world',\n  42,\n  'name'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
      "get": {
        "summary": "List check run annotations",
        "description": "Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.",
        "operationId": "checks/list-annotations",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#list-check-run-annotations"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check_run_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/check-annotation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-annotation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-runs/42/annotations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  check_run_id: 42,\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.annotations(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-suites": {
      "post": {
        "summary": "Create a check suite",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nBy default, check suites are automatically created when you create a [check run](https://developer.github.com/v3/checks/runs/). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"[Update repository preferences for check suites](https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites)\". Your GitHub App must have the `checks:write` permission to create check suites.",
        "operationId": "checks/create-suite",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#create-a-check-suite"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "head_sha": {
                    "type": "string",
                    "description": "The sha of the head commit."
                  }
                },
                "required": [
                  "head_sha"
                ]
              },
              "example": {
                "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-suites \\\n  -d '{\"head_sha\":\"head_sha\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/check-suites', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  head_sha: 'head_sha',\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_suite(\n  'hello-world',\n  'head_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-suites/preferences": {
      "patch": {
        "summary": "Update repository preferences for check suites",
        "description": "Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://developer.github.com/v3/checks/suites/#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.",
        "operationId": "checks/set-suites-preferences",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite-preference"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite-preference"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_trigger_checks": {
                    "type": "array",
                    "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object) description for details.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "app_id": {
                          "type": "integer",
                          "description": "The `id` of the GitHub App."
                        },
                        "setting": {
                          "type": "boolean",
                          "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
                          "default": true
                        }
                      },
                      "required": [
                        "app_id",
                        "setting"
                      ]
                    }
                  }
                }
              },
              "example": {
                "auto_trigger_checks": [
                  {
                    "app_id": 4,
                    "setting": false
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-suites/preferences \\\n  -d '{\"auto_trigger_checks\":[{\"app_id\":42,\"setting\":true}]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/check-suites/preferences', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  auto_trigger_checks: [\n    {\n      app_id: 42,\n      setting: true\n    }\n  ],\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_repo_prefs_for_suites(\n  'hello-world',\n  [\n    {\n      app_id: 42,\n      setting: true\n    }\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
      "get": {
        "summary": "Get a check suite",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nGets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
        "operationId": "checks/get-suite",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#get-a-check-suite"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check_suite_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/check-suite"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-suites/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/check-suites/{check_suite_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  check_suite_id: 42,\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.suite(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
      "get": {
        "summary": "List check runs in a check suite",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
        "operationId": "checks/list-for-suite",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check_suite_id"
          },
          {
            "$ref": "#/components/parameters/check_name"
          },
          {
            "name": "status",
            "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed"
              ]
            }
          },
          {
            "name": "filter",
            "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "latest",
                "all"
              ],
              "default": "latest"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "check_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/check-run-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-run-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-suites/42/check-runs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  check_suite_id: 42,\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_suite(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
      "post": {
        "summary": "Rerequest a check suite",
        "description": "Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://developer.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nTo rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.",
        "operationId": "checks/rerequest-suite",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/check_suite_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/check-suites/42/rerequest"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  check_suite_id: 42,\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.rerequest_suite(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/code-scanning/alerts": {
      "get": {
        "summary": "List code scanning alerts for a repository",
        "description": "Lists all open code scanning alerts for the default branch (usually `master`) and protected branches in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.",
        "operationId": "code-scanning/list-alerts-for-repo",
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/state"
          },
          {
            "name": "ref",
            "description": "Returns a list of code scanning alerts for a specific brach reference. The `ref` must be formatted as `heads/<branch name>`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-scanning-alert"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-alert-items"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response if the ref doesn't match an existing ref"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/code-scanning/alerts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/code-scanning/alerts', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.code_scanning_alerts_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_id}": {
      "get": {
        "summary": "Get a code scanning alert",
        "description": "Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.\n\nThe security `alert_id` is found at the end of the security alert's URL. For example, the security alert ID for `https://github.com/Octo-org/octo-repo/security/code-scanning/88` is `88`.",
        "operationId": "code-scanning/get-alert",
        "tags": [
          "code-scanning"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/alert_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/code-scanning-alert"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-scanning-alert"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  alert_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.code_scanning_alert(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/collaborators": {
      "get": {
        "summary": "List repository collaborators",
        "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.",
        "operationId": "repos/list-collaborators",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#list-repository-collaborators"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "affiliation",
            "description": "Filter collaborators returned by their affiliation. Can be one of:  \n\\* `outside`: All outside collaborators of an organization-owned repository.  \n\\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "outside",
                "direct",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/collaborator"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/collaborator-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/collaborators"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/collaborators', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.collaborators(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}": {
      "get": {
        "summary": "Check if a user is a repository collaborator",
        "description": "For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.",
        "operationId": "repos/check-collaborator",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-repository-collaborator"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if user is a collaborator"
          },
          "404": {
            "description": "Response if user is not a collaborator"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/collaborators/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/collaborators/{username}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_collaborator(\n  'hello-world',\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Add a repository collaborator",
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\nFor more information the permission levels, see \"[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\".\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://developer.github.com/v3/repos/invitations/).\n\n**Rate limits**\n\nTo prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.",
        "operationId": "repos/add-collaborator",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#add-a-repository-collaborator"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "201": {
            "description": "Response when a new invitation is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-invitation"
                },
                "examples": {
                  "response-when-a-new-invitation-is-created": {
                    "$ref": "#/components/examples/repository-invitation-response-when-a-new-invitation-is-created"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response when person is already a collaborator"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.  \n\\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  \n\\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.",
                    "enum": [
                      "pull",
                      "push",
                      "admin",
                      "maintain",
                      "triage"
                    ],
                    "default": "push"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/collaborators/USERNAME \\\n  -d '{\"permission\":\"permission\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/collaborators/{username}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  username: 'username',\n  permission: 'permission'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_collaborator(\n  'hello-world',\n  'username',\n  'permission'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove a repository collaborator",
        "description": "",
        "operationId": "repos/remove-collaborator",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#remove-a-repository-collaborator"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/collaborators/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/collaborators/{username}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_collaborator(\n  'hello-world',\n  'username'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/collaborators/{username}/permission": {
      "get": {
        "summary": "Get repository permissions for a user",
        "description": "Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.",
        "operationId": "repos/get-collaborator-permission-level",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/collaborators/#get-repository-permissions-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if user has admin permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-collaborator-permission"
                },
                "examples": {
                  "response-if-user-has-admin-permissions": {
                    "$ref": "#/components/examples/repository-collaborator-permission-response-if-user-has-admin-permissions"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/collaborators/USERNAME/permission"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/collaborators/{username}/permission', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.permissions_for_user(\n  'hello-world',\n  'username'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/comments": {
      "get": {
        "summary": "List commit comments for a repository",
        "description": "Commit Comments use [these custom media types](https://developer.github.com/v3/repos/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nComments are ordered by ascending ID.",
        "operationId": "repos/list-commit-comments-for-repo",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/commit-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/list-commit-comments\" operation ID is now \"repos/list-commit-comments-for-repo\"",
            "before": {
              "operationId": "repos/list-commit-comments"
            },
            "after": {
              "operationId": "repos/list-commit-comments-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_comments(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}": {
      "get": {
        "summary": "Get a commit comment",
        "description": "",
        "operationId": "repos/get-commit-comment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#get-a-commit-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commit-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a commit comment",
        "description": "",
        "operationId": "repos/update-commit-comment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#update-a-commit-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commit-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-comment-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The contents of the comment"
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Nice change"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_commit_comment(\n  'hello-world',\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a commit comment",
        "description": "",
        "operationId": "repos/delete-commit-comment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#delete-a-commit-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_commit_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
      "get": {
        "summary": "List reactions for a commit comment",
        "description": "List the reactions to a [commit comment](https://developer.github.com/v3/repos/comments/).",
        "operationId": "reactions/list-for-commit-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          },
          {
            "$ref": "#/components/parameters/content"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/comments/{comment_id}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_commit_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for a commit comment",
        "description": "Create a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment.",
        "operationId": "reactions/create-for-commit-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/comments/{comment_id}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_commit_comment(\n  'hello-world',\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete a commit comment reaction",
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://developer.github.com/v3/repos/comments/).",
        "operationId": "reactions/delete-for-commit-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/comments/42/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_commit_comment(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits": {
      "get": {
        "summary": "List commits",
        "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "repos/list-commits",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#list-commits"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "sha",
            "description": "SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "description": "Only commits containing this file path will be returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/author"
          },
          {
            "name": "since",
            "description": "Only commits after this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-commit"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-commit-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commits(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
      "get": {
        "summary": "List branches for HEAD commit",
        "description": "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch.",
        "operationId": "repos/list-branches-for-head-commit",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#list-branches-for-head-commit"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.groot-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/commit_sha"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/branch-short"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/branch-short-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "groot",
              "note": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.groot-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/COMMIT_SHA/branches-where-head"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  commit_sha: 'commit_sha',\n  mediaType: {\n    previews: [\n      'groot'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.branches_for_head_commit(\n  'hello-world',\n  'commit_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
      "get": {
        "summary": "List commit comments",
        "description": "Use the `:commit_sha` to specify the commit that will have its comments listed.",
        "operationId": "repos/list-comments-for-commit",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#list-commit-comments"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/commit_sha"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/commit-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-06-07",
            "note": "\"ref\" parameter renamed to \"commit_sha\"",
            "before": {
              "name": "ref"
            },
            "after": {
              "name": "commit_sha"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/COMMIT_SHA/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  commit_sha: 'commit_sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_comments(\n  'hello-world',\n  'commit_sha'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a commit comment",
        "description": "Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "repos/create-commit-comment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/comments/#create-a-commit-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/commit_sha"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commit-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-comment"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The contents of the comment."
                  },
                  "path": {
                    "type": "string",
                    "description": "Relative path of the file to comment on."
                  },
                  "position": {
                    "type": "integer",
                    "description": "Line index in the diff to comment on."
                  },
                  "line": {
                    "nullable": true,
                    "type": "integer",
                    "description": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Great stuff",
                "path": "file1.txt",
                "position": 4,
                "line": null
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-06-07",
            "note": "\"sha\" parameter renamed to \"commit_sha\"",
            "before": {
              "name": "sha"
            },
            "after": {
              "name": "commit_sha"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/COMMIT_SHA/comments \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/commits/{commit_sha}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  commit_sha: 'commit_sha',\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_commit_comment(\n  'hello-world',\n  'commit_sha',\n  'body'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
      "get": {
        "summary": "List pull requests associated with a commit",
        "description": "Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests) endpoint.",
        "operationId": "repos/list-pull-requests-associated-with-commit",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-a-commit"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.groot-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/commit_sha"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "groot",
              "note": "Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/) for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.groot-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.groot-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/COMMIT_SHA/pulls"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  commit_sha: 'commit_sha',\n  mediaType: {\n    previews: [\n      'groot'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pull_requests_associated_with_commit(\n  'hello-world',\n  'commit_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}": {
      "get": {
        "summary": "Get a commit",
        "description": "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\nYou can pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n\nTo return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "repos/get-commit",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#get-a-commit"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"sha\" parameter renamed to \"ref\"",
            "before": {
              "name": "sha"
            },
            "after": {
              "name": "ref"
            }
          },
          {
            "type": "parameter",
            "date": "2019-06-21",
            "note": "\"commit_sha\" parameter renamed to \"ref\"",
            "before": {
              "name": "commit_sha"
            },
            "after": {
              "name": "ref"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/REF"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/check-runs": {
      "get": {
        "summary": "List check runs for a Git reference",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.",
        "operationId": "checks/list-for-ref",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          },
          {
            "$ref": "#/components/parameters/check_name"
          },
          {
            "name": "status",
            "description": "Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed"
              ]
            }
          },
          {
            "name": "filter",
            "description": "Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "latest",
                "all"
              ],
              "default": "latest"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "check_runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/check-run-2"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-run-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/REF/check-runs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}/check-runs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref',\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_git_ref(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
      "get": {
        "summary": "List check suites for a Git reference",
        "description": "**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nLists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.",
        "operationId": "checks/list-suites-for-ref",
        "tags": [
          "checks"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.antiope-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          },
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "name": "check_name",
            "description": "Filters checks suites by the name of the [check run](https://developer.github.com/v3/checks/runs/).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "check_suites": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/check-suite"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/check-suite-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "antiope",
              "note": "The Checks API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.antiope-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.antiope-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/REF/check-suites"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}/check-suites', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref',\n  mediaType: {\n    previews: [\n      'antiope'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.suites_for_git_ref(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/status": {
      "get": {
        "summary": "Get the combined status for a specific reference",
        "description": "Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\nThe most recent status for each context is returned, up to 100. This field [paginates](https://developer.github.com/v3/#pagination) if there are over 100 contexts.\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`",
        "operationId": "repos/get-combined-status-for-ref",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/combined-commit-status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/combined-commit-status"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/REF/status"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}/status', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.combined_status_for_ref(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/commits/{ref}/statuses": {
      "get": {
        "summary": "List commit statuses for a reference",
        "description": "Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.",
        "operationId": "repos/list-commit-statuses-for-ref",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statuses/#list-commit-statuses-for-a-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/status"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/status-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/list-statuses-for-ref\" operation ID is now \"repos/list-commit-statuses-for-ref\"",
            "before": {
              "operationId": "repos/list-statuses-for-ref"
            },
            "after": {
              "operationId": "repos/list-commit-statuses-for-ref"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/commits/REF/statuses"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/commits/{ref}/statuses', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_statuses_for_ref(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/community/code_of_conduct": {
      "get": {
        "summary": "Get the code of conduct for a repository",
        "description": "This method returns the contents of the repository's code of conduct file, if one is detected.",
        "operationId": "codes-of-conduct/get-for-repo",
        "tags": [
          "codes-of-conduct"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.scarlet-witch-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/code-of-conduct"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-of-conduct-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "scarlet-witch",
              "note": "The Codes of Conduct API is currently available for developers to preview.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.scarlet-witch-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.scarlet-witch-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/community/code_of_conduct"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/community/code_of_conduct', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'scarlet-witch'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.conduct_for_repo_code(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/community/profile": {
      "get": {
        "summary": "Get community profile metrics",
        "description": "This endpoint will return all community profile metrics, including an overall health score, repository description, the presence of documentation, detected code of conduct, detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files.",
        "operationId": "repos/get-community-profile-metrics",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/community/#get-community-profile-metrics"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept-black-panther"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/community-profile"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/community-profile"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "black-panther",
              "note": "We're currently offering a preview of the Community Profile API (also known as community health). To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the  `Accept` header:\n```shell\napplication/vnd.github.black-panther-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/retrieve-community-profile-metrics\" operation ID is now \"repos/get-community-profile-metrics\"",
            "before": {
              "operationId": "repos/retrieve-community-profile-metrics"
            },
            "after": {
              "operationId": "repos/get-community-profile-metrics"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.black-panther+json\" \\\n  https://api.github.com/repos/octocat/hello-world/community/profile"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/community/profile', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'black-panther'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.community_profile_metrics(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/compare/{base}...{head}": {
      "get": {
        "summary": "Compare two commits",
        "description": "Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.\n\nThe response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThe response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\n**Working with large comparisons**\n\nThe response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://developer.github.com/v3/repos/commits/#list-commits) to enumerate all commits in the range.\n\nFor comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long to generate. You can typically resolve this error by using a smaller commit range.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "repos/compare-commits",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/commits/#compare-two-commits"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "base",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "head",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commit-comparison"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-comparison"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/compare/BASE...HEAD"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  base: 'base',\n  head: 'head'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.compare_two_commits(\n  'hello-world',\n  'base',\n  'head'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/contents/{path}": {
      "get": {
        "summary": "Get repository content",
        "description": "Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n`:path`, you will receive the contents of all files in the repository.\n\nFiles and symlinks support [a custom media type](https://developer.github.com/v3/repos/contents/#custom-media-types) for\nretrieving the raw content or rendered HTML (when supported). All content types support [a custom media\ntype](https://developer.github.com/v3/repos/contents/#custom-media-types) to ensure the content is returned in a consistent\nobject format.\n\n**Note**:\n*   To get a repository's contents recursively, you can [recursively get the tree](https://developer.github.com/v3/git/trees/).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\nAPI](https://developer.github.com/v3/git/trees/#get-a-tree).\n*   This API supports files up to 1 megabyte in size.\n\n#### If the content is a directory\nThe response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n_should_ be \"submodule\". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn the next major version of the API, the type will be returned as \"submodule\".\n\n#### If the content is a symlink \nIf the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object \ndescribing the symlink itself.\n\n#### If the content is a submodule\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links[\"git\"]`) and the\ngithub.com URLs (`html_url` and `_links[\"html\"]`) will have null values.",
        "operationId": "repos/get-content",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#get-repository-content"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/path"
          },
          {
            "name": "ref",
            "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content-file"
                },
                "examples": {
                  "response-if-content-is-a-file": {
                    "$ref": "#/components/examples/content-file-response-if-content-is-a-file"
                  },
                  "response-if-content-is-a-directory": {
                    "$ref": "#/components/examples/content-file-response-if-content-is-a-directory"
                  },
                  "response-if-content-is-a-symlink": {
                    "$ref": "#/components/examples/content-file-response-if-content-is-a-symlink"
                  },
                  "response-if-content-is-a-submodule": {
                    "$ref": "#/components/examples/content-file-response-if-content-is-a-submodule"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-contents\" operation ID is now \"repos/get-content\"",
            "before": {
              "operationId": "repos/get-contents"
            },
            "after": {
              "operationId": "repos/get-content"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/contents/PATH"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/contents/{path}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  path: 'path'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.content(\n  'hello-world',\n  'path'\n)"
          }
        ]
      },
      "put": {
        "summary": "Create or update file contents",
        "description": "Creates a new file or replaces an existing file in a repository.",
        "operationId": "repos/create-or-update-file-contents",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#create-or-update-file-contents"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/path"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file-commit"
                },
                "examples": {
                  "example-for-updating-a-file": {
                    "$ref": "#/components/examples/file-commit-example-for-updating-a-file"
                  }
                }
              }
            }
          },
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file-commit"
                },
                "examples": {
                  "example-for-creating-a-file": {
                    "$ref": "#/components/examples/file-commit-example-for-creating-a-file"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The commit message."
                  },
                  "content": {
                    "type": "string",
                    "description": "The new file content, using Base64 encoding."
                  },
                  "sha": {
                    "type": "string",
                    "description": "**Required if you are updating a file**. The blob SHA of the file being replaced."
                  },
                  "branch": {
                    "type": "string",
                    "description": "The branch name. Default: the repository’s default branch (usually `master`)"
                  },
                  "committer": {
                    "type": "object",
                    "description": "The person that committed the file. Default: the authenticated user.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted."
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted."
                      }
                    },
                    "required": [
                      "name",
                      "email"
                    ]
                  },
                  "author": {
                    "type": "object",
                    "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted."
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted."
                      }
                    },
                    "required": [
                      "name",
                      "email"
                    ]
                  }
                },
                "required": [
                  "message",
                  "content"
                ]
              },
              "examples": {
                "example-for-creating-a-file": {
                  "summary": "Example for creating a file",
                  "value": {
                    "message": "my commit message",
                    "committer": {
                      "name": "Monalisa Octocat",
                      "email": "octocat@github.com"
                    },
                    "content": "bXkgbmV3IGZpbGUgY29udGVudHM="
                  }
                },
                "example-for-updating-a-file": {
                  "summary": "Example for updating a file",
                  "value": {
                    "message": "a new commit message",
                    "committer": {
                      "name": "Monalisa Octocat",
                      "email": "octocat@github.com"
                    },
                    "content": "bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz",
                    "sha": "95b966ae1c166bd92f8ae7d1c313e738c731dfc3"
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/create-or-update-file\" operation ID is now \"repos/create-or-update-file-contents\"",
            "before": {
              "operationId": "repos/create-or-update-file"
            },
            "after": {
              "operationId": "repos/create-or-update-file-contents"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/contents/PATH \\\n  -d '{\"message\":\"message\",\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/contents/{path}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  path: 'path',\n  message: 'message',\n  content: 'content'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_or_update_file_contents(\n  'hello-world',\n  'path',\n  'message',\n  'content'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a file",
        "description": "Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.",
        "operationId": "repos/delete-file",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#delete-a-file"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/path"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file-commit-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/file-commit"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The commit message."
                  },
                  "sha": {
                    "type": "string",
                    "description": "The blob SHA of the file being replaced."
                  },
                  "branch": {
                    "type": "string",
                    "description": "The branch name. Default: the repository’s default branch (usually `master`)"
                  },
                  "committer": {
                    "type": "object",
                    "description": "object containing information about the committer.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author (or committer) of the commit"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author (or committer) of the commit"
                      }
                    }
                  },
                  "author": {
                    "type": "object",
                    "description": "object containing information about the author.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author (or committer) of the commit"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author (or committer) of the commit"
                      }
                    }
                  }
                },
                "required": [
                  "message",
                  "sha"
                ]
              },
              "example": {
                "message": "my commit message",
                "committer": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "sha": "329688480d39049927147c162b9d2deaf885005f"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/contents/PATH \\\n  -d '{\"message\":\"message\",\"sha\":\"sha\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/contents/{path}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  path: 'path',\n  message: 'message',\n  sha: 'sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_file(\n  'hello-world',\n  'path',\n  'message',\n  'sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/contributors": {
      "get": {
        "summary": "List repository contributors",
        "description": "Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.",
        "operationId": "repos/list-contributors",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-contributors"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/anon"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if repository contains content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contributor"
                  }
                },
                "examples": {
                  "response-if-repository-contains-content": {
                    "$ref": "#/components/examples/contributor-items-response-if-repository-contains-content"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          },
          "204": {
            "description": "Response if repository is empty"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/contributors"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/contributors', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.contributors(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/deployments": {
      "get": {
        "summary": "List deployments",
        "description": "Simple filtering of deployments is available via query parameters:",
        "operationId": "repos/list-deployments",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#list-deployments"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "sha",
            "description": "The SHA recorded at creation time.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "name": "ref",
            "description": "The name of the ref. This can be a branch, tag, or SHA.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none"
            }
          },
          {
            "$ref": "#/components/parameters/task"
          },
          {
            "$ref": "#/components/parameters/environment"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/deployment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deployment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/deployments', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.deployments(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a deployment",
        "description": "Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://developer.github.com/v3/repos/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nUsers with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n\n#### Merged branch response\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\n#### Merge conflict response\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\nbe merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\n#### Failed commit status checks\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.",
        "operationId": "repos/create-deployment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#create-a-deployment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment"
                },
                "examples": {
                  "simple-example": {
                    "$ref": "#/components/examples/deployment-simple-example"
                  },
                  "advanced-example": {
                    "$ref": "#/components/examples/deployment-advanced-example"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Merged branch response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "merged-branch-response": {
                    "value": {
                      "message": "Auto-merged master into topic-branch on deployment."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "merge-conflict-response": {
                    "summary": "Merge conflict response",
                    "value": {
                      "message": "Conflict merging master into topic-branch"
                    }
                  },
                  "failed-commit-status-checks": {
                    "summary": "Failed commit status checks",
                    "value": {
                      "message": "Conflict: Commit status checks failed for topic-branch."
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "description": "The ref to deploy. This can be a branch, tag, or SHA."
                  },
                  "task": {
                    "type": "string",
                    "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
                    "default": "deploy"
                  },
                  "auto_merge": {
                    "type": "boolean",
                    "description": "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
                    "default": true
                  },
                  "required_contexts": {
                    "type": "array",
                    "description": "The [status](https://developer.github.com/v3/repos/statuses/) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "payload": {
                    "description": "JSON payload with extra information about the deployment.",
                    "default": ""
                  },
                  "environment": {
                    "type": "string",
                    "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
                    "default": "production"
                  },
                  "description": {
                    "type": "string",
                    "description": "Short description of the deployment.",
                    "default": ""
                  },
                  "transient_environment": {
                    "type": "boolean",
                    "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`\n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                    "default": false
                  },
                  "production_environment": {
                    "type": "boolean",
                    "description": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.\n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type."
                  }
                },
                "required": [
                  "ref"
                ]
              },
              "examples": {
                "simple-example": {
                  "summary": "Simple example",
                  "value": {
                    "ref": "topic-branch",
                    "payload": {
                      "deploy": "migrate"
                    },
                    "description": "Deploy request from hubot"
                  }
                },
                "advanced-example": {
                  "summary": "Advanced example",
                  "value": {
                    "ref": "topic-branch",
                    "auto_merge": false,
                    "payload": {
                      "deploy": "migrate"
                    },
                    "description": "Deploy request from hubot",
                    "required_contexts": [
                      "ci/janky",
                      "security/brakeman"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments \\\n  -d '{\"ref\":\"ref\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/deployments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_deployment(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/deployments/{deployment_id}": {
      "get": {
        "summary": "Get a deployment",
        "description": "",
        "operationId": "repos/get-deployment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#get-a-deployment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deployment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/deployments/{deployment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  deployment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.deployment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a deployment",
        "description": "To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see \"[Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)\" and \"[Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status).\"",
        "operationId": "repos/delete-deployment",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#delete-a-deployment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/deployments/{deployment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  deployment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_deployment(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
      "get": {
        "summary": "List deployment statuses",
        "description": "Users with pull access can view deployment statuses for a deployment:",
        "operationId": "repos/list-deployment-statuses",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#list-deployment-statuses"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/deployment-status"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deployment-status-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "flash",
              "note": "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```"
            },
            {
              "required": false,
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments/42/statuses"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  deployment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.deployment_statuses(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a deployment status",
        "description": "Users with `push` access can create deployment statuses for a given deployment.\n\nGitHub Apps require `read & write` access to \"Deployments\" and `read-only` access to \"Repo contents\" (for private repos). OAuth Apps require the `repo_deployment` scope.",
        "operationId": "repos/create-deployment-status",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#create-a-deployment-status"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment-status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deployment-status"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "flash",
              "note": "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```"
            },
            {
              "required": false,
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.",
                    "enum": [
                      "error",
                      "failure",
                      "inactive",
                      "in_progress",
                      "queued",
                      "pending",
                      "success"
                    ]
                  },
                  "target_url": {
                    "type": "string",
                    "description": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
                    "default": ""
                  },
                  "log_url": {
                    "type": "string",
                    "description": "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                    "default": ""
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the status. The maximum description length is 140 characters.",
                    "default": ""
                  },
                  "environment": {
                    "type": "string",
                    "description": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.",
                    "enum": [
                      "production",
                      "staging",
                      "qa"
                    ]
                  },
                  "environment_url": {
                    "type": "string",
                    "description": "Sets the URL for accessing your environment. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type.",
                    "default": ""
                  },
                  "auto_inactive": {
                    "type": "boolean",
                    "description": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`  \n**Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://developer.github.com/v3/previews/#deployment-statuses) custom media type.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://developer.github.com/v3/previews/#enhanced-deployments) custom media type."
                  }
                },
                "required": [
                  "state"
                ]
              },
              "example": {
                "environment": "production",
                "state": "success",
                "log_url": "https://example.com/deployment/42/output",
                "description": "Deployment finished successfully."
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments/42/statuses \\\n  -d '{\"state\":\"state\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  deployment_id: 42,\n  state: 'state'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_deployment_status(\n  'hello-world',\n  42,\n  'state'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
      "get": {
        "summary": "Get a deployment status",
        "description": "Users with pull access can view a deployment status for a deployment:",
        "operationId": "repos/get-deployment-status",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/deployments/#get-a-deployment-status"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          },
          {
            "$ref": "#/components/parameters/status_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deployment-status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deployment-status"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "flash",
              "note": "New features in the Deployments API on GitHub are currently available during a public beta. Please see the [blog post](https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/) for full details.\n\nTo access the new `environment` parameter, the two new values for the `state` parameter (`in_progress` and `queued`), and use `auto_inactive` on production deployments during the public beta period, you must provide the following custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.flash-preview+json\n```"
            },
            {
              "required": false,
              "name": "ant-man",
              "note": "The `inactive` state and the `log_url`, `environment_url`, and `auto_inactive` parameters are currently available for developers to preview. Please see the [blog post](https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements) for full details.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.ant-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/deployments/42/statuses/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  deployment_id: 42,\n  status_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.deployment_status(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/dispatches": {
      "post": {
        "summary": "Create a repository dispatch event",
        "description": "You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see \"[RepositoryDispatchEvent](https://developer.github.com/webhooks/event-payloads/#repository_dispatch).\"\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow. For a test example, see the [input example](https://developer.github.com/v3/repos/#example-4).\n\nTo give you write access to the repository, you must use a personal access token with the `repo` scope. For more information, see \"[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)\" in the GitHub Help documentation.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.",
        "operationId": "repos/create-dispatch-event",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-a-repository-dispatch-event"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_type": {
                    "type": "string",
                    "description": "**Required:** A custom webhook event name."
                  },
                  "client_payload": {
                    "type": "object",
                    "description": "JSON payload with extra information about the webhook event that your action or worklow may use.",
                    "default": "{}",
                    "properties": {},
                    "additionalProperties": true
                  }
                },
                "required": [
                  "event_type"
                ]
              },
              "example": {
                "event_type": "on-demand-test",
                "client_payload": {
                  "unit": false,
                  "integration": true
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/dispatches \\\n  -d '{\"event_type\":\"event_type\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/dispatches', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  event_type: 'event_type'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_dispatch_event(\n  'hello-world',\n  'event_type'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/events": {
      "get": {
        "summary": "List repository events",
        "description": "",
        "operationId": "activity/list-repo-events",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-repository-events"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/events', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_events(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/forks": {
      "get": {
        "summary": "List forks",
        "description": "",
        "operationId": "repos/list-forks",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/forks/#list-forks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "sort",
            "description": "The sort order. Can be either `newest`, `oldest`, or `stargazers`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "newest",
                "oldest",
                "stargazers"
              ],
              "default": "newest"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/forks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/forks', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.forks(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a fork",
        "description": "Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).",
        "operationId": "repos/create-fork",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/forks/#create-a-fork"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "organization": {
                    "type": "string",
                    "description": "Optional parameter to specify the organization name if forking into an organization."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/forks \\\n  -d '{\"organization\":\"organization\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/forks', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  organization: 'organization'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_fork(\n  'hello-world',\n  'organization'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/blobs": {
      "post": {
        "summary": "Create a blob",
        "description": "",
        "operationId": "git/create-blob",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/blobs/#create-a-blob"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/short-blob"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/short-blob"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The new blob's content."
                  },
                  "encoding": {
                    "type": "string",
                    "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
                    "default": "utf-8"
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "Content of the blob",
                "encoding": "utf-8"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/blobs \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/git/blobs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  content: 'content'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_blob(\n  'hello-world',\n  'content'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/blobs/{file_sha}": {
      "get": {
        "summary": "Get a blob",
        "description": "The `content` in the response will always be Base64 encoded.\n\n_Note_: This API supports blobs up to 100 megabytes in size.",
        "operationId": "git/get-blob",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/blobs/#get-a-blob"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/file_sha"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blob"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/blob"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/blobs/FILE_SHA"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/git/blobs/{file_sha}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  file_sha: 'file_sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.blob(\n  'hello-world',\n  'file_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/commits": {
      "post": {
        "summary": "Create a commit",
        "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\nIn this example, the payload of the signature would be:\n\n\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/create-commit",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/commits/#create-a-commit"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-commit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-commit"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The commit message"
                  },
                  "tree": {
                    "type": "string",
                    "description": "The SHA of the tree object this commit points to"
                  },
                  "parents": {
                    "type": "array",
                    "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "author": {
                    "type": "object",
                    "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author (or committer) of the commit"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author (or committer) of the commit"
                      },
                      "date": {
                        "type": "string",
                        "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                      }
                    }
                  },
                  "committer": {
                    "type": "object",
                    "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author (or committer) of the commit"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author (or committer) of the commit"
                      },
                      "date": {
                        "type": "string",
                        "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                      }
                    }
                  },
                  "signature": {
                    "type": "string",
                    "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits."
                  }
                },
                "required": [
                  "message",
                  "tree",
                  "parents"
                ]
              },
              "example": {
                "message": "my commit message",
                "author": {
                  "name": "Mona Octocat",
                  "email": "octocat@github.com",
                  "date": "2008-07-09T16:13:30+12:00"
                },
                "parents": [
                  "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
                ],
                "tree": "827efc6d56897b048c772eb4087f854f46256132",
                "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/commits \\\n  -d '{\"message\":\"message\",\"tree\":\"tree\",\"parents\":[\"parents\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/git/commits', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  message: 'message',\n  tree: 'tree',\n  parents: [\n    'parents'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_commit(\n  'hello-world',\n  'message',\n  'tree',\n  [\n    'parents'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/commits/{commit_sha}": {
      "get": {
        "summary": "Get a commit",
        "description": "Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/get-commit",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/commits/#get-a-commit"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/commit_sha"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-commit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-commit-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/commits/COMMIT_SHA"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/git/commits/{commit_sha}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  commit_sha: 'commit_sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit(\n  'hello-world',\n  'commit_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
      "get": {
        "summary": "List matching references",
        "description": "Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.",
        "operationId": "git/list-matching-refs",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#list-matching-references"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/git-ref"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-ref-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/matching-refs/REF"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/git/matching-refs/{ref}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.matching_refs(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/ref/{ref}": {
      "get": {
        "summary": "Get a reference",
        "description": "Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".",
        "operationId": "git/get-ref",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#get-a-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-ref"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-ref"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/ref/REF"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/git/ref/{ref}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.ref(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/refs": {
      "post": {
        "summary": "Create a reference",
        "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
        "operationId": "git/create-ref",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#create-a-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-ref"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-ref"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ref": {
                    "type": "string",
                    "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected."
                  },
                  "sha": {
                    "type": "string",
                    "description": "The SHA1 value for this reference."
                  }
                },
                "required": [
                  "ref",
                  "sha"
                ]
              },
              "example": {
                "ref": "refs/heads/featureA",
                "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/refs \\\n  -d '{\"ref\":\"ref\",\"sha\":\"sha\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/git/refs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref',\n  sha: 'sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_ref(\n  'hello-world',\n  'ref',\n  'sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/refs/{ref}": {
      "patch": {
        "summary": "Update a reference",
        "description": "",
        "operationId": "git/update-ref",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#update-a-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-ref"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-ref"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sha": {
                    "type": "string",
                    "description": "The SHA1 value to set this reference to"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
                    "default": false
                  }
                },
                "required": [
                  "sha"
                ]
              },
              "example": {
                "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                "force": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/refs/REF \\\n  -d '{\"sha\":\"sha\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/git/refs/{ref}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref',\n  sha: 'sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_ref(\n  'hello-world',\n  'ref',\n  'sha'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a reference",
        "description": "",
        "operationId": "git/delete-ref",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/refs/#delete-a-reference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/refs/REF"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/git/refs/{ref}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_ref(\n  'hello-world',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/tags": {
      "post": {
        "summary": "Create a tag object",
        "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://developer.github.com/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://developer.github.com/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/create-tag",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/tags/#create-a-tag-object"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-tag"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-tag"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string",
                    "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\")."
                  },
                  "message": {
                    "type": "string",
                    "description": "The tag message."
                  },
                  "object": {
                    "type": "string",
                    "description": "The SHA of the git object this is tagging."
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
                    "enum": [
                      "commit",
                      "tree",
                      "blob"
                    ]
                  },
                  "tagger": {
                    "type": "object",
                    "description": "An object with information about the individual creating the tag.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the author of the tag"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the author of the tag"
                      },
                      "date": {
                        "type": "string",
                        "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                      }
                    }
                  }
                },
                "required": [
                  "tag",
                  "message",
                  "object",
                  "type"
                ]
              },
              "example": {
                "tag": "v0.0.1",
                "message": "initial version\n",
                "object": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
                "type": "commit",
                "tagger": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com",
                  "date": "2011-06-17T14:53:35-07:00"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/tags \\\n  -d '{\"tag\":\"tag\",\"message\":\"message\",\"object\":\"object\",\"type\":\"type\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/git/tags', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  tag: 'tag',\n  message: 'message',\n  object: 'object',\n  type: 'type'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_tag(\n  'hello-world',\n  'tag',\n  'message',\n  'object',\n  'type'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/tags/{tag_sha}": {
      "get": {
        "summary": "Get a tag",
        "description": "**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value                    | Description                                                                                                                       |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------- |\n| `expired_key`            | The key that made the signature is expired.                                                                                       |\n| `not_signing_key`        | The \"signing\" flag is not among the usage flags in the GPG key that made the signature.                                           |\n| `gpgverify_error`        | There was an error communicating with the signature verification service.                                                         |\n| `gpgverify_unavailable`  | The signature verification service is currently unavailable.                                                                      |\n| `unsigned`               | The object does not include a signature.                                                                                          |\n| `unknown_signature_type` | A non-PGP signature was found in the commit.                                                                                      |\n| `no_user`                | No user was associated with the `committer` email address in the commit.                                                          |\n| `unverified_email`       | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email`              | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature.             |\n| `unknown_key`            | The key that made the signature has not been registered with any user's account.                                                  |\n| `malformed_signature`    | There was an error parsing the signature.                                                                                         |\n| `invalid`                | The signature could not be cryptographically verified using the key whose key-id was found in the signature.                      |\n| `valid`                  | None of the above errors applied, so the signature is considered to be verified.                                                  |",
        "operationId": "git/get-tag",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/tags/#get-a-tag"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/tag_sha"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-tag"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-tag"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/tags/TAG_SHA"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/git/tags/{tag_sha}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  tag_sha: 'tag_sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.tag(\n  'hello-world',\n  'tag_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/trees": {
      "post": {
        "summary": "Create a tree",
        "description": "The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"[Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)\" and \"[Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference).\"",
        "operationId": "git/create-tree",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/trees/#create-a-tree"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-tree"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/git-tree"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tree": {
                    "type": "array",
                    "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The file referenced in the tree."
                        },
                        "mode": {
                          "type": "string",
                          "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
                          "enum": [
                            "100644",
                            "100755",
                            "040000",
                            "160000",
                            "120000"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "description": "Either `blob`, `tree`, or `commit`.",
                          "enum": [
                            "blob",
                            "tree",
                            "commit"
                          ]
                        },
                        "sha": {
                          "type": "string",
                          "description": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                          "nullable": true
                        },
                        "content": {
                          "type": "string",
                          "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error."
                        }
                      }
                    }
                  },
                  "base_tree": {
                    "type": "string",
                    "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted."
                  }
                },
                "required": [
                  "tree"
                ]
              },
              "example": {
                "base_tree": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
                "tree": [
                  {
                    "path": "file.rb",
                    "mode": "100644",
                    "type": "blob",
                    "sha": "44b4fc6d56897b048c772eb4087f854f46256132"
                  }
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/trees \\\n  -d '{\"tree\":[{\"path\":\"path\",\"mode\":\"mode\",\"type\":\"type\",\"sha\":\"sha\",\"content\":\"content\"}]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/git/trees', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  tree: [\n    {\n      path: 'path',\n      mode: 'mode',\n      type: 'type',\n      sha: 'sha',\n      content: 'content'\n    }\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_tree(\n  'hello-world',\n  [\n    {\n      path: 'path',\n      mode: 'mode',\n      type: 'type',\n      sha: 'sha',\n      content: 'content'\n    }\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/git/trees/{tree_sha}": {
      "get": {
        "summary": "Get a tree",
        "description": "Returns a single tree using the SHA1 value for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.",
        "operationId": "git/get-tree",
        "tags": [
          "git"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/git/trees/#get-a-tree"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/tree_sha"
          },
          {
            "$ref": "#/components/parameters/recursive"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/git-tree-2"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/git-tree-default-response"
                  },
                  "response-recursively-retrieving-a-tree": {
                    "$ref": "#/components/examples/git-tree-response-recursively-retrieving-a-tree"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/git/trees/TREE_SHA"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/git/trees/{tree_sha}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  tree_sha: 'tree_sha'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.tree(\n  'hello-world',\n  'tree_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/hooks": {
      "get": {
        "summary": "List repository webhooks",
        "description": "",
        "operationId": "repos/list-webhooks",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#list-repository-webhooks"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/hook"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/hook-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/list-hooks\" operation ID is now \"repos/list-webhooks\"",
            "before": {
              "operationId": "repos/list-hooks"
            },
            "after": {
              "operationId": "repos/list-webhooks"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/hooks', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.webhooks(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a repository webhook",
        "description": "Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap.",
        "operationId": "repos/create-webhook",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#create-a-repository-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/hook"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`."
                  },
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The URL to which the payloads will be delivered."
                      },
                      "content_type": {
                        "type": "string",
                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                      },
                      "secret": {
                        "type": "string",
                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header."
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "events": {
                    "type": "array",
                    "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for.",
                    "default": [
                      "push"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                    "default": true
                  }
                },
                "required": [
                  "config"
                ]
              },
              "example": {
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "url": "https://example.com/webhook",
                  "content_type": "json",
                  "insecure_ssl": "0"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/create-hook\" operation ID is now \"repos/create-webhook\"",
            "before": {
              "operationId": "repos/create-hook"
            },
            "after": {
              "operationId": "repos/create-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks \\\n  -d '{\"config\":{\"url\":\"url\",\"content_type\":\"content_type\",\"secret\":\"secret\",\"insecure_ssl\":\"insecure_ssl\"}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/hooks', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  config: {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_webhook(\n  'hello-world',\n  {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/hooks/{hook_id}": {
      "get": {
        "summary": "Get a repository webhook",
        "description": "",
        "operationId": "repos/get-webhook",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#get-a-repository-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/hook"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-hook\" operation ID is now \"repos/get-webhook\"",
            "before": {
              "operationId": "repos/get-hook"
            },
            "after": {
              "operationId": "repos/get-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/hooks/{hook_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.webhook(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a repository webhook",
        "description": "",
        "operationId": "repos/update-webhook",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#update-a-repository-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hook"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/hook"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "description": "Key/value pairs to provide settings for this webhook. [These are defined below](https://developer.github.com/v3/repos/hooks/#create-hook-config-params).",
                    "properties": {
                      "url": {
                        "type": "string",
                        "description": "The URL to which the payloads will be delivered."
                      },
                      "content_type": {
                        "type": "string",
                        "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`."
                      },
                      "secret": {
                        "type": "string",
                        "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers) header."
                      },
                      "insecure_ssl": {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**"
                      }
                    },
                    "required": [
                      "url"
                    ]
                  },
                  "events": {
                    "type": "array",
                    "description": "Determines what [events](https://developer.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
                    "default": [
                      "push"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "add_events": {
                    "type": "array",
                    "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "remove_events": {
                    "type": "array",
                    "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "active": {
                    "type": "boolean",
                    "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
                    "default": true
                  }
                }
              },
              "example": {
                "active": true,
                "add_events": [
                  "pull_request"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/update-hook\" operation ID is now \"repos/update-webhook\"",
            "before": {
              "operationId": "repos/update-hook"
            },
            "after": {
              "operationId": "repos/update-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks/42 \\\n  -d '{\"config\":{\"url\":\"url\",\"content_type\":\"content_type\",\"secret\":\"secret\",\"insecure_ssl\":\"insecure_ssl\"}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/hooks/{hook_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  hook_id: 42,\n  config: {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_webhook(\n  'hello-world',\n  42,\n  {\n    url: 'url',\n    content_type: 'content_type',\n    secret: 'secret',\n    insecure_ssl: 'insecure_ssl'\n  }\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a repository webhook",
        "description": "",
        "operationId": "repos/delete-webhook",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#delete-a-repository-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/delete-hook\" operation ID is now \"repos/delete-webhook\"",
            "before": {
              "operationId": "repos/delete-hook"
            },
            "after": {
              "operationId": "repos/delete-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/hooks/{hook_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_webhook(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
      "post": {
        "summary": "Ping a repository webhook",
        "description": "This will trigger a [ping event](https://developer.github.com/webhooks/#ping-event) to be sent to the hook.",
        "operationId": "repos/ping-webhook",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#ping-a-repository-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/ping-hook\" operation ID is now \"repos/ping-webhook\"",
            "before": {
              "operationId": "repos/ping-hook"
            },
            "after": {
              "operationId": "repos/ping-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks/42/pings"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/hooks/{hook_id}/pings', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.ping_webhook(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
      "post": {
        "summary": "Test the push repository webhook",
        "description": "This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`",
        "operationId": "repos/test-push-webhook",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/hooks/#test-the-push-repository-webhook"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/hook_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/test-push-hook\" operation ID is now \"repos/test-push-webhook\"",
            "before": {
              "operationId": "repos/test-push-hook"
            },
            "after": {
              "operationId": "repos/test-push-webhook"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/hooks/42/tests"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/hooks/{hook_id}/tests', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  hook_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.test_push_webhook(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/import": {
      "get": {
        "summary": "Get an import status",
        "description": "View the progress of an import.\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\".\n*   `complete` - the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.\n*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.\n*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.\n*   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://developer.github.com/v3/migrations/source_imports/#cancel-an-import) and [retry](https://developer.github.com/v3/migrations/source_imports/#start-an-import) with the correct URL.\n*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://developer.github.com/v3/migrations/source_imports/#update-an-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.",
        "operationId": "migrations/get-import-status",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#get-an-import-status"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/import"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/import"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"migrations/get-import-progress\" operation ID is now \"migrations/get-import-status\"",
            "before": {
              "operationId": "migrations/get-import-progress"
            },
            "after": {
              "operationId": "migrations/get-import-status"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/import', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.import_status(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Start an import",
        "description": "Start a source import to a GitHub repository using GitHub Importer.",
        "operationId": "migrations/start-import",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#start-an-import"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/import-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/import-2"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/spraints/socm/import",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vcs_url": {
                    "type": "string",
                    "description": "The URL of the originating repository."
                  },
                  "vcs": {
                    "type": "string",
                    "description": "The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.",
                    "enum": [
                      "subversion",
                      "git",
                      "mercurial",
                      "tfvc"
                    ]
                  },
                  "vcs_username": {
                    "type": "string",
                    "description": "If authentication is required, the username to provide to `vcs_url`."
                  },
                  "vcs_password": {
                    "type": "string",
                    "description": "If authentication is required, the password to provide to `vcs_url`."
                  },
                  "tfvc_project": {
                    "type": "string",
                    "description": "For a tfvc import, the name of the project that is being imported."
                  }
                },
                "required": [
                  "vcs_url"
                ]
              },
              "example": {
                "vcs": "subversion",
                "vcs_url": "http://svn.mycompany.com/svn/myproject",
                "vcs_username": "octocat",
                "vcs_password": "secret"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import \\\n  -d '{\"vcs_url\":\"vcs_url\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/import', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  vcs_url: 'vcs_url'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.start_import(\n  'hello-world',\n  'vcs_url'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an import",
        "description": "An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest. If no parameters are provided, the import will be restarted.",
        "operationId": "migrations/update-import",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#update-an-import"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/import-2"
                },
                "examples": {
                  "example-1": {
                    "$ref": "#/components/examples/import-example-1"
                  },
                  "example-2": {
                    "$ref": "#/components/examples/import-example-2"
                  },
                  "response": {
                    "$ref": "#/components/examples/import-response"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vcs_username": {
                    "type": "string",
                    "description": "The username to provide to the originating repository."
                  },
                  "vcs_password": {
                    "type": "string",
                    "description": "The password to provide to the originating repository."
                  }
                }
              },
              "examples": {
                "example-1": {
                  "summary": "Example 1",
                  "value": {
                    "vcs_username": "octocat",
                    "vcs_password": "secret"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import \\\n  -d '{\"vcs_username\":\"vcs_username\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/import', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  vcs_username: 'vcs_username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_import(\n  'hello-world',\n  'vcs_username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Cancel an import",
        "description": "Stop an import for a repository.",
        "operationId": "migrations/cancel-import",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#cancel-an-import"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/import', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.cancel_import(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/import/authors": {
      "get": {
        "summary": "Get commit authors",
        "description": "Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis endpoint and the [Map a commit author](https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author) endpoint allow you to provide correct Git author information.",
        "operationId": "migrations/get-commit-authors",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#get-commit-authors"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "since",
            "description": "Only authors found after this id are returned. Provide the highest author ID you've seen so far. New authors may be added to the list at any point while the importer is performing the `raw` step.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/porter-author"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/porter-author-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import/authors"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/import/authors', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_authors(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/import/authors/{author_id}": {
      "patch": {
        "summary": "Map a commit author",
        "description": "Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.",
        "operationId": "migrations/map-commit-author",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/author_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/porter-author"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/porter-author"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The new Git author email."
                  },
                  "name": {
                    "type": "string",
                    "description": "The new Git author name."
                  }
                }
              },
              "example": {
                "email": "hubot@github.com",
                "name": "Hubot the Robot"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import/authors/42 \\\n  -d '{\"email\":\"octocat@github.com\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/import/authors/{author_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  author_id: 42,\n  email: 'octocat@github.com'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.map_commit_author(\n  'hello-world',\n  42,\n  'octocat@github.com'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/import/large_files": {
      "get": {
        "summary": "Get large files",
        "description": "List files larger than 100MB found during the import",
        "operationId": "migrations/get-large-files",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#get-large-files"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/porter-large-file"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/porter-large-file-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import/large_files"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/import/large_files', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.large_files(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/import/lfs": {
      "patch": {
        "summary": "Update Git LFS preference",
        "description": "You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).",
        "operationId": "migrations/set-lfs-preference",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/source_imports/#update-git-lfs-preference"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/import"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/import"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "use_lfs": {
                    "type": "string",
                    "description": "Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).",
                    "enum": [
                      "opt_in",
                      "opt_out"
                    ]
                  }
                },
                "required": [
                  "use_lfs"
                ]
              },
              "example": {
                "use_lfs": "opt_in"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/import/lfs \\\n  -d '{\"use_lfs\":\"use_lfs\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/import/lfs', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  use_lfs: 'use_lfs'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_git_lfs_pref(\n  'hello-world',\n  'use_lfs'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/installation": {
      "get": {
        "summary": "Get a repository installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-repo-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-a-repository-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-04-10",
            "note": "\"Find repository installation\" renamed to \"Get a repository installation\"",
            "before": {
              "operationId": "apps/find-repo-installation"
            },
            "after": {
              "operationId": "apps/get-repo-installation"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/installation"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/installation', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_installation_for_authenticated(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/interaction-limits": {
      "get": {
        "summary": "Get interaction restrictions for a repository",
        "description": "Shows which group of GitHub users can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.",
        "operationId": "interactions/get-restrictions-for-repo",
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.sombra-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/interaction-limit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/interaction-limit-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.sombra-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/interaction-limits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/interaction-limits', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'sombra'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.restrictions_for_repo(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Set interaction restrictions for a repository",
        "description": "Temporarily restricts interactions to certain GitHub users within the given repository. You must have owner or admin access to set restrictions.",
        "operationId": "interactions/set-restrictions-for-repo",
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/repos/#set-interaction-restrictions-for-a-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.sombra-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/interaction-limit"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/interaction-limit-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "string",
                    "description": "Specifies the group of GitHub users who can comment, open issues, or create pull requests for the given repository. Must be one of: `existing_users`, `contributors_only`, or `collaborators_only`.",
                    "enum": [
                      "existing_users",
                      "contributors_only",
                      "collaborators_only"
                    ]
                  }
                },
                "required": [
                  "limit"
                ]
              },
              "example": {
                "limit": "collaborators_only"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"interactions/add-or-update-restrictions-for-repo\" operation ID is now \"interactions/set-restrictions-for-repo\"",
            "before": {
              "operationId": "interactions/add-or-update-restrictions-for-repo"
            },
            "after": {
              "operationId": "interactions/set-restrictions-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.sombra-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/interaction-limits \\\n  -d '{\"limit\":\"limit\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/interaction-limits', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  limit: 'limit',\n  mediaType: {\n    previews: [\n      'sombra'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_restrictions_for_repo(\n  'hello-world',\n  'limit'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove interaction restrictions for a repository",
        "description": "Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions.",
        "operationId": "interactions/remove-restrictions-for-repo",
        "tags": [
          "interactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.sombra-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "sombra",
              "note": "The Interactions API is currently in public preview. See the [blog post](https://developer.github.com/changes/2018-12-18-interactions-preview) preview for more details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sombra-preview\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.sombra-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/interaction-limits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/interaction-limits', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'sombra'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_restrictions_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/invitations": {
      "get": {
        "summary": "List repository invitations",
        "description": "When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.",
        "operationId": "repos/list-invitations",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#list-repository-invitations"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/invitations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/invitations', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.invitations(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/invitations/{invitation_id}": {
      "patch": {
        "summary": "Update a repository invitation",
        "description": "",
        "operationId": "repos/update-invitation",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/invitation_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-invitation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-invitation"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "type": "string",
                    "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
                    "enum": [
                      "read",
                      "write",
                      "maintain",
                      "triage",
                      "admin"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/invitations/42 \\\n  -d '{\"permissions\":\"permissions\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/invitations/{invitation_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  invitation_id: 42,\n  permissions: 'permissions'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_invitation(\n  'hello-world',\n  42,\n  'permissions'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a repository invitation",
        "description": "",
        "operationId": "repos/delete-invitation",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/invitation_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/invitations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/invitations/{invitation_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  invitation_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_invitation(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues": {
      "get": {
        "summary": "List repository issues",
        "description": "List issues in a repository.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list-for-repo",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-repository-issues"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/milestone"
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "name": "assignee",
            "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/creator"
          },
          {
            "$ref": "#/components/parameters/mentioned"
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-simple-2"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create an issue",
        "description": "Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "issues/create",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#create-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the issue."
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the issue."
                  },
                  "assignee": {
                    "type": "string",
                    "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_"
                  },
                  "milestone": {
                    "type": "integer",
                    "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._"
                  },
                  "labels": {
                    "type": "array",
                    "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
                    "items": {
                      "type": "string"
                    }
                  },
                  "assignees": {
                    "type": "array",
                    "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "title"
                ]
              },
              "example": {
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "assignees": [
                  "octocat"
                ],
                "milestone": 1,
                "labels": [
                  "bug"
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/issues', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create(\n  'hello-world',\n  'title'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/comments": {
      "get": {
        "summary": "List issue comments for a repository",
        "description": "By default, Issue Comments are ordered by ascending ID.",
        "operationId": "issues/list-comments-for-repo",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#list-issue-comments-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "sort",
            "description": "Either `created` or `updated`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "Either `asc` or `desc`. Ignored without the `sort` parameter.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "since",
            "description": "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/comments', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.comments_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{comment_id}": {
      "get": {
        "summary": "Get an issue comment",
        "description": "",
        "operationId": "issues/get-comment",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#get-an-issue-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.comment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an issue comment",
        "description": "",
        "operationId": "issues/update-comment",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#update-an-issue-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The contents of the comment."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Me too"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_comment(\n  'hello-world',\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an issue comment",
        "description": "",
        "operationId": "issues/delete-comment",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#delete-an-issue-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
      "get": {
        "summary": "List reactions for an issue comment",
        "description": "List the reactions to an [issue comment](https://developer.github.com/v3/issues/comments/).",
        "operationId": "reactions/list-for-issue-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue comment.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_issue_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for an issue comment",
        "description": "Create a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment.",
        "operationId": "reactions/create-for-issue-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_issue_comment(\n  'hello-world',\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete an issue comment reaction",
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://developer.github.com/v3/issues/comments/).",
        "operationId": "reactions/delete-for-issue-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/comments/42/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_issue_comment(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/events": {
      "get": {
        "summary": "List issue events for a repository",
        "description": "",
        "operationId": "issues/list-events-for-repo",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/events/#list-issue-events-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-event"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-event-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```"
            },
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/events', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.events_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/events/{event_id}": {
      "get": {
        "summary": "Get an issue event",
        "description": "",
        "operationId": "issues/get-event",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/events/#get-an-issue-event"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/event_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-event"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-event"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```"
            },
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/events/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/events/{event_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  event_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.event(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}": {
      "get": {
        "summary": "Get an issue",
        "description": "The API returns a [`301 Moved Permanently` status](https://developer.github.com/v3/#http-redirects) if the issue was\n[transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://developer.github.com/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/get",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#get-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an issue",
        "description": "Issue owners and users with push access can edit an issue.",
        "operationId": "issues/update",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#update-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the issue."
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the issue."
                  },
                  "assignee": {
                    "type": "string",
                    "description": "Login for the user that this issue should be assigned to. **This field is deprecated.**"
                  },
                  "state": {
                    "type": "string",
                    "description": "State of the issue. Either `open` or `closed`.",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "milestone": {
                    "type": "integer",
                    "description": "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._",
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "description": "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
                    "items": {
                      "type": "string"
                    }
                  },
                  "assignees": {
                    "type": "array",
                    "description": "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "assignees": [
                  "octocat"
                ],
                "milestone": 1,
                "state": "open",
                "labels": [
                  "bug"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42 \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/issues/{issue_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'hello-world',\n  42,\n  'title'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
      "post": {
        "summary": "Add assignees to an issue",
        "description": "Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.",
        "operationId": "issues/add-assignees",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-simple"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-simple"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignees": {
                    "type": "array",
                    "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "assignees": [
                  "hubot",
                  "other_user"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/assignees \\\n  -d '{\"assignees\":[\"assignees\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/assignees', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  assignees: [\n    'assignees'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_assignees(\n  'hello-world',\n  42,\n  [\n    'assignees'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove assignees from an issue",
        "description": "Removes one or more assignees from an issue.",
        "operationId": "issues/remove-assignees",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-simple-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-simple-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assignees": {
                    "type": "array",
                    "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "assignees": [
                  "hubot",
                  "other_user"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/assignees \\\n  -d '{\"assignees\":[\"assignees\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  assignees: [\n    'assignees'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_assignees(\n  'hello-world',\n  42,\n  [\n    'assignees'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/comments": {
      "get": {
        "summary": "List issue comments",
        "description": "Issue Comments are ordered by ascending ID.",
        "operationId": "issues/list-comments",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#list-issue-comments"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "name": "since",
            "description": "Only comments updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.comments(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create an issue comment",
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "issues/create-comment",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/comments/#create-an-issue-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/issue-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-comment"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The contents of the comment."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Me too"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/comments \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_comment(\n  'hello-world',\n  42,\n  'body'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/events": {
      "get": {
        "summary": "List issue events",
        "description": "",
        "operationId": "issues/list-events",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/events/#list-issue-events"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-event-for-issue"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-event-for-issue-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```"
            },
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}/events', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.events(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": {
      "get": {
        "summary": "List labels for an issue",
        "description": "",
        "operationId": "issues/list-labels-on-issue",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#list-labels-for-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/labels"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.labels(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Add labels to an issue",
        "description": "",
        "operationId": "issues/add-labels",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "labels": {
                    "type": "array",
                    "description": "The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "labels"
                ]
              },
              "example": {
                "labels": [
                  "bug",
                  "enhancement"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/labels \\\n  -d '{\"labels\":[\"labels\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  labels: [\n    'labels'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_labels(\n  'hello-world',\n  42,\n  [\n    'labels'\n  ]\n)"
          }
        ]
      },
      "put": {
        "summary": "Set labels for an issue",
        "description": "Removes any previous labels and sets the new labels for an issue.",
        "operationId": "issues/set-labels",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#set-labels-for-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "labels": {
                    "type": "array",
                    "description": "The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "labels": [
                  "bug",
                  "enhancement"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"issues/replace-labels\" operation ID is now \"issues/replace-all-labels\"",
            "before": {
              "operationId": "issues/replace-labels"
            },
            "after": {
              "operationId": "issues/replace-all-labels"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"issues/replace-all-labels\" operation ID is now \"issues/set-labels\"",
            "before": {
              "operationId": "issues/replace-all-labels"
            },
            "after": {
              "operationId": "issues/set-labels"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/labels \\\n  -d '{\"labels\":[\"labels\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/issues/{issue_number}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  labels: [\n    'labels'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_labels(\n  'hello-world',\n  42,\n  [\n    'labels'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove all labels from an issue",
        "description": "",
        "operationId": "issues/remove-all-labels",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"issues/remove-labels\" operation ID is now \"issues/remove-all-labels\"",
            "before": {
              "operationId": "issues/remove-labels"
            },
            "after": {
              "operationId": "issues/remove-all-labels"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/labels"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_labels(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
      "delete": {
        "summary": "Remove a label from an issue",
        "description": "Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.",
        "operationId": "issues/remove-label",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "$ref": "#/components/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-items-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/labels/NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_label(\n  'hello-world',\n  42,\n  'name'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/lock": {
      "put": {
        "summary": "Lock an issue",
        "description": "Users with push access can lock an issue or pull request's conversation.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "issues/lock",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#lock-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lock_reason": {
                    "type": "string",
                    "description": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
                    "enum": [
                      "off-topic",
                      "too heated",
                      "resolved",
                      "spam"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/lock \\\n  -d '{\"lock_reason\":\"lock_reason\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/issues/{issue_number}/lock', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  lock_reason: 'lock_reason'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.lock(\n  'hello-world',\n  42,\n  'lock_reason'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unlock an issue",
        "description": "Users with push access can unlock an issue's conversation.",
        "operationId": "issues/unlock",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#unlock-an-issue"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/lock"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unlock(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
      "get": {
        "summary": "List reactions for an issue",
        "description": "List the reactions to an [issue](https://developer.github.com/v3/issues/).",
        "operationId": "reactions/list-for-issue",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-an-issue"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to an issue.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_issue(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for an issue",
        "description": "Create a reaction to an [issue](https://developer.github.com/v3/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue.",
        "operationId": "reactions/create-for-issue",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-an-issue"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/issues/{issue_number}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_issue(\n  'hello-world',\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete an issue reaction",
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://developer.github.com/v3/issues/).",
        "operationId": "reactions/delete-for-issue",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-an-issue-reaction"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_issue(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
      "get": {
        "summary": "List timeline events for an issue",
        "description": "",
        "operationId": "issues/list-events-for-timeline",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/timeline/#list-timeline-events-for-an-issue"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.mockingbird-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/issue_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-event-for-issue"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-event-for-issue-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "mockingbird",
              "note": "The API to get issue timeline events is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details. To access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mockingbird-preview\n```"
            },
            {
              "required": false,
              "name": "starfox",
              "note": "Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the [blog post](https://developer.github.com/changes/2018-09-05-project-card-events).\n\nTo receive the `project_card` attribute, project boards must be [enabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) for a repository, and you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.starfox-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"issue_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "issue_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.mockingbird-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/issues/42/timeline"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/issues/{issue_number}/timeline', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  issue_number: 42,\n  mediaType: {\n    previews: [\n      'mockingbird'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.timeline_events(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/keys": {
      "get": {
        "summary": "List deploy keys",
        "description": "",
        "operationId": "repos/list-deploy-keys",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#list-deploy-keys"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/deploy-key"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deploy-key-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/keys"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/keys', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.deploy_keys(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a deploy key",
        "description": "You can create a read-only deploy key.",
        "operationId": "repos/create-deploy-key",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#create-a-deploy-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deploy-key"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "A name for the key."
                  },
                  "key": {
                    "type": "string",
                    "description": "The contents of the key."
                  },
                  "read_only": {
                    "type": "boolean",
                    "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/).\""
                  }
                },
                "required": [
                  "key"
                ]
              },
              "example": {
                "title": "octocat@octomac",
                "key": "ssh-rsa AAA...",
                "read_only": true
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/add-deploy-key\" operation ID is now \"repos/create-deploy-key\"",
            "before": {
              "operationId": "repos/add-deploy-key"
            },
            "after": {
              "operationId": "repos/create-deploy-key"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/keys \\\n  -d '{\"key\":\"key\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/keys', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  key: 'key'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_deploy_key(\n  'hello-world',\n  'key'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/keys/{key_id}": {
      "get": {
        "summary": "Get a deploy key",
        "description": "",
        "operationId": "repos/get-deploy-key",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#get-a-deploy-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deploy-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/deploy-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/keys/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/keys/{key_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  key_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.deploy_key(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a deploy key",
        "description": "Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.",
        "operationId": "repos/delete-deploy-key",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/keys/#delete-a-deploy-key"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/remove-deploy-key\" operation ID is now \"repos/delete-deploy-key\"",
            "before": {
              "operationId": "repos/remove-deploy-key"
            },
            "after": {
              "operationId": "repos/delete-deploy-key"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/keys/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/keys/{key_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  key_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_deploy_key(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/labels": {
      "get": {
        "summary": "List labels for a repository",
        "description": "",
        "operationId": "issues/list-labels-for-repo",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#list-labels-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/labels"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.labels_for_repo(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a label",
        "description": "",
        "operationId": "issues/create-label",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#create-a-label"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/label"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/)."
                  },
                  "color": {
                    "type": "string",
                    "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the label."
                  }
                },
                "required": [
                  "name",
                  "color"
                ]
              },
              "example": {
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/labels \\\n  -d '{\"name\":\"name\",\"color\":\"color\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name',\n  color: 'color'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_label(\n  'hello-world',\n  'name',\n  'color'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/labels/{name}": {
      "get": {
        "summary": "Get a label",
        "description": "",
        "operationId": "issues/get-label",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#get-a-label"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/label"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/labels/NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/labels/{name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.label(\n  'hello-world',\n  'name'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a label",
        "description": "",
        "operationId": "issues/update-label",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#update-a-label"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/name"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/label"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_name": {
                    "type": "string",
                    "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/)."
                  },
                  "color": {
                    "type": "string",
                    "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the label."
                  }
                }
              },
              "example": {
                "new_name": "bug :bug:",
                "description": "Small bug fix required",
                "color": "b01f26"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/labels/NAME \\\n  -d '{\"new_name\":\"new_name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/labels/{name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name',\n  new_name: 'new_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_label(\n  'hello-world',\n  'name',\n  'new_name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a label",
        "description": "",
        "operationId": "issues/delete-label",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#delete-a-label"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/name"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/labels/NAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/labels/{name}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_label(\n  'hello-world',\n  'name'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/languages": {
      "get": {
        "summary": "List repository languages",
        "description": "Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.",
        "operationId": "repos/list-languages",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-languages"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/language"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/language"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/languages"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/languages', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.languages(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/license": {
      "get": {
        "summary": "Get the license for a repository",
        "description": "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [Get repository content](https://developer.github.com/v3/repos/contents/#get-repository-content), this method also supports [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw license content or rendered license HTML.",
        "operationId": "licenses/get-for-repo",
        "tags": [
          "licenses"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/licenses/#get-the-license-for-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/license-content"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/license-content"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/license"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/license', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/merges": {
      "post": {
        "summary": "Merge a branch",
        "description": "",
        "operationId": "repos/merge",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/merging/#merge-a-branch"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response (The resulting merge commit)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simple-commit-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-commit"
                  }
                }
              }
            }
          },
          "404": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "missing-base-response": {
                    "summary": "Missing base response",
                    "value": {
                      "message": "Base does not exist"
                    }
                  },
                  "missing-head-response": {
                    "summary": "Missing head response",
                    "value": {
                      "message": "Head does not exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Merge conflict response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "merge-conflict-response": {
                    "value": {
                      "message": "Merge Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "string",
                    "description": "The name of the base branch that the head will be merged into."
                  },
                  "head": {
                    "type": "string",
                    "description": "The head to merge. This can be a branch name or a commit SHA1."
                  },
                  "commit_message": {
                    "type": "string",
                    "description": "Commit message to use for the merge commit. If omitted, a default message will be used."
                  }
                },
                "required": [
                  "base",
                  "head"
                ]
              },
              "example": {
                "base": "master",
                "head": "cool_feature",
                "commit_message": "Shipped cool_feature!"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/merges \\\n  -d '{\"base\":\"base\",\"head\":\"head\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/merges', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  base: 'base',\n  head: 'head'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.merge_branch(\n  'hello-world',\n  'base',\n  'head'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/milestones": {
      "get": {
        "summary": "List milestones",
        "description": "",
        "operationId": "issues/list-milestones",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#list-milestones"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "state",
            "description": "The state of the milestone. Either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "name": "sort",
            "description": "What to sort results by. Either `due_on` or `completeness`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "due_on",
                "completeness"
              ],
              "default": "due_on"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Either `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/milestone"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/milestone-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-01",
            "note": "\"issues/list-milestones-for-repo\" operation ID is now \"issues/list-milestones\"",
            "before": {
              "operationId": "issues/list-milestones-for-repo"
            },
            "after": {
              "operationId": "issues/list-milestones"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/milestones"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/milestones', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.milestones(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a milestone",
        "description": "",
        "operationId": "issues/create-milestone",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#create-a-milestone"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/milestone"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/milestone"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the milestone."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the milestone. Either `open` or `closed`.",
                    "enum": [
                      "open",
                      "closed"
                    ],
                    "default": "open"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the milestone."
                  },
                  "due_on": {
                    "type": "string",
                    "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                  }
                },
                "required": [
                  "title"
                ]
              },
              "example": {
                "title": "v1.0",
                "state": "open",
                "description": "Tracking milestone for version 1.0",
                "due_on": "2012-10-09T23:39:01Z"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/milestones \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/milestones', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_milestone(\n  'hello-world',\n  'title'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/milestones/{milestone_number}": {
      "get": {
        "summary": "Get a milestone",
        "description": "",
        "operationId": "issues/get-milestone",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#get-a-milestone"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/milestone_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/milestone"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/milestone"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"milestone_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "milestone_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/milestones/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/milestones/{milestone_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  milestone_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.milestone(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a milestone",
        "description": "",
        "operationId": "issues/update-milestone",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#update-a-milestone"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/milestone_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/milestone"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/milestone"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the milestone."
                  },
                  "state": {
                    "type": "string",
                    "description": "The state of the milestone. Either `open` or `closed`.",
                    "enum": [
                      "open",
                      "closed"
                    ],
                    "default": "open"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the milestone."
                  },
                  "due_on": {
                    "type": "string",
                    "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."
                  }
                }
              },
              "example": {
                "title": "v1.0",
                "state": "open",
                "description": "Tracking milestone for version 1.0",
                "due_on": "2012-10-09T23:39:01Z"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"milestone_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "milestone_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/milestones/42 \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/milestones/{milestone_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  milestone_number: 42,\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_milestone(\n  'hello-world',\n  42,\n  'title'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a milestone",
        "description": "",
        "operationId": "issues/delete-milestone",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/milestones/#delete-a-milestone"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/milestone_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"milestone_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "milestone_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/milestones/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/milestones/{milestone_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  milestone_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_milestone(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
      "get": {
        "summary": "List labels for issues in a milestone",
        "description": "",
        "operationId": "issues/list-labels-for-milestone",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/labels/#list-labels-for-issues-in-a-milestone"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/milestone_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/label"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"milestone_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "milestone_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/milestones/42/labels"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  milestone_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.labels_for_for_milestone(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/notifications": {
      "get": {
        "summary": "List repository notifications for the authenticated user",
        "description": "List all notifications for the current user.",
        "operationId": "activity/list-repo-notifications-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/all"
          },
          {
            "$ref": "#/components/parameters/participating"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/before"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/thread"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/thread-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/list-notifications-for-repo\" operation ID is now \"activity/list-repo-notifications-for-authenticated-user\"",
            "before": {
              "operationId": "activity/list-notifications-for-repo"
            },
            "after": {
              "operationId": "activity/list-repo-notifications-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/notifications"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/notifications', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_notifications_for_authenticated_user(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Mark repository notifications as read",
        "description": "Marks all notifications in a repository as \"read\" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the [List repository notifications for the authenticated user](https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.",
        "operationId": "activity/mark-repo-notifications-as-read",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "205": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "last_read_at": {
                    "type": "string",
                    "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp."
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/mark-notifications-as-read-for-repo\" operation ID is now \"activity/mark-repo-notifications-as-read\"",
            "before": {
              "operationId": "activity/mark-notifications-as-read-for-repo"
            },
            "after": {
              "operationId": "activity/mark-repo-notifications-as-read"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/notifications \\\n  -d '{\"last_read_at\":\"last_read_at\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/notifications', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  last_read_at: 'last_read_at'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.mark_repo_notifications_as_read(\n  'hello-world',\n  'last_read_at'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pages": {
      "get": {
        "summary": "Get a GitHub Pages site",
        "description": "",
        "operationId": "repos/get-pages",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#get-a-github-pages-site"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/page"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pages', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pages_site(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a GitHub Pages site",
        "description": "",
        "operationId": "repos/create-pages-site",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#create-a-github-pages-site"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.switcheroo-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/page"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "switcheroo",
              "note": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "object",
                    "properties": {
                      "branch": {
                        "type": "string",
                        "description": "The repository branch used to publish your [site's source files](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/). Can be either `master` or `gh-pages`.",
                        "enum": [
                          "master",
                          "gh-pages"
                        ]
                      },
                      "path": {
                        "type": "string",
                        "description": "The repository directory that includes the source files for the Pages site. When `branch` is `master`, you can change `path` to `/docs`. When `branch` is `gh-pages`, you are unable to specify a `path` other than `/`."
                      }
                    }
                  }
                }
              },
              "example": {
                "source": {
                  "branch": "master",
                  "path": "/docs"
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/enable-pages-site\" operation ID is now \"repos/create-pages-site\"",
            "before": {
              "operationId": "repos/enable-pages-site"
            },
            "after": {
              "operationId": "repos/create-pages-site"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.switcheroo-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages \\\n  -d '{\"source\":{\"branch\":\"branch\",\"path\":\"path\"}}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pages', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  source: {\n    branch: 'branch',\n    path: 'path'\n  },\n  mediaType: {\n    previews: [\n      'switcheroo'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_pages_site(\n  'hello-world',\n  {\n    branch: 'branch',\n    path: 'path'\n  }\n)"
          }
        ]
      },
      "put": {
        "summary": "Update information about a GitHub Pages site",
        "description": "",
        "operationId": "repos/update-information-about-pages-site",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#update-information-about-a-github-pages-site"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cname": {
                    "type": "string",
                    "description": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/).\""
                  },
                  "source": {
                    "type": "string",
                    "description": "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`.",
                    "enum": [
                      "gh-pages",
                      "master",
                      "master /docs"
                    ]
                  }
                }
              },
              "example": {
                "cname": "octocatblog.com",
                "source": "master /docs"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages \\\n  -d '{\"cname\":\"cname\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/pages', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  cname: 'cname'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_information_about_pages_site(\n  'hello-world',\n  'cname'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a GitHub Pages site",
        "description": "",
        "operationId": "repos/delete-pages-site",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#delete-a-github-pages-site"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.switcheroo-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "switcheroo",
              "note": "Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/) preview for more details. To access the new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.switcheroo-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/disable-pages-site\" operation ID is now \"repos/delete-pages-site\"",
            "before": {
              "operationId": "repos/disable-pages-site"
            },
            "after": {
              "operationId": "repos/delete-pages-site"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.switcheroo-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/pages', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'switcheroo'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_pages_site(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pages/builds": {
      "get": {
        "summary": "List GitHub Pages builds",
        "description": "",
        "operationId": "repos/list-pages-builds",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#list-github-pages-builds"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/page-build"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/page-build-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages/builds"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pages/builds', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pages_builds(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Request a GitHub Pages build",
        "description": "You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.",
        "operationId": "repos/request-pages-build",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#request-a-github-pages-build"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-build-status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/page-build-status"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/request-page-build\" operation ID is now \"repos/request-pages-build\"",
            "before": {
              "operationId": "repos/request-page-build"
            },
            "after": {
              "operationId": "repos/request-pages-build"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages/builds"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pages/builds', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.request_pages_build(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pages/builds/latest": {
      "get": {
        "summary": "Get latest Pages build",
        "description": "",
        "operationId": "repos/get-latest-pages-build",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#get-latest-pages-build"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-build"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/page-build"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages/builds/latest"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pages/builds/latest', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.latest_pages_build(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pages/builds/{build_id}": {
      "get": {
        "summary": "Get GitHub Pages build",
        "description": "",
        "operationId": "repos/get-pages-build",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/pages/#get-github-pages-build"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/build_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/page-build"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/page-build"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pages/builds/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pages/builds/{build_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  build_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pages_build(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/projects": {
      "get": {
        "summary": "List repository projects",
        "description": "Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/list-for-repo",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#list-repository-projects"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "state",
            "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-items-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/projects"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/projects', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a repository project",
        "description": "Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
        "operationId": "projects/create-for-repo",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#create-a-repository-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the project."
                  },
                  "body": {
                    "type": "string",
                    "description": "The description of the project."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Projects Documentation",
                "body": "Developer documentation project for the developer site."
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/projects \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/projects', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  name: 'name',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_repo(\n  'hello-world',\n  'name'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls": {
      "get": {
        "summary": "List pull requests",
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
        "operationId": "pulls/list",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#list-pull-requests"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "state",
            "description": "Either `open`, `closed`, or `all` to filter by state.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/head"
          },
          {
            "$ref": "#/components/parameters/base"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "popularity",
                "long-running"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.list(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a pull request",
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nYou can create a new pull request.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/create",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#create-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the new pull request."
                  },
                  "head": {
                    "type": "string",
                    "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`."
                  },
                  "base": {
                    "type": "string",
                    "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the pull request."
                  },
                  "maintainer_can_modify": {
                    "type": "boolean",
                    "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request."
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more."
                  }
                },
                "required": [
                  "title",
                  "head",
                  "base"
                ]
              },
              "example": {
                "title": "Amazing new feature",
                "body": "Please pull these awesome changes in!",
                "head": "octocat:new-feature",
                "base": "master"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls \\\n  -d '{\"title\":\"title\",\"head\":\"head\",\"base\":\"base\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  title: 'title',\n  head: 'head',\n  base: 'base'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create(\n  'hello-world',\n  'title',\n  'head',\n  'base'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/comments": {
      "get": {
        "summary": "List review comments in a repository",
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nLists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
        "operationId": "pulls/list-review-comments-for-repo",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#list-review-comments-in-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "sort",
            "description": "Can be either `created` or `updated` comments.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "since",
            "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-review-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/list-comments-for-repo\" operation ID is now \"pulls/list-review-comments-for-repo\"",
            "before": {
              "operationId": "pulls/list-comments-for-repo"
            },
            "after": {
              "operationId": "pulls/list-review-comments-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/comments', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.review_comments_for_repo(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
      "get": {
        "summary": "Get a review comment for a pull request",
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nProvides details for a review comment.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
        "operationId": "pulls/get-review-comment",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#get-a-review-comment-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-comment-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/get-comment\" operation ID is now \"pulls/get-review-comment\"",
            "before": {
              "operationId": "pulls/get-comment"
            },
            "after": {
              "operationId": "pulls/get-review-comment"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.review_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a review comment for a pull request",
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nEnables you to edit a review comment.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.",
        "operationId": "pulls/update-review-comment",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#update-a-review-comment-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-comment-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The text of the reply to the review comment."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "I like this too!"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/update-comment\" operation ID is now \"pulls/update-review-comment\"",
            "before": {
              "operationId": "pulls/update-comment"
            },
            "after": {
              "operationId": "pulls/update-review-comment"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_review_comment(\n  'hello-world',\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a review comment for a pull request",
        "description": "Deletes a review comment.",
        "operationId": "pulls/delete-review-comment",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#delete-a-review-comment-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/delete-comment\" operation ID is now \"pulls/delete-review-comment\"",
            "before": {
              "operationId": "pulls/delete-comment"
            },
            "after": {
              "operationId": "pulls/delete-review-comment"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_review_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
      "get": {
        "summary": "List reactions for a pull request review comment",
        "description": "List the reactions to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).",
        "operationId": "reactions/list-for-pull-request-review-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a pull request review comment.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_pull_request_review_comment(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for a pull request review comment",
        "description": "Create a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment.",
        "operationId": "reactions/create-for-pull-request-review-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the pull request review comment.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_pull_request_review_comment(\n  'hello-world',\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
      "delete": {
        "summary": "Delete a pull request comment reaction",
        "description": "**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://developer.github.com/v3/pulls/comments/).",
        "operationId": "reactions/delete-for-pull-request-comment",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          },
          {
            "$ref": "#/components/parameters/reaction_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/comments/42/reactions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  comment_id: 42,\n  reaction_id: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_pull_request_comment(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}": {
      "get": {
        "summary": "Get a pull request",
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://developer.github.com/v3/pulls/#create-a-pull-request), or [edit](https://developer.github.com/v3/pulls/#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see \"[Checking mergeability of pull requests](https://developer.github.com/v3/git/#checking-mergeability-of-pull-requests)\".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
        "operationId": "pulls/get",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#get-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "200": {
            "description": "Pass the appropriate [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a pull request",
        "description": "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.",
        "operationId": "pulls/update",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#update-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "sailor-v",
              "note": "You can now use the REST API to add a reason when you lock an issue, and you will see lock reasons in responses that include issues or pull requests. You will also see lock reasons in `locked` events. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-01-10-lock-reason-api-preview) for full details. To access this feature, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.sailor-v-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the pull request."
                  },
                  "body": {
                    "type": "string",
                    "description": "The contents of the pull request."
                  },
                  "state": {
                    "type": "string",
                    "description": "State of this Pull Request. Either `open` or `closed`.",
                    "enum": [
                      "open",
                      "closed"
                    ]
                  },
                  "base": {
                    "type": "string",
                    "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository."
                  },
                  "maintainer_can_modify": {
                    "type": "boolean",
                    "description": "Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request."
                  }
                }
              },
              "example": {
                "title": "new title",
                "body": "updated body",
                "state": "open",
                "base": "master"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42 \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/pulls/{pull_number}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update(\n  'hello-world',\n  42,\n  'title'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
      "get": {
        "summary": "List review comments on a pull request",
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nLists all review comments for a pull request. By default, review comments are in ascending order by ID.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing and creating](https://developer.github.com/v3/reactions) reactions.",
        "operationId": "pulls/list-review-comments",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#list-review-comments-on-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "name": "sort",
            "description": "Can be either `created` or `updated` comments.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "Can be either `asc` or `desc`. Ignored without `sort` parameter.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "since",
            "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only returns comments `updated` at or after this time.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-review-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/list-comments\" operation ID is now \"pulls/list-review-comments\"",
            "before": {
              "operationId": "pulls/list-comments"
            },
            "after": {
              "operationId": "pulls/list-review-comments"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.review_comments(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a review comment for a pull request",
        "description": "**Note:** Multi-line comments on pull requests are currently in public beta and subject to change.\n\nCreates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"[Create an issue comment](https://developer.github.com/v3/issues/comments/#create-an-issue-comment).\" We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n\nYou can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see [Multi-line comment summary](https://developer.github.com/v3/pulls/comments/#multi-line-comment-summary-3).\n\n**Note:** The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\n**Multi-line comment summary**\n\n**Note:** New parameters and response fields are available for developers to preview. During the preview period, these response fields may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2019-10-03-multi-line-comments) for full details.\n\nUse the `comfort-fade` preview header and the `line` parameter to show multi-line comment-supported fields in the response.\n\nIf you use the `comfort-fade` preview header, your response will show:\n\n*   For multi-line comments, values for `start_line`, `original_start_line`, `start_side`, `line`, `original_line`, and `side`.\n*   For single-line comments, values for `line`, `original_line`, and `side` and a `null` value for `start_line`, `original_start_line`, and `start_side`.\n\nIf you don't use the `comfort-fade` preview header, multi-line and single-line comments will appear the same way in the response with a single `position` attribute. Your response will show:\n\n*   For multi-line comments, the last line of the comment range for the `position` attribute.\n*   For single-line comments, the diff-positioned way of referencing comments for the `position` attribute. For more information, see `position` in the [input parameters](https://developer.github.com/v3/pulls/comments/#parameters-2) table.",
        "operationId": "pulls/create-review-comment",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#create-a-review-comment-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-comment"
                },
                "examples": {
                  "example-for-a-multi-line-comment": {
                    "$ref": "#/components/examples/pull-request-review-comment-example-for-a-multi-line-comment"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "comfort-fade",
              "note": "Multi-line comments in a pull request diff is currently available for developers to preview. To access the new response fields during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.comfort-fade-preview+json\n```"
            }
          ],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The text of the review comment."
                  },
                  "commit_id": {
                    "type": "string",
                    "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`."
                  },
                  "path": {
                    "type": "string",
                    "description": "The relative path to the file that necessitates a comment."
                  },
                  "position": {
                    "type": "integer",
                    "description": "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above."
                  },
                  "side": {
                    "type": "string",
                    "description": "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\".",
                    "enum": [
                      "LEFT",
                      "RIGHT"
                    ]
                  },
                  "line": {
                    "type": "integer",
                    "description": "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to."
                  },
                  "start_line": {
                    "type": "integer",
                    "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\"."
                  },
                  "start_side": {
                    "type": "string",
                    "description": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\". See `side` in this table for additional context.",
                    "enum": [
                      "LEFT",
                      "RIGHT",
                      "side"
                    ]
                  }
                },
                "required": [
                  "body",
                  "commit_id",
                  "path"
                ]
              },
              "examples": {
                "example-for-a-single-line-comment": {
                  "summary": "Example for a single-line comment",
                  "value": {
                    "body": "Let's add this deleted line back.",
                    "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "path": "file1.txt",
                    "line": 5,
                    "side": "LEFT"
                  }
                },
                "example-for-a-multi-line-comment": {
                  "summary": "Example for a multi-line comment",
                  "value": {
                    "body": "Great stuff!",
                    "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "path": "file1.txt",
                    "start_line": 1,
                    "start_side": "RIGHT",
                    "line": 2,
                    "side": "RIGHT"
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          },
          {
            "type": "operation",
            "date": "2019-09-09",
            "note": "\"Create a comment reply\" is now \"Create a comment\". To create a pull request review comment reply, use the new \"Create a review comment reply\" endpoint",
            "before": {
              "operationId": "pulls/create-comment-reply"
            },
            "after": {
              "operationId": "pulls/create-comment"
            }
          },
          {
            "type": "parameter",
            "date": "2019-09-09",
            "note": "\"in_reply_to\" parameter is deprecated for \"Create a comment\". To create a pull request review comment reply, use the new \"Create a review comment reply\" endpoint",
            "before": {
              "name": "in_reply_to",
              "description": "The comment ID to reply to. **Note**: This must be the ID of a top-level comment, not a reply to that comment. Replies to replies are not supported.",
              "in": "body",
              "type": "integer"
            },
            "after": {}
          },
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/create-comment\" operation ID is now \"pulls/create-review-comment\"",
            "before": {
              "operationId": "pulls/create-comment"
            },
            "after": {
              "operationId": "pulls/create-review-comment"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/comments \\\n  -d '{\"body\":\"body\",\"commit_id\":\"commit_id\",\"path\":\"path\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  body: 'body',\n  commit_id: 'commit_id',\n  path: 'path'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_review_comment(\n  'hello-world',\n  42,\n  'body',\n  'commit_id',\n  'path'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
      "post": {
        "summary": "Create a reply for a review comment",
        "description": "Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/create-reply-for-review-comment",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/comments/#create-a-reply-for-a-review-comment"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/comment_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-comment"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The text of the review comment."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Great stuff!"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/create-review-comment-reply\" operation ID is now \"pulls/create-reply-for-review-comment\"",
            "before": {
              "operationId": "pulls/create-review-comment-reply"
            },
            "after": {
              "operationId": "pulls/create-reply-for-review-comment"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/comments/42/replies \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  comment_id: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_reply_for_review_comment(\n  'hello-world',\n  42,\n  42,\n  'body'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
      "get": {
        "summary": "List commits on a pull request",
        "description": "Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://developer.github.com/v3/repos/commits/#list-commits) endpoint.",
        "operationId": "pulls/list-commits",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-commit"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-commit-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/commits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/commits', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commits(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/files": {
      "get": {
        "summary": "List pull requests files",
        "description": "**Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.",
        "operationId": "pulls/list-files",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#list-pull-requests-files"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/diff-entry"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/diff-entry-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/files"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/files', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.files(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
      "get": {
        "summary": "Check if a pull request has been merged",
        "description": "",
        "operationId": "pulls/check-if-merged",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#check-if-a-pull-request-has-been-merged"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if pull request has been merged"
          },
          "404": {
            "description": "Response if pull request has not been merged"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/merge"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/merge', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_merged(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "put": {
        "summary": "Merge a pull request",
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/merge",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#merge-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if merge was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-merge-result"
                },
                "examples": {
                  "response-if-merge-was-successful": {
                    "$ref": "#/components/examples/pull-request-merge-result-response-if-merge-was-successful"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Response if merge cannot be performed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response-if-merge-cannot-be-performed": {
                    "value": {
                      "message": "Pull Request is not mergeable",
                      "documentation_url": "https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Response if sha was provided and pull request head did not match",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response-if-sha-was-provided-and-pull-request-head-did-not-match": {
                    "value": {
                      "message": "Head branch was modified. Review and try the merge again.",
                      "documentation_url": "https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_title": {
                    "type": "string",
                    "description": "Title for the automatic commit message."
                  },
                  "commit_message": {
                    "type": "string",
                    "description": "Extra detail to append to automatic commit message."
                  },
                  "sha": {
                    "type": "string",
                    "description": "SHA that pull request head must match to allow merge."
                  },
                  "merge_method": {
                    "type": "string",
                    "description": "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
                    "enum": [
                      "merge",
                      "squash",
                      "rebase"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/merge \\\n  -d '{\"commit_title\":\"commit_title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  commit_title: 'commit_title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.merge(\n  'hello-world',\n  42,\n  'commit_title'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
      "get": {
        "summary": "List requested reviewers for a pull request",
        "description": "",
        "operationId": "pulls/list-requested-reviewers",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/review_requests/#list-requested-reviewers-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/simple-pull-request-review-request"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-pull-request-review-request"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/list-review-requests\" operation ID is now \"pulls/list-requested-reviewers\"",
            "before": {
              "operationId": "pulls/list-review-requests"
            },
            "after": {
              "operationId": "pulls/list-requested-reviewers"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/requested_reviewers"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.requested_reviewers(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Request reviewers for a pull request",
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "pulls/request-reviewers",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/review_requests/#request-reviewers-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-request"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-request"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Response if user is not a collaborator"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reviewers": {
                    "type": "array",
                    "description": "An array of user `login`s that will be requested.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "team_reviewers": {
                    "type": "array",
                    "description": "An array of team `slug`s that will be requested.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "reviewers": [
                  "octocat",
                  "hubot",
                  "other_user"
                ],
                "team_reviewers": [
                  "justice-league"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/create-review-request\" operation ID is now \"pulls/request-reviewers\"",
            "before": {
              "operationId": "pulls/create-review-request"
            },
            "after": {
              "operationId": "pulls/request-reviewers"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/requested_reviewers \\\n  -d '{\"reviewers\":[\"reviewers\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  reviewers: [\n    'reviewers'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.request_reviewers(\n  'hello-world',\n  42,\n  [\n    'reviewers'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove requested reviewers from a pull request",
        "description": "",
        "operationId": "pulls/remove-requested-reviewers",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/review_requests/#remove-requested-reviewers-from-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reviewers": {
                    "type": "array",
                    "description": "An array of user `login`s that will be removed.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "team_reviewers": {
                    "type": "array",
                    "description": "An array of team `slug`s that will be removed.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "reviewers": [
                  "octocat",
                  "hubot",
                  "other_user"
                ],
                "team_reviewers": [
                  "justice-league"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/delete-review-request\" operation ID is now \"pulls/remove-requested-reviewers\"",
            "before": {
              "operationId": "pulls/delete-review-request"
            },
            "after": {
              "operationId": "pulls/remove-requested-reviewers"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/requested_reviewers \\\n  -d '{\"reviewers\":[\"reviewers\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  reviewers: [\n    'reviewers'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_requested_reviewers(\n  'hello-world',\n  42,\n  [\n    'reviewers'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
      "get": {
        "summary": "List reviews for a pull request",
        "description": "The list of reviews returns in chronological order.",
        "operationId": "pulls/list-reviews",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#list-reviews-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of reviews returns in chronological order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pull-request-review"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.reviews(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a review for a pull request",
        "description": "This endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.\n\nPull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.\n\n**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://developer.github.com/v3/pulls/#get-a-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
        "operationId": "pulls/create-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#create-a-review-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_id": {
                    "type": "string",
                    "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value."
                  },
                  "body": {
                    "type": "string",
                    "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review."
                  },
                  "event": {
                    "type": "string",
                    "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request) when you are ready.",
                    "enum": [
                      "APPROVE",
                      "REQUEST_CHANGES",
                      "COMMENT"
                    ]
                  },
                  "comments": {
                    "type": "array",
                    "description": "Use the following table to specify the location, destination, and contents of the draft review comment.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The relative path to the file that necessitates a review comment."
                        },
                        "position": {
                          "type": "integer",
                          "description": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below."
                        },
                        "body": {
                          "type": "string",
                          "description": "Text of the review comment."
                        }
                      },
                      "required": [
                        "path",
                        "position",
                        "body"
                      ]
                    }
                  }
                }
              },
              "example": {
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "body": "This is close to perfect! Please address the suggested inline change.",
                "event": "REQUEST_CHANGES",
                "comments": [
                  {
                    "path": "file.md",
                    "position": 6,
                    "body": "Please add more information here, and fix this typo."
                  }
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews \\\n  -d '{\"commit_id\":\"commit_id\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  commit_id: 'commit_id'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_review(\n  'hello-world',\n  42,\n  'commit_id'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
      "get": {
        "summary": "Get a review for a pull request",
        "description": "",
        "operationId": "pulls/get-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#get-a-review-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/review_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-4"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  review_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.review(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      },
      "put": {
        "summary": "Update a review for a pull request",
        "description": "Update the review summary comment with new text.",
        "operationId": "pulls/update-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#update-a-review-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/review_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-5"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The body text of the pull request review."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "This is close to perfect! Please address the suggested inline change. And add more about this."
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  review_id: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_review(\n  'hello-world',\n  42,\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a pending review for a pull request",
        "description": "",
        "operationId": "pulls/delete-pending-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/review_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  review_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_pending_review(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
      "get": {
        "summary": "List comments for a pull request review",
        "description": "List comments for a specific pull request review.",
        "operationId": "pulls/list-comments-for-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#list-comments-for-a-pull-request-review"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/review_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/legacy-review-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/legacy-review-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-05",
            "note": "\"pulls/get-comments-for-review\" operation ID is now \"pulls/list-comments-for-review\"",
            "before": {
              "operationId": "pulls/get-comments-for-review"
            },
            "after": {
              "operationId": "pulls/list-comments-for-review"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews/42/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  review_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.comments_for_review(\n  'hello-world',\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
      "put": {
        "summary": "Dismiss a review for a pull request",
        "description": "**Note:** To dismiss a pull request review on a [protected branch](https://developer.github.com/v3/repos/branches/), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.",
        "operationId": "pulls/dismiss-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#dismiss-a-review-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/review_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The message for the pull request review dismissal"
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews/42/dismissals \\\n  -d '{\"message\":\"message\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  review_id: 42,\n  message: 'message'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.dismiss_review(\n  'hello-world',\n  42,\n  42,\n  'message'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
      "post": {
        "summary": "Submit a review for a pull request",
        "description": "",
        "operationId": "pulls/submit-review",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/reviews/#submit-a-review-for-a-pull-request"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          },
          {
            "$ref": "#/components/parameters/review_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pull-request-review"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/pull-request-review-4"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The body text of the pull request review"
                  },
                  "event": {
                    "type": "string",
                    "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
                    "enum": [
                      "APPROVE",
                      "REQUEST_CHANGES",
                      "COMMENT"
                    ]
                  }
                },
                "required": [
                  "event"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"number\" parameter renamed to \"pull_number\"",
            "before": {
              "name": "number"
            },
            "after": {
              "name": "pull_number"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/reviews/42/events \\\n  -d '{\"event\":\"event\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  review_id: 42,\n  event: 'event'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.submit_review(\n  'hello-world',\n  42,\n  42,\n  'event'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
      "put": {
        "summary": "Update a pull request branch",
        "description": "Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.",
        "operationId": "pulls/update-branch",
        "tags": [
          "pulls"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/pulls/#update-a-pull-request-branch"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.lydian-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/pull_number"
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Updating pull request branch.",
                  "url": "https://github.com/repos/octocat/Hello-World/pulls/53"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "lydian",
              "note": "Updating the pull request branch with latest upstream changes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.lydian-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expected_head_sha": {
                    "type": "string",
                    "description": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://developer.github.com/v3/repos/commits/#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref."
                  }
                }
              },
              "example": {
                "expected_head_sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.lydian-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/pulls/42/update-branch \\\n  -d '{\"expected_head_sha\":\"expected_head_sha\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  pull_number: 42,\n  expected_head_sha: 'expected_head_sha',\n  mediaType: {\n    previews: [\n      'lydian'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_branch(\n  'hello-world',\n  42,\n  'expected_head_sha'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/readme": {
      "get": {
        "summary": "Get a repository README",
        "description": "Gets the preferred README for a repository.\n\nREADMEs support [custom media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for retrieving the raw content or rendered HTML.",
        "operationId": "repos/get-readme",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#get-a-repository-readme"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "name": "ref",
            "description": "The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/content-file"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/content-file"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/readme"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/readme', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.readme(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/releases": {
      "get": {
        "summary": "List releases",
        "description": "This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://developer.github.com/v3/repos/#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.",
        "operationId": "repos/list-releases",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#list-releases"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/release-2"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/releases', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.releases(\n  'hello-world'\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a release",
        "description": "Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "repos/create-release",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#create-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "type": "string",
                    "description": "The name of the tag."
                  },
                  "target_commitish": {
                    "type": "string",
                    "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`)."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the release."
                  },
                  "body": {
                    "type": "string",
                    "description": "Text describing the contents of the tag."
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
                    "default": false
                  },
                  "prerelease": {
                    "type": "boolean",
                    "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
                    "default": false
                  }
                },
                "required": [
                  "tag_name"
                ]
              },
              "example": {
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases \\\n  -d '{\"tag_name\":\"tag_name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/releases', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  tag_name: 'tag_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_release(\n  'hello-world',\n  'tag_name'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
      "get": {
        "summary": "Get a release asset",
        "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
        "operationId": "repos/get-release-asset",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-a-release-asset"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/asset_id"
          }
        ],
        "responses": {
          "200": {
            "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://developer.github.com/v3/media/#media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-asset"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-asset"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/assets/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/releases/assets/{asset_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  asset_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.release_asset(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a release asset",
        "description": "Users with push access to the repository can edit a release asset.",
        "operationId": "repos/update-release-asset",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#update-a-release-asset"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/asset_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-asset"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-asset"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The file name of the asset."
                  },
                  "label": {
                    "type": "string",
                    "description": "An alternate short description of the asset. Used in place of the filename."
                  }
                }
              },
              "example": {
                "name": "foo-1.0.0-osx.zip",
                "label": "Mac binary"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/assets/42 \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  asset_id: 42,\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_release_asset(\n  'hello-world',\n  42,\n  'name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a release asset",
        "description": "",
        "operationId": "repos/delete-release-asset",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#delete-a-release-asset"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/asset_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/assets/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  asset_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_release_asset(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/releases/latest": {
      "get": {
        "summary": "Get the latest release",
        "description": "View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.",
        "operationId": "repos/get-latest-release",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-the-latest-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/latest"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/releases/latest', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.latest_release(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/releases/tags/{tag}": {
      "get": {
        "summary": "Get a release by tag name",
        "description": "Get a published release with the specified tag.",
        "operationId": "repos/get-release-by-tag",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/tag"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/tags/TAG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/releases/tags/{tag}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  tag: 'tag'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.release_by_tag(\n  'hello-world',\n  'tag'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/releases/{release_id}": {
      "get": {
        "summary": "Get a release",
        "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
        "operationId": "repos/get-release",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#get-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/release_id"
          }
        ],
        "responses": {
          "200": {
            "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://developer.github.com/v3/#hypermedia).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/releases/{release_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  release_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.release(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a release",
        "description": "Users with push access to the repository can edit a release.",
        "operationId": "repos/update-release",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#update-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/release_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "type": "string",
                    "description": "The name of the tag."
                  },
                  "target_commitish": {
                    "type": "string",
                    "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`)."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the release."
                  },
                  "body": {
                    "type": "string",
                    "description": "Text describing the contents of the tag."
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "`true` makes the release a draft, and `false` publishes the release."
                  },
                  "prerelease": {
                    "type": "boolean",
                    "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release."
                  }
                }
              },
              "example": {
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/42 \\\n  -d '{\"tag_name\":\"tag_name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /repos/{owner}/{repo}/releases/{release_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  release_id: 42,\n  tag_name: 'tag_name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_release(\n  'hello-world',\n  42,\n  'tag_name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a release",
        "description": "Users with push access to the repository can delete a release.",
        "operationId": "repos/delete-release",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#delete-a-release"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/release_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/releases/{release_id}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  release_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_release(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/releases/{release_id}/assets": {
      "get": {
        "summary": "List release assets",
        "description": "",
        "operationId": "repos/list-release-assets",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#list-release-assets"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/release_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/release-asset"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/release-asset-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/list-assets-for-release\" operation ID is now \"repos/list-release-assets\"",
            "before": {
              "operationId": "repos/list-assets-for-release"
            },
            "after": {
              "operationId": "repos/list-release-assets"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/42/assets"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/releases/{release_id}/assets', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  release_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.release_assets(\n  'hello-world',\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Upload a release asset",
        "description": "This endpoint makes use of [a Hypermedia relation](https://developer.github.com/v3/#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://developer.github.com/v3/repos/releases/#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou'll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"[List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)\"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://github.com/contact).\n*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.",
        "operationId": "repos/upload-release-asset",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/releases/#upload-a-release-asset"
        },
        "servers": [
          {
            "url": "{origin}",
            "variables": {
              "origin": {
                "default": "https://uploads.github.com",
                "description": "The URL origin (protocol + host name + port) is included in `upload_url` returned in the response of the \"Create a release\" endpoint"
              }
            }
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/content-length"
          },
          {
            "name": "content-type",
            "description": "Media Type of the asset. For a list of media types, see https://www.iana.org/assignments/media-types/media-types.xhtml",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "owner",
            "description": "owner parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "repo",
            "description": "repo parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "release_id",
            "description": "release_id parameter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "name parameter"
          },
          {
            "$ref": "#/components/parameters/label"
          }
        ],
        "responses": {
          "201": {
            "description": "Response for successful upload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/release-asset"
                },
                "examples": {
                  "response-for-successful-upload": {
                    "$ref": "#/components/examples/release-asset-response-for-successful-upload"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [],
          "requestBodyParameterName": "data",
          "overridden": true
        },
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "description": "The raw file data"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2020-01-31",
            "note": "\"file\" parameter renamed to \"data\"",
            "before": {
              "name": "file"
            },
            "after": {
              "name": "data"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/releases/42/assets"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/releases/{release_id}/assets', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  release_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.upload_release_asset(\n  'hello-world',\n  42\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/stargazers": {
      "get": {
        "summary": "List stargazers",
        "description": "Lists the people that have starred the repository.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "activity/list-stargazers-for-repo",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#list-stargazers"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/simple-user-items-default-response"
                  }
                }
              },
              "application/vnd.github.v3.star+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stargazer"
                  }
                },
                "examples": {
                  "alternative-response-with-star-creation-timestamps": {
                    "$ref": "#/components/examples/stargazer-items-alternative-response-with-star-creation-timestamps"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/stargazers"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/stargazers', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.stargazers(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/stats/code_frequency": {
      "get": {
        "summary": "Get the weekly commit activity",
        "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.",
        "operationId": "repos/get-code-frequency-stats",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-activity"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-frequency-stat"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-frequency-stat-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/stats/code_frequency"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/stats/code_frequency', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.code_frequency_stats(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/stats/commit_activity": {
      "get": {
        "summary": "Get the last year of commit activity",
        "description": "Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.",
        "operationId": "repos/get-commit-activity-stats",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/commit-activity"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-activity-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/stats/commit_activity"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/stats/commit_activity', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commit_activity_stats(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/stats/contributors": {
      "get": {
        "summary": "Get all contributor commit activity",
        "description": "\nReturns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits",
        "operationId": "repos/get-contributors-stats",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-all-contributor-commit-activity"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contributor-activity"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/contributor-activity-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/stats/contributors"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/stats/contributors', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.contributors_stats(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/stats/participation": {
      "get": {
        "summary": "Get the weekly commit count",
        "description": "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.",
        "operationId": "repos/get-participation-stats",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "The array order is oldest week (index 0) to most recent week.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/participation-stats"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/participation-stats"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/stats/participation"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/stats/participation', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.participation_stats(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/stats/punch_card": {
      "get": {
        "summary": "Get the hourly commit count for each day",
        "description": "Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
        "operationId": "repos/get-punch-card-stats",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statistics/#get-the-hourly-commit-count-for-each-day"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/code-frequency-stat"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-frequency-stat-items-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/stats/punch_card"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/stats/punch_card', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.punch_card_stats(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/statuses/{sha}": {
      "post": {
        "summary": "Create a commit status",
        "description": "Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.",
        "operationId": "repos/create-commit-status",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/statuses/#create-a-commit-status"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/sha"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/status"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/status"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
                    "enum": [
                      "error",
                      "failure",
                      "pending",
                      "success"
                    ]
                  },
                  "target_url": {
                    "type": "string",
                    "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`"
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the status."
                  },
                  "context": {
                    "type": "string",
                    "description": "A string label to differentiate this status from the status of other systems.",
                    "default": "default"
                  }
                },
                "required": [
                  "state"
                ]
              },
              "example": {
                "state": "success",
                "target_url": "https://example.com/build/status",
                "description": "The build succeeded!",
                "context": "continuous-integration/jenkins"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/create-status\" operation ID is now \"repos/create-commit-status\"",
            "before": {
              "operationId": "repos/create-status"
            },
            "after": {
              "operationId": "repos/create-commit-status"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/statuses/SHA \\\n  -d '{\"state\":\"state\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/statuses/{sha}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  sha: 'sha',\n  state: 'state'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_commit_status(\n  'hello-world',\n  'sha',\n  'state'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/subscribers": {
      "get": {
        "summary": "List watchers",
        "description": "Lists the people watching the specified repository.",
        "operationId": "activity/list-watchers-for-repo",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#list-watchers"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/subscribers"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/subscribers', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.watchers(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/subscription": {
      "get": {
        "summary": "Get a repository subscription",
        "description": "",
        "operationId": "activity/get-repo-subscription",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#get-a-repository-subscription"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if you subscribe to the repository",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-subscription"
                },
                "examples": {
                  "response-if-you-subscribe-to-the-repository": {
                    "$ref": "#/components/examples/repository-subscription-response-if-you-subscribe-to-the-repository"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response if you don't subscribe to the repository"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/subscription"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/subscription', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repo_subscription(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Set a repository subscription",
        "description": "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription) completely.",
        "operationId": "activity/set-repo-subscription",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#set-a-repository-subscription"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-subscription"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-subscription"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscribed": {
                    "type": "boolean",
                    "description": "Determines if notifications should be received from this repository."
                  },
                  "ignored": {
                    "type": "boolean",
                    "description": "Determines if all notifications should be blocked from this repository."
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/subscription \\\n  -d '{\"subscribed\":true}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/subscription', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  subscribed: true\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_repo_subscription(\n  'hello-world',\n  true\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a repository subscription",
        "description": "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://developer.github.com/v3/activity/watching/#set-a-repository-subscription).",
        "operationId": "activity/delete-repo-subscription",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/subscription"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/subscription', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_repo_subscription(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/tags": {
      "get": {
        "summary": "List repository tags",
        "description": "",
        "operationId": "repos/list-tags",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-tags"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/tag-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/tags"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/tags', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.tags(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/teams": {
      "get": {
        "summary": "List repository teams",
        "description": "",
        "operationId": "repos/list-teams",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repository-teams"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/teams', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.teams(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/topics": {
      "get": {
        "summary": "Get all repository topics",
        "description": "",
        "operationId": "repos/get-all-topics",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#get-all-repository-topics"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.mercy-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topic"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/topic"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"repos/list-topics\" operation ID is now \"repos/get-all-topics\"",
            "before": {
              "operationId": "repos/list-topics"
            },
            "after": {
              "operationId": "repos/get-all-topics"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.mercy-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/topics"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/topics', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'mercy'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.topics(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Replace all repository topics",
        "description": "",
        "operationId": "repos/replace-all-topics",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#replace-all-repository-topics"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.mercy-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/topic"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/topic"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "names": {
                    "type": "array",
                    "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "names"
                ]
              },
              "example": {
                "names": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"repos/replace-topics\" operation ID is now \"repos/replace-all-topics\"",
            "before": {
              "operationId": "repos/replace-topics"
            },
            "after": {
              "operationId": "repos/replace-all-topics"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.mercy-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/topics \\\n  -d '{\"names\":[\"names\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/topics', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  names: [\n    'names'\n  ],\n  mediaType: {\n    previews: [\n      'mercy'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.replace_topics(\n  'hello-world',\n  [\n    'names'\n  ]\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/traffic/clones": {
      "get": {
        "summary": "Get repository clones",
        "description": "Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
        "operationId": "repos/get-clones",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-repository-clones"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clone-traffic"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/clone-traffic"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/traffic/clones"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/traffic/clones', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.clones(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/traffic/popular/paths": {
      "get": {
        "summary": "Get top referral paths",
        "description": "Get the top 10 popular contents over the last 14 days.",
        "operationId": "repos/get-top-paths",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-top-referral-paths"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/content-traffic"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/content-traffic-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/traffic/popular/paths"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/traffic/popular/paths', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.top_referral_paths(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/traffic/popular/referrers": {
      "get": {
        "summary": "Get top referral sources",
        "description": "Get the top 10 referrers over the last 14 days.",
        "operationId": "repos/get-top-referrers",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-top-referral-sources"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/referrer-traffic"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/referrer-traffic-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/traffic/popular/referrers"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/traffic/popular/referrers', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.top_referral_sources(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/traffic/views": {
      "get": {
        "summary": "Get page views",
        "description": "Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.",
        "operationId": "repos/get-views",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/traffic/#get-page-views"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/per"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/view-traffic"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/view-traffic"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/traffic/views"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/traffic/views', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.page_views(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/transfer": {
      "post": {
        "summary": "Transfer a repository",
        "description": "A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).",
        "operationId": "repos/transfer",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#transfer-a-repository"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "202": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_owner": {
                    "type": "string",
                    "description": "**Required:** The username or organization name the repository will be transferred to."
                  },
                  "team_ids": {
                    "type": "array",
                    "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              },
              "example": {
                "new_owner": "github",
                "team_ids": [
                  12,
                  345
                ]
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/transfer \\\n  -d '{\"new_owner\":\"new_owner\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{owner}/{repo}/transfer', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  new_owner: 'new_owner'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.transfer(\n  'hello-world',\n  'new_owner'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/vulnerability-alerts": {
      "get": {
        "summary": "Check if vulnerability alerts are enabled for a repository",
        "description": "Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".",
        "operationId": "repos/check-vulnerability-alerts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.dorian-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if repository is enabled with vulnerability alerts"
          },
          "404": {
            "description": "Response if repository is not enabled with vulnerability alerts"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "dorian",
              "note": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.dorian-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/vulnerability-alerts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/vulnerability-alerts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'dorian'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_vulnerability_alerts_are_enabled(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Enable vulnerability alerts",
        "description": "Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".",
        "operationId": "repos/enable-vulnerability-alerts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#enable-vulnerability-alerts"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.dorian-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "dorian",
              "note": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.dorian-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/vulnerability-alerts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /repos/{owner}/{repo}/vulnerability-alerts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'dorian'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.enable_vulnerability_alerts(\n  'hello-world'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Disable vulnerability alerts",
        "description": "Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \"[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)\".",
        "operationId": "repos/disable-vulnerability-alerts",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#disable-vulnerability-alerts"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.dorian-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "dorian",
              "note": "Enabling and disabling dependency alerts for a repository using the REST API is currently available for developers to preview. To access these new endpoints during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.dorian-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.dorian-preview+json\" \\\n  https://api.github.com/repos/octocat/hello-world/vulnerability-alerts"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /repos/{owner}/{repo}/vulnerability-alerts', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  mediaType: {\n    previews: [\n      'dorian'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.disable_vulnerability_alerts(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/repos/{owner}/{repo}/{archive_format}/{ref}": {
      "get": {
        "summary": "Download a repository archive",
        "description": "Gets a redirect URL to download an archive for a repository. The `:archive_format` can be either `tarball` or\n`zipball`. The `:ref` must be a valid Git reference. If you omit `:ref`, the repository’s default branch (usually\n`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n**Note**: For private repositories, these links are temporary and expire after five minutes.",
        "operationId": "repos/download-archive",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/contents/#download-a-repository-archive"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          },
          {
            "$ref": "#/components/parameters/archive_format"
          },
          {
            "$ref": "#/components/parameters/ref"
          }
        ],
        "responses": {
          "302": {
            "description": "response",
            "headers": {
              "Location": {
                "example": "https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"repos/get-archive-link\" operation ID is now \"repos/download-archive\"",
            "before": {
              "operationId": "repos/get-archive-link"
            },
            "after": {
              "operationId": "repos/download-archive"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repos/octocat/hello-world/ARCHIVE_FORMAT/REF"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repos/{owner}/{repo}/{archive_format}/{ref}', {\n  owner: 'octocat',\n  repo: 'hello-world',\n  archive_format: 'archive_format',\n  ref: 'ref'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.archive(\n  'hello-world',\n  'archive_format',\n  'ref'\n)"
          }
        ]
      }
    },
    "/repos/{template_owner}/{template_repo}/generate": {
      "post": {
        "summary": "Create a repository using a template",
        "description": "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://developer.github.com/v3/repos/#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
        "operationId": "repos/create-using-template",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-a-repository-using-a-template"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.baptiste-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/template_owner"
          },
          {
            "$ref": "#/components/parameters/template_repo"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository-3"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-3"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the new repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the new repository."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Either `true` to create a new private repository or `false` to create a new public one.",
                    "default": false
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "owner": "octocat",
                "name": "Hello-World",
                "description": "This is your first repository",
                "private": false
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.baptiste-preview+json\" \\\n  https://api.github.com/repos/TEMPLATE_OWNER/TEMPLATE_REPO/generate \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /repos/{template_owner}/{template_repo}/generate', {\n  template_owner: 'template_owner',\n  template_repo: 'template_repo',\n  name: 'name',\n  mediaType: {\n    previews: [\n      'baptiste'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_using_template(\n  'template_owner',\n  'template_repo',\n  'name'\n)"
          }
        ]
      }
    },
    "/repositories": {
      "get": {
        "summary": "List public repositories",
        "description": "Lists all public repositories in the order that they were created.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of repositories.",
        "operationId": "repos/list-public",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-public-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "since",
            "description": "The integer ID of the last repository that you've seen.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/public-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/public-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/repositories?since=364>; rel=\"next\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /repositories')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public()"
          }
        ]
      }
    },
    "/scim/v2/organizations/{org}/Users": {
      "get": {
        "summary": "List SCIM provisioned identities",
        "description": "Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.\n\nWhen a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:\n  - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.\n  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).\n  - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.\n\nThe returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:\n\n1. The user is granted access by the IdP and is not a member of the GitHub organization.\n\n1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.\n\n1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:\n   - If the user signs in, their GitHub account is linked to this entry.\n   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.",
        "operationId": "scim/list-provisioned-identities",
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#list-scim-provisioned-identities"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/startIndex"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "name": "filter",
            "description": "Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:\n\n`?filter=userName%20eq%20\\\"Octocat\\\"`.\n\nTo filter results for for the identity with the email `octocat@github.com`, you would use this query:\n\n`?filter=emails%20eq%20\\\"octocat@github.com\\\"`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scim-user-list"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/scim-user-list-response-with-filter"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/scim/v2/organizations/ORG/Users"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /scim/v2/organizations/{org}/Users', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.provisioned_identities(\n  'org'\n)"
          }
        ]
      },
      "post": {
        "summary": "Provision and invite a SCIM user",
        "description": "Provision organization membership for a user, and send an activation email to the email address.",
        "operationId": "scim/provision-and-invite-user",
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#provision-and-invite-a-scim-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scim-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/scim-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schemas": {
                    "type": "array",
                    "description": "The SCIM schema URIs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "userName": {
                    "type": "string",
                    "description": "The username for the user."
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "givenName": {
                        "type": "string",
                        "description": "The first name of the user."
                      },
                      "familyName": {
                        "type": "string",
                        "description": "The last name of the user."
                      }
                    },
                    "required": [
                      "givenName",
                      "familyName"
                    ]
                  },
                  "emails": {
                    "type": "array",
                    "description": "List of user emails.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The email address."
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of email address."
                        },
                        "primary": {
                          "type": "boolean",
                          "description": "Whether this email address is the primary address."
                        }
                      },
                      "required": [
                        "value",
                        "type",
                        "primary"
                      ]
                    }
                  }
                },
                "required": [
                  "schemas",
                  "userName",
                  "name",
                  "emails"
                ]
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:schemas:core:2.0:User"
                ],
                "userName": "mona.octocat@okta.example.com",
                "name": {
                  "familyName": "Octocat",
                  "givenName": "Mona"
                },
                "emails": [
                  {
                    "value": "mona.octocat@okta.example.com",
                    "type": "work",
                    "primary": true
                  }
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2018-12-27",
            "note": "`idName` changed for \"Provision and invite users\". It now includes `-and-`",
            "before": {
              "operationId": "scim/provision-invite-users"
            },
            "after": {
              "operationId": "scim/provision-and-invite-users"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"scim/provision-and-invite-users\" operation ID is now \"scim/provision-and-invite-user\"",
            "before": {
              "operationId": "scim/provision-and-invite-users"
            },
            "after": {
              "operationId": "scim/provision-and-invite-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/scim/v2/organizations/ORG/Users \\\n  -d '{\"schemas\":[\"schemas\"],\"userName\":\"userName\",\"name\":{\"givenName\":\"givenName\",\"familyName\":\"familyName\"},\"emails\":[\"octocat@github.com\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /scim/v2/organizations/{org}/Users', {\n  org: 'org',\n  schemas: [\n    'schemas'\n  ],\n  userName: 'userName',\n  name: {\n    givenName: 'givenName',\n    familyName: 'familyName'\n  },\n  emails: [\n    'octocat@github.com'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.provision_and_invite_user(\n  'org',\n  [\n    'schemas'\n  ],\n  'userName',\n  {\n    givenName: 'givenName',\n    familyName: 'familyName'\n  },\n  [\n    'octocat@github.com'\n  ]\n)"
          }
        ]
      }
    },
    "/scim/v2/organizations/{org}/Users/{scim_user_id}": {
      "get": {
        "summary": "Get SCIM provisioning information for a user",
        "description": "",
        "operationId": "scim/get-provisioning-information-for-user",
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#get-scim-provisioning-information-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/scim_user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scim-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/scim-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"external_identity_guid\" parameter renamed to \"scim_user_id\"",
            "before": {
              "name": "external_identity_guid"
            },
            "after": {
              "name": "scim_user_id"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"scim/get-provisioning-details-for-user\" operation ID is now \"scim/get-provisioning-information-for-user\"",
            "before": {
              "operationId": "scim/get-provisioning-details-for-user"
            },
            "after": {
              "operationId": "scim/get-provisioning-information-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/scim/v2/organizations/ORG/Users/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /scim/v2/organizations/{org}/Users/{scim_user_id}', {\n  org: 'org',\n  scim_user_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.provisioning_information_for_user(\n  'org',\n  42\n)"
          }
        ]
      },
      "put": {
        "summary": "Set SCIM information for a provisioned user",
        "description": "Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user) endpoint instead.\n\nYou must at least provide the required values for the user: `userName`, `name`, and `emails`.\n\n**Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.",
        "operationId": "scim/set-information-for-provisioned-user",
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#set-scim-information-for-a-provisioned-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/scim_user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scim-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/scim-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schemas": {
                    "type": "array",
                    "description": "The SCIM schema URIs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "userName": {
                    "type": "string",
                    "description": "The username for the user."
                  },
                  "name": {
                    "type": "object",
                    "properties": {
                      "givenName": {
                        "type": "string",
                        "description": "The first name of the user."
                      },
                      "familyName": {
                        "type": "string",
                        "description": "The last name of the user."
                      }
                    },
                    "required": [
                      "givenName",
                      "familyName"
                    ]
                  },
                  "emails": {
                    "type": "array",
                    "description": "List of user emails.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string",
                          "description": "The email address."
                        },
                        "type": {
                          "type": "string",
                          "description": "The type of email address."
                        },
                        "primary": {
                          "type": "boolean",
                          "description": "Whether this email address is the primary address."
                        }
                      },
                      "required": [
                        "value",
                        "type",
                        "primary"
                      ]
                    }
                  }
                },
                "required": [
                  "schemas",
                  "userName",
                  "name",
                  "emails"
                ]
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:schemas:core:2.0:User"
                ],
                "userName": "mona.octocat@okta.example.com",
                "name": {
                  "familyName": "Octocat",
                  "givenName": "Mona"
                },
                "emails": [
                  {
                    "value": "mona.octocat@okta.example.com",
                    "type": "work",
                    "primary": true
                  }
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-04-10",
            "note": "\"Update a provisioned organization membership\" renamed to \"Replace a provisioned user's information\"",
            "before": {
              "operationId": "scim/update-provisioned-org-membership"
            },
            "after": {
              "operationId": "scim/replace-provisioned-user-information"
            }
          },
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"external_identity_guid\" parameter renamed to \"scim_user_id\"",
            "before": {
              "name": "external_identity_guid"
            },
            "after": {
              "name": "scim_user_id"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"scim/replace-provisioned-user-information\" operation ID is now \"scim/set-information-for-provisioned-user\"",
            "before": {
              "operationId": "scim/replace-provisioned-user-information"
            },
            "after": {
              "operationId": "scim/set-information-for-provisioned-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/scim/v2/organizations/ORG/Users/42 \\\n  -d '{\"schemas\":[\"schemas\"],\"userName\":\"userName\",\"name\":{\"givenName\":\"givenName\",\"familyName\":\"familyName\"},\"emails\":[\"octocat@github.com\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /scim/v2/organizations/{org}/Users/{scim_user_id}', {\n  org: 'org',\n  scim_user_id: 42,\n  schemas: [\n    'schemas'\n  ],\n  userName: 'userName',\n  name: {\n    givenName: 'givenName',\n    familyName: 'familyName'\n  },\n  emails: [\n    'octocat@github.com'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_information_for_provisioned_user(\n  'org',\n  42,\n  [\n    'schemas'\n  ],\n  'userName',\n  {\n    givenName: 'givenName',\n    familyName: 'familyName'\n  },\n  [\n    'octocat@github.com'\n  ]\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an attribute for a SCIM user",
        "description": "Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).\n\n**Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `\"path\": \"emails[type eq \\\"work\\\"]\"` will not work.\n\n**Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.\n\n```\n{\n  \"Operations\":[{\n    \"op\":\"replace\",\n    \"value\":{\n      \"active\":false\n    }\n  }]\n}\n```",
        "operationId": "scim/update-attribute-for-user",
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#update-an-attribute-for-a-scim-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/scim_user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scim-user-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/scim-user-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schemas": {
                    "type": "array",
                    "description": "The SCIM schema URIs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Operations": {
                    "type": "array",
                    "description": "Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).",
                    "items": {
                      "type": "object"
                    }
                  }
                },
                "required": [
                  "schemas",
                  "Operations"
                ]
              },
              "example": {
                "schemas": [
                  "urn:ietf:params:scim:api:messages:2.0:PatchOp"
                ],
                "Operations": [
                  {
                    "op": "add",
                    "path": "emails",
                    "value": [
                      {
                        "value": "monalisa@octocat.github.com",
                        "type": "home"
                      }
                    ]
                  },
                  {
                    "op": "replace",
                    "path": "name.givenName",
                    "value": "Monalisa"
                  }
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"external_identity_guid\" parameter renamed to \"scim_user_id\"",
            "before": {
              "name": "external_identity_guid"
            },
            "after": {
              "name": "scim_user_id"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"scim/update-user-attribute\" operation ID is now \"scim/update-attribute-for-user\"",
            "before": {
              "operationId": "scim/update-user-attribute"
            },
            "after": {
              "operationId": "scim/update-attribute-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/scim/v2/organizations/ORG/Users/42 \\\n  -d '{\"schemas\":[\"schemas\"],\"Operations\":[{}]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /scim/v2/organizations/{org}/Users/{scim_user_id}', {\n  org: 'org',\n  scim_user_id: 42,\n  schemas: [\n    'schemas'\n  ],\n  Operations: [\n    {}\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_attribute_for_user(\n  'org',\n  42,\n  [\n    'schemas'\n  ],\n  [\n    {}\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a SCIM user from an organization",
        "description": "",
        "operationId": "scim/delete-user-from-org",
        "tags": [
          "scim"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/scim/#delete-a-scim-user-from-an-organization"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/scim_user_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": true,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "parameter",
            "date": "2019-04-10",
            "note": "\"external_identity_guid\" parameter renamed to \"scim_user_id\"",
            "before": {
              "name": "external_identity_guid"
            },
            "after": {
              "name": "scim_user_id"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"scim/remove-user-from-org\" operation ID is now \"scim/delete-user-from-org\"",
            "before": {
              "operationId": "scim/remove-user-from-org"
            },
            "after": {
              "operationId": "scim/delete-user-from-org"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/scim/v2/organizations/ORG/Users/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /scim/v2/organizations/{org}/Users/{scim_user_id}', {\n  org: 'org',\n  scim_user_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_user_from_org(\n  'org',\n  42\n)"
          }
        ]
      }
    },
    "/search/code": {
      "get": {
        "summary": "Search code",
        "description": "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.",
        "operationId": "search/code",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-code"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "indexed"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/code-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/code-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/code"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/code', {\n  q: 'q'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.code(\n  'q'\n)"
          }
        ]
      }
    },
    "/search/commits": {
      "get": {
        "summary": "Search commits",
        "description": "Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`",
        "operationId": "search/commits",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-commits"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.cloak-preview+json"
            },
            "required": true
          },
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "author-date",
                "committer-date"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/commit-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/commit-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "cloak",
              "note": "The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2017-01-05-commit-search-api/) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.cloak-preview\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.cloak-preview+json\" \\\n  https://api.github.com/search/commits"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/commits', {\n  q: 'q',\n  mediaType: {\n    previews: [\n      'cloak'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.commits(\n  'q'\n)"
          }
        ]
      }
    },
    "/search/issues": {
      "get": {
        "summary": "Search issues and pull requests",
        "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, whick means the oldest issues appear first in the search results.",
        "operationId": "search/issues-and-pull-requests",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-issues-and-pull-requests"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "comments",
                "reactions",
                "reactions-+1",
                "reactions--1",
                "reactions-smile",
                "reactions-thinking_face",
                "reactions-heart",
                "reactions-tada",
                "interactions",
                "created",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/issue-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2018-12-27",
            "note": "\"Search issues\" has been renamed to \"Search issues and pull requests\"",
            "before": {
              "operationId": "search/issues"
            },
            "after": {
              "operationId": "search/issues-and-pull-requests"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/issues"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/issues', {\n  q: 'q'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.issues_and_pull_requests(\n  'q'\n)"
          }
        ]
      }
    },
    "/search/labels": {
      "get": {
        "summary": "Search labels",
        "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.",
        "operationId": "search/labels",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-labels"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "repository_id",
            "description": "The id of the repository.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/label-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/label-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/labels"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/labels', {\n  repository_id: 42,\n  q: 'q'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.labels(\n  42,\n  'q'\n)"
          }
        ]
      }
    },
    "/search/repositories": {
      "get": {
        "summary": "Search repositories",
        "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.\n\nWhen you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:\n\n`q=topic:ruby+topic:rails`",
        "operationId": "search/repos",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-repositories"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "stars",
                "forks",
                "help-wanted-issues",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repo-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repo-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/repositories', {\n  q: 'q'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos(\n  'q'\n)"
          }
        ]
      }
    },
    "/search/topics": {
      "get": {
        "summary": "Search topics",
        "description": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination). See \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.",
        "operationId": "search/topics",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-topics"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept-mercy"
          },
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/topic-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/topic-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.mercy-preview+json\" \\\n  https://api.github.com/search/topics"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/topics', {\n  q: 'q',\n  mediaType: {\n    previews: [\n      'mercy'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.topics(\n  'q'\n)"
          }
        ]
      }
    },
    "/search/users": {
      "get": {
        "summary": "Search users",
        "description": "Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.",
        "operationId": "search/users",
        "tags": [
          "search"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/search/#search-users"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "q",
            "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers.",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "description": "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://developer.github.com/v3/search/#ranking-search-results)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "followers",
                "repositories",
                "joined"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "incomplete_results": {
                      "type": "boolean"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/user-search-result-item"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/user-search-result-item-paginated"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/users"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /search/users', {\n  q: 'q'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.users(\n  'q'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}": {
      "get": {
        "summary": "Get a team (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://developer.github.com/v3/teams/#get-a-team-by-name) endpoint.",
        "operationId": "teams/get-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#get-a-team-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-full"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Get a team\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/get"
            },
            "after": {
              "operationId": "teams/get-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.legacy(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a team (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://developer.github.com/v3/teams/#update-a-team) endpoint.\n\nTo edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.",
        "operationId": "teams/update-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#update-a-team-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-full"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-full"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the team."
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the team."
                  },
                  "privacy": {
                    "type": "string",
                    "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
                    "enum": [
                      "secret",
                      "closed"
                    ]
                  },
                  "permission": {
                    "type": "string",
                    "description": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
                    "enum": [
                      "pull",
                      "push",
                      "admin"
                    ],
                    "default": "pull"
                  },
                  "parent_team_id": {
                    "type": "integer",
                    "description": "The ID of a team to set as the parent team."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "new team name",
                "description": "new team description",
                "privacy": "closed"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Update a team\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/update"
            },
            "after": {
              "operationId": "teams/update-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42 \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /teams/{team_id}', {\n  team_id: 42,\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_legacy(\n  42,\n  'name'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a team (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://developer.github.com/v3/teams/#delete-a-team) endpoint.\n\nTo delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.",
        "operationId": "teams/delete-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#delete-a-team-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Delete a team\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/delete"
            },
            "after": {
              "operationId": "teams/delete-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/discussions": {
      "get": {
        "summary": "List discussions (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://developer.github.com/v3/teams/discussions/#list-discussions) endpoint.\n\nList all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/list-discussions-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#list-discussions-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "name": "direction",
            "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-discussion"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List discussions\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-discussions"
            },
            "after": {
              "operationId": "teams/list-discussions-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/discussions', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussions_legacy(\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a discussion (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://developer.github.com/v3/teams/discussions/#create-a-discussion) endpoint.\n\nCreates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "teams/create-discussion-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#create-a-discussion-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The discussion post's title."
                  },
                  "body": {
                    "type": "string",
                    "description": "The discussion post's body text."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
                    "default": false
                  }
                },
                "required": [
                  "title",
                  "body"
                ]
              },
              "example": {
                "title": "Our first team post",
                "body": "Hi! This is an area for us to collaborate as a team."
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Create a discussion\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/create-discussion"
            },
            "after": {
              "operationId": "teams/create-discussion-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions \\\n  -d '{\"title\":\"title\",\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /teams/{team_id}/discussions', {\n  team_id: 42,\n  title: 'title',\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_discussion_legacy(\n  42,\n  'title',\n  'body'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}": {
      "get": {
        "summary": "Get a discussion (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://developer.github.com/v3/teams/discussions/#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/get-discussion-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#get-a-discussion-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Get a discussion\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/get-discussion"
            },
            "after": {
              "operationId": "teams/get-discussion-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/discussions/{discussion_number}', {\n  team_id: 42,\n  discussion_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussion_legacy(\n  42,\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a discussion (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://developer.github.com/v3/teams/discussions/#update-a-discussion) endpoint.\n\nEdits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/update-discussion-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#update-a-discussion-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The discussion post's title."
                  },
                  "body": {
                    "type": "string",
                    "description": "The discussion post's body text."
                  }
                }
              },
              "example": {
                "title": "Welcome to our first team post"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Update a discussion\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/update-discussion"
            },
            "after": {
              "operationId": "teams/update-discussion-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42 \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /teams/{team_id}/discussions/{discussion_number}', {\n  team_id: 42,\n  discussion_number: 42,\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_discussion_legacy(\n  42,\n  42,\n  'title'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a discussion (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://developer.github.com/v3/teams/discussions/#delete-a-discussion) endpoint.\n\nDelete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/delete-discussion-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussions/#delete-a-discussion-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Delete a discussion\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/delete-discussion"
            },
            "after": {
              "operationId": "teams/delete-discussion-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}/discussions/{discussion_number}', {\n  team_id: 42,\n  discussion_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_discussion_legacy(\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/comments": {
      "get": {
        "summary": "List discussion comments (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments) endpoint.\n\nList all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/list-discussion-comments-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#list-discussion-comments-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "name": "direction",
            "description": "Sorts the discussion comments by the date they were created. To return the oldest comments first, set to `asc`. Can be one of `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-discussion-comment"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List discussion comments\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-discussion-comments"
            },
            "after": {
              "operationId": "teams/list-discussion-comments-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/discussions/{discussion_number}/comments', {\n  team_id: 42,\n  discussion_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussion_comments_legacy(\n  42,\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create a discussion comment (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment) endpoint.\n\nCreates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://help.github.com/articles/about-notifications/). Creating content too quickly using this endpoint may result in abuse rate limiting. See \"[Abuse rate limits](https://developer.github.com/v3/#abuse-rate-limits)\" and \"[Dealing with abuse rate limits](https://developer.github.com/v3/guides/best-practices-for-integrators/#dealing-with-abuse-rate-limits)\" for details.",
        "operationId": "teams/create-discussion-comment-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#create-a-discussion-comment-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ],
          "triggersNotification": true
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The discussion comment's body text."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Do you like apples?"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Create a discussion comment\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/create-discussion-comment"
            },
            "after": {
              "operationId": "teams/create-discussion-comment-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /teams/{team_id}/discussions/{discussion_number}/comments', {\n  team_id: 42,\n  discussion_number: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_discussion_comment_legacy(\n  42,\n  42,\n  'body'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
      "get": {
        "summary": "Get a discussion comment (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/get-discussion-comment-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#get-a-discussion-comment-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Get a discussion comment\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/get-discussion-comment"
            },
            "after": {
              "operationId": "teams/get-discussion-comment-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', {\n  team_id: 42,\n  discussion_number: 42,\n  comment_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.discussion_comment_legacy(\n  42,\n  42,\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update a discussion comment (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment) endpoint.\n\nEdits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/update-discussion-comment-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#update-a-discussion-comment-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-discussion-comment"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-discussion-comment-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "The discussion comment's body text."
                  }
                },
                "required": [
                  "body"
                ]
              },
              "example": {
                "body": "Do you like pineapples?"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Update a discussion comment\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/update-discussion-comment"
            },
            "after": {
              "operationId": "teams/update-discussion-comment-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments/42 \\\n  -d '{\"body\":\"body\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', {\n  team_id: 42,\n  discussion_number: 42,\n  comment_number: 42,\n  body: 'body'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_discussion_comment_legacy(\n  42,\n  42,\n  42,\n  'body'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a discussion comment (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment) endpoint.\n\nDeletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "teams/delete-discussion-comment-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/discussion_comments/#delete-a-discussion-comment-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Delete a discussion comment\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/delete-discussion-comment"
            },
            "after": {
              "operationId": "teams/delete-discussion-comment-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}', {\n  team_id: 42,\n  discussion_number: 42,\n  comment_number: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_discussion_comment_legacy(\n  42,\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
      "get": {
        "summary": "List reactions for a team discussion comment (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/list-for-team-discussion-comment-legacy",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion comment.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-26",
          "removalDate": "2021-02-21",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List reactions for a team discussion comment\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "reactions/list-for-team-discussion-comment"
            },
            "after": {
              "operationId": "reactions/list-for-team-discussion-comment-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', {\n  team_id: 42,\n  discussion_number: 42,\n  comment_number: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_team_discussion_comment_legacy(\n  42,\n  42,\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for a team discussion comment (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion comment`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment) endpoint.\n\nCreate a reaction to a [team discussion comment](https://developer.github.com/v3/teams/discussion_comments/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.",
        "operationId": "reactions/create-for-team-discussion-comment-legacy",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "$ref": "#/components/parameters/comment_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-26",
          "removalDate": "2021-02-21",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Create reaction for a team discussion comment\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "reactions/create-for-team-discussion-comment"
            },
            "after": {
              "operationId": "reactions/create-for-team-discussion-comment-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/teams/42/discussions/42/comments/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', {\n  team_id: 42,\n  discussion_number: 42,\n  comment_number: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_team_discussion_comment_legacy(\n  42,\n  42,\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/discussions/{discussion_number}/reactions": {
      "get": {
        "summary": "List reactions for a team discussion (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `read:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "reactions/list-for-team-discussion-legacy",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          },
          {
            "name": "content",
            "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a team discussion.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/reaction"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-26",
          "removalDate": "2021-02-21",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List reactions for a team discussion\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "reactions/list-for-team-discussion"
            },
            "after": {
              "operationId": "reactions/list-for-team-discussion-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/teams/42/discussions/42/reactions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/discussions/{discussion_number}/reactions', {\n  team_id: 42,\n  discussion_number: 42,\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_team_discussion_legacy(\n  42,\n  42\n)"
          }
        ]
      },
      "post": {
        "summary": "Create reaction for a team discussion (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://developer.github.com/v3/teams/discussions/). OAuth access tokens require the `write:discussion` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.",
        "operationId": "reactions/create-for-team-discussion-legacy",
        "tags": [
          "reactions"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.squirrel-girl-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/discussion_number"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reaction"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/reaction"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-02-26",
          "removalDate": "2021-02-21",
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.",
                    "enum": [
                      "+1",
                      "-1",
                      "laugh",
                      "confused",
                      "heart",
                      "hooray",
                      "rocket",
                      "eyes"
                    ]
                  }
                },
                "required": [
                  "content"
                ]
              },
              "example": {
                "content": "heart"
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Create reaction for a team discussion\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "reactions/create-for-team-discussion"
            },
            "after": {
              "operationId": "reactions/create-for-team-discussion-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.squirrel-girl-preview+json\" \\\n  https://api.github.com/teams/42/discussions/42/reactions \\\n  -d '{\"content\":\"content\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /teams/{team_id}/discussions/{discussion_number}/reactions', {\n  team_id: 42,\n  discussion_number: 42,\n  content: 'content',\n  mediaType: {\n    previews: [\n      'squirrel-girl'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_team_discussion_legacy(\n  42,\n  42,\n  'content'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/invitations": {
      "get": {
        "summary": "List pending team invitations (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://developer.github.com/v3/teams/members/#list-pending-team-invitations) endpoint.\n\nThe return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.",
        "operationId": "teams/list-pending-invitations-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-pending-team-invitations-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/organization-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List pending team invitations\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-pending-invitations"
            },
            "after": {
              "operationId": "teams/list-pending-invitations-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/invitations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/invitations', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.pending_invitations_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/members": {
      "get": {
        "summary": "List team members (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://developer.github.com/v3/teams/members/#list-team-members) endpoint.\n\nTeam members will include the members of child teams.",
        "operationId": "teams/list-members-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#list-team-members-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "name": "role",
            "description": "Filters members returned by their role in the team. Can be one of:  \n\\* `member` - normal members of the team.  \n\\* `maintainer` - team maintainers.  \n\\* `all` - all members of the team.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "maintainer",
                "all"
              ],
              "default": "all"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List team members\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-members"
            },
            "after": {
              "operationId": "teams/list-members-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/members"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/members', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.members_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/members/{username}": {
      "get": {
        "summary": "Get team member (Legacy)",
        "description": "The \"Get team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.",
        "operationId": "teams/get-member-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#get-team-member-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if user is a member"
          },
          "404": {
            "description": "Response if user is not a member"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Get team member (Legacy)\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/get-member"
            },
            "after": {
              "operationId": "teams/get-member-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/members/{username}', {\n  team_id: 42,\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.member_legacy(\n  42,\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Add team member (Legacy)",
        "description": "The \"Add team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Add or update team membership for a user](https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nNote that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "teams/add-member-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#add-team-member-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Response if team synchronization is set up"
          },
          "422": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "field": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response-if-you-attempt-to-add-an-organization-to-a-team": {
                    "summary": "Response if you attempt to add an organization to a team",
                    "value": {
                      "message": "Cannot add an organization as a member.",
                      "errors": [
                        {
                          "code": "org",
                          "field": "user",
                          "resource": "TeamMember"
                        }
                      ]
                    }
                  },
                  "response-if-you-attempt-to-add-a-user-to-a-team-when-they-are-not-a-member-of-at-least-one-other-team-in-the-same-organization": {
                    "summary": "Response if you attempt to add a user to a team when they are not a member of at least one other team in the same organization",
                    "value": {
                      "message": "User isn't a member of this organization. Please invite them first.",
                      "errors": [
                        {
                          "code": "unaffiliated",
                          "field": "user",
                          "resource": "TeamMember"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Add team member (Legacy)\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/add-member"
            },
            "after": {
              "operationId": "teams/add-member-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /teams/{team_id}/members/{username}', {\n  team_id: 42,\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_member_legacy(\n  42,\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove team member (Legacy)",
        "description": "The \"Remove team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Remove team membership for a user](https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
        "operationId": "teams/remove-member-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#remove-team-member-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "404": {
            "description": "Response if team synchronization is setup"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Remove team member (Legacy)\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/remove-member"
            },
            "after": {
              "operationId": "teams/remove-member-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/members/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}/members/{username}', {\n  team_id: 42,\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_member_legacy(\n  42,\n  'username'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/memberships/{username}": {
      "get": {
        "summary": "Get team membership for a user (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://developer.github.com/v3/teams/#create-a-team).",
        "operationId": "teams/get-membership-for-user-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#get-team-membership-for-a-user-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-membership"
                },
                "examples": {
                  "response-if-user-has-an-active-membership-with-team": {
                    "$ref": "#/components/examples/team-membership-response-if-user-has-an-active-membership-with-team"
                  },
                  "response-if-user-is-a-team-maintainer": {
                    "$ref": "#/components/examples/team-membership-response-if-user-is-a-team-maintainer"
                  },
                  "response-if-user-has-a-pending-membership-with-team": {
                    "$ref": "#/components/examples/team-membership-response-if-user-has-a-pending-membership-with-team"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Get team membership for a user\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/get-membership-for-user"
            },
            "after": {
              "operationId": "teams/get-membership-for-user-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/get-membership-legacy\" operation ID is now \"teams/get-membership-for-user-legacy\"",
            "before": {
              "operationId": "teams/get-membership-legacy"
            },
            "after": {
              "operationId": "teams/get-membership-for-user-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/get-membership\" operation ID is now \"teams/get-membership-for-user\"",
            "before": {
              "operationId": "teams/get-membership"
            },
            "after": {
              "operationId": "teams/get-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/memberships/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/memberships/{username}', {\n  team_id: 42,\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.membership_for_user_legacy(\n  42,\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Add or update team membership for a user (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nIf the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\nIf the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.",
        "operationId": "teams/add-or-update-membership-for-user-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#add-or-update-team-membership-for-a-user-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-membership"
                },
                "examples": {
                  "response-if-users-membership-with-team-is-now-active": {
                    "$ref": "#/components/examples/team-membership-response-if-users-membership-with-team-is-now-active"
                  },
                  "response-if-users-membership-with-team-is-now-pending": {
                    "$ref": "#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Response if team synchronization is set up"
          },
          "422": {
            "description": "Response if you attempt to add an organization to a team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "field": {
                            "type": "string"
                          },
                          "resource": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "response-if-you-attempt-to-add-an-organization-to-a-team": {
                    "value": {
                      "message": "Cannot add an organization as a member.",
                      "errors": [
                        {
                          "code": "org",
                          "field": "user",
                          "resource": "TeamMember"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
                    "enum": [
                      "member",
                      "maintainer"
                    ],
                    "default": "member"
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Add or update team membership for a user\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/add-or-update-membership-for-user"
            },
            "after": {
              "operationId": "teams/add-or-update-membership-for-user-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/add-or-update-membership-legacy\" operation ID is now \"teams/add-or-update-membership-for-user-legacy\"",
            "before": {
              "operationId": "teams/add-or-update-membership-legacy"
            },
            "after": {
              "operationId": "teams/add-or-update-membership-for-user-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/add-or-update-membership\" operation ID is now \"teams/add-or-update-membership-for-user\"",
            "before": {
              "operationId": "teams/add-or-update-membership"
            },
            "after": {
              "operationId": "teams/add-or-update-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/memberships/USERNAME \\\n  -d '{\"role\":\"role\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /teams/{team_id}/memberships/{username}', {\n  team_id: 42,\n  username: 'username',\n  role: 'role'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_or_update_membership_for_user_legacy(\n  42,\n  'username',\n  'role'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove team membership for a user (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
        "operationId": "teams/remove-membership-for-user-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/members/#remove-team-membership-for-a-user-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if team synchronization is set up"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Remove team membership for a user\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/remove-membership-for-user"
            },
            "after": {
              "operationId": "teams/remove-membership-for-user-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/remove-membership-legacy\" operation ID is now \"teams/remove-membership-for-user-legacy\"",
            "before": {
              "operationId": "teams/remove-membership-legacy"
            },
            "after": {
              "operationId": "teams/remove-membership-for-user-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/remove-membership\" operation ID is now \"teams/remove-membership-for-user\"",
            "before": {
              "operationId": "teams/remove-membership"
            },
            "after": {
              "operationId": "teams/remove-membership-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/memberships/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}/memberships/{username}', {\n  team_id: 42,\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_membership_for_user_legacy(\n  42,\n  'username'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/projects": {
      "get": {
        "summary": "List team projects (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://developer.github.com/v3/teams/#list-team-projects) endpoint.\n\nLists the organization projects for a team.",
        "operationId": "teams/list-projects-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-projects-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-project"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-project-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List team projects\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-projects"
            },
            "after": {
              "operationId": "teams/list-projects-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/teams/42/projects"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/projects', {\n  team_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.projects_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/projects/{project_id}": {
      "get": {
        "summary": "Check team permissions for a project (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://developer.github.com/v3/teams/#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.",
        "operationId": "teams/check-permissions-for-project-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-project-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-project"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Response if project is not managed by this team"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Check team permissions for a project\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/check-permissions-for-project"
            },
            "after": {
              "operationId": "teams/check-permissions-for-project-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/review-project-legacy\" operation ID is now \"teams/check-permissions-for-project-legacy\"",
            "before": {
              "operationId": "teams/review-project-legacy"
            },
            "after": {
              "operationId": "teams/check-permissions-for-project-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/review-project\" operation ID is now \"teams/check-permissions-for-project\"",
            "before": {
              "operationId": "teams/review-project"
            },
            "after": {
              "operationId": "teams/check-permissions-for-project"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/teams/42/projects/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/projects/{project_id}', {\n  team_id: 42,\n  project_id: 42,\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_permissions_for_project_legacy(\n  42,\n  42\n)"
          }
        ]
      },
      "put": {
        "summary": "Add or update team project permissions (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://developer.github.com/v3/teams/#add-or-update-team-project-permissions) endpoint.\n\nAdds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.",
        "operationId": "teams/add-or-update-project-permissions-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-project-permissions-legacy"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          },
          "403": {
            "description": "Response if the project is not owned by the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "documentation_url": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "response-if-the-project-is-not-owned-by-the-organization": {
                    "value": {
                      "message": "Must have admin rights to Repository.",
                      "documentation_url": "https://developer.github.com/v3/teams/#add-or-update-team-project-permissions"
                    }
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ]
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Add or update team project permissions\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/add-or-update-project-permissions"
            },
            "after": {
              "operationId": "teams/add-or-update-project-permissions-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/add-or-update-project-legacy\" operation ID is now \"teams/add-or-update-project-permissions-legacy\"",
            "before": {
              "operationId": "teams/add-or-update-project-legacy"
            },
            "after": {
              "operationId": "teams/add-or-update-project-permissions-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/add-or-update-project\" operation ID is now \"teams/add-or-update-project-permissions\"",
            "before": {
              "operationId": "teams/add-or-update-project"
            },
            "after": {
              "operationId": "teams/add-or-update-project-permissions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/teams/42/projects/42 \\\n  -d '{\"permission\":\"permission\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /teams/{team_id}/projects/{project_id}', {\n  team_id: 42,\n  project_id: 42,\n  permission: 'permission',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_or_update_project_permissions_legacy(\n  42,\n  42,\n  'permission'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove a project from a team (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://developer.github.com/v3/teams/#remove-a-project-from-a-team) endpoint.\n\nRemoves an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.",
        "operationId": "teams/remove-project-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-project-from-a-team-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Remove a project from a team\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/remove-project"
            },
            "after": {
              "operationId": "teams/remove-project-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/projects/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}/projects/{project_id}', {\n  team_id: 42,\n  project_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_project_from_legacy(\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/repos": {
      "get": {
        "summary": "List team repositories (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://developer.github.com/v3/teams/#list-team-repositories) endpoint.",
        "operationId": "teams/list-repos-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-team-repositories-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List team repositories\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-repos"
            },
            "after": {
              "operationId": "teams/list-repos-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/repos"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/repos', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/repos/{owner}/{repo}": {
      "get": {
        "summary": "Check team permissions for a repository (Legacy)",
        "description": "**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "teams/check-permissions-for-repo-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#check-team-permissions-for-a-repository-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "200": {
            "description": "Alternative response with extra repository information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/team-repository"
                },
                "examples": {
                  "alternative-response-with-extra-repository-information": {
                    "$ref": "#/components/examples/team-repository-alternative-response-with-extra-repository-information"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Response if repository is managed by this team"
          },
          "404": {
            "description": "Response if repository is not managed by this team"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Check team permissions for a repository\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/check-permissions-for-repo"
            },
            "after": {
              "operationId": "teams/check-permissions-for-repo-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/check-manages-repo-legacy\" operation ID is now \"teams/check-permissions-for-repo-legacy\"",
            "before": {
              "operationId": "teams/check-manages-repo-legacy"
            },
            "after": {
              "operationId": "teams/check-permissions-for-repo-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/check-manages-repo\" operation ID is now \"teams/check-permissions-for-repo\"",
            "before": {
              "operationId": "teams/check-manages-repo"
            },
            "after": {
              "operationId": "teams/check-permissions-for-repo"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/repos/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/repos/{owner}/{repo}', {\n  team_id: 42,\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_permissions_for_repo_legacy(\n  42,\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Add or update team repository permissions (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team repository permissions](https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions) endpoint.\n\nTo add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n\nNote that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "teams/add-or-update-repo-permissions-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#add-or-update-team-repository-permissions-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "permission": {
                    "type": "string",
                    "description": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                    "enum": [
                      "pull",
                      "push",
                      "admin"
                    ]
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Add or update team repository permissions\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/add-or-update-repo-permissions"
            },
            "after": {
              "operationId": "teams/add-or-update-repo-permissions-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-03",
            "note": "\"teams/add-or-update-repo-legacy\" operation ID is now \"teams/add-or-update-repo-permissions-legacy\"",
            "before": {
              "operationId": "teams/add-or-update-repo-legacy"
            },
            "after": {
              "operationId": "teams/add-or-update-repo-permissions-legacy"
            }
          },
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"teams/add-or-update-repo\" operation ID is now \"teams/add-or-update-repo-permissions\"",
            "before": {
              "operationId": "teams/add-or-update-repo"
            },
            "after": {
              "operationId": "teams/add-or-update-repo-permissions"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/repos/octocat/hello-world \\\n  -d '{\"permission\":\"permission\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /teams/{team_id}/repos/{owner}/{repo}', {\n  team_id: 42,\n  owner: 'octocat',\n  repo: 'hello-world',\n  permission: 'permission'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_or_update_repo_permissions_legacy(\n  42,\n  'hello-world',\n  'permission'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove a repository from a team (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://developer.github.com/v3/teams/#remove-a-repository-from-a-team) endpoint.\n\nIf the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.",
        "operationId": "teams/remove-repo-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#remove-a-repository-from-a-team-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Remove a repository from a team\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/remove-repo"
            },
            "after": {
              "operationId": "teams/remove-repo-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/repos/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /teams/{team_id}/repos/{owner}/{repo}', {\n  team_id: 42,\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_repo_from_legacy(\n  42,\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/team-sync/group-mappings": {
      "get": {
        "summary": "List IdP groups for a team (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nList IdP groups connected to a team on GitHub.",
        "operationId": "teams/list-id-p-groups-for-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#list-idp-groups-for-a-team-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group-mapping-3"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/group-mapping-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List IdP groups for a team\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-id-p-groups-for"
            },
            "after": {
              "operationId": "teams/list-id-p-groups-for-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/team-sync/group-mappings"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/team-sync/group-mappings', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.id_p_groups_for_legacy(\n  42\n)"
          }
        ]
      },
      "patch": {
        "summary": "Create or update IdP group connections (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nCreates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.",
        "operationId": "teams/create-or-update-id-p-group-connections-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/team_sync/#create-or-update-idp-group-connections-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group-mapping-2"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/group-mapping-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": false,
          "githubCloudOnly": true,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groups": {
                    "type": "array",
                    "description": "The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "group_id": {
                          "type": "string",
                          "description": "ID of the IdP group."
                        },
                        "group_name": {
                          "type": "string",
                          "description": "Name of the IdP group."
                        },
                        "group_description": {
                          "type": "string",
                          "description": "Description of the IdP group."
                        }
                      },
                      "required": [
                        "group_id",
                        "group_name",
                        "group_description"
                      ]
                    }
                  }
                },
                "required": [
                  "groups"
                ]
              },
              "example": {
                "groups": [
                  {
                    "group_id": "123",
                    "group_name": "Octocat admins",
                    "group_description": "The people who configure your octoworld."
                  }
                ]
              }
            }
          }
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"Create or update IdP group connections\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/create-or-update-id-p-group-connections"
            },
            "after": {
              "operationId": "teams/create-or-update-id-p-group-connections-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/team-sync/group-mappings \\\n  -d '{\"groups\":[{\"group_id\":\"group_id\",\"group_name\":\"group_name\",\"group_description\":\"group_description\"}]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /teams/{team_id}/team-sync/group-mappings', {\n  team_id: 42,\n  groups: [\n    {\n      group_id: 'group_id',\n      group_name: 'group_name',\n      group_description: 'group_description'\n    }\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_or_update_id_p_group_connections_legacy(\n  42,\n  [\n    {\n      group_id: 'group_id',\n      group_name: 'group_name',\n      group_description: 'group_description'\n    }\n  ]\n)"
          }
        ]
      }
    },
    "/teams/{team_id}/teams": {
      "get": {
        "summary": "List child teams (Legacy)",
        "description": "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://developer.github.com/v3/teams/#list-child-teams) endpoint.",
        "operationId": "teams/list-child-legacy",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-child-teams-legacy"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Response if child teams exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-2"
                  }
                },
                "examples": {
                  "response-if-child-teams-exist": {
                    "$ref": "#/components/examples/team-items-response-if-child-teams-exist"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "deprecationDate": "2020-01-21",
          "removalDate": "2021-02-01",
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "deprecated": true,
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-01-16",
            "note": "The path for \"List child teams\" changed  from \"/teams/{team_id}*\" to \"/orgs/{org}/teams/{team_slug}*\"). The operation ID for the old path now has a \"-legacy\" suffix. The route with the new path has a \"-for-org\" suffix in the operation ID to avoid breaking changes",
            "before": {
              "operationId": "teams/list-child"
            },
            "after": {
              "operationId": "teams/list-child-legacy"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/teams/42/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /teams/{team_id}/teams', {\n  team_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.child_legacy(\n  42\n)"
          }
        ]
      }
    },
    "/user": {
      "get": {
        "summary": "Get the authenticated user",
        "description": "If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n\nIf the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.",
        "operationId": "users/get-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#get-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private-user"
                },
                "examples": {
                  "response-with-public-and-private-profile-information": {
                    "$ref": "#/components/examples/private-user-response-with-public-and-private-profile-information"
                  },
                  "response-with-public-profile-information": {
                    "$ref": "#/components/examples/private-user-response-with-public-profile-information"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.authenticated()"
          }
        ]
      },
      "patch": {
        "summary": "Update the authenticated user",
        "description": "**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.",
        "operationId": "users/update-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#update-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/private-user"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/private-user"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The new name of the user."
                  },
                  "email": {
                    "type": "string",
                    "description": "The publicly visible email address of the user."
                  },
                  "blog": {
                    "type": "string",
                    "description": "The new blog URL of the user."
                  },
                  "company": {
                    "type": "string",
                    "description": "The new company of the user."
                  },
                  "location": {
                    "type": "string",
                    "description": "The new location of the user."
                  },
                  "hireable": {
                    "type": "boolean",
                    "description": "The new hiring availability of the user."
                  },
                  "bio": {
                    "type": "string",
                    "description": "The new short biography of the user."
                  },
                  "twitter_username": {
                    "type": "string",
                    "description": "The new Twitter username of the user."
                  }
                }
              },
              "example": {
                "name": "monalisa octocat",
                "email": "octocat@github.com",
                "blog": "https://github.com/blog",
                "company": "GitHub",
                "location": "San Francisco",
                "hireable": true,
                "bio": "There once...",
                "twitter_username": "monatheoctocat"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /user', {\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_authenticated(\n  'name'\n)"
          }
        ]
      }
    },
    "/user/blocks": {
      "get": {
        "summary": "List users blocked by the authenticated user",
        "description": "List the users you've blocked on your personal account.",
        "operationId": "users/list-blocked-by-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#list-users-blocked-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/list-blocked\" operation ID is now \"users/list-blocked-by-authenticated\"",
            "before": {
              "operationId": "users/list-blocked"
            },
            "after": {
              "operationId": "users/list-blocked-by-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/blocks"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/blocks')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.blocked_by_authenticated()"
          }
        ]
      }
    },
    "/user/blocks/{username}": {
      "get": {
        "summary": "Check if a user is blocked by the authenticated user",
        "description": "If the user is blocked:\n\nIf the user is not blocked:",
        "operationId": "users/check-blocked",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#check-if-a-user-is-blocked-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "If the user is blocked:"
          },
          "404": {
            "description": "If the user is not blocked:"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/blocks/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/blocks/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_is_blocked_by_authenticated(\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Block a user",
        "description": "",
        "operationId": "users/block",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#block-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/blocks/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /user/blocks/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.block(\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unblock a user",
        "description": "",
        "operationId": "users/unblock",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/blocking/#unblock-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/blocks/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/blocks/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unblock(\n  'username'\n)"
          }
        ]
      }
    },
    "/user/email/visibility": {
      "patch": {
        "summary": "Set primary email visibility for the authenticated user",
        "description": "Sets the visibility for your primary email addresses.",
        "operationId": "users/set-primary-email-visibility-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/email-items-3"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Specify the _primary_ email address that needs a visibility change."
                  },
                  "visibility": {
                    "type": "string",
                    "description": "Use `public` to enable an authenticated user to view the specified email address, or use `private` so this primary email address cannot be seen publicly."
                  }
                },
                "required": [
                  "email",
                  "visibility"
                ]
              },
              "example": {
                "email": "octocat@github.com",
                "visibility": "public"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/toggle-primary-email-visibility\" operation ID is now \"users/set-primary-email-visibility-for-authenticated\"",
            "before": {
              "operationId": "users/toggle-primary-email-visibility"
            },
            "after": {
              "operationId": "users/set-primary-email-visibility-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/email/visibility \\\n  -d '{\"email\":\"octocat@github.com\",\"visibility\":\"visibility\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /user/email/visibility', {\n  email: 'octocat@github.com',\n  visibility: 'visibility'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.set_primary_email_visibility_for_authenticated(\n  'octocat@github.com',\n  'visibility'\n)"
          }
        ]
      }
    },
    "/user/emails": {
      "get": {
        "summary": "List email addresses for the authenticated user",
        "description": "Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.",
        "operationId": "users/list-emails-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#list-email-addresses-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/email-items-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/list-emails\" operation ID is now \"users/list-emails-for-authenticated\"",
            "before": {
              "operationId": "users/list-emails"
            },
            "after": {
              "operationId": "users/list-emails-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/emails"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/emails')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.emails_for_authenticated()"
          }
        ]
      },
      "post": {
        "summary": "Add an email address for the authenticated user",
        "description": "This endpoint is accessible with the `user` scope.",
        "operationId": "users/add-email-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#add-an-email-address-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/email-items"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emails": {
                    "type": "array",
                    "description": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "emails"
                ]
              },
              "example": {
                "emails": [
                  "octocat@github.com",
                  "support@github.com"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/add-emails\" operation ID is now \"users/add-emails-for-authenticated\"",
            "before": {
              "operationId": "users/add-emails"
            },
            "after": {
              "operationId": "users/add-emails-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/emails \\\n  -d '{\"emails\":[\"octocat@github.com\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /user/emails', {\n  emails: [\n    'octocat@github.com'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_email_for_authenticated(\n  [\n    'octocat@github.com'\n  ]\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete an email address for the authenticated user",
        "description": "This endpoint is accessible with the `user` scope.",
        "operationId": "users/delete-email-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#delete-an-email-address-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "emails": {
                    "type": "array",
                    "description": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "emails"
                ]
              },
              "example": {
                "emails": [
                  "octocat@github.com",
                  "support@github.com"
                ]
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/delete-emails\" operation ID is now \"users/delete-emails-for-authenticated\"",
            "before": {
              "operationId": "users/delete-emails"
            },
            "after": {
              "operationId": "users/delete-emails-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/emails \\\n  -d '{\"emails\":[\"octocat@github.com\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/emails', {\n  emails: [\n    'octocat@github.com'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_email_for_authenticated(\n  [\n    'octocat@github.com'\n  ]\n)"
          }
        ]
      }
    },
    "/user/followers": {
      "get": {
        "summary": "List followers of the authenticated user",
        "description": "Lists the people following the authenticated user.",
        "operationId": "users/list-followers-for-authenticated-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-followers-of-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/followers"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/followers')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.followers_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/following": {
      "get": {
        "summary": "List the people the authenticated user follows",
        "description": "Lists the people who the authenticated user follows.",
        "operationId": "users/list-followed-by-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-the-people-the-authenticated-user-follows"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"users/list-following-for-authenticated-user\" operation ID is now \"users/list-followed-by-authenticated\"",
            "before": {
              "operationId": "users/list-following-for-authenticated-user"
            },
            "after": {
              "operationId": "users/list-followed-by-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/following"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/following')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.following_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/following/{username}": {
      "get": {
        "summary": "Check if a person is followed by the authenticated user",
        "description": "",
        "operationId": "users/check-person-is-followed-by-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#check-if-a-person-is-followed-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if the person is followed by the authenticated user"
          },
          "404": {
            "description": "Response if the person is not followed by the authenticated user"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/check-following\" operation ID is now \"users/check-person-is-followed-by-authenticated\"",
            "before": {
              "operationId": "users/check-following"
            },
            "after": {
              "operationId": "users/check-person-is-followed-by-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/following/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/following/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_person_is_followed_by_authenticated(\n  'username'\n)"
          }
        ]
      },
      "put": {
        "summary": "Follow a user",
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"\n\nFollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
        "operationId": "users/follow",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#follow-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/following/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /user/following/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.follow(\n  'username'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unfollow a user",
        "description": "Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.",
        "operationId": "users/unfollow",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#unfollow-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/following/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/following/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unfollow(\n  'username'\n)"
          }
        ]
      }
    },
    "/user/gpg_keys": {
      "get": {
        "summary": "List GPG keys for the authenticated user",
        "description": "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/list-gpg-keys-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gpg-key"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gpg-key-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/list-gpg-keys\" operation ID is now \"users/list-gpg-keys-for-authenticated\"",
            "before": {
              "operationId": "users/list-gpg-keys"
            },
            "after": {
              "operationId": "users/list-gpg-keys-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/gpg_keys"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/gpg_keys')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.gpg_keys_for_authenticated()"
          }
        ]
      },
      "post": {
        "summary": "Create a GPG key for the authenticated user",
        "description": "Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/create-gpg-key-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gpg-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gpg-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "armored_public_key": {
                    "type": "string",
                    "description": "Your GPG key, generated in ASCII-armored format. See \"[Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/)\" for help creating a GPG key."
                  }
                }
              },
              "example": {
                "armored_public_key": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/create-gpg-key\" operation ID is now \"users/create-gpg-key-for-authenticated\"",
            "before": {
              "operationId": "users/create-gpg-key"
            },
            "after": {
              "operationId": "users/create-gpg-key-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/gpg_keys \\\n  -d '{\"armored_public_key\":\"armored_public_key\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /user/gpg_keys', {\n  armored_public_key: 'armored_public_key'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_gpg_key_for_authenticated(\n  'armored_public_key'\n)"
          }
        ]
      }
    },
    "/user/gpg_keys/{gpg_key_id}": {
      "get": {
        "summary": "Get a GPG key for the authenticated user",
        "description": "View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/get-gpg-key-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#get-a-gpg-key-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gpg_key_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gpg-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gpg-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/get-gpg-key\" operation ID is now \"users/get-gpg-key-for-authenticated\"",
            "before": {
              "operationId": "users/get-gpg-key"
            },
            "after": {
              "operationId": "users/get-gpg-key-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/gpg_keys/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/gpg_keys/{gpg_key_id}', {\n  gpg_key_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.gpg_key_for_authenticated(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a GPG key for the authenticated user",
        "description": "Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/delete-gpg-key-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/gpg_key_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/delete-gpg-key\" operation ID is now \"users/delete-gpg-key-for-authenticated\"",
            "before": {
              "operationId": "users/delete-gpg-key"
            },
            "after": {
              "operationId": "users/delete-gpg-key-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/gpg_keys/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/gpg_keys/{gpg_key_id}', {\n  gpg_key_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_gpg_key_for_authenticated(\n  42\n)"
          }
        ]
      }
    },
    "/user/installations": {
      "get": {
        "summary": "List app installations accessible to the user access token",
        "description": "Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.",
        "operationId": "apps/list-installations-for-authenticated-user",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#list-app-installations-accessible-to-the-user-access-token"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "You can find the permissions for the installation under the `permissions` key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "installations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/base-installation-for-auth-user"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-installation-for-auth-user-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/user/installations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/installations', {\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.installations_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/installations/{installation_id}/repositories": {
      "get": {
        "summary": "List repositories accessible to the user access token",
        "description": "List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.",
        "operationId": "apps/list-installation-repos-for-authenticated-user",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#list-repositories-accessible-to-the-user-access-token"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/installation_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "The access the user has to each repository is included in the hash under the `permissions` key.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_count": {
                      "type": "number"
                    },
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository"
                      }
                    }
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-paginated"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "mercy",
              "note": "The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.mercy-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/user/installations/42/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/installations/{installation_id}/repositories', {\n  installation_id: 42,\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_accessible_to_user_access_token(\n  42\n)"
          }
        ]
      }
    },
    "/user/installations/{installation_id}/repositories/{repository_id}": {
      "put": {
        "summary": "Add a repository to an app installation",
        "description": "Add a single repository to an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.",
        "operationId": "apps/add-repo-to-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#add-a-repository-to-an-app-installation"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/installation_id"
          },
          {
            "$ref": "#/components/parameters/repository_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/user/installations/42/repositories/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /user/installations/{installation_id}/repositories/{repository_id}', {\n  installation_id: 42,\n  repository_id: 42,\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.add_repo_to_installation(\n  42,\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Remove a repository from an app installation",
        "description": "Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or the [OAuth Authorizations API](https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization)) or [Basic Authentication](https://developer.github.com/v3/auth/#basic-authentication) to access this endpoint.",
        "operationId": "apps/remove-repo-from-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/installations/#remove-a-repository-from-an-app-installation"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/installation_id"
          },
          {
            "$ref": "#/components/parameters/repository_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/user/installations/42/repositories/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/installations/{installation_id}/repositories/{repository_id}', {\n  installation_id: 42,\n  repository_id: 42,\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.remove_repo_from_installation(\n  42,\n  42\n)"
          }
        ]
      }
    },
    "/user/issues": {
      "get": {
        "summary": "List user account issues assigned to the authenticated user",
        "description": "List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "operationId": "issues/list-for-authenticated-user",
        "tags": [
          "issues"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-user-account-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          },
          {
            "name": "direction",
            "description": "The direction of the sort. Can be either `asc` or `desc`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "name": "since",
            "description": "Only issues updated at or after this time are returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue-with-repo"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/issue-with-repo-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            },
            {
              "required": false,
              "name": "squirrel-girl",
              "note": "An additional `reactions` object in the issue comment payload is currently available for developers to preview. During\nthe preview period, the APIs may change without advance notice. Please see the [blog\npost](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details.\n\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.squirrel-girl-preview\n```\n\nThe `reactions` key will have the following payload where `url` can be used to construct the API location for [listing\nand creating](https://developer.github.com/v3/reactions) reactions.\n\n```\n{\n  \"total_count\": 5,\n  \"+1\": 3,\n  \"-1\": 1,\n  \"laugh\": 0,\n  \"confused\": 0,\n  \"heart\": 1,\n  \"hooray\": 0,\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/issues/1347/reactions\"\n}\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/issues"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/issues')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_authenticated_user()"
          }
        ]
      }
    },
    "/user/keys": {
      "get": {
        "summary": "List public SSH keys for the authenticated user",
        "description": "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/list-public-ssh-keys-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#list-public-ssh-keys-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/actions-public-key"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-public-key-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/list-public-keys\" operation ID is now \"users/list-public-ssh-keys-for-authenticated\"",
            "before": {
              "operationId": "users/list-public-keys"
            },
            "after": {
              "operationId": "users/list-public-ssh-keys-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/keys"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/keys')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_ssh_keys_for_authenticated()"
          }
        ]
      },
      "post": {
        "summary": "Create a public SSH key for the authenticated user",
        "description": "Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/create-public-ssh-key-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#create-a-public-ssh-key-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-public-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-public-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "A descriptive name for the new key. Use a name that will help you recognize this key in your GitHub account. For example, if you're using a personal Mac, you might call this key \"Personal MacBook Air\"."
                  },
                  "key": {
                    "type": "string",
                    "description": "The public SSH key to add to your GitHub account. See \"[Generating a new SSH key](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)\" for guidance on how to create a public SSH key."
                  }
                }
              },
              "example": {
                "title": "octocat@octomac",
                "key": "ssh-rsa AAA..."
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/create-public-key\" operation ID is now \"users/create-public-ssh-key-for-authenticated\"",
            "before": {
              "operationId": "users/create-public-key"
            },
            "after": {
              "operationId": "users/create-public-ssh-key-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/keys \\\n  -d '{\"title\":\"title\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /user/keys', {\n  title: 'title'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_public_ssh_key_for_authenticated(\n  'title'\n)"
          }
        ]
      }
    },
    "/user/keys/{key_id}": {
      "get": {
        "summary": "Get a public SSH key for the authenticated user",
        "description": "View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/get-public-ssh-key-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#get-a-public-ssh-key-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-public-key"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-public-key"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/get-public-key\" operation ID is now \"users/get-public-ssh-key-for-authenticated\"",
            "before": {
              "operationId": "users/get-public-key"
            },
            "after": {
              "operationId": "users/get-public-ssh-key-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/keys/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/keys/{key_id}', {\n  key_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_ssh_key_for_authenticated(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a public SSH key for the authenticated user",
        "description": "Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
        "operationId": "users/delete-public-ssh-key-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#delete-a-public-ssh-key-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/key_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/delete-public-key\" operation ID is now \"users/delete-public-ssh-key-for-authenticated\"",
            "before": {
              "operationId": "users/delete-public-key"
            },
            "after": {
              "operationId": "users/delete-public-ssh-key-for-authenticated"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/keys/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/keys/{key_id}', {\n  key_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_public_ssh_key_for_authenticated(\n  42\n)"
          }
        ]
      }
    },
    "/user/marketplace_purchases": {
      "get": {
        "summary": "List subscriptions for the authenticated user",
        "description": "Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).",
        "operationId": "apps/list-subscriptions-for-authenticated-user",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user-marketplace-purchase"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/user-marketplace-purchase-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-08",
            "note": "\"apps/list-marketplace-purchases-for-authenticated-user\" operation ID is now \"apps/list-subscriptions-for-authenticated-user\"",
            "before": {
              "operationId": "apps/list-marketplace-purchases-for-authenticated-user"
            },
            "after": {
              "operationId": "apps/list-subscriptions-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/marketplace_purchases"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/marketplace_purchases')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.marketplace_purchases_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/marketplace_purchases/stubbed": {
      "get": {
        "summary": "List subscriptions for the authenticated user (stubbed)",
        "description": "Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/).",
        "operationId": "apps/list-subscriptions-for-authenticated-user-stubbed",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/marketplace/#list-subscriptions-for-the-authenticated-user-stubbed"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user-marketplace-purchase"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/user-marketplace-purchase-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-08",
            "note": "\"apps/list-marketplace-purchases-for-authenticated-user-stubbed\" operation ID is now \"apps/list-subscriptions-for-authenticated-user-stubbed\"",
            "before": {
              "operationId": "apps/list-marketplace-purchases-for-authenticated-user-stubbed"
            },
            "after": {
              "operationId": "apps/list-subscriptions-for-authenticated-user-stubbed"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/marketplace_purchases/stubbed"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/marketplace_purchases/stubbed')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.marketplace_purchases_for_authenticated_user_stubbed()"
          }
        ]
      }
    },
    "/user/memberships/orgs": {
      "get": {
        "summary": "List organization memberships for the authenticated user",
        "description": "",
        "operationId": "orgs/list-memberships-for-authenticated-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#list-organization-memberships-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "state",
            "description": "Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "pending"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/org-membership"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-membership-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/list-memberships\" operation ID is now \"orgs/list-memberships-for-authenticated-user\"",
            "before": {
              "operationId": "orgs/list-memberships"
            },
            "after": {
              "operationId": "orgs/list-memberships-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/memberships/orgs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/memberships/orgs')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.memberships_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/memberships/orgs/{org}": {
      "get": {
        "summary": "Get an organization membership for the authenticated user",
        "description": "",
        "operationId": "orgs/get-membership-for-authenticated-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#get-an-organization-membership-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-membership"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-membership"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/memberships/orgs/ORG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/memberships/orgs/{org}', {\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.membership_for_authenticated_user(\n  'org'\n)"
          }
        ]
      },
      "patch": {
        "summary": "Update an organization membership for the authenticated user",
        "description": "",
        "operationId": "orgs/update-membership-for-authenticated-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/members/#update-an-organization-membership-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/org"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/org-membership"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/org-membership-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
                    "enum": [
                      "active"
                    ]
                  }
                },
                "required": [
                  "state"
                ]
              },
              "example": {
                "state": "active"
              }
            }
          }
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"orgs/update-membership\" operation ID is now \"orgs/update-membership-for-authenticated-user\"",
            "before": {
              "operationId": "orgs/update-membership"
            },
            "after": {
              "operationId": "orgs/update-membership-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/memberships/orgs/ORG \\\n  -d '{\"state\":\"state\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /user/memberships/orgs/{org}', {\n  org: 'org',\n  state: 'state'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.update_membership_for_authenticated_user(\n  'org',\n  'state'\n)"
          }
        ]
      }
    },
    "/user/migrations": {
      "get": {
        "summary": "List user migrations",
        "description": "Lists all migrations a user has started.",
        "operationId": "migrations/list-for-authenticated-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#list-user-migrations"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/migration"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/user/migrations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/migrations', {\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_authenticated_user()"
          }
        ]
      },
      "post": {
        "summary": "Start a user migration",
        "description": "Initiates the generation of a user migration archive.",
        "operationId": "migrations/start-for-authenticated-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#start-a-user-migration"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "repositories": {
                    "type": "array",
                    "description": "An array of repositories to include in the migration.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "lock_repositories": {
                    "type": "boolean",
                    "description": "Locks the `repositories` to prevent changes during the migration when set to `true`.",
                    "default": false
                  },
                  "exclude_attachments": {
                    "type": "boolean",
                    "description": "Does not include attachments uploaded to GitHub.com in the migration data when set to `true`. Excluding attachments will reduce the migration archive file size.",
                    "default": false
                  }
                },
                "required": [
                  "repositories"
                ]
              },
              "example": {
                "repositories": [
                  "octocat/Hello-World"
                ],
                "lock_repositories": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/migrations \\\n  -d '{\"repositories\":[\"repositories\"]}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /user/migrations', {\n  repositories: [\n    'repositories'\n  ]\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.start_for_authenticated_user(\n  [\n    'repositories'\n  ]\n)"
          }
        ]
      }
    },
    "/user/migrations/{migration_id}": {
      "get": {
        "summary": "Get a user migration status",
        "description": "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` - the migration hasn't started yet.\n*   `exporting` - the migration is in progress.\n*   `exported` - the migration finished successfully.\n*   `failed` - the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive).",
        "operationId": "migrations/get-status-for-authenticated-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#get-a-user-migration-status"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/migration"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/migration"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/user/migrations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/migrations/{migration_id}', {\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.status_for_user(\n  42\n)"
          }
        ]
      }
    },
    "/user/migrations/{migration_id}/archive": {
      "get": {
        "summary": "Download a user migration archive",
        "description": "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit\\_comments\n*   issue\\_comments\n*   issue\\_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected\\_branches\n*   pull\\_request\\_reviews\n*   pull\\_requests\n*   releases\n*   repositories\n*   review\\_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.",
        "operationId": "migrations/get-archive-for-authenticated-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "302": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/user/migrations/42/archive"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/migrations/{migration_id}/archive', {\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.archive_for_user(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Delete a user migration archive",
        "description": "Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://developer.github.com/v3/migrations/users/#list-user-migrations) and [Get a user migration status](https://developer.github.com/v3/migrations/users/#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.",
        "operationId": "migrations/delete-archive-for-authenticated-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/user/migrations/42/archive"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/migrations/{migration_id}/archive', {\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.delete_archive_for_user(\n  42\n)"
          }
        ]
      }
    },
    "/user/migrations/{migration_id}/repos/{repo_name}/lock": {
      "delete": {
        "summary": "Unlock a user repository",
        "description": "Unlocks a repository. You can lock repositories when you [start a user migration](https://developer.github.com/v3/migrations/users/#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://developer.github.com/v3/repos/#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.",
        "operationId": "migrations/unlock-repo-for-authenticated-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#unlock-a-user-repository"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/migration_id"
          },
          {
            "$ref": "#/components/parameters/repo_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/user/migrations/42/repos/REPO_NAME/lock"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock', {\n  migration_id: 42,\n  repo_name: 'repo_name',\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unlock_user_repo(\n  42,\n  'repo_name'\n)"
          }
        ]
      }
    },
    "/user/orgs": {
      "get": {
        "summary": "List organizations for the authenticated user",
        "description": "List organizations for the authenticated user.\n\n**OAuth scope requirements**\n\nThis only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.",
        "operationId": "orgs/list-for-authenticated-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/organization-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/orgs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/orgs')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_authenticated_user()"
          }
        ]
      }
    },
    "/user/projects": {
      "post": {
        "summary": "Create a user project",
        "description": "",
        "operationId": "projects/create-for-authenticated-user",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#create-a-user-project"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the project."
                  },
                  "body": {
                    "type": "string",
                    "description": "The description of the project."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Projects Documentation",
                "body": "Developer documentation project for the developer site."
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/user/projects \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /user/projects', {\n  name: 'name',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_authenticated_user(\n  'name'\n)"
          }
        ]
      }
    },
    "/user/public_emails": {
      "get": {
        "summary": "List public email addresses for the authenticated user",
        "description": "Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://developer.github.com/v3/users/emails/#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.",
        "operationId": "users/list-public-emails-for-authenticated",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/email-items-2"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-06-04",
            "note": "\"users/list-public-emails\" operation ID is now \"users/list-public-emails-for-authenticated-user\"",
            "before": {
              "operationId": "users/list-public-emails"
            },
            "after": {
              "operationId": "users/list-public-emails-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/public_emails"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/public_emails')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_emails_for_authenticated()"
          }
        ]
      }
    },
    "/user/repos": {
      "get": {
        "summary": "List repositories for the authenticated user",
        "description": "Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.",
        "operationId": "repos/list-for-authenticated-user",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repositories-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/visibility"
          },
          {
            "name": "affiliation",
            "description": "Comma-separated list of values. Can include:  \n\\* `owner`: Repositories that are owned by the authenticated user.  \n\\* `collaborator`: Repositories that the user has been added to as a collaborator.  \n\\* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "owner,collaborator,organization_member"
            }
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "name": "sort",
            "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "full_name"
            }
          },
          {
            "name": "direction",
            "description": "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"repos/list\" operation ID is now \"repos/list-for-authenticated-user\"",
            "before": {
              "operationId": "repos/list"
            },
            "after": {
              "operationId": "repos/list-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/repos"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/repos')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_authenticated_user()"
          }
        ]
      },
      "post": {
        "summary": "Create a repository for the authenticated user",
        "description": "Creates a new repository for the authenticated user.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository\n*   `repo` scope to create a private repository",
        "operationId": "repos/create-for-authenticated-user",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          }
        ],
        "responses": {
          "201": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/repository"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository"
                  }
                }
              }
            },
            "headers": {
              "Location": {
                "example": "https://api.github.com/repos/octocat/Hello-World",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```"
            },
            {
              "required": false,
              "name": "baptiste",
              "note": "The `is_template` and `template_repository` keys are currently available for developer to preview. See [Create a repository using a template](https://developer.github.com/v3/repos/#create-a-repository-using-a-template) to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.baptiste-preview+json\n```"
            }
          ]
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the repository."
                  },
                  "description": {
                    "type": "string",
                    "description": "A short description of the repository."
                  },
                  "homepage": {
                    "type": "string",
                    "description": "A URL with more information about the repository."
                  },
                  "private": {
                    "type": "boolean",
                    "description": "Either `true` to create a private repository or `false` to create a public one.",
                    "default": false
                  },
                  "visibility": {
                    "type": "string",
                    "description": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see \"[Creating an internal repository](https://help.github.com/github/creating-cloning-and-archiving-repositories/creating-an-internal-repository)\".  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
                    "enum": [
                      "public",
                      "private",
                      "visibility",
                      "internal"
                    ]
                  },
                  "has_issues": {
                    "type": "boolean",
                    "description": "Either `true` to enable issues for this repository or `false` to disable them.",
                    "default": true
                  },
                  "has_projects": {
                    "type": "boolean",
                    "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                    "default": true
                  },
                  "has_wiki": {
                    "type": "boolean",
                    "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
                    "default": true
                  },
                  "is_template": {
                    "type": "boolean",
                    "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
                    "default": false
                  },
                  "team_id": {
                    "type": "integer",
                    "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."
                  },
                  "auto_init": {
                    "type": "boolean",
                    "description": "Pass `true` to create an initial commit with empty README.",
                    "default": false
                  },
                  "gitignore_template": {
                    "type": "string",
                    "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\"."
                  },
                  "license_template": {
                    "type": "string",
                    "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\"."
                  },
                  "allow_squash_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
                    "default": true
                  },
                  "allow_merge_commit": {
                    "type": "boolean",
                    "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
                    "default": true
                  },
                  "allow_rebase_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
                    "default": true
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean",
                    "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
                    "default": false
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "Hello-World",
                "description": "This is your first repository",
                "homepage": "https://github.com",
                "private": false,
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X POST \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/repos \\\n  -d '{\"name\":\"name\"}'"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('POST /user/repos', {\n  name: 'name'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.create_for_authenticated_user(\n  'name'\n)"
          }
        ]
      }
    },
    "/user/repository_invitations": {
      "get": {
        "summary": "List repository invitations for the authenticated user",
        "description": "When authenticating as a user, this endpoint will list all currently open repository invitations for that user.",
        "operationId": "repos/list-invitations-for-authenticated-user",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#list-repository-invitations-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository-invitation"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/repository-invitation-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/repository_invitations"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/repository_invitations')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.invitations_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/repository_invitations/{invitation_id}": {
      "patch": {
        "summary": "Accept a repository invitation",
        "description": "",
        "operationId": "repos/accept-invitation",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#accept-a-repository-invitation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/invitation_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PATCH \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/repository_invitations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PATCH /user/repository_invitations/{invitation_id}', {\n  invitation_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.accept_invitation(\n  42\n)"
          }
        ]
      },
      "delete": {
        "summary": "Decline a repository invitation",
        "description": "",
        "operationId": "repos/decline-invitation",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/invitations/#decline-a-repository-invitation"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/invitation_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/repository_invitations/42"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/repository_invitations/{invitation_id}', {\n  invitation_id: 42\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.decline_invitation(\n  42\n)"
          }
        ]
      }
    },
    "/user/starred": {
      "get": {
        "summary": "List repositories starred by the authenticated user",
        "description": "Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "activity/list-repos-starred-by-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository"
                  }
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/repository-items-default-response"
                  }
                }
              },
              "application/vnd.github.v3.star+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/starred-repository"
                  }
                },
                "examples": {
                  "alternative-response-with-star-creation-timestamps": {
                    "$ref": "#/components/examples/starred-repository-items-alternative-response-with-star-creation-timestamps"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/starred"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/starred')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_starred_by_authenticated_user()"
          }
        ]
      }
    },
    "/user/starred/{owner}/{repo}": {
      "get": {
        "summary": "Check if a repository is starred by the authenticated user",
        "description": "",
        "operationId": "activity/check-repo-is-starred-by-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if this repository is starred by you"
          },
          "404": {
            "description": "Response if this repository is not starred by you"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/check-starring-repo\" operation ID is now \"activity/check-repo-is-starred-by-authenticated-user\"",
            "before": {
              "operationId": "activity/check-starring-repo"
            },
            "after": {
              "operationId": "activity/check-repo-is-starred-by-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/starred/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/starred/{owner}/{repo}', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_repo_is_starred_by_authenticated_user(\n  'hello-world'\n)"
          }
        ]
      },
      "put": {
        "summary": "Star a repository for the authenticated user",
        "description": "Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://developer.github.com/v3/#http-verbs).\"",
        "operationId": "activity/star-repo-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/star-repo\" operation ID is now \"activity/star-repo-for-authenticated-user\"",
            "before": {
              "operationId": "activity/star-repo"
            },
            "after": {
              "operationId": "activity/star-repo-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X PUT \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/starred/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('PUT /user/starred/{owner}/{repo}', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.star_repo_for_authenticated_user(\n  'hello-world'\n)"
          }
        ]
      },
      "delete": {
        "summary": "Unstar a repository for the authenticated user",
        "description": "",
        "operationId": "activity/unstar-repo-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/owner"
          },
          {
            "$ref": "#/components/parameters/repo"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/unstar-repo\" operation ID is now \"activity/unstar-repo-for-authenticated-user\"",
            "before": {
              "operationId": "activity/unstar-repo"
            },
            "after": {
              "operationId": "activity/unstar-repo-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -X DELETE \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/starred/octocat/hello-world"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('DELETE /user/starred/{owner}/{repo}', {\n  owner: 'octocat',\n  repo: 'hello-world'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.unstar_repo_for_authenticated_user(\n  'hello-world'\n)"
          }
        ]
      }
    },
    "/user/subscriptions": {
      "get": {
        "summary": "List repositories watched by the authenticated user",
        "description": "Lists repositories the authenticated user is watching.",
        "operationId": "activity/list-watched-repos-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/subscriptions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/subscriptions')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.watched_repos_for_authenticated_user()"
          }
        ]
      }
    },
    "/user/teams": {
      "get": {
        "summary": "List teams for the authenticated user",
        "description": "List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://developer.github.com/apps/building-oauth-apps/).",
        "operationId": "teams/list-for-authenticated-user",
        "tags": [
          "teams"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/teams/#list-teams-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/team-full"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/team-full-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/user/teams"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/teams')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_authenticated_user()"
          }
        ]
      }
    },
    "/user/{migration_id}/repositories": {
      "get": {
        "summary": "List repositories for a user migration",
        "description": "Lists all the repositories for this user migration.",
        "operationId": "migrations/list-repos-for-user",
        "tags": [
          "migrations"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.wyandotte-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/migration_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "wyandotte",
              "note": "To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.wyandotte-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.wyandotte-preview+json\" \\\n  https://api.github.com/user/42/repositories"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /user/{migration_id}/repositories', {\n  migration_id: 42,\n  mediaType: {\n    previews: [\n      'wyandotte'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_for_for_user(\n  42\n)"
          }
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List users",
        "description": "Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.",
        "operationId": "users/list",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#list-users"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "name": "since",
            "description": "The integer ID of the last User that you've seen.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "example": "<https://api.github.com/users?since=135>; rel=\"next\"",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users')"
          },
          {
            "lang": "Ruby",
            "source": "octokit.list()"
          }
        ]
      }
    },
    "/users/{username}": {
      "get": {
        "summary": "Get a user",
        "description": "Provides publicly available information about someone with a GitHub account.\n\nGitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See \"[Identifying and authorizing users for GitHub Apps](https://developer.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)\" for details about authentication. For an example response, see \"[Response with GitHub plan information](https://developer.github.com/v3/users/#response-with-github-plan-information).\"\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://developer.github.com/v3/users/emails/)\".",
        "operationId": "users/get-by-username",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#get-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/public-user"
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/public-user-default-response"
                  },
                  "response-with-git-hub-plan-information": {
                    "$ref": "#/components/examples/public-user-response-with-git-hub-plan-information"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.get(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/events": {
      "get": {
        "summary": "List events for the authenticated user",
        "description": "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.",
        "operationId": "activity/list-events-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/list-events-for-user\" operation ID is now \"activity/list-events-for-authenticated-user\"",
            "before": {
              "operationId": "activity/list-events-for-user"
            },
            "after": {
              "operationId": "activity/list-events-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/events', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.events_for_authenticated_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/events/orgs/{org}": {
      "get": {
        "summary": "List organization events for the authenticated user",
        "description": "This is the user's organization dashboard. You must be authenticated as the user to view this.",
        "operationId": "activity/list-org-events-for-authenticated-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/org"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-25",
            "note": "\"activity/list-events-for-org\" operation ID is now \"activity/list-org-events-for-authenticated-user\"",
            "before": {
              "operationId": "activity/list-events-for-org"
            },
            "after": {
              "operationId": "activity/list-org-events-for-authenticated-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/events/orgs/ORG"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/events/orgs/{org}', {\n  username: 'username',\n  org: 'org'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.org_events_for_authenticated_user(\n  'username',\n  'org'\n)"
          }
        ]
      }
    },
    "/users/{username}/events/public": {
      "get": {
        "summary": "List public events for a user",
        "description": "",
        "operationId": "activity/list-public-events-for-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/events/public"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/events/public', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_events_for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/followers": {
      "get": {
        "summary": "List followers of a user",
        "description": "Lists the people following the specified user.",
        "operationId": "users/list-followers-for-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-followers-of-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/followers"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/followers', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.followers(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/following": {
      "get": {
        "summary": "List the people a user follows",
        "description": "Lists the people who the specified user follows.",
        "operationId": "users/list-following-for-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#list-the-people-a-user-follows"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/simple-user"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/simple-user-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/following"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/following', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.people_follows(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/following/{target_user}": {
      "get": {
        "summary": "Check if a user follows another user",
        "description": "",
        "operationId": "users/check-following-for-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/followers/#check-if-a-user-follows-another-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/target_user"
          }
        ],
        "responses": {
          "204": {
            "description": "Response if the user follows the target user"
          },
          "404": {
            "description": "Response if the user does not follow the target user"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/following/TARGET_USER"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/following/{target_user}', {\n  username: 'username',\n  target_user: 'target_user'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.check_follows_another(\n  'username',\n  'target_user'\n)"
          }
        ]
      }
    },
    "/users/{username}/gists": {
      "get": {
        "summary": "List gists for a user",
        "description": "Lists public gists for the specified user:",
        "operationId": "gists/list-for-user",
        "tags": [
          "gists"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/gists/#list-gists-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "name": "since",
            "description": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are returned.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/base-gist"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/base-gist-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2020-03-04",
            "note": "\"gists/list-public-for-user\" operation ID is now \"gists/list-for-user\"",
            "before": {
              "operationId": "gists/list-public-for-user"
            },
            "after": {
              "operationId": "gists/list-for-user"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/gists"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/gists', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/gpg_keys": {
      "get": {
        "summary": "List GPG keys for a user",
        "description": "Lists the GPG keys for a user. This information is accessible by anyone.",
        "operationId": "users/list-gpg-keys-for-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/gpg-key"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/gpg-key-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/gpg_keys"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/gpg_keys', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.gpg_keys(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/hovercard": {
      "get": {
        "summary": "Get contextual information for a user",
        "description": "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\nThe `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n\n```shell\n curl -u username:token\n  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n```",
        "operationId": "users/get-context-for-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/#get-contextual-information-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/subject_type"
          },
          {
            "$ref": "#/components/parameters/subject_id"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/hovercard"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/hovercard"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/hovercard"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/hovercard', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.context(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/installation": {
      "get": {
        "summary": "Get a user installation for the authenticated app",
        "description": "Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
        "operationId": "apps/get-user-installation",
        "tags": [
          "apps"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/apps/#get-a-user-installation-for-the-authenticated-app"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.machine-man-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/installation"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/installation-2"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "machine-man",
              "note": "To access the API with your GitHub App, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` Header for your requests.\n```shell\napplication/vnd.github.machine-man-preview+json\n```"
            }
          ]
        },
        "x-githubBreakingChanges": [
          {
            "type": "operation",
            "date": "2019-04-10",
            "note": "\"Find repository installation\" renamed to \"Get a repository installation\"",
            "before": {
              "operationId": "apps/find-user-installation"
            },
            "after": {
              "operationId": "apps/get-user-installation"
            }
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.machine-man-preview+json\" \\\n  https://api.github.com/users/USERNAME/installation"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/installation', {\n  username: 'username',\n  mediaType: {\n    previews: [\n      'machine-man'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.user_installation_for_authenticated(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/keys": {
      "get": {
        "summary": "List public keys for a user",
        "description": "Lists the _verified_ public SSH keys for a user. This is accessible by anyone.",
        "operationId": "users/list-public-keys-for-user",
        "tags": [
          "users"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/key-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/key-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/keys"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/keys', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_keys(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/orgs": {
      "get": {
        "summary": "List organizations for a user",
        "description": "List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://developer.github.com/v3/orgs/#list-organizations-for-the-authenticated-user) API instead.",
        "operationId": "orgs/list-for-user",
        "tags": [
          "orgs"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/orgs/#list-organizations-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/organization-simple"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/organization-simple-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/orgs"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/orgs', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/projects": {
      "get": {
        "summary": "List user projects",
        "description": "",
        "operationId": "projects/list-for-user",
        "tags": [
          "projects"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/projects/#list-user-projects"
        },
        "parameters": [
          {
            "name": "accept",
            "description": "This API is under preview and subject to change.",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.inertia-preview+json"
            },
            "required": true
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "name": "state",
            "description": "Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/project-items-3"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": true,
              "name": "inertia",
              "note": "The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.inertia-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.inertia-preview+json\" \\\n  https://api.github.com/users/USERNAME/projects"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/projects', {\n  username: 'username',\n  mediaType: {\n    previews: [\n      'inertia'\n    ]\n  }\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/received_events": {
      "get": {
        "summary": "List events received by the authenticated user",
        "description": "These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.",
        "operationId": "activity/list-received-events-for-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/received_events"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/received_events', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.events_received_by_authenticated_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/received_events/public": {
      "get": {
        "summary": "List public events received by a user",
        "description": "",
        "operationId": "activity/list-received-public-events-for-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/received_events/public"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/received_events/public', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.public_events_received_by_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/repos": {
      "get": {
        "summary": "List repositories for a user",
        "description": "Lists public repositories for the specified user.",
        "operationId": "repos/list-for-user",
        "tags": [
          "repos"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/repos/#list-repositories-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "name": "type",
            "description": "Can be one of `all`, `owner`, `member`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "member"
              ],
              "default": "owner"
            }
          },
          {
            "name": "sort",
            "description": "Can be one of `created`, `updated`, `pushed`, `full_name`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "full_name"
            }
          },
          {
            "name": "direction",
            "description": "Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "418": {
            "description": "Response definition missing"
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": [
            {
              "required": false,
              "name": "nebula",
              "note": "You can set the visibility of a repository using the new `visibility` parameter in the [Repositories API](https://developer.github.com/v3/repos/), and get a repository's visibility with a new response key. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes/).\n\nTo access repository visibility during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n```shell\napplication/vnd.github.nebula-preview+json\n```"
            }
          ]
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/repos"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/repos', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/starred": {
      "get": {
        "summary": "List repositories starred by a user",
        "description": "Lists repositories a user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://developer.github.com/v3/media/) via the `Accept` header:",
        "operationId": "activity/list-repos-starred-by-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/repository"
                  }
                },
                "examples": {
                  "default-response": {
                    "$ref": "#/components/examples/repository-items-default-response"
                  }
                }
              },
              "application/vnd.github.v3.star+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/starred-repository"
                  }
                },
                "examples": {
                  "alternative-response-with-star-creation-timestamps": {
                    "$ref": "#/components/examples/starred-repository-items-alternative-response-with-star-creation-timestamps"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/starred"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/starred', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_starred_by_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/settings/billing/actions": {
      "get": {
        "summary": "Get GitHub Actions billing for a user",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".\n\nAccess tokens must have the `user` scope.",
        "operationId": "billing/get-github-actions-billing-user",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/actions-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/actions-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/settings/billing/actions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/settings/billing/actions', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.actions_for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/settings/billing/packages": {
      "get": {
        "summary": "Get GitHub Packages billing for a user",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `user` scope.",
        "operationId": "billing/get-github-packages-billing-user",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/packages-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/packages-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/settings/billing/packages"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/settings/billing/packages', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.packages_for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/settings/billing/shared-storage": {
      "get": {
        "summary": "Get shared storage billing for a user",
        "description": "**Warning:** The Billing API is currently in public beta and subject to change.\n\nGets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see \"[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages).\"\n\nAccess tokens must have the `user` scope.",
        "operationId": "billing/get-shared-storage-billing-user",
        "tags": [
          "billing"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/combined-billing-usage"
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/combined-billing-usage"
                  }
                }
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": false,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/settings/billing/shared-storage"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/settings/billing/shared-storage', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.shared_storage_for_user(\n  'username'\n)"
          }
        ]
      }
    },
    "/users/{username}/subscriptions": {
      "get": {
        "summary": "List repositories watched by a user",
        "description": "Lists repositories a user is watching.",
        "operationId": "activity/list-repos-watched-by-user",
        "tags": [
          "activity"
        ],
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/accept"
          },
          {
            "$ref": "#/components/parameters/username"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/minimal-repository"
                  }
                },
                "examples": {
                  "default": {
                    "$ref": "#/components/examples/minimal-repository-items"
                  }
                }
              }
            },
            "headers": {
              "Link": {
                "$ref": "#/components/headers/Link"
              }
            }
          }
        },
        "x-github": {
          "enabledForApps": true,
          "githubCloudOnly": false,
          "previews": []
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "source": "curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/users/USERNAME/subscriptions"
          },
          {
            "lang": "JavaScript",
            "source": "await octokit.request('GET /users/{username}/subscriptions', {\n  username: 'username'\n})"
          },
          {
            "lang": "Ruby",
            "source": "octokit.repos_watched_by_user(\n  'username'\n)"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "installed_integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "slug": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              },
              "issues": {
                "type": "string"
              },
              "single_file": {
                "type": "string"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "installations_count": {
            "type": "number"
          }
        }
      },
      "integration-from-manifest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "external_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "webhook_secret": {
            "type": "string"
          },
          "pem": {
            "type": "string"
          }
        }
      },
      "base-installation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "account": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "access_tokens_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "app_id": {
            "type": "number"
          },
          "target_id": {
            "type": "number"
          },
          "target_type": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "checks": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "single_file_name": {
            "type": "string"
          },
          "repository_selection": {
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          }
        }
      },
      "installation-token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires_at": {
            "nullable": true,
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "issues": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              }
            }
          },
          "repository_selection": {
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "owner": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "private": {
                  "type": "boolean"
                },
                "html_url": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "fork": {
                  "type": "boolean"
                },
                "url": {
                  "type": "string"
                },
                "archive_url": {
                  "type": "string"
                },
                "assignees_url": {
                  "type": "string"
                },
                "blobs_url": {
                  "type": "string"
                },
                "branches_url": {
                  "type": "string"
                },
                "collaborators_url": {
                  "type": "string"
                },
                "comments_url": {
                  "type": "string"
                },
                "commits_url": {
                  "type": "string"
                },
                "compare_url": {
                  "type": "string"
                },
                "contents_url": {
                  "type": "string"
                },
                "contributors_url": {
                  "type": "string"
                },
                "deployments_url": {
                  "type": "string"
                },
                "downloads_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "forks_url": {
                  "type": "string"
                },
                "git_commits_url": {
                  "type": "string"
                },
                "git_refs_url": {
                  "type": "string"
                },
                "git_tags_url": {
                  "type": "string"
                },
                "git_url": {
                  "type": "string"
                },
                "issue_comment_url": {
                  "type": "string"
                },
                "issue_events_url": {
                  "type": "string"
                },
                "issues_url": {
                  "type": "string"
                },
                "keys_url": {
                  "type": "string"
                },
                "labels_url": {
                  "type": "string"
                },
                "languages_url": {
                  "type": "string"
                },
                "merges_url": {
                  "type": "string"
                },
                "milestones_url": {
                  "type": "string"
                },
                "notifications_url": {
                  "type": "string"
                },
                "pulls_url": {
                  "type": "string"
                },
                "releases_url": {
                  "type": "string"
                },
                "ssh_url": {
                  "type": "string"
                },
                "stargazers_url": {
                  "type": "string"
                },
                "statuses_url": {
                  "type": "string"
                },
                "subscribers_url": {
                  "type": "string"
                },
                "subscription_url": {
                  "type": "string"
                },
                "tags_url": {
                  "type": "string"
                },
                "teams_url": {
                  "type": "string"
                },
                "trees_url": {
                  "type": "string"
                },
                "clone_url": {
                  "type": "string"
                },
                "mirror_url": {
                  "type": "string"
                },
                "hooks_url": {
                  "type": "string"
                },
                "svn_url": {
                  "type": "string"
                },
                "homepage": {
                  "type": "string"
                },
                "language": {
                  "nullable": true,
                  "type": "string"
                },
                "forks_count": {
                  "type": "number"
                },
                "stargazers_count": {
                  "type": "number"
                },
                "watchers_count": {
                  "type": "number"
                },
                "size": {
                  "type": "number"
                },
                "default_branch": {
                  "type": "string"
                },
                "open_issues_count": {
                  "type": "number"
                },
                "is_template": {
                  "type": "boolean"
                },
                "topics": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "has_issues": {
                  "type": "boolean"
                },
                "has_projects": {
                  "type": "boolean"
                },
                "has_wiki": {
                  "type": "boolean"
                },
                "has_pages": {
                  "type": "boolean"
                },
                "has_downloads": {
                  "type": "boolean"
                },
                "archived": {
                  "type": "boolean"
                },
                "disabled": {
                  "type": "boolean"
                },
                "visibility": {
                  "type": "string"
                },
                "pushed_at": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "boolean"
                    },
                    "push": {
                      "type": "boolean"
                    },
                    "pull": {
                      "type": "boolean"
                    }
                  }
                },
                "allow_rebase_merge": {
                  "type": "boolean"
                },
                "template_repository": {
                  "nullable": true
                },
                "temp_clone_token": {
                  "type": "string"
                },
                "allow_squash_merge": {
                  "type": "boolean"
                },
                "delete_branch_on_merge": {
                  "type": "boolean"
                },
                "allow_merge_commit": {
                  "type": "boolean"
                },
                "subscribers_count": {
                  "type": "number"
                },
                "network_count": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "application-grant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "app": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "client_id": {
                "type": "string"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "authorization-with-user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          },
          "token_last_eight": {
            "type": "string"
          },
          "hashed_token": {
            "type": "string"
          },
          "app": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "client_id": {
                "type": "string"
              }
            }
          },
          "note": {
            "type": "string"
          },
          "note_url": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "slug": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              },
              "issues": {
                "type": "string"
              },
              "single_file": {
                "type": "string"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "authorization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "token": {
            "type": "string"
          },
          "token_last_eight": {
            "type": "string"
          },
          "hashed_token": {
            "type": "string"
          },
          "app": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "client_id": {
                "type": "string"
              }
            }
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "note_url": {
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "fingerprint": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "code-of-conduct-simple": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "code-of-conduct": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "content-reference-attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "actions-billing-usage": {
        "type": "object",
        "properties": {
          "total_minutes_used": {
            "type": "number",
            "description": "The sum of the free and paid GitHub Actions minutes used."
          },
          "total_paid_minutes_used": {
            "type": "number",
            "description": "The total paid GitHub Actions minutes used."
          },
          "included_minutes": {
            "type": "number",
            "description": "The amount of free GitHub Actions minutes available."
          },
          "minutes_used_breakdown": {
            "type": "object",
            "properties": {
              "UBUNTU": {
                "type": "number",
                "description": "Total minutes used on Ubuntu runner machines."
              },
              "MACOS": {
                "type": "number",
                "description": "Total minutes used on macOS runner machines."
              },
              "WINDOWS": {
                "type": "number",
                "description": "Total minutes used on Windows runner machines."
              }
            }
          }
        }
      },
      "packages-billing-usage": {
        "type": "object",
        "properties": {
          "total_gigabytes_bandwidth_used": {
            "type": "number",
            "description": "Sum of the free and paid storage space (GB) for GitHuub Packages."
          },
          "total_paid_gigabytes_bandwidth_used": {
            "type": "number",
            "description": "Total paid storage space (GB) for GitHuub Packages."
          },
          "included_gigabytes_bandwidth": {
            "type": "number",
            "description": "Free storage space (GB) for GitHub Packages."
          }
        }
      },
      "combined-billing-usage": {
        "type": "object",
        "properties": {
          "days_left_in_billing_cycle": {
            "type": "number",
            "description": "Numbers of days left in billing cycle."
          },
          "estimated_paid_storage_for_month": {
            "type": "number",
            "description": "Estimated storage space (GB) used in billing cycle."
          },
          "estimated_storage_for_month": {
            "type": "number",
            "description": "Estimated sum of free and paid storage space (GB) used in billing cycle."
          }
        }
      },
      "feed": {
        "type": "object",
        "properties": {
          "timeline_url": {
            "type": "string"
          },
          "user_url": {
            "type": "string"
          },
          "current_user_public_url": {
            "type": "string"
          },
          "current_user_url": {
            "type": "string"
          },
          "current_user_actor_url": {
            "type": "string"
          },
          "current_user_organization_url": {
            "type": "string"
          },
          "current_user_organization_urls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "security_advisories_url": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "timeline": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "user": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "current_user_public": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "current_user": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "current_user_actor": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "current_user_organization": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "current_user_organizations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "href": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              },
              "security_advisories": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "base-gist": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "git_pull_url": {
            "type": "string"
          },
          "git_push_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "files": {
            "type": "object",
            "additionalProperties": {
              "nullable": true,
              "type": "object",
              "properties": {
                "filename": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "raw_url": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                }
              }
            }
          },
          "public": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "user": {
            "nullable": true,
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "truncated": {
            "type": "boolean"
          }
        }
      },
      "gist": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "git_pull_url": {
            "type": "string"
          },
          "git_push_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "files": {
            "type": "object",
            "additionalProperties": {
              "nullable": true,
              "type": "object",
              "properties": {
                "filename": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "language": {
                  "type": "string"
                },
                "raw_url": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "truncated": {
                  "type": "boolean"
                },
                "content": {
                  "type": "string"
                }
              }
            }
          },
          "public": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "user": {
            "nullable": true,
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "truncated": {
            "type": "boolean"
          },
          "forks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "url": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                }
              }
            }
          },
          "history": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "change_status": {
                  "type": "object",
                  "properties": {
                    "deletions": {
                      "type": "number"
                    },
                    "additions": {
                      "type": "number"
                    },
                    "total": {
                      "type": "number"
                    }
                  }
                },
                "committed_at": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "gist-comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "gist-commit": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "change_status": {
            "type": "object",
            "properties": {
              "deletions": {
                "type": "number"
              },
              "additions": {
                "type": "number"
              },
              "total": {
                "type": "number"
              }
            }
          },
          "committed_at": {
            "type": "string"
          }
        }
      },
      "gist-fork": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "gitignore-template": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "repository-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "number"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "allow_rebase_merge": {
            "type": "boolean"
          },
          "template_repository": {
            "nullable": true
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "type": "boolean"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "allow_merge_commit": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "number"
          },
          "network_count": {
            "type": "number"
          }
        }
      },
      "issue-with-repo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "diff_url": {
                "type": "string"
              },
              "patch_url": {
                "type": "string"
              }
            }
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          }
        }
      },
      "license-simple": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "spdx_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          }
        }
      },
      "license": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "spdx_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "implementation": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limitations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "body": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          }
        }
      },
      "marketplace-purchase": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "login": {
            "type": "string"
          },
          "email": {
            "nullable": true,
            "type": "string"
          },
          "organization_billing_email": {
            "type": "string"
          },
          "marketplace_pending_change": {
            "type": "object",
            "properties": {
              "effective_date": {
                "type": "string"
              },
              "unit_count": {
                "type": "integer",
                "nullable": true
              },
              "id": {
                "type": "number"
              },
              "plan": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "accounts_url": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "number": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "monthly_price_in_cents": {
                    "type": "number"
                  },
                  "yearly_price_in_cents": {
                    "type": "number"
                  },
                  "price_model": {
                    "type": "string"
                  },
                  "has_free_trial": {
                    "type": "boolean"
                  },
                  "state": {
                    "type": "string"
                  },
                  "unit_name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "bullets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "marketplace_purchase": {
            "type": "object",
            "properties": {
              "billing_cycle": {
                "type": "string"
              },
              "next_billing_date": {
                "type": "string"
              },
              "unit_count": {
                "type": "integer",
                "nullable": true
              },
              "on_free_trial": {
                "type": "boolean"
              },
              "free_trial_ends_on": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "plan": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "accounts_url": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "number": {
                    "type": "number"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "monthly_price_in_cents": {
                    "type": "number"
                  },
                  "yearly_price_in_cents": {
                    "type": "number"
                  },
                  "price_model": {
                    "type": "string"
                  },
                  "has_free_trial": {
                    "type": "boolean"
                  },
                  "unit_name": {
                    "nullable": true,
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "bullets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "marketplace-listing-plan": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "accounts_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "number": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "monthly_price_in_cents": {
            "type": "number"
          },
          "yearly_price_in_cents": {
            "type": "number"
          },
          "price_model": {
            "type": "string"
          },
          "has_free_trial": {
            "type": "boolean"
          },
          "unit_name": {
            "nullable": true,
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "bullets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "api-overview": {
        "type": "object",
        "properties": {
          "verifiable_password_authentication": {
            "type": "boolean"
          },
          "ssh_key_fingerprints": {
            "type": "object",
            "properties": {
              "MD5_RSA": {
                "type": "string"
              },
              "MD5_DSA": {
                "type": "string"
              },
              "SHA256_RSA": {
                "type": "string"
              },
              "SHA256_DSA": {
                "type": "string"
              }
            }
          },
          "hooks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "web": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "api": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "git": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "importer": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "thread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              }
            }
          },
          "subject": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "latest_comment_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "unread": {
            "type": "boolean"
          },
          "updated_at": {
            "type": "string"
          },
          "last_read_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "thread-subscription": {
        "type": "object",
        "properties": {
          "subscribed": {
            "type": "boolean"
          },
          "ignored": {
            "type": "boolean"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "thread_url": {
            "type": "string"
          }
        }
      },
      "organization-simple": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "public_members_url": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "organization-full": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "public_members_url": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "blog": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "twitter_username": {
            "type": "string"
          },
          "is_verified": {
            "type": "boolean"
          },
          "has_organization_projects": {
            "type": "boolean"
          },
          "has_repository_projects": {
            "type": "boolean"
          },
          "public_repos": {
            "type": "number"
          },
          "public_gists": {
            "type": "number"
          },
          "followers": {
            "type": "number"
          },
          "following": {
            "type": "number"
          },
          "html_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "total_private_repos": {
            "type": "number"
          },
          "owned_private_repos": {
            "type": "number"
          },
          "private_gists": {
            "type": "number"
          },
          "disk_usage": {
            "type": "number"
          },
          "collaborators": {
            "type": "number"
          },
          "billing_email": {
            "type": "string"
          },
          "plan": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "space": {
                "type": "number"
              },
              "private_repos": {
                "type": "number"
              },
              "seats": {
                "type": "number"
              },
              "filled_seats": {
                "type": "number"
              }
            }
          },
          "default_repository_permission": {
            "type": "string"
          },
          "members_can_create_repositories": {
            "type": "boolean"
          },
          "two_factor_requirement_enabled": {
            "type": "boolean"
          },
          "members_allowed_repository_creation_type": {
            "type": "string"
          },
          "members_can_create_public_repositories": {
            "type": "boolean"
          },
          "members_can_create_private_repositories": {
            "type": "boolean"
          },
          "members_can_create_internal_repositories": {
            "type": "boolean"
          }
        }
      },
      "runner-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "busy": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "os",
          "status",
          "busy"
        ]
      },
      "runner-application": {
        "type": "object",
        "properties": {
          "os": {
            "type": "string"
          },
          "architecture": {
            "type": "string"
          },
          "download_url": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        }
      },
      "authentication-token": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires_at": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "runner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "busy": {
            "type": "boolean"
          }
        }
      },
      "organization-actions-secret-2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "selected_repositories_url": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at",
          "visibility"
        ]
      },
      "actions-public-key": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "organization-actions-secret": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "selected_repositories_url": {
            "type": "string"
          }
        }
      },
      "public-repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          }
        }
      },
      "simple-user": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "site_admin": {
            "type": "boolean"
          }
        }
      },
      "credential-authorization": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "credential_id": {
            "type": "string"
          },
          "credential_type": {
            "type": "string"
          },
          "token_last_eight": {
            "type": "string"
          },
          "credential_authorized_at": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "org-hook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "ping_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean"
          },
          "config": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "content_type": {
                "type": "string"
              }
            }
          },
          "updated_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "installation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "account": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "repository_selection": {
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "access_tokens_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "app_id": {
            "type": "number"
          },
          "target_id": {
            "type": "number"
          },
          "target_type": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "checks": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "single_file_name": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "installation-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "account": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "repository_selection": {
            "type": "string",
            "enum": [
              "all",
              "selected"
            ]
          },
          "access_tokens_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "app_id": {
            "type": "number"
          },
          "target_id": {
            "type": "number"
          },
          "target_type": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "deployments": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "pull_requests": {
                "type": "string"
              },
              "statuses": {
                "type": "string"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "single_file_name": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "interaction-limit": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "expires_at": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "organization-invitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "login": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "inviter": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "team_count": {
            "type": "number"
          },
          "invitation_team_url": {
            "type": "string"
          }
        }
      },
      "team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "privacy": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "parent": {
            "nullable": true
          }
        }
      },
      "org-membership": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "organization_url": {
            "type": "string"
          },
          "organization": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "migration-with-short-org": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          },
          "guid": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "lock_repositories": {
            "type": "boolean"
          },
          "exclude_attachments": {
            "type": "boolean"
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "owner": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "private": {
                  "type": "boolean"
                },
                "html_url": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "fork": {
                  "type": "boolean"
                },
                "url": {
                  "type": "string"
                },
                "archive_url": {
                  "type": "string"
                },
                "assignees_url": {
                  "type": "string"
                },
                "blobs_url": {
                  "type": "string"
                },
                "branches_url": {
                  "type": "string"
                },
                "collaborators_url": {
                  "type": "string"
                },
                "comments_url": {
                  "type": "string"
                },
                "commits_url": {
                  "type": "string"
                },
                "compare_url": {
                  "type": "string"
                },
                "contents_url": {
                  "type": "string"
                },
                "contributors_url": {
                  "type": "string"
                },
                "deployments_url": {
                  "type": "string"
                },
                "downloads_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "forks_url": {
                  "type": "string"
                },
                "git_commits_url": {
                  "type": "string"
                },
                "git_refs_url": {
                  "type": "string"
                },
                "git_tags_url": {
                  "type": "string"
                },
                "git_url": {
                  "type": "string"
                },
                "issue_comment_url": {
                  "type": "string"
                },
                "issue_events_url": {
                  "type": "string"
                },
                "issues_url": {
                  "type": "string"
                },
                "keys_url": {
                  "type": "string"
                },
                "labels_url": {
                  "type": "string"
                },
                "languages_url": {
                  "type": "string"
                },
                "merges_url": {
                  "type": "string"
                },
                "milestones_url": {
                  "type": "string"
                },
                "notifications_url": {
                  "type": "string"
                },
                "pulls_url": {
                  "type": "string"
                },
                "releases_url": {
                  "type": "string"
                },
                "ssh_url": {
                  "type": "string"
                },
                "stargazers_url": {
                  "type": "string"
                },
                "statuses_url": {
                  "type": "string"
                },
                "subscribers_url": {
                  "type": "string"
                },
                "subscription_url": {
                  "type": "string"
                },
                "tags_url": {
                  "type": "string"
                },
                "teams_url": {
                  "type": "string"
                },
                "trees_url": {
                  "type": "string"
                },
                "clone_url": {
                  "type": "string"
                },
                "mirror_url": {
                  "type": "string"
                },
                "hooks_url": {
                  "type": "string"
                },
                "svn_url": {
                  "type": "string"
                },
                "homepage": {
                  "type": "string"
                },
                "language": {
                  "nullable": true,
                  "type": "string"
                },
                "forks_count": {
                  "type": "number"
                },
                "stargazers_count": {
                  "type": "number"
                },
                "watchers_count": {
                  "type": "number"
                },
                "size": {
                  "type": "number"
                },
                "default_branch": {
                  "type": "string"
                },
                "open_issues_count": {
                  "type": "number"
                },
                "is_template": {
                  "type": "boolean"
                },
                "topics": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "has_issues": {
                  "type": "boolean"
                },
                "has_projects": {
                  "type": "boolean"
                },
                "has_wiki": {
                  "type": "boolean"
                },
                "has_pages": {
                  "type": "boolean"
                },
                "has_downloads": {
                  "type": "boolean"
                },
                "archived": {
                  "type": "boolean"
                },
                "disabled": {
                  "type": "boolean"
                },
                "visibility": {
                  "type": "string"
                },
                "pushed_at": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "boolean"
                    },
                    "push": {
                      "type": "boolean"
                    },
                    "pull": {
                      "type": "boolean"
                    }
                  }
                },
                "allow_rebase_merge": {
                  "type": "boolean"
                },
                "template_repository": {
                  "nullable": true
                },
                "temp_clone_token": {
                  "type": "string"
                },
                "allow_squash_merge": {
                  "type": "boolean"
                },
                "delete_branch_on_merge": {
                  "type": "boolean"
                },
                "allow_merge_commit": {
                  "type": "boolean"
                },
                "subscribers_count": {
                  "type": "number"
                },
                "network_count": {
                  "type": "number"
                }
              }
            }
          },
          "url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "minimal-repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "number"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              }
            }
          },
          "template_repository": {
            "nullable": true
          },
          "temp_clone_token": {
            "type": "string"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "number"
          },
          "network_count": {
            "type": "number"
          },
          "license": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "spdx_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              }
            }
          }
        }
      },
      "project": {
        "type": "object",
        "properties": {
          "owner_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "columns_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "number"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              }
            }
          },
          "allow_rebase_merge": {
            "type": "boolean"
          },
          "template_repository": {
            "nullable": true
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "type": "boolean"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "allow_merge_commit": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "number"
          },
          "network_count": {
            "type": "number"
          }
        }
      },
      "group-mapping-3": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "group_id": {
                  "type": "string"
                },
                "group_name": {
                  "type": "string"
                },
                "group_description": {
                  "type": "string"
                }
              },
              "required": [
                "group_id",
                "group_name",
                "group_description"
              ]
            }
          }
        }
      },
      "team-full": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "privacy": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "parent": {
            "nullable": true
          },
          "members_count": {
            "type": "number"
          },
          "repos_count": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "organization": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "company": {
                "type": "string"
              },
              "blog": {
                "type": "string"
              },
              "location": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "twitter_username": {
                "type": "string"
              },
              "is_verified": {
                "type": "boolean"
              },
              "has_organization_projects": {
                "type": "boolean"
              },
              "has_repository_projects": {
                "type": "boolean"
              },
              "public_repos": {
                "type": "number"
              },
              "public_gists": {
                "type": "number"
              },
              "followers": {
                "type": "number"
              },
              "following": {
                "type": "number"
              },
              "html_url": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        }
      },
      "team-discussion": {
        "type": "object",
        "properties": {
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "body_html": {
            "type": "string"
          },
          "body_version": {
            "type": "string"
          },
          "comments_count": {
            "type": "number"
          },
          "comments_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "last_edited_at": {
            "nullable": true,
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "pinned": {
            "type": "boolean"
          },
          "private": {
            "type": "boolean"
          },
          "team_url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "reactions": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "total_count": {
                "type": "number"
              },
              "+1": {
                "type": "number"
              },
              "-1": {
                "type": "number"
              },
              "laugh": {
                "type": "number"
              },
              "confused": {
                "type": "number"
              },
              "heart": {
                "type": "number"
              },
              "hooray": {
                "type": "number"
              }
            }
          }
        }
      },
      "team-discussion-comment": {
        "type": "object",
        "properties": {
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "body_html": {
            "type": "string"
          },
          "body_version": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "last_edited_at": {
            "nullable": true,
            "type": "string"
          },
          "discussion_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "updated_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "reactions": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "total_count": {
                "type": "number"
              },
              "+1": {
                "type": "number"
              },
              "-1": {
                "type": "number"
              },
              "laugh": {
                "type": "number"
              },
              "confused": {
                "type": "number"
              },
              "heart": {
                "type": "number"
              },
              "hooray": {
                "type": "number"
              }
            }
          }
        }
      },
      "reaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "team-membership": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "team-project": {
        "type": "object",
        "properties": {
          "owner_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "columns_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "organization_permission": {
            "type": "string"
          },
          "private": {
            "type": "boolean"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "read": {
                "type": "boolean"
              },
              "write": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "team-repository": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          },
          "source": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "group-mapping": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "object",
            "properties": {
              "group_id": {
                "type": "string"
              },
              "group_name": {
                "type": "string"
              },
              "group_description": {
                "type": "string"
              }
            }
          }
        }
      },
      "team-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "privacy": {
            "type": "string"
          },
          "permission": {
            "type": "string"
          },
          "members_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "slug": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "privacy": {
                "type": "string"
              },
              "permission": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "repositories_url": {
                "type": "string"
              }
            }
          }
        }
      },
      "project-card": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "column_url": {
            "type": "string"
          },
          "content_url": {
            "type": "string"
          },
          "project_url": {
            "type": "string"
          }
        }
      },
      "project-column": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "project_url": {
            "type": "string"
          },
          "cards_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "repository-collaborator-permission": {
        "type": "object",
        "properties": {
          "permission": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "rate-limit-overview": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "object",
            "properties": {
              "core": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number"
                  },
                  "remaining": {
                    "type": "number"
                  },
                  "reset": {
                    "type": "number"
                  }
                }
              },
              "search": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number"
                  },
                  "remaining": {
                    "type": "number"
                  },
                  "reset": {
                    "type": "number"
                  }
                }
              },
              "graphql": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number"
                  },
                  "remaining": {
                    "type": "number"
                  },
                  "reset": {
                    "type": "number"
                  }
                }
              },
              "integration_manifest": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "number"
                  },
                  "remaining": {
                    "type": "number"
                  },
                  "reset": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "rate": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "number"
              },
              "remaining": {
                "type": "number"
              },
              "reset": {
                "type": "number"
              }
            },
            "deprecated": true
          }
        }
      },
      "full-repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "nullable": true,
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "nullable": true,
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "nullable": true,
            "type": "string"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "number"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            }
          },
          "allow_rebase_merge": {
            "type": "boolean"
          },
          "template_repository": {
            "nullable": true,
            "type": "string"
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "type": "boolean"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "allow_merge_commit": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "number"
          },
          "network_count": {
            "type": "number"
          },
          "license": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "spdx_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              }
            }
          },
          "organization": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          },
          "source": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          },
          "code_of_conduct": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              }
            }
          }
        }
      },
      "full-repository-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "number"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "triage": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "maintain": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            }
          },
          "allow_rebase_merge": {
            "type": "boolean"
          },
          "template_repository": {
            "nullable": true
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "type": "boolean"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "allow_merge_commit": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "number"
          },
          "network_count": {
            "type": "number"
          },
          "organization": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          },
          "source": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          }
        }
      },
      "artifact-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size_in_bytes": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "archive_download_url": {
            "type": "string"
          },
          "expired": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "node_id",
          "name",
          "size_in_bytes",
          "url",
          "archive_download_url",
          "expired",
          "created_at",
          "expires_at"
        ]
      },
      "artifact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size_in_bytes": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "archive_download_url": {
            "type": "string"
          },
          "expired": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "expires_at": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "job": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "run_id": {
            "type": "number"
          },
          "run_url": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "conclusion": {
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "completed_at": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "conclusion": {
                  "type": "string"
                },
                "number": {
                  "type": "number"
                },
                "started_at": {
                  "type": "string"
                },
                "completed_at": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "status",
                "conclusion",
                "number",
                "started_at",
                "completed_at"
              ]
            }
          },
          "check_run_url": {
            "type": "string"
          }
        }
      },
      "workflow-run": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "head_branch": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "run_number": {
            "type": "number"
          },
          "event": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "conclusion": {
            "nullable": true,
            "type": "string"
          },
          "workflow_id": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "pull_requests": {
            "type": "array",
            "items": {}
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "jobs_url": {
            "type": "string"
          },
          "logs_url": {
            "type": "string"
          },
          "check_suite_url": {
            "type": "string"
          },
          "artifacts_url": {
            "type": "string"
          },
          "cancel_url": {
            "type": "string"
          },
          "rerun_url": {
            "type": "string"
          },
          "workflow_url": {
            "type": "string"
          },
          "head_commit": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tree_id": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "timestamp": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "nullable": true,
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              }
            }
          },
          "head_repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "private": {
                "type": "boolean"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "nullable": true,
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              }
            }
          }
        }
      },
      "workflow-run-usage": {
        "type": "object",
        "properties": {
          "billable": {
            "type": "object",
            "properties": {
              "UBUNTU": {
                "type": "object",
                "properties": {
                  "total_ms": {
                    "type": "number"
                  },
                  "jobs": {
                    "type": "number"
                  }
                }
              },
              "MACOS": {
                "type": "object",
                "properties": {
                  "total_ms": {
                    "type": "number"
                  },
                  "jobs": {
                    "type": "number"
                  }
                }
              },
              "WINDOWS": {
                "type": "object",
                "properties": {
                  "total_ms": {
                    "type": "number"
                  },
                  "jobs": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "run_duration_ms": {
            "type": "number"
          }
        }
      },
      "actions-secret-2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "actions-secret": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "workflow-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "badge_url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "node_id",
          "name",
          "path",
          "state",
          "created_at",
          "updated_at",
          "url",
          "html_url",
          "badge_url"
        ]
      },
      "workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "badge_url": {
            "type": "string"
          }
        }
      },
      "workflow-usage": {
        "type": "object",
        "properties": {
          "billable": {
            "type": "object",
            "properties": {
              "UBUNTU": {
                "type": "object",
                "properties": {
                  "total_ms": {
                    "type": "number"
                  }
                }
              },
              "MACOS": {
                "type": "object",
                "properties": {
                  "total_ms": {
                    "type": "number"
                  }
                }
              },
              "WINDOWS": {
                "type": "object",
                "properties": {
                  "total_ms": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      },
      "short-branch-with-protection": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "protected": {
            "type": "boolean"
          },
          "protection": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "required_status_checks": {
                "type": "object",
                "properties": {
                  "enforcement_level": {
                    "type": "string"
                  },
                  "contexts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "protection_url": {
            "type": "string"
          }
        }
      },
      "branch-with-protection": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "commit": {
                "type": "object",
                "properties": {
                  "author": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  },
                  "url": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "tree": {
                    "type": "object",
                    "properties": {
                      "sha": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    }
                  },
                  "committer": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  },
                  "verification": {
                    "type": "object",
                    "properties": {
                      "verified": {
                        "type": "boolean"
                      },
                      "reason": {
                        "nullable": true,
                        "type": "string"
                      },
                      "signature": {
                        "nullable": true,
                        "type": "string"
                      },
                      "payload": {
                        "nullable": true,
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "author": {
                "type": "object",
                "properties": {
                  "gravatar_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "login": {
                    "type": "string"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "sha": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "sha",
                    "url"
                  ]
                }
              },
              "url": {
                "type": "string"
              },
              "committer": {
                "type": "object",
                "properties": {
                  "gravatar_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "login": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "html": {
                "type": "string"
              },
              "self": {
                "type": "string"
              }
            }
          },
          "protected": {
            "type": "boolean"
          },
          "protection": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "required_status_checks": {
                "type": "object",
                "properties": {
                  "enforcement_level": {
                    "type": "string"
                  },
                  "contexts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "protection_url": {
            "type": "string"
          }
        }
      },
      "branch-protection": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "required_status_checks": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "strict": {
                "type": "boolean"
              },
              "contexts": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "contexts_url": {
                "type": "string"
              }
            }
          },
          "enforce_admins": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "required_pull_request_reviews": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "dismissal_restrictions": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "users_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "login": {
                          "type": "string"
                        },
                        "id": {
                          "type": "number"
                        },
                        "node_id": {
                          "type": "string"
                        },
                        "avatar_url": {
                          "type": "string"
                        },
                        "gravatar_id": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "html_url": {
                          "type": "string"
                        },
                        "followers_url": {
                          "type": "string"
                        },
                        "following_url": {
                          "type": "string"
                        },
                        "gists_url": {
                          "type": "string"
                        },
                        "starred_url": {
                          "type": "string"
                        },
                        "subscriptions_url": {
                          "type": "string"
                        },
                        "organizations_url": {
                          "type": "string"
                        },
                        "repos_url": {
                          "type": "string"
                        },
                        "events_url": {
                          "type": "string"
                        },
                        "received_events_url": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "site_admin": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "teams": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "node_id": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "html_url": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "privacy": {
                          "type": "string"
                        },
                        "permission": {
                          "type": "string"
                        },
                        "members_url": {
                          "type": "string"
                        },
                        "repositories_url": {
                          "type": "string"
                        },
                        "parent": {
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              },
              "dismiss_stale_reviews": {
                "type": "boolean"
              },
              "require_code_owner_reviews": {
                "type": "boolean"
              },
              "required_approving_review_count": {
                "type": "number"
              }
            }
          },
          "restrictions": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "users_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "apps_url": {
                "type": "string"
              },
              "users": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "teams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "privacy": {
                      "type": "string"
                    },
                    "permission": {
                      "type": "string"
                    },
                    "members_url": {
                      "type": "string"
                    },
                    "repositories_url": {
                      "type": "string"
                    },
                    "parent": {
                      "nullable": true
                    }
                  }
                }
              },
              "apps": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "owner": {
                      "type": "object",
                      "properties": {
                        "login": {
                          "type": "string"
                        },
                        "id": {
                          "type": "number"
                        },
                        "node_id": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "repos_url": {
                          "type": "string"
                        },
                        "events_url": {
                          "type": "string"
                        },
                        "hooks_url": {
                          "type": "string"
                        },
                        "issues_url": {
                          "type": "string"
                        },
                        "members_url": {
                          "type": "string"
                        },
                        "public_members_url": {
                          "type": "string"
                        },
                        "avatar_url": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "external_url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string"
                    },
                    "updated_at": {
                      "type": "string"
                    },
                    "permissions": {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "string"
                        },
                        "contents": {
                          "type": "string"
                        },
                        "issues": {
                          "type": "string"
                        },
                        "single_file": {
                          "type": "string"
                        }
                      }
                    },
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "required_linear_history": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "allow_force_pushes": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "allow_deletions": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "protected-branch-admin-enforced": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "protected-branch-pull-request-review": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "dismissal_restrictions": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "users_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "users": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "teams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "privacy": {
                      "type": "string"
                    },
                    "permission": {
                      "type": "string"
                    },
                    "members_url": {
                      "type": "string"
                    },
                    "repositories_url": {
                      "type": "string"
                    },
                    "parent": {
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "dismiss_stale_reviews": {
            "type": "boolean"
          },
          "require_code_owner_reviews": {
            "type": "boolean"
          },
          "required_approving_review_count": {
            "type": "number"
          }
        }
      },
      "status-check-policy": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "strict": {
            "type": "boolean"
          },
          "contexts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contexts_url": {
            "type": "string"
          }
        }
      },
      "branch-restriction-policy": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "users_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "apps_url": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "privacy": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                },
                "members_url": {
                  "type": "string"
                },
                "repositories_url": {
                  "type": "string"
                },
                "parent": {
                  "nullable": true
                }
              }
            }
          },
          "apps": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "slug": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "owner": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "hooks_url": {
                      "type": "string"
                    },
                    "issues_url": {
                      "type": "string"
                    },
                    "members_url": {
                      "type": "string"
                    },
                    "public_members_url": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "external_url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "string"
                    },
                    "contents": {
                      "type": "string"
                    },
                    "issues": {
                      "type": "string"
                    },
                    "single_file": {
                      "type": "string"
                    }
                  }
                },
                "events": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "check-run": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "head_sha": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "details_url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "conclusion": {
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "completed_at": {
            "nullable": true,
            "type": "string"
          },
          "output": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "summary": {
                "type": "string"
              },
              "annotations_url": {
                "type": "string"
              },
              "annotations_count": {
                "type": "number"
              },
              "text": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "check_suite": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              }
            }
          },
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "slug": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "members_url": {
                    "type": "string"
                  },
                  "public_members_url": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "external_url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "string"
                  },
                  "contents": {
                    "type": "string"
                  },
                  "issues": {
                    "type": "string"
                  },
                  "single_file": {
                    "type": "string"
                  }
                }
              },
              "events": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "pull_requests": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "number": {
                  "type": "number"
                },
                "head": {
                  "type": "object",
                  "properties": {
                    "ref": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    },
                    "repo": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "base": {
                  "type": "object",
                  "properties": {
                    "ref": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    },
                    "repo": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "check-run-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "head_sha": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "details_url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "conclusion": {
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "type": "string"
          },
          "completed_at": {
            "nullable": true,
            "type": "string"
          },
          "output": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "summary": {
                "type": "string"
              },
              "text": {
                "type": "string"
              },
              "annotations_count": {
                "type": "number"
              },
              "annotations_url": {
                "type": "string"
              }
            }
          },
          "name": {
            "type": "string"
          },
          "check_suite": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              }
            }
          },
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "slug": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "members_url": {
                    "type": "string"
                  },
                  "public_members_url": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "external_url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "string"
                  },
                  "contents": {
                    "type": "string"
                  },
                  "issues": {
                    "type": "string"
                  },
                  "single_file": {
                    "type": "string"
                  }
                }
              },
              "events": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "pull_requests": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "number": {
                  "type": "number"
                },
                "head": {
                  "type": "object",
                  "properties": {
                    "ref": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    },
                    "repo": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "base": {
                  "type": "object",
                  "properties": {
                    "ref": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    },
                    "repo": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "url": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "check-annotation": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "start_line": {
            "type": "number"
          },
          "end_line": {
            "type": "number"
          },
          "start_column": {
            "type": "number"
          },
          "end_column": {
            "type": "number"
          },
          "annotation_level": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "raw_details": {
            "type": "string"
          }
        }
      },
      "check-suite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "head_branch": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "conclusion": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "before": {
            "type": "string"
          },
          "after": {
            "type": "string"
          },
          "pull_requests": {
            "type": "array",
            "items": {}
          },
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "slug": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "members_url": {
                    "type": "string"
                  },
                  "public_members_url": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "external_url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "string"
                  },
                  "contents": {
                    "type": "string"
                  },
                  "issues": {
                    "type": "string"
                  },
                  "single_file": {
                    "type": "string"
                  }
                }
              },
              "events": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          }
        }
      },
      "check-suite-preference": {
        "type": "object",
        "properties": {
          "preferences": {
            "type": "object",
            "properties": {
              "auto_trigger_checks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "app_id": {
                      "type": "number"
                    },
                    "setting": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "app_id",
                    "setting"
                  ]
                }
              }
            }
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          }
        }
      },
      "code-scanning-alert": {
        "type": "object",
        "properties": {
          "rule_id": {
            "type": "string"
          },
          "rule_severity": {
            "type": "string"
          },
          "rule_description": {
            "type": "string"
          },
          "tool": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "open": {
            "type": "boolean"
          },
          "closed_by": {
            "nullable": true,
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          }
        }
      },
      "collaborator": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "site_admin": {
            "type": "boolean"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "pull": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "repository-invitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              }
            }
          },
          "invitee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "inviter": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "permissions": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          }
        }
      },
      "commit-comment": {
        "type": "object",
        "properties": {
          "html_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "line": {
            "type": "number"
          },
          "commit_id": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "simple-commit": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "comment_count": {
                "type": "number"
              },
              "verification": {
                "type": "object",
                "properties": {
                  "verified": {
                    "type": "boolean"
                  },
                  "reason": {
                    "nullable": true,
                    "type": "string"
                  },
                  "signature": {
                    "nullable": true,
                    "type": "string"
                  },
                  "payload": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "committer": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "branch-short": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "protected": {
            "type": "boolean"
          }
        }
      },
      "pull-request-simple": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "issue_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "review_comments_url": {
            "type": "string"
          },
          "review_comment_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "active_lock_reason": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "merged_at": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              },
              "required": [
                "login",
                "id",
                "node_id",
                "avatar_url",
                "gravatar_id",
                "url",
                "html_url",
                "followers_url",
                "following_url",
                "gists_url",
                "starred_url",
                "subscriptions_url",
                "organizations_url",
                "repos_url",
                "events_url",
                "received_events_url",
                "type",
                "site_admin"
              ]
            }
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "privacy": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                },
                "members_url": {
                  "type": "string"
                },
                "repositories_url": {
                  "type": "string"
                },
                "parent": {
                  "nullable": true
                }
              }
            }
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "string"
                  },
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string"
                  },
                  "deployments_url": {
                    "type": "string"
                  },
                  "downloads_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "forks_url": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string"
                  },
                  "merges_url": {
                    "type": "string"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string"
                  },
                  "subscription_url": {
                    "type": "string"
                  },
                  "tags_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "svn_url": {
                    "type": "string"
                  },
                  "homepage": {
                    "type": "string"
                  },
                  "language": {
                    "nullable": true,
                    "type": "string"
                  },
                  "forks_count": {
                    "type": "number"
                  },
                  "stargazers_count": {
                    "type": "number"
                  },
                  "watchers_count": {
                    "type": "number"
                  },
                  "size": {
                    "type": "number"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "open_issues_count": {
                    "type": "number"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "type": "string"
                  },
                  "pushed_at": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    }
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "template_repository": {
                    "nullable": true
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "subscribers_count": {
                    "type": "number"
                  },
                  "network_count": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "string"
                  },
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string"
                  },
                  "deployments_url": {
                    "type": "string"
                  },
                  "downloads_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "forks_url": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string"
                  },
                  "merges_url": {
                    "type": "string"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string"
                  },
                  "subscription_url": {
                    "type": "string"
                  },
                  "tags_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "svn_url": {
                    "type": "string"
                  },
                  "homepage": {
                    "type": "string"
                  },
                  "language": {
                    "nullable": true,
                    "type": "string"
                  },
                  "forks_count": {
                    "type": "number"
                  },
                  "stargazers_count": {
                    "type": "number"
                  },
                  "watchers_count": {
                    "type": "number"
                  },
                  "size": {
                    "type": "number"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "open_issues_count": {
                    "type": "number"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "type": "string"
                  },
                  "pushed_at": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    }
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "template_repository": {
                    "nullable": true
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "subscribers_count": {
                    "type": "number"
                  },
                  "network_count": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "issue": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "comments": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "review_comments": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "review_comment": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "commits": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "statuses": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "author_association": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          }
        }
      },
      "commit": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "comment_count": {
                "type": "number"
              },
              "verification": {
                "type": "object",
                "properties": {
                  "verified": {
                    "type": "boolean"
                  },
                  "reason": {
                    "nullable": true,
                    "type": "string"
                  },
                  "signature": {
                    "nullable": true,
                    "type": "string"
                  },
                  "payload": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "committer": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                }
              }
            }
          },
          "stats": {
            "type": "object",
            "properties": {
              "additions": {
                "type": "number"
              },
              "deletions": {
                "type": "number"
              },
              "total": {
                "type": "number"
              }
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "filename": {
                  "type": "string"
                },
                "additions": {
                  "type": "number"
                },
                "deletions": {
                  "type": "number"
                },
                "changes": {
                  "type": "number"
                },
                "status": {
                  "type": "string"
                },
                "raw_url": {
                  "type": "string"
                },
                "blob_url": {
                  "type": "string"
                },
                "patch": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "combined-commit-status": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "target_url": {
                  "type": "string"
                },
                "context": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                }
              },
              "required": [
                "url",
                "avatar_url",
                "id",
                "node_id",
                "state",
                "description",
                "target_url",
                "context",
                "created_at",
                "updated_at"
              ]
            }
          },
          "sha": {
            "type": "string"
          },
          "total_count": {
            "type": "number"
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              }
            }
          },
          "commit_url": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "status": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "target_url": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "community-profile": {
        "type": "object",
        "properties": {
          "health_percentage": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "documentation": {
            "type": "boolean"
          },
          "files": {
            "type": "object",
            "properties": {
              "code_of_conduct": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  }
                }
              },
              "contributing": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  }
                }
              },
              "issue_template": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  }
                }
              },
              "pull_request_template": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  }
                }
              },
              "license": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "spdx_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  }
                }
              },
              "readme": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "commit-comparison": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "permalink_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "base_commit": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commit": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      }
                    }
                  },
                  "committer": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      }
                    }
                  },
                  "message": {
                    "type": "string"
                  },
                  "tree": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      },
                      "sha": {
                        "type": "string"
                      }
                    }
                  },
                  "comment_count": {
                    "type": "number"
                  },
                  "verification": {
                    "type": "object",
                    "properties": {
                      "verified": {
                        "type": "boolean"
                      },
                      "reason": {
                        "nullable": true,
                        "type": "string"
                      },
                      "signature": {
                        "nullable": true,
                        "type": "string"
                      },
                      "payload": {
                        "nullable": true,
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "author": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "merge_base_commit": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commit": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "author": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      }
                    }
                  },
                  "committer": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "date": {
                        "type": "string"
                      }
                    }
                  },
                  "message": {
                    "type": "string"
                  },
                  "tree": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      },
                      "sha": {
                        "type": "string"
                      }
                    }
                  },
                  "comment_count": {
                    "type": "number"
                  },
                  "verification": {
                    "type": "object",
                    "properties": {
                      "verified": {
                        "type": "boolean"
                      },
                      "reason": {
                        "nullable": true,
                        "type": "string"
                      },
                      "signature": {
                        "nullable": true,
                        "type": "string"
                      },
                      "payload": {
                        "nullable": true,
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "author": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "status": {
            "type": "string"
          },
          "ahead_by": {
            "type": "number"
          },
          "behind_by": {
            "type": "number"
          },
          "total_commits": {
            "type": "number"
          },
          "commits": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                },
                "node_id": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "comments_url": {
                  "type": "string"
                },
                "commit": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "author": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "date": {
                          "type": "string"
                        }
                      }
                    },
                    "committer": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "date": {
                          "type": "string"
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    },
                    "tree": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "sha": {
                          "type": "string"
                        }
                      }
                    },
                    "comment_count": {
                      "type": "number"
                    },
                    "verification": {
                      "type": "object",
                      "properties": {
                        "verified": {
                          "type": "boolean"
                        },
                        "reason": {
                          "nullable": true,
                          "type": "string"
                        },
                        "signature": {
                          "nullable": true,
                          "type": "string"
                        },
                        "payload": {
                          "nullable": true,
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "author": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "committer": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "parents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "url": {
                        "type": "string"
                      },
                      "sha": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "files": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sha": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "additions": {
                  "type": "number"
                },
                "deletions": {
                  "type": "number"
                },
                "changes": {
                  "type": "number"
                },
                "blob_url": {
                  "type": "string"
                },
                "raw_url": {
                  "type": "string"
                },
                "contents_url": {
                  "type": "string"
                },
                "patch": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "content-file": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "download_url": {
            "nullable": true,
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "submodule_git_url": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "git": {
                "type": "string"
              },
              "self": {
                "type": "string"
              },
              "html": {
                "type": "string"
              }
            }
          }
        }
      },
      "file-commit": {
        "type": "object",
        "properties": {
          "content": {
            "nullable": true,
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "size": {
                "type": "number"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "download_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "_links": {
                "type": "object",
                "properties": {
                  "self": {
                    "type": "string"
                  },
                  "git": {
                    "type": "string"
                  },
                  "html": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    }
                  }
                }
              },
              "verification": {
                "type": "object",
                "properties": {
                  "verified": {
                    "type": "boolean"
                  },
                  "reason": {
                    "nullable": true,
                    "type": "string"
                  },
                  "signature": {
                    "nullable": true,
                    "type": "string"
                  },
                  "payload": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "file-commit-2": {
        "type": "object",
        "properties": {
          "content": {
            "nullable": true
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "sha": {
                      "type": "string"
                    }
                  }
                }
              },
              "verification": {
                "type": "object",
                "properties": {
                  "verified": {
                    "type": "boolean"
                  },
                  "reason": {
                    "nullable": true,
                    "type": "string"
                  },
                  "signature": {
                    "nullable": true,
                    "type": "string"
                  },
                  "payload": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "contributor": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "site_admin": {
            "type": "boolean"
          },
          "contributions": {
            "type": "number"
          }
        }
      },
      "deployment": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "task": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "properties": {
              "deploy": {
                "type": "string"
              }
            }
          },
          "original_environment": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "transient_environment": {
            "type": "boolean"
          },
          "production_environment": {
            "type": "boolean"
          }
        }
      },
      "deployment-status": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "description": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "target_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "deployment_url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "environment_url": {
            "type": "string"
          },
          "log_url": {
            "type": "string"
          }
        }
      },
      "short-blob": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          }
        }
      },
      "blob": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "size": {
            "type": "number"
          }
        }
      },
      "git-commit": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "author": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "committer": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "message": {
            "type": "string"
          },
          "tree": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              }
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                }
              }
            }
          },
          "verification": {
            "type": "object",
            "properties": {
              "verified": {
                "type": "boolean"
              },
              "reason": {
                "nullable": true,
                "type": "string"
              },
              "signature": {
                "nullable": true,
                "type": "string"
              },
              "payload": {
                "nullable": true,
                "type": "string"
              }
            }
          }
        }
      },
      "git-ref": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "object": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "git-tag": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "tagger": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "date": {
                "type": "string"
              }
            }
          },
          "object": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "verification": {
            "type": "object",
            "properties": {
              "verified": {
                "type": "boolean"
              },
              "reason": {
                "nullable": true,
                "type": "string"
              },
              "signature": {
                "nullable": true,
                "type": "string"
              },
              "payload": {
                "nullable": true,
                "type": "string"
              }
            }
          }
        }
      },
      "git-tree": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tree": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "mode": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "sha": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "git-tree-2": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "tree": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string"
                },
                "mode": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "sha": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "path",
                "mode",
                "type",
                "sha",
                "url"
              ]
            }
          },
          "truncated": {
            "type": "boolean"
          }
        }
      },
      "hook": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "config": {
            "type": "object",
            "properties": {
              "content_type": {
                "type": "string"
              },
              "insecure_ssl": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "updated_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "test_url": {
            "type": "string"
          },
          "ping_url": {
            "type": "string"
          },
          "last_response": {
            "type": "object",
            "properties": {
              "code": {
                "nullable": true,
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "message": {
                "nullable": true,
                "type": "string"
              }
            }
          }
        }
      },
      "import": {
        "type": "object",
        "properties": {
          "vcs": {
            "type": "string"
          },
          "use_lfs": {
            "type": "string"
          },
          "vcs_url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_text": {
            "type": "string"
          },
          "has_large_files": {
            "type": "boolean"
          },
          "large_files_size": {
            "type": "number"
          },
          "large_files_count": {
            "type": "number"
          },
          "authors_count": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "authors_url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          }
        }
      },
      "import-2": {
        "type": "object",
        "properties": {
          "vcs": {
            "type": "string"
          },
          "use_lfs": {
            "type": "string"
          },
          "vcs_url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_text": {
            "type": "string"
          },
          "has_large_files": {
            "type": "boolean"
          },
          "large_files_size": {
            "type": "number"
          },
          "large_files_count": {
            "type": "number"
          },
          "authors_count": {
            "type": "number"
          },
          "percent": {
            "type": "number"
          },
          "commit_count": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "authors_url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "tfvc_project": {
            "type": "string"
          }
        }
      },
      "porter-author": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "remote_id": {
            "type": "string"
          },
          "remote_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "import_url": {
            "type": "string"
          }
        }
      },
      "porter-large-file": {
        "type": "object",
        "properties": {
          "ref_name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "oid": {
            "type": "string"
          },
          "size": {
            "type": "number"
          }
        }
      },
      "issue-simple-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "diff_url": {
                "type": "string"
              },
              "patch_url": {
                "type": "string"
              }
            }
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "diff_url": {
                "type": "string"
              },
              "patch_url": {
                "type": "string"
              }
            }
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_by": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "issue-comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "issue-event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "actor": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "event": {
            "type": "string"
          },
          "commit_id": {
            "type": "string"
          },
          "commit_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "issue": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repository_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "body": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "labels": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "default": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "assignee": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "assignees": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "milestone": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "number": {
                    "type": "number"
                  },
                  "state": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "creator": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "open_issues": {
                    "type": "number"
                  },
                  "closed_issues": {
                    "type": "number"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "closed_at": {
                    "nullable": true,
                    "type": "string"
                  },
                  "due_on": {
                    "type": "string"
                  }
                }
              },
              "locked": {
                "type": "boolean"
              },
              "active_lock_reason": {
                "type": "string"
              },
              "comments": {
                "type": "number"
              },
              "pull_request": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "diff_url": {
                    "type": "string"
                  },
                  "patch_url": {
                    "type": "string"
                  }
                }
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              }
            }
          }
        }
      },
      "issue-simple": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              },
              "required": [
                "login",
                "id",
                "node_id",
                "avatar_url",
                "gravatar_id",
                "url",
                "html_url",
                "followers_url",
                "following_url",
                "gists_url",
                "starred_url",
                "subscriptions_url",
                "organizations_url",
                "repos_url",
                "events_url",
                "received_events_url",
                "type",
                "site_admin"
              ]
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "locked": {
            "type": "boolean"
          },
          "active_lock_reason": {
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "diff_url": {
                "type": "string"
              },
              "patch_url": {
                "type": "string"
              }
            }
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "issue-event-for-issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "actor": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "event": {
            "type": "string"
          },
          "commit_id": {
            "type": "string"
          },
          "commit_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        }
      },
      "label": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "deploy-key": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          }
        }
      },
      "language": {
        "type": "object",
        "properties": {
          "C": {
            "type": "number"
          },
          "Python": {
            "type": "number"
          }
        }
      },
      "license-content": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "download_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              },
              "git": {
                "type": "string"
              },
              "html": {
                "type": "string"
              }
            }
          },
          "license": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "spdx_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "node_id": {
                "type": "string"
              }
            }
          }
        }
      },
      "simple-commit-2": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string"
          },
          "node_id": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "author": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "sha": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              },
              "url": {
                "type": "string"
              },
              "comment_count": {
                "type": "number"
              },
              "verification": {
                "type": "object",
                "properties": {
                  "verified": {
                    "type": "boolean"
                  },
                  "reason": {
                    "nullable": true,
                    "type": "string"
                  },
                  "signature": {
                    "nullable": true,
                    "type": "string"
                  },
                  "payload": {
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "committer": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sha": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "required": [
                "sha",
                "url"
              ]
            }
          }
        }
      },
      "milestone": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "open_issues": {
            "type": "number"
          },
          "closed_issues": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "due_on": {
            "type": "string"
          }
        }
      },
      "page": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "cname": {
            "type": "string"
          },
          "custom_404": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "source": {
            "type": "object",
            "properties": {
              "branch": {
                "type": "string"
              },
              "directory": {
                "type": "string"
              }
            }
          }
        }
      },
      "page-build": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "nullable": true,
                "type": "string"
              }
            }
          },
          "pusher": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "commit": {
            "type": "string"
          },
          "duration": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "page-build-status": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "pull-request": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "issue_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "review_comments_url": {
            "type": "string"
          },
          "review_comment_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "active_lock_reason": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "merged_at": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              },
              "required": [
                "login",
                "id",
                "node_id",
                "avatar_url",
                "gravatar_id",
                "url",
                "html_url",
                "followers_url",
                "following_url",
                "gists_url",
                "starred_url",
                "subscriptions_url",
                "organizations_url",
                "repos_url",
                "events_url",
                "received_events_url",
                "type",
                "site_admin"
              ]
            }
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "privacy": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                },
                "members_url": {
                  "type": "string"
                },
                "repositories_url": {
                  "type": "string"
                },
                "parent": {
                  "nullable": true
                }
              }
            }
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "string"
                  },
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string"
                  },
                  "deployments_url": {
                    "type": "string"
                  },
                  "downloads_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "forks_url": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string"
                  },
                  "merges_url": {
                    "type": "string"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string"
                  },
                  "subscription_url": {
                    "type": "string"
                  },
                  "tags_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "svn_url": {
                    "type": "string"
                  },
                  "homepage": {
                    "type": "string"
                  },
                  "language": {
                    "nullable": true,
                    "type": "string"
                  },
                  "forks_count": {
                    "type": "number"
                  },
                  "stargazers_count": {
                    "type": "number"
                  },
                  "watchers_count": {
                    "type": "number"
                  },
                  "size": {
                    "type": "number"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "open_issues_count": {
                    "type": "number"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "type": "string"
                  },
                  "pushed_at": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    }
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "template_repository": {
                    "nullable": true
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "subscribers_count": {
                    "type": "number"
                  },
                  "network_count": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "string"
                  },
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string"
                  },
                  "deployments_url": {
                    "type": "string"
                  },
                  "downloads_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "forks_url": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string"
                  },
                  "merges_url": {
                    "type": "string"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string"
                  },
                  "subscription_url": {
                    "type": "string"
                  },
                  "tags_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "svn_url": {
                    "type": "string"
                  },
                  "homepage": {
                    "type": "string"
                  },
                  "language": {
                    "nullable": true,
                    "type": "string"
                  },
                  "forks_count": {
                    "type": "number"
                  },
                  "stargazers_count": {
                    "type": "number"
                  },
                  "watchers_count": {
                    "type": "number"
                  },
                  "size": {
                    "type": "number"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "open_issues_count": {
                    "type": "number"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "type": "string"
                  },
                  "pushed_at": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    }
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "template_repository": {
                    "nullable": true
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "subscribers_count": {
                    "type": "number"
                  },
                  "network_count": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "issue": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "comments": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "review_comments": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "review_comment": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "commits": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "statuses": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "author_association": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          },
          "merged": {
            "type": "boolean"
          },
          "mergeable": {
            "type": "boolean"
          },
          "rebaseable": {
            "type": "boolean"
          },
          "mergeable_state": {
            "type": "string"
          },
          "merged_by": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "comments": {
            "type": "number"
          },
          "review_comments": {
            "type": "number"
          },
          "maintainer_can_modify": {
            "type": "boolean"
          },
          "commits": {
            "type": "number"
          },
          "additions": {
            "type": "number"
          },
          "deletions": {
            "type": "number"
          },
          "changed_files": {
            "type": "number"
          }
        }
      },
      "pull-request-review-comment": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "pull_request_review_id": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "diff_hunk": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "original_position": {
            "type": "number"
          },
          "commit_id": {
            "type": "string"
          },
          "original_commit_id": {
            "type": "string"
          },
          "in_reply_to_id": {
            "type": "number"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "pull_request_url": {
            "type": "string"
          },
          "author_association": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "pull_request": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "start_line": {
            "type": "number"
          },
          "original_start_line": {
            "type": "number"
          },
          "start_side": {
            "type": "string"
          },
          "line": {
            "type": "number"
          },
          "original_line": {
            "type": "number"
          },
          "side": {
            "type": "string"
          }
        }
      },
      "diff-entry": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "additions": {
            "type": "number"
          },
          "deletions": {
            "type": "number"
          },
          "changes": {
            "type": "number"
          },
          "blob_url": {
            "type": "string"
          },
          "raw_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "patch": {
            "type": "string"
          }
        }
      },
      "pull-request-merge-result": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string"
          },
          "merged": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "simple-pull-request-review-request": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              }
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "privacy": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                },
                "members_url": {
                  "type": "string"
                },
                "repositories_url": {
                  "type": "string"
                },
                "parent": {
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "pull-request-review-request": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "diff_url": {
            "type": "string"
          },
          "patch_url": {
            "type": "string"
          },
          "issue_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "review_comments_url": {
            "type": "string"
          },
          "review_comment_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "state": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "default": {
                  "type": "boolean"
                }
              }
            }
          },
          "milestone": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "state": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "creator": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "open_issues": {
                "type": "number"
              },
              "closed_issues": {
                "type": "number"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "closed_at": {
                "nullable": true,
                "type": "string"
              },
              "due_on": {
                "type": "string"
              }
            }
          },
          "active_lock_reason": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "merged_at": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "assignee": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              },
              "required": [
                "login",
                "id",
                "node_id",
                "avatar_url",
                "gravatar_id",
                "url",
                "html_url",
                "followers_url",
                "following_url",
                "gists_url",
                "starred_url",
                "subscriptions_url",
                "organizations_url",
                "repos_url",
                "events_url",
                "received_events_url",
                "type",
                "site_admin"
              ]
            }
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "gravatar_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "followers_url": {
                  "type": "string"
                },
                "following_url": {
                  "type": "string"
                },
                "gists_url": {
                  "type": "string"
                },
                "starred_url": {
                  "type": "string"
                },
                "subscriptions_url": {
                  "type": "string"
                },
                "organizations_url": {
                  "type": "string"
                },
                "repos_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "received_events_url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "site_admin": {
                  "type": "boolean"
                }
              },
              "required": [
                "login",
                "id",
                "node_id",
                "avatar_url",
                "gravatar_id",
                "url",
                "html_url",
                "followers_url",
                "following_url",
                "gists_url",
                "starred_url",
                "subscriptions_url",
                "organizations_url",
                "repos_url",
                "events_url",
                "received_events_url",
                "type",
                "site_admin"
              ]
            }
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "slug": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "privacy": {
                  "type": "string"
                },
                "permission": {
                  "type": "string"
                },
                "members_url": {
                  "type": "string"
                },
                "repositories_url": {
                  "type": "string"
                },
                "parent": {
                  "nullable": true
                }
              }
            }
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "string"
                  },
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string"
                  },
                  "deployments_url": {
                    "type": "string"
                  },
                  "downloads_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "forks_url": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string"
                  },
                  "merges_url": {
                    "type": "string"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string"
                  },
                  "subscription_url": {
                    "type": "string"
                  },
                  "tags_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "svn_url": {
                    "type": "string"
                  },
                  "homepage": {
                    "type": "string"
                  },
                  "language": {
                    "nullable": true,
                    "type": "string"
                  },
                  "forks_count": {
                    "type": "number"
                  },
                  "stargazers_count": {
                    "type": "number"
                  },
                  "watchers_count": {
                    "type": "number"
                  },
                  "size": {
                    "type": "number"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "open_issues_count": {
                    "type": "number"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "type": "string"
                  },
                  "pushed_at": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    }
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "template_repository": {
                    "nullable": true
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "subscribers_count": {
                    "type": "number"
                  },
                  "network_count": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "ref": {
                "type": "string"
              },
              "sha": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "repo": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "full_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "login": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      },
                      "node_id": {
                        "type": "string"
                      },
                      "avatar_url": {
                        "type": "string"
                      },
                      "gravatar_id": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "html_url": {
                        "type": "string"
                      },
                      "followers_url": {
                        "type": "string"
                      },
                      "following_url": {
                        "type": "string"
                      },
                      "gists_url": {
                        "type": "string"
                      },
                      "starred_url": {
                        "type": "string"
                      },
                      "subscriptions_url": {
                        "type": "string"
                      },
                      "organizations_url": {
                        "type": "string"
                      },
                      "repos_url": {
                        "type": "string"
                      },
                      "events_url": {
                        "type": "string"
                      },
                      "received_events_url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "site_admin": {
                        "type": "boolean"
                      }
                    }
                  },
                  "private": {
                    "type": "boolean"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "fork": {
                    "type": "boolean"
                  },
                  "url": {
                    "type": "string"
                  },
                  "archive_url": {
                    "type": "string"
                  },
                  "assignees_url": {
                    "type": "string"
                  },
                  "blobs_url": {
                    "type": "string"
                  },
                  "branches_url": {
                    "type": "string"
                  },
                  "collaborators_url": {
                    "type": "string"
                  },
                  "comments_url": {
                    "type": "string"
                  },
                  "commits_url": {
                    "type": "string"
                  },
                  "compare_url": {
                    "type": "string"
                  },
                  "contents_url": {
                    "type": "string"
                  },
                  "contributors_url": {
                    "type": "string"
                  },
                  "deployments_url": {
                    "type": "string"
                  },
                  "downloads_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "forks_url": {
                    "type": "string"
                  },
                  "git_commits_url": {
                    "type": "string"
                  },
                  "git_refs_url": {
                    "type": "string"
                  },
                  "git_tags_url": {
                    "type": "string"
                  },
                  "git_url": {
                    "type": "string"
                  },
                  "issue_comment_url": {
                    "type": "string"
                  },
                  "issue_events_url": {
                    "type": "string"
                  },
                  "issues_url": {
                    "type": "string"
                  },
                  "keys_url": {
                    "type": "string"
                  },
                  "labels_url": {
                    "type": "string"
                  },
                  "languages_url": {
                    "type": "string"
                  },
                  "merges_url": {
                    "type": "string"
                  },
                  "milestones_url": {
                    "type": "string"
                  },
                  "notifications_url": {
                    "type": "string"
                  },
                  "pulls_url": {
                    "type": "string"
                  },
                  "releases_url": {
                    "type": "string"
                  },
                  "ssh_url": {
                    "type": "string"
                  },
                  "stargazers_url": {
                    "type": "string"
                  },
                  "statuses_url": {
                    "type": "string"
                  },
                  "subscribers_url": {
                    "type": "string"
                  },
                  "subscription_url": {
                    "type": "string"
                  },
                  "tags_url": {
                    "type": "string"
                  },
                  "teams_url": {
                    "type": "string"
                  },
                  "trees_url": {
                    "type": "string"
                  },
                  "clone_url": {
                    "type": "string"
                  },
                  "mirror_url": {
                    "type": "string"
                  },
                  "hooks_url": {
                    "type": "string"
                  },
                  "svn_url": {
                    "type": "string"
                  },
                  "homepage": {
                    "type": "string"
                  },
                  "language": {
                    "nullable": true,
                    "type": "string"
                  },
                  "forks_count": {
                    "type": "number"
                  },
                  "stargazers_count": {
                    "type": "number"
                  },
                  "watchers_count": {
                    "type": "number"
                  },
                  "size": {
                    "type": "number"
                  },
                  "default_branch": {
                    "type": "string"
                  },
                  "open_issues_count": {
                    "type": "number"
                  },
                  "is_template": {
                    "type": "boolean"
                  },
                  "topics": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "has_issues": {
                    "type": "boolean"
                  },
                  "has_projects": {
                    "type": "boolean"
                  },
                  "has_wiki": {
                    "type": "boolean"
                  },
                  "has_pages": {
                    "type": "boolean"
                  },
                  "has_downloads": {
                    "type": "boolean"
                  },
                  "archived": {
                    "type": "boolean"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "visibility": {
                    "type": "string"
                  },
                  "pushed_at": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "admin": {
                        "type": "boolean"
                      },
                      "push": {
                        "type": "boolean"
                      },
                      "pull": {
                        "type": "boolean"
                      }
                    }
                  },
                  "allow_rebase_merge": {
                    "type": "boolean"
                  },
                  "template_repository": {
                    "nullable": true
                  },
                  "temp_clone_token": {
                    "type": "string"
                  },
                  "allow_squash_merge": {
                    "type": "boolean"
                  },
                  "delete_branch_on_merge": {
                    "type": "boolean"
                  },
                  "allow_merge_commit": {
                    "type": "boolean"
                  },
                  "subscribers_count": {
                    "type": "number"
                  },
                  "network_count": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "issue": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "comments": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "review_comments": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "review_comment": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "commits": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "statuses": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "author_association": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          }
        }
      },
      "pull-request-review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "pull_request_url": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "pull_request": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "submitted_at": {
            "type": "string"
          },
          "commit_id": {
            "type": "string"
          }
        }
      },
      "pull-request-review-2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "pull_request_url": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "pull_request": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "commit_id": {
            "type": "string"
          }
        }
      },
      "legacy-review-comment": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "pull_request_review_id": {
            "type": "number"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "diff_hunk": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "position": {
            "type": "number"
          },
          "original_position": {
            "type": "number"
          },
          "commit_id": {
            "type": "string"
          },
          "original_commit_id": {
            "type": "string"
          },
          "in_reply_to_id": {
            "type": "number"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "pull_request_url": {
            "type": "string"
          },
          "author_association": {
            "type": "string"
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "html": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              },
              "pull_request": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "release-2": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "assets_url": {
            "type": "string"
          },
          "upload_url": {
            "type": "string"
          },
          "tarball_url": {
            "type": "string"
          },
          "zipball_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "tag_name": {
            "type": "string"
          },
          "target_commitish": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          },
          "prerelease": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "published_at": {
            "type": "string"
          },
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "browser_download_url": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "content_type": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "download_count": {
                  "type": "number"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "uploader": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "release": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "assets_url": {
            "type": "string"
          },
          "upload_url": {
            "type": "string"
          },
          "tarball_url": {
            "type": "string"
          },
          "zipball_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "tag_name": {
            "type": "string"
          },
          "target_commitish": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "draft": {
            "type": "boolean"
          },
          "prerelease": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "published_at": {
            "type": "string"
          },
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "assets": {
            "type": "array",
            "items": {}
          }
        }
      },
      "release-asset": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "browser_download_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "download_count": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "uploader": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "stargazer": {
        "type": "object",
        "properties": {
          "starred_at": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "code-frequency-stat": {
        "type": "array",
        "items": {
          "type": "number"
        }
      },
      "commit-activity": {
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "total": {
            "type": "number"
          },
          "week": {
            "type": "number"
          }
        }
      },
      "contributor-activity": {
        "type": "object",
        "properties": {
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "total": {
            "type": "number"
          },
          "weeks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "w": {
                  "type": "string"
                },
                "a": {
                  "type": "number"
                },
                "d": {
                  "type": "number"
                },
                "c": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "participation-stats": {
        "type": "object",
        "properties": {
          "all": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "owner": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "repository-subscription": {
        "type": "object",
        "properties": {
          "subscribed": {
            "type": "boolean"
          },
          "ignored": {
            "type": "boolean"
          },
          "reason": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          }
        }
      },
      "tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "zipball_url": {
            "type": "string"
          },
          "tarball_url": {
            "type": "string"
          }
        }
      },
      "topic": {
        "type": "object",
        "properties": {
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "clone-traffic": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "uniques": {
            "type": "number"
          },
          "clones": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                },
                "uniques": {
                  "type": "number"
                }
              },
              "required": [
                "timestamp",
                "count",
                "uniques"
              ]
            }
          }
        }
      },
      "content-traffic": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "uniques": {
            "type": "number"
          }
        }
      },
      "referrer-traffic": {
        "type": "object",
        "properties": {
          "referrer": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "uniques": {
            "type": "number"
          }
        }
      },
      "view-traffic": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "uniques": {
            "type": "number"
          },
          "views": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                },
                "uniques": {
                  "type": "number"
                }
              },
              "required": [
                "timestamp",
                "count",
                "uniques"
              ]
            }
          }
        }
      },
      "repository-3": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "archive_url": {
            "type": "string"
          },
          "assignees_url": {
            "type": "string"
          },
          "blobs_url": {
            "type": "string"
          },
          "branches_url": {
            "type": "string"
          },
          "collaborators_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commits_url": {
            "type": "string"
          },
          "compare_url": {
            "type": "string"
          },
          "contents_url": {
            "type": "string"
          },
          "contributors_url": {
            "type": "string"
          },
          "deployments_url": {
            "type": "string"
          },
          "downloads_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "forks_url": {
            "type": "string"
          },
          "git_commits_url": {
            "type": "string"
          },
          "git_refs_url": {
            "type": "string"
          },
          "git_tags_url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "issue_comment_url": {
            "type": "string"
          },
          "issue_events_url": {
            "type": "string"
          },
          "issues_url": {
            "type": "string"
          },
          "keys_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "languages_url": {
            "type": "string"
          },
          "merges_url": {
            "type": "string"
          },
          "milestones_url": {
            "type": "string"
          },
          "notifications_url": {
            "type": "string"
          },
          "pulls_url": {
            "type": "string"
          },
          "releases_url": {
            "type": "string"
          },
          "ssh_url": {
            "type": "string"
          },
          "stargazers_url": {
            "type": "string"
          },
          "statuses_url": {
            "type": "string"
          },
          "subscribers_url": {
            "type": "string"
          },
          "subscription_url": {
            "type": "string"
          },
          "tags_url": {
            "type": "string"
          },
          "teams_url": {
            "type": "string"
          },
          "trees_url": {
            "type": "string"
          },
          "clone_url": {
            "type": "string"
          },
          "mirror_url": {
            "type": "string"
          },
          "hooks_url": {
            "type": "string"
          },
          "svn_url": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "default_branch": {
            "type": "string"
          },
          "open_issues_count": {
            "type": "number"
          },
          "is_template": {
            "type": "boolean"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_issues": {
            "type": "boolean"
          },
          "has_projects": {
            "type": "boolean"
          },
          "has_wiki": {
            "type": "boolean"
          },
          "has_pages": {
            "type": "boolean"
          },
          "has_downloads": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "pull": {
                "type": "boolean"
              }
            }
          },
          "allow_rebase_merge": {
            "type": "boolean"
          },
          "template_repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          },
          "temp_clone_token": {
            "type": "string"
          },
          "allow_squash_merge": {
            "type": "boolean"
          },
          "delete_branch_on_merge": {
            "type": "boolean"
          },
          "allow_merge_commit": {
            "type": "boolean"
          },
          "subscribers_count": {
            "type": "number"
          },
          "network_count": {
            "type": "number"
          }
        }
      },
      "scim-user-list": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalResults": {
            "type": "number"
          },
          "itemsPerPage": {
            "type": "number"
          },
          "startIndex": {
            "type": "number"
          },
          "Resources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "schemas": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "id": {
                  "type": "string"
                },
                "externalId": {
                  "type": "string"
                },
                "userName": {
                  "type": "string"
                },
                "name": {
                  "type": "object",
                  "properties": {
                    "givenName": {
                      "type": "string"
                    },
                    "familyName": {
                      "type": "string"
                    }
                  }
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "string"
                      },
                      "primary": {
                        "type": "boolean"
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  }
                },
                "active": {
                  "type": "boolean"
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "resourceType": {
                      "type": "string"
                    },
                    "created": {
                      "type": "string"
                    },
                    "lastModified": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "scim-user": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "name": {
            "type": "object",
            "properties": {
              "givenName": {
                "type": "string"
              },
              "familyName": {
                "type": "string"
              }
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "primary": {
                  "type": "boolean"
                }
              }
            }
          },
          "active": {
            "type": "boolean"
          },
          "meta": {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "created": {
                "type": "string"
              },
              "lastModified": {
                "type": "string"
              },
              "location": {
                "type": "string"
              }
            }
          }
        }
      },
      "scim-user-2": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "name": {
            "type": "object",
            "properties": {
              "givenName": {
                "type": "string"
              },
              "familyName": {
                "type": "string"
              }
            }
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "primary": {
                  "type": "boolean"
                }
              },
              "required": [
                "value",
                "type"
              ]
            }
          },
          "active": {
            "type": "boolean"
          },
          "meta": {
            "type": "object",
            "properties": {
              "resourceType": {
                "type": "string"
              },
              "created": {
                "type": "string"
              },
              "lastModified": {
                "type": "string"
              },
              "location": {
                "type": "string"
              }
            }
          }
        }
      },
      "code-search-result-item": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "git_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              }
            }
          },
          "score": {
            "type": "number"
          }
        }
      },
      "commit-search-result-item": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "commit": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "author": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "committer": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              },
              "message": {
                "type": "string"
              },
              "tree": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                }
              },
              "comment_count": {
                "type": "number"
              }
            }
          },
          "author": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "committer": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "html_url": {
                  "type": "string"
                },
                "sha": {
                  "type": "string"
                }
              }
            }
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              }
            }
          },
          "score": {
            "type": "number"
          }
        }
      },
      "issue-search-result-item": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "repository_url": {
            "type": "string"
          },
          "labels_url": {
            "type": "string"
          },
          "comments_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "number": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                }
              }
            }
          },
          "state": {
            "type": "string"
          },
          "assignee": {
            "nullable": true,
            "type": "string"
          },
          "milestone": {
            "nullable": true,
            "type": "string"
          },
          "comments": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "closed_at": {
            "nullable": true,
            "type": "string"
          },
          "pull_request": {
            "type": "object",
            "properties": {
              "html_url": {
                "nullable": true,
                "type": "string"
              },
              "diff_url": {
                "nullable": true,
                "type": "string"
              },
              "patch_url": {
                "nullable": true,
                "type": "string"
              }
            }
          },
          "body": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "label-search-result-item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "node_id",
          "url",
          "name",
          "color",
          "default",
          "description",
          "score"
        ]
      },
      "repo-search-result-item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "private": {
            "type": "boolean"
          },
          "html_url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "fork": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "pushed_at": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "stargazers_count": {
            "type": "number"
          },
          "watchers_count": {
            "type": "number"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "forks_count": {
            "type": "number"
          },
          "open_issues_count": {
            "type": "number"
          },
          "master_branch": {
            "type": "string"
          },
          "default_branch": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "topic-search-result-item": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "short_description": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "released": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "curated": {
            "type": "boolean"
          },
          "score": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "display_name",
          "short_description",
          "description",
          "created_by",
          "released",
          "created_at",
          "updated_at",
          "featured",
          "curated",
          "score"
        ]
      },
      "user-search-result-item": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "group-mapping-2": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "group_id": {
                  "type": "string"
                },
                "group_name": {
                  "type": "string"
                },
                "group_description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "private-user": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "site_admin": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "blog": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "hireable": {
            "type": "boolean"
          },
          "bio": {
            "type": "string"
          },
          "twitter_username": {
            "type": "string"
          },
          "public_repos": {
            "type": "number"
          },
          "public_gists": {
            "type": "number"
          },
          "followers": {
            "type": "number"
          },
          "following": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "private_gists": {
            "type": "number"
          },
          "total_private_repos": {
            "type": "number"
          },
          "owned_private_repos": {
            "type": "number"
          },
          "disk_usage": {
            "type": "number"
          },
          "collaborators": {
            "type": "number"
          },
          "two_factor_authentication": {
            "type": "boolean"
          },
          "plan": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "space": {
                "type": "number"
              },
              "private_repos": {
                "type": "number"
              },
              "collaborators": {
                "type": "number"
              }
            }
          }
        }
      },
      "email": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "primary": {
            "type": "boolean"
          },
          "verified": {
            "type": "boolean"
          },
          "visibility": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "gpg-key": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "primary_key_id": {
            "nullable": true,
            "type": "string"
          },
          "key_id": {
            "type": "string"
          },
          "public_key": {
            "type": "string"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "verified": {
                  "type": "boolean"
                }
              }
            }
          },
          "subkeys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "primary_key_id": {
                  "nullable": true,
                  "type": "number"
                },
                "key_id": {
                  "type": "string"
                },
                "public_key": {
                  "type": "string"
                },
                "emails": {
                  "type": "array",
                  "items": {}
                },
                "subkeys": {
                  "type": "array",
                  "items": {}
                },
                "can_sign": {
                  "type": "boolean"
                },
                "can_encrypt_comms": {
                  "type": "boolean"
                },
                "can_encrypt_storage": {
                  "type": "boolean"
                },
                "can_certify": {
                  "type": "boolean"
                },
                "created_at": {
                  "type": "string"
                },
                "expires_at": {
                  "nullable": true,
                  "type": "string"
                }
              }
            }
          },
          "can_sign": {
            "type": "boolean"
          },
          "can_encrypt_comms": {
            "type": "boolean"
          },
          "can_encrypt_storage": {
            "type": "boolean"
          },
          "can_certify": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "expires_at": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "base-installation-for-auth-user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "account": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "members_url": {
                "type": "string"
              },
              "public_members_url": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "access_tokens_url": {
            "type": "string"
          },
          "repositories_url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "app_id": {
            "type": "number"
          },
          "target_id": {
            "type": "number"
          },
          "target_type": {
            "type": "string"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "checks": {
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "contents": {
                "type": "string"
              }
            }
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "single_file_name": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "account",
          "access_tokens_url",
          "repositories_url",
          "html_url",
          "app_id",
          "target_id",
          "target_type",
          "permissions",
          "events",
          "single_file_name"
        ]
      },
      "user-marketplace-purchase": {
        "type": "object",
        "properties": {
          "billing_cycle": {
            "type": "string"
          },
          "next_billing_date": {
            "type": "string"
          },
          "unit_count": {
            "type": "integer",
            "nullable": true
          },
          "on_free_trial": {
            "type": "boolean"
          },
          "free_trial_ends_on": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "account": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "url": {
                "type": "string"
              },
              "email": {
                "nullable": true,
                "type": "string"
              },
              "organization_billing_email": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "plan": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "accounts_url": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "number": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "monthly_price_in_cents": {
                "type": "number"
              },
              "yearly_price_in_cents": {
                "type": "number"
              },
              "price_model": {
                "type": "string"
              },
              "has_free_trial": {
                "type": "boolean"
              },
              "unit_name": {
                "nullable": true,
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "bullets": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "migration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "owner": {
            "type": "object",
            "properties": {
              "login": {
                "type": "string"
              },
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "avatar_url": {
                "type": "string"
              },
              "gravatar_id": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "html_url": {
                "type": "string"
              },
              "followers_url": {
                "type": "string"
              },
              "following_url": {
                "type": "string"
              },
              "gists_url": {
                "type": "string"
              },
              "starred_url": {
                "type": "string"
              },
              "subscriptions_url": {
                "type": "string"
              },
              "organizations_url": {
                "type": "string"
              },
              "repos_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "received_events_url": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "site_admin": {
                "type": "boolean"
              }
            }
          },
          "guid": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "lock_repositories": {
            "type": "boolean"
          },
          "exclude_attachments": {
            "type": "boolean"
          },
          "repositories": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number"
                },
                "node_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "owner": {
                  "type": "object",
                  "properties": {
                    "login": {
                      "type": "string"
                    },
                    "id": {
                      "type": "number"
                    },
                    "node_id": {
                      "type": "string"
                    },
                    "avatar_url": {
                      "type": "string"
                    },
                    "gravatar_id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "html_url": {
                      "type": "string"
                    },
                    "followers_url": {
                      "type": "string"
                    },
                    "following_url": {
                      "type": "string"
                    },
                    "gists_url": {
                      "type": "string"
                    },
                    "starred_url": {
                      "type": "string"
                    },
                    "subscriptions_url": {
                      "type": "string"
                    },
                    "organizations_url": {
                      "type": "string"
                    },
                    "repos_url": {
                      "type": "string"
                    },
                    "events_url": {
                      "type": "string"
                    },
                    "received_events_url": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "site_admin": {
                      "type": "boolean"
                    }
                  }
                },
                "private": {
                  "type": "boolean"
                },
                "html_url": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "fork": {
                  "type": "boolean"
                },
                "url": {
                  "type": "string"
                },
                "archive_url": {
                  "type": "string"
                },
                "assignees_url": {
                  "type": "string"
                },
                "blobs_url": {
                  "type": "string"
                },
                "branches_url": {
                  "type": "string"
                },
                "collaborators_url": {
                  "type": "string"
                },
                "comments_url": {
                  "type": "string"
                },
                "commits_url": {
                  "type": "string"
                },
                "compare_url": {
                  "type": "string"
                },
                "contents_url": {
                  "type": "string"
                },
                "contributors_url": {
                  "type": "string"
                },
                "deployments_url": {
                  "type": "string"
                },
                "downloads_url": {
                  "type": "string"
                },
                "events_url": {
                  "type": "string"
                },
                "forks_url": {
                  "type": "string"
                },
                "git_commits_url": {
                  "type": "string"
                },
                "git_refs_url": {
                  "type": "string"
                },
                "git_tags_url": {
                  "type": "string"
                },
                "git_url": {
                  "type": "string"
                },
                "issue_comment_url": {
                  "type": "string"
                },
                "issue_events_url": {
                  "type": "string"
                },
                "issues_url": {
                  "type": "string"
                },
                "keys_url": {
                  "type": "string"
                },
                "labels_url": {
                  "type": "string"
                },
                "languages_url": {
                  "type": "string"
                },
                "merges_url": {
                  "type": "string"
                },
                "milestones_url": {
                  "type": "string"
                },
                "notifications_url": {
                  "type": "string"
                },
                "pulls_url": {
                  "type": "string"
                },
                "releases_url": {
                  "type": "string"
                },
                "ssh_url": {
                  "type": "string"
                },
                "stargazers_url": {
                  "type": "string"
                },
                "statuses_url": {
                  "type": "string"
                },
                "subscribers_url": {
                  "type": "string"
                },
                "subscription_url": {
                  "type": "string"
                },
                "tags_url": {
                  "type": "string"
                },
                "teams_url": {
                  "type": "string"
                },
                "trees_url": {
                  "type": "string"
                },
                "clone_url": {
                  "type": "string"
                },
                "mirror_url": {
                  "type": "string"
                },
                "hooks_url": {
                  "type": "string"
                },
                "svn_url": {
                  "type": "string"
                },
                "homepage": {
                  "type": "string"
                },
                "language": {
                  "nullable": true,
                  "type": "string"
                },
                "forks_count": {
                  "type": "number"
                },
                "stargazers_count": {
                  "type": "number"
                },
                "watchers_count": {
                  "type": "number"
                },
                "size": {
                  "type": "number"
                },
                "default_branch": {
                  "type": "string"
                },
                "open_issues_count": {
                  "type": "number"
                },
                "is_template": {
                  "type": "boolean"
                },
                "topics": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "has_issues": {
                  "type": "boolean"
                },
                "has_projects": {
                  "type": "boolean"
                },
                "has_wiki": {
                  "type": "boolean"
                },
                "has_pages": {
                  "type": "boolean"
                },
                "has_downloads": {
                  "type": "boolean"
                },
                "archived": {
                  "type": "boolean"
                },
                "disabled": {
                  "type": "boolean"
                },
                "visibility": {
                  "type": "string"
                },
                "pushed_at": {
                  "type": "string"
                },
                "created_at": {
                  "type": "string"
                },
                "updated_at": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "boolean"
                    },
                    "push": {
                      "type": "boolean"
                    },
                    "pull": {
                      "type": "boolean"
                    }
                  }
                },
                "allow_rebase_merge": {
                  "type": "boolean"
                },
                "template_repository": {
                  "nullable": true
                },
                "temp_clone_token": {
                  "type": "string"
                },
                "allow_squash_merge": {
                  "type": "boolean"
                },
                "delete_branch_on_merge": {
                  "type": "boolean"
                },
                "allow_merge_commit": {
                  "type": "boolean"
                },
                "subscribers_count": {
                  "type": "number"
                },
                "network_count": {
                  "type": "number"
                }
              }
            }
          },
          "url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "starred-repository": {
        "type": "object",
        "properties": {
          "starred_at": {
            "type": "string"
          },
          "repo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "node_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "full_name": {
                "type": "string"
              },
              "owner": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string"
                  },
                  "id": {
                    "type": "number"
                  },
                  "node_id": {
                    "type": "string"
                  },
                  "avatar_url": {
                    "type": "string"
                  },
                  "gravatar_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "html_url": {
                    "type": "string"
                  },
                  "followers_url": {
                    "type": "string"
                  },
                  "following_url": {
                    "type": "string"
                  },
                  "gists_url": {
                    "type": "string"
                  },
                  "starred_url": {
                    "type": "string"
                  },
                  "subscriptions_url": {
                    "type": "string"
                  },
                  "organizations_url": {
                    "type": "string"
                  },
                  "repos_url": {
                    "type": "string"
                  },
                  "events_url": {
                    "type": "string"
                  },
                  "received_events_url": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "site_admin": {
                    "type": "boolean"
                  }
                }
              },
              "private": {
                "type": "boolean"
              },
              "html_url": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "fork": {
                "type": "boolean"
              },
              "url": {
                "type": "string"
              },
              "archive_url": {
                "type": "string"
              },
              "assignees_url": {
                "type": "string"
              },
              "blobs_url": {
                "type": "string"
              },
              "branches_url": {
                "type": "string"
              },
              "collaborators_url": {
                "type": "string"
              },
              "comments_url": {
                "type": "string"
              },
              "commits_url": {
                "type": "string"
              },
              "compare_url": {
                "type": "string"
              },
              "contents_url": {
                "type": "string"
              },
              "contributors_url": {
                "type": "string"
              },
              "deployments_url": {
                "type": "string"
              },
              "downloads_url": {
                "type": "string"
              },
              "events_url": {
                "type": "string"
              },
              "forks_url": {
                "type": "string"
              },
              "git_commits_url": {
                "type": "string"
              },
              "git_refs_url": {
                "type": "string"
              },
              "git_tags_url": {
                "type": "string"
              },
              "git_url": {
                "type": "string"
              },
              "issue_comment_url": {
                "type": "string"
              },
              "issue_events_url": {
                "type": "string"
              },
              "issues_url": {
                "type": "string"
              },
              "keys_url": {
                "type": "string"
              },
              "labels_url": {
                "type": "string"
              },
              "languages_url": {
                "type": "string"
              },
              "merges_url": {
                "type": "string"
              },
              "milestones_url": {
                "type": "string"
              },
              "notifications_url": {
                "type": "string"
              },
              "pulls_url": {
                "type": "string"
              },
              "releases_url": {
                "type": "string"
              },
              "ssh_url": {
                "type": "string"
              },
              "stargazers_url": {
                "type": "string"
              },
              "statuses_url": {
                "type": "string"
              },
              "subscribers_url": {
                "type": "string"
              },
              "subscription_url": {
                "type": "string"
              },
              "tags_url": {
                "type": "string"
              },
              "teams_url": {
                "type": "string"
              },
              "trees_url": {
                "type": "string"
              },
              "clone_url": {
                "type": "string"
              },
              "mirror_url": {
                "type": "string"
              },
              "hooks_url": {
                "type": "string"
              },
              "svn_url": {
                "type": "string"
              },
              "homepage": {
                "type": "string"
              },
              "language": {
                "nullable": true,
                "type": "string"
              },
              "forks_count": {
                "type": "number"
              },
              "stargazers_count": {
                "type": "number"
              },
              "watchers_count": {
                "type": "number"
              },
              "size": {
                "type": "number"
              },
              "default_branch": {
                "type": "string"
              },
              "open_issues_count": {
                "type": "number"
              },
              "is_template": {
                "type": "boolean"
              },
              "topics": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "has_issues": {
                "type": "boolean"
              },
              "has_projects": {
                "type": "boolean"
              },
              "has_wiki": {
                "type": "boolean"
              },
              "has_pages": {
                "type": "boolean"
              },
              "has_downloads": {
                "type": "boolean"
              },
              "archived": {
                "type": "boolean"
              },
              "disabled": {
                "type": "boolean"
              },
              "visibility": {
                "type": "string"
              },
              "pushed_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              },
              "updated_at": {
                "type": "string"
              },
              "permissions": {
                "type": "object",
                "properties": {
                  "admin": {
                    "type": "boolean"
                  },
                  "push": {
                    "type": "boolean"
                  },
                  "pull": {
                    "type": "boolean"
                  }
                }
              },
              "allow_rebase_merge": {
                "type": "boolean"
              },
              "template_repository": {
                "nullable": true
              },
              "temp_clone_token": {
                "type": "string"
              },
              "allow_squash_merge": {
                "type": "boolean"
              },
              "delete_branch_on_merge": {
                "type": "boolean"
              },
              "allow_merge_commit": {
                "type": "boolean"
              },
              "subscribers_count": {
                "type": "number"
              },
              "network_count": {
                "type": "number"
              }
            }
          }
        }
      },
      "public-user": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "node_id": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "gravatar_id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "html_url": {
            "type": "string"
          },
          "followers_url": {
            "type": "string"
          },
          "following_url": {
            "type": "string"
          },
          "gists_url": {
            "type": "string"
          },
          "starred_url": {
            "type": "string"
          },
          "subscriptions_url": {
            "type": "string"
          },
          "organizations_url": {
            "type": "string"
          },
          "repos_url": {
            "type": "string"
          },
          "events_url": {
            "type": "string"
          },
          "received_events_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "site_admin": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "blog": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "hireable": {
            "type": "boolean"
          },
          "bio": {
            "type": "string"
          },
          "twitter_username": {
            "type": "string"
          },
          "public_repos": {
            "type": "number"
          },
          "public_gists": {
            "type": "number"
          },
          "followers": {
            "type": "number"
          },
          "following": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "plan": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "space": {
                "type": "number"
              },
              "private_repos": {
                "type": "number"
              },
              "collaborators": {
                "type": "number"
              }
            }
          }
        }
      },
      "hovercard": {
        "type": "object",
        "properties": {
          "contexts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "octicon": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "key-simple": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "key": {
            "type": "string"
          }
        }
      }
    },
    "examples": {
      "installed_integration": {
        "value": {
          "id": 1,
          "slug": "octoapp",
          "node_id": "MDExOkludGVncmF0aW9uMQ==",
          "owner": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "name": "Octocat App",
          "description": "",
          "external_url": "https://example.com",
          "html_url": "https://github.com/apps/octoapp",
          "created_at": "2017-07-08T16:18:44-04:00",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "permissions": {
            "metadata": "read",
            "contents": "read",
            "issues": "write",
            "single_file": "write"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "installations_count": 3
        }
      },
      "integration-from-manifest": {
        "value": {
          "id": 1,
          "node_id": "MDM6QXBwNTk=",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "name": "octoapp",
          "description": null,
          "external_url": "https://www.example.com",
          "html_url": "https://github.com/apps/octoapp",
          "created_at": "2018-09-13T12:28:37Z",
          "updated_at": "2018-09-13T12:28:37Z",
          "client_id": "Iv1.8a61f9b3a7aba766",
          "client_secret": "1726be1638095a19edd134c77bde3aa2ece1e5d8",
          "webhook_secret": "e340154128314309424b7c8e90325147d99fdafa",
          "pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuEPzOUE+kiEH1WLiMeBytTEF856j0hOVcSUSUkZxKvqczkWM\n9vo1gDyC7ZXhdH9fKh32aapba3RSsp4ke+giSmYTk2mGR538ShSDxh0OgpJmjiKP\nX0Bj4j5sFqfXuCtl9SkH4iueivv4R53ktqM+n6hk98l6hRwC39GVIblAh2lEM4L/\n6WvYwuQXPMM5OG2Ryh2tDZ1WS5RKfgq+9ksNJ5Q9UtqtqHkO+E63N5OK9sbzpUUm\noNaOl3udTlZD3A8iqwMPVxH4SxgATBPAc+bmjk6BMJ0qIzDcVGTrqrzUiywCTLma\nszdk8GjzXtPDmuBgNn+o6s02qVGpyydgEuqmTQIDAQABAoIBACL6AvkjQVVLn8kJ\ndBYznJJ4M8ECo+YEgaFwgAHODT0zRQCCgzd+Vxl4YwHmKV2Lr+y2s0drZt8GvYva\nKOK8NYYZyi15IlwFyRXmvvykF1UBpSXluYFDH7KaVroWMgRreHcIys5LqVSIb6Bo\ngDmK0yBLPp8qR29s2b7ScZRtLaqGJiX+j55rNzrZwxHkxFHyG9OG+u9IsBElcKCP\nkYCVE8ZdYexfnKOZbgn2kZB9qu0T/Mdvki8yk3I2bI6xYO24oQmhnT36qnqWoCBX\nNuCNsBQgpYZeZET8mEAUmo9d+ABmIHIvSs005agK8xRaP4+6jYgy6WwoejJRF5yd\nNBuF7aECgYEA50nZ4FiZYV0vcJDxFYeY3kYOvVuKn8OyW+2rg7JIQTremIjv8FkE\nZnwuF9ZRxgqLxUIfKKfzp/5l5LrycNoj2YKfHKnRejxRWXqG+ZETfxxlmlRns0QG\nJ4+BYL0CoanDSeA4fuyn4Bv7cy/03TDhfg/Uq0Aeg+hhcPE/vx3ebPsCgYEAy/Pv\neDLssOSdeyIxf0Brtocg6aPXIVaLdus+bXmLg77rJIFytAZmTTW8SkkSczWtucI3\nFI1I6sei/8FdPzAl62/JDdlf7Wd9K7JIotY4TzT7Tm7QU7xpfLLYIP1bOFjN81rk\n77oOD4LsXcosB/U6s1blPJMZ6AlO2EKs10UuR1cCgYBipzuJ2ADEaOz9RLWwi0AH\nPza2Sj+c2epQD9ZivD7Zo/Sid3ZwvGeGF13JyR7kLEdmAkgsHUdu1rI7mAolXMaB\n1pdrsHureeLxGbRM6za3tzMXWv1Il7FQWoPC8ZwXvMOR1VQDv4nzq7vbbA8z8c+c\n57+8tALQHOTDOgQIzwK61QKBgERGVc0EJy4Uag+VY8J4m1ZQKBluqo7TfP6DQ7O8\nM5MX73maB/7yAX8pVO39RjrhJlYACRZNMbK+v/ckEQYdJSSKmGCVe0JrGYDuPtic\nI9+IGfSorf7KHPoMmMN6bPYQ7Gjh7a++tgRFTMEc8956Hnt4xGahy9NcglNtBpVN\n6G8jAoGBAMCh028pdzJa/xeBHLLaVB2sc0Fe7993WlsPmnVE779dAz7qMscOtXJK\nfgtriltLSSD6rTA9hUAsL/X62rY0wdXuNdijjBb/qvrx7CAV6i37NK1CjABNjsfG\nZM372Ac6zc1EqSrid2IjET1YqyIW2KGLI1R2xbQc98UGlt48OdWu\n-----END RSA PRIVATE KEY-----\n"
        }
      },
      "base-installation-items": {
        "value": [
          {
            "id": 1,
            "account": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
            "repositories_url": "https://api.github.com/installation/repositories",
            "html_url": "https://github.com/organizations/github/settings/installations/1",
            "app_id": 1,
            "target_id": 1,
            "target_type": "Organization",
            "permissions": {
              "checks": "write",
              "metadata": "read",
              "contents": "read"
            },
            "events": [
              "push",
              "pull_request"
            ],
            "single_file_name": "config.yml",
            "repository_selection": "selected"
          }
        ]
      },
      "base-installation": {
        "value": {
          "id": 1,
          "account": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "app_id": 1,
          "target_id": 1,
          "target_type": "Organization",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "single_file_name": "config.yml",
          "repository_selection": "selected"
        }
      },
      "installation-token": {
        "value": {
          "token": "v1.1f699f1069f60xxx",
          "expires_at": "2016-07-11T22:14:10Z",
          "permissions": {
            "issues": "write",
            "contents": "read"
          },
          "repository_selection": "selected",
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ]
        }
      },
      "application-grant-items": {
        "value": [
          {
            "id": 1,
            "url": "https://api.github.com/applications/grants/1",
            "app": {
              "url": "http://my-github-app.com",
              "name": "my github app",
              "client_id": "abcde12345fghij67890"
            },
            "created_at": "2011-09-06T17:26:27Z",
            "updated_at": "2011-09-06T20:39:23Z",
            "scopes": [
              "public_repo"
            ]
          }
        ]
      },
      "application-grant": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/applications/grants/1",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "created_at": "2011-09-06T17:26:27Z",
          "updated_at": "2011-09-06T20:39:23Z",
          "scopes": [
            "public_repo"
          ]
        }
      },
      "authorization-with-user": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "abcdefgh12345678",
          "token_last_eight": "12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "integration": {
        "value": {
          "id": 1,
          "slug": "octoapp",
          "node_id": "MDExOkludGVncmF0aW9uMQ==",
          "owner": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "name": "Octocat App",
          "description": "",
          "external_url": "https://example.com",
          "html_url": "https://github.com/apps/octoapp",
          "created_at": "2017-07-08T16:18:44-04:00",
          "updated_at": "2017-07-08T16:18:44-04:00",
          "permissions": {
            "metadata": "read",
            "contents": "read",
            "issues": "write",
            "single_file": "write"
          },
          "events": [
            "push",
            "pull_request"
          ]
        }
      },
      "authorization-items": {
        "value": [
          {
            "id": 1,
            "url": "https://api.github.com/authorizations/1",
            "scopes": [
              "public_repo"
            ],
            "token": "",
            "token_last_eight": "12345678",
            "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
            "app": {
              "url": "http://my-github-app.com",
              "name": "my github app",
              "client_id": "abcde12345fghij67890"
            },
            "note": "optional note",
            "note_url": "http://optional/note/url",
            "updated_at": "2011-09-06T20:39:23Z",
            "created_at": "2011-09-06T17:26:27Z",
            "fingerprint": "jklmnop12345678"
          }
        ]
      },
      "authorization": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "abcdefgh12345678",
          "token_last_eight": "12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": ""
        }
      },
      "authorization-response-if-returning-an-existing-token-2": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "",
          "token_last_eight": "12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": ""
        }
      },
      "authorization-response-if-returning-an-existing-token": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "",
          "token_last_eight": "12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "authorization-3": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "abcdefgh12345678",
          "token_last_eight": "12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "authorization-2": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/authorizations/1",
          "scopes": [
            "public_repo"
          ],
          "token": "",
          "token_last_eight": "12345678",
          "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
          "app": {
            "url": "http://my-github-app.com",
            "name": "my github app",
            "client_id": "abcde12345fghij67890"
          },
          "note": "optional note",
          "note_url": "http://optional/note/url",
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z",
          "fingerprint": "jklmnop12345678"
        }
      },
      "code-of-conduct-simple-items": {
        "value": [
          {
            "key": "citizen_code_of_conduct",
            "name": "Citizen Code of Conduct",
            "url": "https://api.github.com/codes_of_conduct/citizen_code_of_conduct"
          },
          {
            "key": "contributor_covenant",
            "name": "Contributor Covenant",
            "url": "https://api.github.com/codes_of_conduct/contributor_covenant"
          }
        ]
      },
      "code-of-conduct": {
        "value": {
          "key": "contributor_covenant",
          "name": "Contributor Covenant",
          "url": "https://api.github.com/codes_of_conduct/contributor_covenant",
          "body": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        }
      },
      "content-reference-attachment": {
        "value": {
          "id": 101,
          "title": "[A-1234] Error found in core/models.py file'",
          "body": "You have used an email that already exists for the user_email_uniq field.\n ## DETAILS:\n\nThe (email)=(Octocat@github.com) already exists.\n\n The error was found in core/models.py in get_or_create_user at line 62.\n\n self.save()"
        }
      },
      "actions-billing-usage": {
        "value": {
          "total_minutes_used": 305,
          "total_paid_minutes_used": 0,
          "included_minutes": 3000,
          "minutes_used_breakdown": {
            "UBUNTU": 205,
            "MACOS": 10,
            "WINDOWS": 90
          }
        }
      },
      "packages-billing-usage": {
        "value": {
          "total_gigabytes_bandwidth_used": 50,
          "total_paid_gigabytes_bandwidth_used": 40,
          "included_gigabytes_bandwidth": 10
        }
      },
      "combined-billing-usage": {
        "value": {
          "days_left_in_billing_cycle": 20,
          "estimated_paid_storage_for_month": 15,
          "estimated_storage_for_month": 40
        }
      },
      "feed": {
        "value": {
          "timeline_url": "https://github.com/timeline",
          "user_url": "https://github.com/{user}",
          "current_user_public_url": "https://github.com/octocat",
          "current_user_url": "https://github.com/octocat.private?token=abc123",
          "current_user_actor_url": "https://github.com/octocat.private.actor?token=abc123",
          "current_user_organization_url": "",
          "current_user_organization_urls": [
            "https://github.com/organizations/github/octocat.private.atom?token=abc123"
          ],
          "security_advisories_url": "https://github.com/security-advisories",
          "_links": {
            "timeline": {
              "href": "https://github.com/timeline",
              "type": "application/atom+xml"
            },
            "user": {
              "href": "https://github.com/{user}",
              "type": "application/atom+xml"
            },
            "current_user_public": {
              "href": "https://github.com/octocat",
              "type": "application/atom+xml"
            },
            "current_user": {
              "href": "https://github.com/octocat.private?token=abc123",
              "type": "application/atom+xml"
            },
            "current_user_actor": {
              "href": "https://github.com/octocat.private.actor?token=abc123",
              "type": "application/atom+xml"
            },
            "current_user_organization": {
              "href": "",
              "type": ""
            },
            "current_user_organizations": [
              {
                "href": "https://github.com/organizations/github/octocat.private.atom?token=abc123",
                "type": "application/atom+xml"
              }
            ],
            "security_advisories": {
              "href": "https://github.com/security-advisories",
              "type": "application/atom+xml"
            }
          }
        }
      },
      "base-gist-items": {
        "value": [
          {
            "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
            "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
            "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
            "id": "aa5a315d61ae9438b18d",
            "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
            "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
            "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
            "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
            "files": {
              "hello_world.rb": {
                "filename": "hello_world.rb",
                "type": "application/x-ruby",
                "language": "Ruby",
                "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                "size": 167
              }
            },
            "public": true,
            "created_at": "2010-04-14T02:15:15Z",
            "updated_at": "2011-06-20T11:34:15Z",
            "description": "Hello World Examples",
            "comments": 0,
            "user": null,
            "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "truncated": false
          }
        ]
      },
      "gist": {
        "value": {
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "files": {
            "hello_world.rb": {
              "filename": "hello_world.rb",
              "type": "application/x-ruby",
              "language": "Ruby",
              "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
              "size": 167,
              "truncated": false,
              "content": "class HelloWorld\n   def initialize(name)\n      @name = name.capitalize\n   end\n   def sayHi\n      puts \"Hello !\"\n   end\nend\n\nhello = HelloWorld.new(\"World\")\nhello.sayHi"
            },
            "hello_world.py": {
              "filename": "hello_world.py",
              "type": "application/x-python",
              "language": "Python",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/99c1bf3a345505c2e6195198d5f8c36267de570b/hello_world.py",
              "size": 199,
              "truncated": false,
              "content": "class HelloWorld:\n\n    def __init__(self, name):\n        self.name = name.capitalize()\n       \n    def sayHi(self):\n        print \"Hello \" + self.name + \"!\"\n\nhello = HelloWorld(\"world\")\nhello.sayHi()"
            },
            "hello_world_ruby.txt": {
              "filename": "hello_world_ruby.txt",
              "type": "text/plain",
              "language": "Text",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/9e4544db60e01a261aac098592b11333704e9082/hello_world_ruby.txt",
              "size": 46,
              "truncated": false,
              "content": "Run `ruby hello_world.rb` to print Hello World"
            },
            "hello_world_python.txt": {
              "filename": "hello_world_python.txt",
              "type": "text/plain",
              "language": "Text",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/076b4b78c10c9b7e1e0b73ffb99631bfc948de3b/hello_world_python.txt",
              "size": 48,
              "truncated": false,
              "content": "Run `python hello_world.py` to print Hello World"
            }
          },
          "public": true,
          "created_at": "2010-04-14T02:15:15Z",
          "updated_at": "2011-06-20T11:34:15Z",
          "description": "Hello World Examples",
          "comments": 0,
          "user": null,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "truncated": false,
          "forks": [
            {
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "url": "https://api.github.com/gists/dee9c42e4998ce2ea439",
              "id": "dee9c42e4998ce2ea439",
              "created_at": "2011-04-14T16:00:49Z",
              "updated_at": "2011-04-14T16:00:49Z"
            }
          ],
          "history": [
            {
              "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
              "version": "57a7f021a713b1c5a6a199b54cc514735d2d462f",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "change_status": {
                "deletions": 0,
                "additions": 180,
                "total": 180
              },
              "committed_at": "2010-04-14T02:15:15Z"
            }
          ]
        }
      },
      "gist-3": {
        "value": {
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "files": {
            "hello_world.rb": {
              "filename": "hello_world.rb",
              "type": "application/x-ruby",
              "language": "Ruby",
              "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
              "size": 167,
              "truncated": false,
              "content": "class HelloWorld\n   def initialize(name)\n      @name = name.capitalize\n   end\n   def sayHi\n      puts \"Hello !\"\n   end\nend\n\nhello = HelloWorld.new(\"World\")\nhello.sayHi"
            },
            "hello_world.py": {
              "filename": "hello_world.py",
              "type": "application/x-python",
              "language": "Python",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/99c1bf3a345505c2e6195198d5f8c36267de570b/hello_world.py",
              "size": 199,
              "truncated": false,
              "content": "class HelloWorld:\n\n    def __init__(self, name):\n        self.name = name.capitalize()\n       \n    def sayHi(self):\n        print \"Hello \" + self.name + \"!\"\n\nhello = HelloWorld(\"world\")\nhello.sayHi()"
            },
            "hello_world.md": {
              "filename": "hello_world.md",
              "type": "text/plain",
              "language": "Markdown",
              "raw_url": "https://gist.githubusercontent.com/octocat/8df0a8f642973cbda937bf542d37d4e9/raw/4221bb4b942568c4e3ab253022d2b7fec7844f21/hello_world.md",
              "size": 73,
              "truncated": false,
              "content": "Run `ruby hello_world.rb` or `python hello_world.py` to print Hello World"
            },
            "new_file.txt": {
              "filename": "new_file.txt",
              "type": "text/plain",
              "language": "Text",
              "raw_url": "https://gist.githubusercontent.com/octocat/8df0a8f642973cbda937bf542d37d4e9/raw/56ab7bdf864fa11c1e16acce2a5116171514d2d1/new_file.txt",
              "size": 31,
              "truncated": false,
              "content": "This is a new placeholder file."
            }
          },
          "public": true,
          "created_at": "2010-04-14T02:15:15Z",
          "updated_at": "2011-06-20T11:34:15Z",
          "description": "Hello World Examples",
          "comments": 0,
          "user": null,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "truncated": false,
          "forks": [
            {
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "url": "https://api.github.com/gists/dee9c42e4998ce2ea439",
              "id": "dee9c42e4998ce2ea439",
              "created_at": "2011-04-14T16:00:49Z",
              "updated_at": "2011-04-14T16:00:49Z"
            }
          ],
          "history": [
            {
              "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
              "version": "57a7f021a713b1c5a6a199b54cc514735d2d462f",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "change_status": {
                "deletions": 0,
                "additions": 180,
                "total": 180
              },
              "committed_at": "2010-04-14T02:15:15Z"
            }
          ]
        }
      },
      "gist-comment-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDExOkdpc3RDb21tZW50MQ==",
            "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
            "body": "Just commenting for the sake of commenting",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-18T23:23:56Z",
            "updated_at": "2011-04-18T23:23:56Z"
          }
        ]
      },
      "gist-comment": {
        "value": {
          "id": 1,
          "node_id": "MDExOkdpc3RDb21tZW50MQ==",
          "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
          "body": "Just commenting for the sake of commenting",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-18T23:23:56Z",
          "updated_at": "2011-04-18T23:23:56Z"
        }
      },
      "gist-commit-items": {
        "value": [
          {
            "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
            "version": "57a7f021a713b1c5a6a199b54cc514735d2d462f",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "change_status": {
              "deletions": 0,
              "additions": 180,
              "total": 180
            },
            "committed_at": "2010-04-14T02:15:15Z"
          }
        ]
      },
      "gist-fork-items": {
        "value": [
          {
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "url": "https://api.github.com/gists/dee9c42e4998ce2ea439",
            "id": "dee9c42e4998ce2ea439",
            "created_at": "2011-04-14T16:00:49Z",
            "updated_at": "2011-04-14T16:00:49Z"
          }
        ]
      },
      "base-gist": {
        "value": {
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "files": {
            "hello_world.rb": {
              "filename": "hello_world.rb",
              "type": "application/x-ruby",
              "language": "Ruby",
              "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
              "size": 167
            }
          },
          "public": true,
          "created_at": "2010-04-14T02:15:15Z",
          "updated_at": "2011-06-20T11:34:15Z",
          "description": "Hello World Examples",
          "comments": 0,
          "user": null,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "truncated": false
        }
      },
      "gist-2": {
        "value": {
          "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
          "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
          "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
          "id": "aa5a315d61ae9438b18d",
          "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
          "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
          "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
          "files": {
            "hello_world.rb": {
              "filename": "hello_world.rb",
              "type": "application/x-ruby",
              "language": "Ruby",
              "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
              "size": 167,
              "truncated": false,
              "content": "class HelloWorld\n   def initialize(name)\n      @name = name.capitalize\n   end\n   def sayHi\n      puts \"Hello !\"\n   end\nend\n\nhello = HelloWorld.new(\"World\")\nhello.sayHi"
            },
            "hello_world.py": {
              "filename": "hello_world.py",
              "type": "application/x-python",
              "language": "Python",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/99c1bf3a345505c2e6195198d5f8c36267de570b/hello_world.py",
              "size": 199,
              "truncated": false,
              "content": "class HelloWorld:\n\n    def __init__(self, name):\n        self.name = name.capitalize()\n       \n    def sayHi(self):\n        print \"Hello \" + self.name + \"!\"\n\nhello = HelloWorld(\"world\")\nhello.sayHi()"
            },
            "hello_world_ruby.txt": {
              "filename": "hello_world_ruby.txt",
              "type": "text/plain",
              "language": "Text",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/9e4544db60e01a261aac098592b11333704e9082/hello_world_ruby.txt",
              "size": 46,
              "truncated": false,
              "content": "Run `ruby hello_world.rb` to print Hello World"
            },
            "hello_world_python.txt": {
              "filename": "hello_world_python.txt",
              "type": "text/plain",
              "language": "Text",
              "raw_url": "https://gist.githubusercontent.com/octocat/e29f3839074953e1cc2934867fa5f2d2/raw/076b4b78c10c9b7e1e0b73ffb99631bfc948de3b/hello_world_python.txt",
              "size": 48,
              "truncated": false,
              "content": "Run `python hello_world.py` to print Hello World"
            }
          },
          "public": true,
          "created_at": "2010-04-14T02:15:15Z",
          "updated_at": "2011-06-20T11:34:15Z",
          "description": "Hello World Examples",
          "comments": 0,
          "user": null,
          "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "truncated": false,
          "forks": [
            {
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "url": "https://api.github.com/gists/dee9c42e4998ce2ea439",
              "id": "dee9c42e4998ce2ea439",
              "created_at": "2011-04-14T16:00:49Z",
              "updated_at": "2011-04-14T16:00:49Z"
            }
          ],
          "history": [
            {
              "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
              "version": "57a7f021a713b1c5a6a199b54cc514735d2d462f",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "change_status": {
                "deletions": 0,
                "additions": 180,
                "total": 180
              },
              "committed_at": "2010-04-14T02:15:15Z"
            }
          ]
        }
      },
      "gitignore-template": {
        "value": {
          "name": "C",
          "source": "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n"
        }
      },
      "repository-paginated-2": {
        "value": {
          "total_count": 1,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ]
        }
      },
      "issue-with-repo-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDU6SXNzdWUx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "number": 1347,
            "state": "open",
            "title": "Found a bug",
            "body": "I'm having a problem with this.",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "locked": true,
            "active_lock_reason": "too heated",
            "comments": 0,
            "pull_request": {
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
            },
            "closed_at": null,
            "created_at": "2011-04-22T13:33:48Z",
            "updated_at": "2011-04-22T13:33:48Z",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          }
        ]
      },
      "license-simple-items": {
        "value": [
          {
            "key": "mit",
            "name": "MIT License",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit",
            "node_id": "MDc6TGljZW5zZW1pdA=="
          },
          {
            "key": "lgpl-3.0",
            "name": "GNU Lesser General Public License v3.0",
            "spdx_id": "LGPL-3.0",
            "url": "https://api.github.com/licenses/lgpl-3.0"
          },
          {
            "key": "mpl-2.0",
            "name": "Mozilla Public License 2.0",
            "spdx_id": "MPL-2.0",
            "url": "https://api.github.com/licenses/mpl-2.0"
          },
          {
            "key": "agpl-3.0",
            "name": "GNU Affero General Public License v3.0",
            "spdx_id": "AGPL-3.0",
            "url": "https://api.github.com/licenses/agpl-3.0"
          },
          {
            "key": "unlicense",
            "name": "The Unlicense",
            "spdx_id": "Unlicense",
            "url": "https://api.github.com/licenses/unlicense"
          },
          {
            "key": "apache-2.0",
            "name": "Apache License 2.0",
            "spdx_id": "Apache-2.0",
            "url": "https://api.github.com/licenses/apache-2.0"
          },
          {
            "key": "gpl-3.0",
            "name": "GNU General Public License v3.0",
            "spdx_id": "GPL-3.0",
            "url": "https://api.github.com/licenses/gpl-3.0"
          }
        ]
      },
      "license": {
        "value": {
          "key": "mit",
          "name": "MIT License",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "node_id": "MDc6TGljZW5zZW1pdA==",
          "html_url": "http://choosealicense.com/licenses/mit/",
          "description": "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.",
          "implementation": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.",
          "permissions": [
            "commercial-use",
            "modifications",
            "distribution",
            "sublicense",
            "private-use"
          ],
          "conditions": [
            "include-copyright"
          ],
          "limitations": [
            "no-liability"
          ],
          "body": "\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
          "featured": true
        }
      },
      "marketplace-purchase": {
        "value": {
          "url": "https://api.github.com/orgs/github",
          "type": "Organization",
          "id": 4,
          "login": "github",
          "email": null,
          "organization_billing_email": "billing@github.com",
          "marketplace_pending_change": {
            "effective_date": "2017-11-11T00:00:00Z",
            "unit_count": null,
            "id": 77,
            "plan": {
              "url": "https://api.github.com/marketplace_listing/plans/1111",
              "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
              "id": 1111,
              "number": 2,
              "name": "Startup",
              "description": "A professional-grade CI solution",
              "monthly_price_in_cents": 699,
              "yearly_price_in_cents": 7870,
              "price_model": "flat-rate",
              "has_free_trial": true,
              "state": "published",
              "unit_name": null,
              "bullets": [
                "Up to 10 private repositories",
                "3 concurrent builds"
              ]
            }
          },
          "marketplace_purchase": {
            "billing_cycle": "monthly",
            "next_billing_date": "2017-11-11T00:00:00Z",
            "unit_count": null,
            "on_free_trial": true,
            "free_trial_ends_on": "2017-11-11T00:00:00Z",
            "updated_at": "2017-11-02T01:12:12Z",
            "plan": {
              "url": "https://api.github.com/marketplace_listing/plans/1313",
              "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
              "id": 1313,
              "number": 3,
              "name": "Pro",
              "description": "A professional-grade CI solution",
              "monthly_price_in_cents": 1099,
              "yearly_price_in_cents": 11870,
              "price_model": "flat-rate",
              "has_free_trial": true,
              "unit_name": null,
              "state": "published",
              "bullets": [
                "Up to 25 private repositories",
                "11 concurrent builds"
              ]
            }
          }
        }
      },
      "marketplace-listing-plan-items": {
        "value": [
          {
            "url": "https://api.github.com/marketplace_listing/plans/1313",
            "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
            "id": 1313,
            "number": 3,
            "name": "Pro",
            "description": "A professional-grade CI solution",
            "monthly_price_in_cents": 1099,
            "yearly_price_in_cents": 11870,
            "price_model": "flat-rate",
            "has_free_trial": true,
            "unit_name": null,
            "state": "published",
            "bullets": [
              "Up to 25 private repositories",
              "11 concurrent builds"
            ]
          }
        ]
      },
      "marketplace-purchase-items": {
        "value": [
          {
            "url": "https://api.github.com/orgs/github",
            "type": "Organization",
            "id": 4,
            "login": "github",
            "email": null,
            "organization_billing_email": "billing@github.com",
            "marketplace_pending_change": {
              "effective_date": "2017-11-11T00:00:00Z",
              "unit_count": null,
              "id": 77,
              "plan": {
                "url": "https://api.github.com/marketplace_listing/plans/1111",
                "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
                "id": 1111,
                "number": 2,
                "name": "Startup",
                "description": "A professional-grade CI solution",
                "monthly_price_in_cents": 699,
                "yearly_price_in_cents": 7870,
                "price_model": "flat-rate",
                "has_free_trial": true,
                "state": "published",
                "unit_name": null,
                "bullets": [
                  "Up to 10 private repositories",
                  "3 concurrent builds"
                ]
              }
            },
            "marketplace_purchase": {
              "billing_cycle": "monthly",
              "next_billing_date": "2017-11-11T00:00:00Z",
              "unit_count": null,
              "on_free_trial": true,
              "free_trial_ends_on": "2017-11-11T00:00:00Z",
              "updated_at": "2017-11-02T01:12:12Z",
              "plan": {
                "url": "https://api.github.com/marketplace_listing/plans/1313",
                "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
                "id": 1313,
                "number": 3,
                "name": "Pro",
                "description": "A professional-grade CI solution",
                "monthly_price_in_cents": 1099,
                "yearly_price_in_cents": 11870,
                "price_model": "flat-rate",
                "has_free_trial": true,
                "unit_name": null,
                "state": "published",
                "bullets": [
                  "Up to 25 private repositories",
                  "11 concurrent builds"
                ]
              }
            }
          }
        ]
      },
      "api-overview": {
        "value": {
          "verifiable_password_authentication": true,
          "ssh_key_fingerprints": {
            "MD5_RSA": "16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48",
            "MD5_DSA": "ad:1c:08:a4:40:e3:6f:9c:f5:66:26:5d:4b:33:5d:8c",
            "SHA256_RSA": "nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8",
            "SHA256_DSA": "br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ"
          },
          "hooks": [
            "192.30.252.0/22"
          ],
          "web": [
            "192.30.252.0/22",
            "185.199.108.0/22"
          ],
          "api": [
            "192.30.252.0/22",
            "185.199.108.0/22"
          ],
          "git": [
            "192.30.252.0/22"
          ],
          "pages": [
            "192.30.252.153/32",
            "192.30.252.154/32"
          ],
          "importer": [
            "54.158.161.132",
            "54.226.70.38"
          ]
        }
      },
      "thread-items": {
        "value": [
          {
            "id": "1",
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            },
            "subject": {
              "title": "Greetings",
              "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
              "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
              "type": "Issue"
            },
            "reason": "subscribed",
            "unread": true,
            "updated_at": "2014-11-07T22:01:45Z",
            "last_read_at": "2014-11-07T22:01:45Z",
            "url": "https://api.github.com/notifications/threads/1"
          }
        ]
      },
      "thread": {
        "value": {
          "id": "1",
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "subject": {
            "title": "Greetings",
            "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
            "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
            "type": "Issue"
          },
          "reason": "subscribed",
          "unread": true,
          "updated_at": "2014-11-07T22:01:45Z",
          "last_read_at": "2014-11-07T22:01:45Z",
          "url": "https://api.github.com/notifications/threads/1"
        }
      },
      "thread-subscription": {
        "value": {
          "subscribed": true,
          "ignored": false,
          "reason": null,
          "created_at": "2012-10-06T21:34:12Z",
          "url": "https://api.github.com/notifications/threads/1/subscription",
          "thread_url": "https://api.github.com/notifications/threads/1"
        }
      },
      "organization-simple-items": {
        "value": [
          {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          }
        ]
      },
      "organization-full-default-response": {
        "summary": "Default response",
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization",
          "name": "github",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "twitter_username": "github",
          "is_verified": true,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "html_url": "https://github.com/octocat",
          "created_at": "2008-01-14T04:33:35Z",
          "type": "Organization",
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "private_gists": 81,
          "disk_usage": 10000,
          "collaborators": 8,
          "billing_email": "support@github.com",
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20
          },
          "default_repository_permission": "read",
          "members_can_create_repositories": true,
          "two_factor_requirement_enabled": true,
          "members_allowed_repository_creation_type": "all",
          "members_can_create_public_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_internal_repositories": false
        }
      },
      "organization-full-response-with-git-hub-plan-information": {
        "summary": "Response with GitHub plan information",
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization",
          "name": "github",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "twitter_username": "github",
          "is_verified": true,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "html_url": "https://github.com/octocat",
          "created_at": "2008-01-14T04:33:35Z",
          "type": "Organization",
          "plan": {
            "name": "team",
            "space": 976562499,
            "private_repos": 999999,
            "filled_seats": 4,
            "seats": 5
          }
        }
      },
      "organization-full": {
        "value": {
          "login": "github",
          "id": 1,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
          "url": "https://api.github.com/orgs/github",
          "repos_url": "https://api.github.com/orgs/github/repos",
          "events_url": "https://api.github.com/orgs/github/events",
          "hooks_url": "https://api.github.com/orgs/github/hooks",
          "issues_url": "https://api.github.com/orgs/github/issues",
          "members_url": "https://api.github.com/orgs/github/members{/member}",
          "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "description": "A great organization",
          "name": "github",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "twitter_username": "github",
          "is_verified": true,
          "has_organization_projects": true,
          "has_repository_projects": true,
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "html_url": "https://github.com/octocat",
          "created_at": "2008-01-14T04:33:35Z",
          "type": "Organization",
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "private_gists": 81,
          "disk_usage": 10000,
          "collaborators": 8,
          "billing_email": "support@github.com",
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20
          },
          "default_repository_permission": "read",
          "members_can_create_repositories": true,
          "two_factor_requirement_enabled": true,
          "members_allowed_repository_creation_type": "all",
          "members_can_create_public_repositories": false,
          "members_can_create_private_repositories": false,
          "members_can_create_internal_repositories": false
        }
      },
      "runner-paginated": {
        "value": {
          "total_count": 2,
          "runners": [
            {
              "id": 23,
              "name": "MBP",
              "os": "macos",
              "status": "online",
              "busy": true
            },
            {
              "id": 24,
              "name": "iMac",
              "os": "macos",
              "status": "offline",
              "busy": false
            }
          ]
        }
      },
      "runner-application-items": {
        "value": [
          {
            "os": "osx",
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
            "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
          },
          {
            "os": "linux",
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
            "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
          },
          {
            "os": "linux",
            "architecture": "arm",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
            "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
          },
          {
            "os": "win",
            "architecture": "x64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
            "filename": "actions-runner-win-x64-2.164.0.zip"
          },
          {
            "os": "linux",
            "architecture": "arm64",
            "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
            "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
          }
        ]
      },
      "authentication-token": {
        "value": {
          "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
          "expires_at": "2020-01-22T12:13:35.123-08:00"
        }
      },
      "authentication-token-2": {
        "value": {
          "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
          "expires_at": "2020-01-29T12:13:35.123-08:00"
        }
      },
      "runner": {
        "value": {
          "id": 23,
          "name": "MBP",
          "os": "macos",
          "status": "online",
          "busy": false
        }
      },
      "organization-actions-secret-paginated": {
        "value": {
          "total_count": 3,
          "secrets": [
            {
              "name": "GIST_ID",
              "created_at": "2019-08-10T14:59:22Z",
              "updated_at": "2020-01-10T14:59:22Z",
              "visibility": "private"
            },
            {
              "name": "DEPLOY_TOKEN",
              "created_at": "2019-08-10T14:59:22Z",
              "updated_at": "2020-01-10T14:59:22Z",
              "visibility": "all"
            },
            {
              "name": "GH_TOKEN",
              "created_at": "2019-08-10T14:59:22Z",
              "updated_at": "2020-01-10T14:59:22Z",
              "visibility": "selected",
              "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories"
            }
          ]
        }
      },
      "actions-public-key": {
        "value": {
          "key_id": "012345678912345678",
          "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
        }
      },
      "organization-actions-secret": {
        "value": {
          "name": "GH_TOKEN",
          "created_at": "2019-08-10T14:59:22Z",
          "updated_at": "2020-01-10T14:59:22Z",
          "visibility": "selected",
          "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories"
        }
      },
      "public-repository-paginated": {
        "value": {
          "total_count": 1,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            }
          ]
        }
      },
      "simple-user-items": {
        "value": [
          {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        ]
      },
      "credential-authorization-items": {
        "value": [
          {
            "login": "octocat",
            "credential_id": "161195",
            "credential_type": "personal access token",
            "token_last_eight": "71c3fc11",
            "credential_authorized_at": "2011-01-26T19:06:43Z",
            "scopes": [
              "user",
              "repo"
            ]
          },
          {
            "login": "hubot",
            "credential_id": "161196",
            "credential_type": "personal access token",
            "token_last_eight": "12345678",
            "credential_authorized_at": "2019-03-29T19:06:43Z",
            "scopes": [
              "repo"
            ]
          }
        ]
      },
      "org-hook-items": {
        "value": [
          {
            "id": 1,
            "url": "https://api.github.com/orgs/octocat/hooks/1",
            "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
            "name": "web",
            "events": [
              "push",
              "pull_request"
            ],
            "active": true,
            "config": {
              "url": "http://example.com",
              "content_type": "json"
            },
            "updated_at": "2011-09-06T20:39:23Z",
            "created_at": "2011-09-06T17:26:27Z"
          }
        ]
      },
      "org-hook": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/orgs/octocat/hooks/1",
          "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
          "name": "web",
          "events": [
            "push",
            "pull_request"
          ],
          "active": true,
          "config": {
            "url": "http://example.com",
            "content_type": "json"
          },
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z"
        }
      },
      "org-hook-2": {
        "value": {
          "id": 1,
          "url": "https://api.github.com/orgs/octocat/hooks/1",
          "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
          "name": "web",
          "events": [
            "pull_request"
          ],
          "active": true,
          "config": {
            "url": "http://example.com",
            "content_type": "json"
          },
          "updated_at": "2011-09-06T20:39:23Z",
          "created_at": "2011-09-06T17:26:27Z"
        }
      },
      "installation": {
        "value": {
          "id": 1,
          "account": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "avatar_url": "https://github.com/images/error/hubot_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/orgs/github",
            "html_url": "https://github.com/github",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "repository_selection": "all",
          "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/1",
          "app_id": 1,
          "target_id": 1,
          "target_type": "Organization",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "push",
            "pull_request"
          ],
          "created_at": "2018-02-09T20:51:14Z",
          "updated_at": "2018-02-09T20:51:14Z",
          "single_file_name": null
        }
      },
      "installation-paginated": {
        "value": {
          "total_count": 1,
          "installations": [
            {
              "id": 25381,
              "account": {
                "login": "octo-org",
                "id": 6811672,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/6811672?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octo-org",
                "html_url": "https://github.com/octo-org",
                "followers_url": "https://api.github.com/users/octo-org/followers",
                "following_url": "https://api.github.com/users/octo-org/following{/other_user}",
                "gists_url": "https://api.github.com/users/octo-org/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octo-org/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octo-org/subscriptions",
                "organizations_url": "https://api.github.com/users/octo-org/orgs",
                "repos_url": "https://api.github.com/users/octo-org/repos",
                "events_url": "https://api.github.com/users/octo-org/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octo-org/received_events",
                "type": "Organization",
                "site_admin": false
              },
              "repository_selection": "selected",
              "access_tokens_url": "https://api.github.com/app/installations/25381/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/octo-org/settings/installations/25381",
              "app_id": 2218,
              "target_id": 6811672,
              "target_type": "Organization",
              "permissions": {
                "deployments": "write",
                "metadata": "read",
                "pull_requests": "read",
                "statuses": "read"
              },
              "events": [
                "deployment",
                "deployment_status"
              ],
              "created_at": "2017-05-16T08:47:09.000-07:00",
              "updated_at": "2017-06-06T11:23:23.000-07:00",
              "single_file_name": null
            }
          ]
        }
      },
      "interaction-limit": {
        "value": {
          "limit": "collaborators_only",
          "origin": "organization",
          "expires_at": "2018-08-17T04:18:39Z"
        }
      },
      "organization-invitation-items": {
        "value": [
          {
            "id": 1,
            "login": "monalisa",
            "email": "octocat@github.com",
            "role": "direct_member",
            "created_at": "2016-11-30T06:46:10-08:00",
            "inviter": {
              "login": "other_user",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/other_user",
              "html_url": "https://github.com/other_user",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "type": "User",
              "site_admin": false
            },
            "team_count": 2,
            "invitation_team_url": "https://api.github.com/organizations/2/invitations/1/teams"
          }
        ]
      },
      "organization-invitation": {
        "value": {
          "id": 1,
          "login": "monalisa",
          "email": "octocat@github.com",
          "role": "direct_member",
          "created_at": "2016-11-30T06:46:10-08:00",
          "inviter": {
            "login": "other_user",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/other_user_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/other_user",
            "html_url": "https://github.com/other_user",
            "followers_url": "https://api.github.com/users/other_user/followers",
            "following_url": "https://api.github.com/users/other_user/following{/other_user}",
            "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
            "organizations_url": "https://api.github.com/users/other_user/orgs",
            "repos_url": "https://api.github.com/users/other_user/repos",
            "events_url": "https://api.github.com/users/other_user/events{/privacy}",
            "received_events_url": "https://api.github.com/users/other_user/received_events",
            "type": "User",
            "site_admin": false
          },
          "team_count": 2,
          "invitation_team_url": "https://api.github.com/organizations/2/invitations/1/teams"
        }
      },
      "team-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDQ6VGVhbTE=",
            "url": "https://api.github.com/teams/1",
            "html_url": "https://api.github.com/teams/justice-league",
            "name": "Justice League",
            "slug": "justice-league",
            "description": "A great team.",
            "privacy": "closed",
            "permission": "admin",
            "members_url": "https://api.github.com/teams/1/members{/member}",
            "repositories_url": "https://api.github.com/teams/1/repos",
            "parent": null
          }
        ]
      },
      "org-membership-response-if-user-has-an-active-admin-membership-with-organization": {
        "summary": "Response if user has an active admin membership with organization",
        "value": {
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "state": "active",
          "role": "admin",
          "organization_url": "https://api.github.com/orgs/octocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "org-membership-response-if-user-has-an-active-membership-with-organization": {
        "summary": "Response if user has an active membership with organization",
        "value": {
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "state": "active",
          "role": "member",
          "organization_url": "https://api.github.com/orgs/octocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "org-membership-response-if-user-has-a-pending-membership-with-organization": {
        "summary": "Response if user has a pending membership with organization",
        "value": {
          "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
          "state": "pending",
          "role": "member",
          "organization_url": "https://api.github.com/orgs/invitocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "org-membership-response-if-user-was-previously-unaffiliated-with-organization": {
        "summary": "Response if user was previously unaffiliated with organization",
        "value": {
          "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
          "state": "pending",
          "role": "admin",
          "organization_url": "https://api.github.com/orgs/invitocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "org-membership-response-if-user-already-had-membership-with-organization": {
        "summary": "Response if user already had membership with organization",
        "value": {
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "state": "active",
          "role": "admin",
          "organization_url": "https://api.github.com/orgs/octocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "migration-with-short-org-items": {
        "value": [
          {
            "id": 79,
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "state": "pending",
            "lock_repositories": true,
            "exclude_attachments": false,
            "repositories": [
              {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            ],
            "url": "https://api.github.com/orgs/octo-org/migrations/79",
            "created_at": "2015-07-06T15:33:38-07:00",
            "updated_at": "2015-07-06T15:33:38-07:00"
          }
        ]
      },
      "migration-with-short-org-2": {
        "value": {
          "id": 79,
          "owner": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "pending",
          "lock_repositories": true,
          "exclude_attachments": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "migration-with-short-org": {
        "value": {
          "id": 79,
          "owner": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "exported",
          "lock_repositories": true,
          "exclude_attachments": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "minimal-repository-items": {
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "delete_branch_on_merge": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit",
              "node_id": "MDc6TGljZW5zZW1pdA=="
            }
          }
        ]
      },
      "project-items": {
        "value": [
          {
            "owner_url": "https://api.github.com/orgs/octocat",
            "url": "https://api.github.com/projects/1002605",
            "html_url": "https://github.com/orgs/api-playground/projects/1",
            "columns_url": "https://api.github.com/projects/1002605/columns",
            "id": 1002605,
            "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
            "name": "Organization Roadmap",
            "body": "High-level roadmap for the upcoming year.",
            "number": 1,
            "state": "open",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-11T20:09:31Z",
            "updated_at": "2014-03-04T18:58:10Z"
          }
        ]
      },
      "project-2": {
        "value": {
          "owner_url": "https://api.github.com/orgs/octocat",
          "url": "https://api.github.com/projects/1002605",
          "html_url": "https://github.com/orgs/api-playground/projects/1",
          "columns_url": "https://api.github.com/projects/1002605/columns",
          "id": 1002605,
          "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
          "name": "Organization Roadmap",
          "body": "High-level roadmap for the upcoming year.",
          "number": 1,
          "state": "open",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-11T20:09:31Z",
          "updated_at": "2014-03-04T18:58:10Z"
        }
      },
      "repository": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": true,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "push": false,
            "pull": true
          },
          "allow_rebase_merge": true,
          "template_repository": null,
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0
        }
      },
      "group-mapping-3": {
        "value": {
          "groups": [
            {
              "group_id": "123",
              "group_name": "Octocat admins",
              "group_description": "The people who configure your octoworld."
            },
            {
              "group_id": "456",
              "group_name": "Octocat docs members",
              "group_description": "The people who make your octoworld come to life."
            }
          ]
        }
      },
      "team-full": {
        "value": {
          "id": 1,
          "node_id": "MDQ6VGVhbTE=",
          "url": "https://api.github.com/teams/1",
          "html_url": "https://api.github.com/teams/justice-league",
          "name": "Justice League",
          "slug": "justice-league",
          "description": "A great team.",
          "privacy": "closed",
          "permission": "admin",
          "members_url": "https://api.github.com/teams/1/members{/member}",
          "repositories_url": "https://api.github.com/teams/1/repos",
          "parent": null,
          "members_count": 3,
          "repos_count": 10,
          "created_at": "2017-07-14T16:53:42Z",
          "updated_at": "2017-08-17T12:37:15Z",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization",
            "name": "github",
            "company": "GitHub",
            "blog": "https://github.com/blog",
            "location": "San Francisco",
            "email": "octocat@github.com",
            "twitter_username": "github",
            "is_verified": true,
            "has_organization_projects": true,
            "has_repository_projects": true,
            "public_repos": 2,
            "public_gists": 1,
            "followers": 20,
            "following": 0,
            "html_url": "https://github.com/octocat",
            "created_at": "2008-01-14T04:33:35Z",
            "type": "Organization"
          }
        }
      },
      "team-discussion-items": {
        "value": [
          {
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Hi! This is an area for us to collaborate as a team.",
            "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
            "body_version": "0d495416a700fb06133c612575d92bfb",
            "comments_count": 0,
            "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
            "created_at": "2018-01-25T18:56:31Z",
            "last_edited_at": null,
            "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
            "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
            "number": 1,
            "pinned": false,
            "private": false,
            "team_url": "https://api.github.com/teams/2343027",
            "title": "Our first team post",
            "updated_at": "2018-01-25T18:56:31Z",
            "url": "https://api.github.com/teams/2343027/discussions/1",
            "reactions": {
              "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
              "total_count": 5,
              "+1": 3,
              "-1": 1,
              "laugh": 0,
              "confused": 0,
              "heart": 1,
              "hooray": 0
            }
          }
        ]
      },
      "team-discussion": {
        "value": {
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Hi! This is an area for us to collaborate as a team.",
          "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
          "body_version": "0d495416a700fb06133c612575d92bfb",
          "comments_count": 0,
          "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
          "created_at": "2018-01-25T18:56:31Z",
          "last_edited_at": null,
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
          "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
          "number": 1,
          "pinned": false,
          "private": false,
          "team_url": "https://api.github.com/teams/2343027",
          "title": "Our first team post",
          "updated_at": "2018-01-25T18:56:31Z",
          "url": "https://api.github.com/teams/2343027/discussions/1",
          "reactions": {
            "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
            "total_count": 5,
            "+1": 3,
            "-1": 1,
            "laugh": 0,
            "confused": 0,
            "heart": 1,
            "hooray": 0
          }
        }
      },
      "team-discussion-2": {
        "value": {
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Hi! This is an area for us to collaborate as a team.",
          "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
          "body_version": "0d495416a700fb06133c612575d92bfb",
          "comments_count": 1,
          "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
          "created_at": "2018-01-25T18:56:31Z",
          "last_edited_at": "2018-01-26T18:22:20Z",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
          "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
          "number": 1,
          "pinned": false,
          "private": false,
          "team_url": "https://api.github.com/teams/2343027",
          "title": "Welcome to our first team post",
          "updated_at": "2018-01-26T18:22:20Z",
          "url": "https://api.github.com/teams/2343027/discussions/1",
          "reactions": {
            "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
            "total_count": 5,
            "+1": 3,
            "-1": 1,
            "laugh": 0,
            "confused": 0,
            "heart": 1,
            "hooray": 0
          }
        }
      },
      "team-discussion-comment-items": {
        "value": [
          {
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Do you like apples?",
            "body_html": "<p>Do you like apples?</p>",
            "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
            "created_at": "2018-01-15T23:53:58Z",
            "last_edited_at": null,
            "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
            "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
            "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
            "number": 1,
            "updated_at": "2018-01-15T23:53:58Z",
            "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
            "reactions": {
              "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
              "total_count": 5,
              "+1": 3,
              "-1": 1,
              "laugh": 0,
              "confused": 0,
              "heart": 1,
              "hooray": 0
            }
          }
        ]
      },
      "team-discussion-comment": {
        "value": {
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Do you like apples?",
          "body_html": "<p>Do you like apples?</p>",
          "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
          "created_at": "2018-01-15T23:53:58Z",
          "last_edited_at": null,
          "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
          "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
          "number": 1,
          "updated_at": "2018-01-15T23:53:58Z",
          "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
          "reactions": {
            "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
            "total_count": 5,
            "+1": 3,
            "-1": 1,
            "laugh": 0,
            "confused": 0,
            "heart": 1,
            "hooray": 0
          }
        }
      },
      "team-discussion-comment-2": {
        "value": {
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Do you like pineapples?",
          "body_html": "<p>Do you like pineapples?</p>",
          "body_version": "e6907b24d9c93cc0c5024a7af5888116",
          "created_at": "2018-01-15T23:53:58Z",
          "last_edited_at": "2018-01-26T18:22:20Z",
          "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
          "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
          "number": 1,
          "updated_at": "2018-01-26T18:22:20Z",
          "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
          "reactions": {
            "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
            "total_count": 5,
            "+1": 3,
            "-1": 1,
            "laugh": 0,
            "confused": 0,
            "heart": 1,
            "hooray": 0
          }
        }
      },
      "reaction-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDg6UmVhY3Rpb24x",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "content": "heart",
            "created_at": "2016-05-20T20:09:31Z"
          }
        ]
      },
      "reaction": {
        "value": {
          "id": 1,
          "node_id": "MDg6UmVhY3Rpb24x",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "content": "heart",
          "created_at": "2016-05-20T20:09:31Z"
        }
      },
      "team-membership-response-if-user-has-an-active-membership-with-team": {
        "summary": "Response if user has an active membership with team",
        "value": {
          "url": "https://api.github.com/teams/1/memberships/octocat",
          "role": "member",
          "state": "active"
        }
      },
      "team-membership-response-if-user-is-a-team-maintainer": {
        "summary": "Response if user is a team maintainer",
        "value": {
          "url": "https://api.github.com/teams/1/memberships/octocat",
          "role": "maintainer",
          "state": "active"
        }
      },
      "team-membership-response-if-user-has-a-pending-membership-with-team": {
        "summary": "Response if user has a pending membership with team",
        "value": {
          "url": "https://api.github.com/teams/1/memberships/octocat",
          "role": "member",
          "state": "pending"
        }
      },
      "team-membership-response-if-users-membership-with-team-is-now-active": {
        "summary": "Response if user's membership with team is now active",
        "value": {
          "url": "https://api.github.com/teams/1/memberships/octocat",
          "role": "member",
          "state": "active"
        }
      },
      "team-membership-response-if-users-membership-with-team-is-now-pending": {
        "summary": "Response if user's membership with team is now pending",
        "value": {
          "url": "https://api.github.com/teams/1/memberships/octocat",
          "role": "member",
          "state": "pending"
        }
      },
      "team-project-items": {
        "value": [
          {
            "owner_url": "https://api.github.com/orgs/octocat",
            "url": "https://api.github.com/projects/1002605",
            "html_url": "https://github.com/orgs/api-playground/projects/1",
            "columns_url": "https://api.github.com/projects/1002605/columns",
            "id": 1002605,
            "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
            "name": "Organization Roadmap",
            "body": "High-level roadmap for the upcoming year.",
            "number": 1,
            "state": "open",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-11T20:09:31Z",
            "updated_at": "2014-03-04T18:58:10Z",
            "organization_permission": "write",
            "private": false,
            "permissions": {
              "read": true,
              "write": true,
              "admin": false
            }
          }
        ]
      },
      "team-project": {
        "value": {
          "owner_url": "https://api.github.com/orgs/octocat",
          "url": "https://api.github.com/projects/1002605",
          "html_url": "https://github.com/orgs/api-playground/projects/1",
          "columns_url": "https://api.github.com/projects/1002605/columns",
          "id": 1002605,
          "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
          "name": "Organization Roadmap",
          "body": "High-level roadmap for the upcoming year.",
          "number": 1,
          "state": "open",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-11T20:09:31Z",
          "updated_at": "2014-03-04T18:58:10Z",
          "organization_permission": "write",
          "private": false,
          "permissions": {
            "read": true,
            "write": true,
            "admin": false
          }
        }
      },
      "team-repository-alternative-response-with-repository-permissions": {
        "summary": "Alternative response with repository permissions",
        "value": {
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "permissions": {
            "pull": true,
            "triage": true,
            "push": false,
            "maintain": false,
            "admin": false
          }
        }
      },
      "group-mapping": {
        "value": {
          "groups": {
            "group_id": "123",
            "group_name": "Octocat admins",
            "group_description": "The people who configure your octoworld."
          }
        }
      },
      "team-items-response-if-child-teams-exist": {
        "value": [
          {
            "id": 2,
            "node_id": "MDQ6VGVhbTI=",
            "url": "https://api.github.com/teams/2",
            "name": "Original Roster",
            "slug": "original-roster",
            "description": "Started it all.",
            "privacy": "closed",
            "permission": "admin",
            "members_url": "https://api.github.com/teams/2/members{/member}",
            "repositories_url": "https://api.github.com/teams/2/repos",
            "parent": {
              "id": 1,
              "node_id": "MDQ6VGVhbTE=",
              "url": "https://api.github.com/teams/1",
              "html_url": "https://api.github.com/teams/justice-league",
              "name": "Justice League",
              "slug": "justice-league",
              "description": "A great team.",
              "privacy": "closed",
              "permission": "admin",
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "repositories_url": "https://api.github.com/teams/1/repos"
            }
          }
        ]
      },
      "project-card": {
        "value": {
          "url": "https://api.github.com/projects/columns/cards/1478",
          "id": 1478,
          "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
          "note": "Add payload for delete Project column",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2016-09-05T14:21:06Z",
          "updated_at": "2016-09-05T14:20:22Z",
          "archived": false,
          "column_url": "https://api.github.com/projects/columns/367",
          "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
          "project_url": "https://api.github.com/projects/120"
        }
      },
      "project-column": {
        "value": {
          "url": "https://api.github.com/projects/columns/367",
          "project_url": "https://api.github.com/projects/120",
          "cards_url": "https://api.github.com/projects/columns/367/cards",
          "id": 367,
          "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
          "name": "To Do",
          "created_at": "2016-09-05T14:18:44Z",
          "updated_at": "2016-09-05T14:22:28Z"
        }
      },
      "project-card-items": {
        "value": [
          {
            "url": "https://api.github.com/projects/columns/cards/1478",
            "id": 1478,
            "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
            "note": "Add payload for delete Project column",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2016-09-05T14:21:06Z",
            "updated_at": "2016-09-05T14:20:22Z",
            "archived": false,
            "column_url": "https://api.github.com/projects/columns/367",
            "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
            "project_url": "https://api.github.com/projects/120"
          }
        ]
      },
      "project-3": {
        "value": {
          "owner_url": "https://api.github.com/repos/api-playground/projects-test",
          "url": "https://api.github.com/projects/1002604",
          "html_url": "https://github.com/api-playground/projects-test/projects/1",
          "columns_url": "https://api.github.com/projects/1002604/columns",
          "id": 1002604,
          "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
          "name": "Projects Documentation",
          "body": "Developer documentation project for the developer site.",
          "number": 1,
          "state": "open",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-10T20:09:31Z",
          "updated_at": "2014-03-03T18:58:10Z"
        }
      },
      "repository-collaborator-permission": {
        "value": {
          "permission": "admin",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "project-column-items": {
        "value": [
          {
            "url": "https://api.github.com/projects/columns/367",
            "project_url": "https://api.github.com/projects/120",
            "cards_url": "https://api.github.com/projects/columns/367/cards",
            "id": 367,
            "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
            "name": "To Do",
            "created_at": "2016-09-05T14:18:44Z",
            "updated_at": "2016-09-05T14:22:28Z"
          }
        ]
      },
      "rate-limit-overview": {
        "value": {
          "resources": {
            "core": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1372700873
            },
            "search": {
              "limit": 30,
              "remaining": 18,
              "reset": 1372697452
            },
            "graphql": {
              "limit": 5000,
              "remaining": 4993,
              "reset": 1372700389
            },
            "integration_manifest": {
              "limit": 5000,
              "remaining": 4999,
              "reset": 1551806725
            }
          },
          "rate": {
            "limit": 5000,
            "remaining": 4999,
            "reset": 1372700873
          }
        }
      },
      "full-repository-default-response": {
        "summary": "Default response",
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": true,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "pull": true,
            "triage": true,
            "push": false,
            "maintain": false,
            "admin": false
          },
          "allow_rebase_merge": true,
          "template_repository": null,
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0,
          "license": {
            "key": "mit",
            "name": "MIT License",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit",
            "node_id": "MDc6TGljZW5zZW1pdA=="
          },
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          }
        }
      },
      "full-repository-response-with-scarlet-witch-preview-media-type": {
        "summary": "Response with scarlet-witch-preview media type",
        "value": {
          "id": 88760408,
          "node_id": "MDEwOlJlcG9zaXRvcnk4ODc2MDQwOA==",
          "name": "cosee",
          "full_name": "LindseyB/cosee",
          "owner": {
            "login": "LindseyB",
            "id": 33750,
            "node_id": "MDQ6VXNlcjMzNzUw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/33750?v=3",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LindseyB",
            "html_url": "https://github.com/LindseyB",
            "followers_url": "https://api.github.com/users/LindseyB/followers",
            "following_url": "https://api.github.com/users/LindseyB/following{/other_user}",
            "gists_url": "https://api.github.com/users/LindseyB/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LindseyB/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LindseyB/subscriptions",
            "organizations_url": "https://api.github.com/users/LindseyB/orgs",
            "repos_url": "https://api.github.com/users/LindseyB/repos",
            "events_url": "https://api.github.com/users/LindseyB/events{/privacy}",
            "received_events_url": "https=>//api.github.com/users/LindseyB/received_events",
            "type": "User",
            "site_admin": true
          },
          "private": false,
          "html_url": "https://github.com/LindseyB/cosee",
          "description": null,
          "fork": false,
          "url": "https://api.github.com/repos/LindseyB/cosee",
          "forks_url": "https://api.github.com/repos/LindseyB/cosee/forks",
          "keys_url": "https://api.github.com/repos/LindseyB/cosee/keys{/key_id}",
          "collaborators_url": "https://api.github.com/repos/LindseyB/cosee/collaborators{/collaborator}",
          "teams_url": "https://api.github.com/repos/LindseyB/cosee/teams",
          "hooks_url": "https://api.github.com/repos/LindseyB/cosee/hooks",
          "issue_events_url": "https://api.github.com/repos/LindseyB/cosee/issues/events{/number}",
          "events_url": "https://api.github.com/repos/LindseyB/cosee/events",
          "assignees_url": "https://api.github.com/repos/LindseyB/cosee/assignees{/user}",
          "branches_url": "https://api.github.com/repos/LindseyB/cosee/branches{/branch}",
          "tags_url": "https://api.github.com/repos/LindseyB/cosee/tags",
          "blobs_url": "https://api.github.com/repos/LindseyB/cosee/git/blobs{/sha}",
          "git_tags_url": "https://api.github.com/repos/LindseyB/cosee/git/tags{/sha}",
          "git_refs_url": "https://api.github.com/repos/LindseyB/cosee/git/refs{/sha}",
          "trees_url": "https://api.github.com/repos/LindseyB/cosee/git/trees{/sha}",
          "statuses_url": "https://api.github.com/repos/LindseyB/cosee/statuses/{sha}",
          "languages_url": "https://api.github.com/repos/LindseyB/cosee/languages",
          "stargazers_url": "https://api.github.com/repos/LindseyB/cosee/stargazers",
          "contributors_url": "https://api.github.com/repos/LindseyB/cosee/contributors",
          "subscribers_url": "https://api.github.com/repos/LindseyB/cosee/subscribers",
          "subscription_url": "https://api.github.com/repos/LindseyB/cosee/subscription",
          "commits_url": "https://api.github.com/repos/LindseyB/cosee/commits{/sha}",
          "git_commits_url": "https://api.github.com/repos/LindseyB/cosee/git/commits{/sha}",
          "comments_url": "https://api.github.com/repos/LindseyB/cosee/comments{/number}",
          "issue_comment_url": "https://api.github.com/repos/LindseyB/cosee/issues/comments{/number}",
          "contents_url": "https://api.github.com/repos/LindseyB/cosee/contents/{+path}",
          "compare_url": "https://api.github.com/repos/LindseyB/cosee/compare/{base}...{head}",
          "merges_url": "https://api.github.com/repos/LindseyB/cosee/merges",
          "archive_url": "https://api.github.com/repos/LindseyB/cosee/{archive_format}{/ref}",
          "downloads_url": "https://api.github.com/repos/LindseyB/cosee/downloads",
          "issues_url": "https://api.github.com/repos/LindseyB/cosee/issues{/number}",
          "pulls_url": "https://api.github.com/repos/LindseyB/cosee/pulls{/number}",
          "milestones_url": "https://api.github.com/repos/LindseyB/cosee/milestones{/number}",
          "notifications_url": "https://api.github.com/repos/LindseyB/cosee/notifications{?since,all,participating}",
          "labels_url": "https://api.github.com/repos/LindseyB/cosee/labels{/name}",
          "releases_url": "https://api.github.com/repos/LindseyB/cosee/releases{/id}",
          "deployments_url": "https://api.github.com/repos/LindseyB/cosee/deployments",
          "created_at": "2017-04-19T15=>23=>26Z",
          "updated_at": "2017-04-19T15=>23=>26Z",
          "pushed_at": "2017-04-19T15=>34=>03Z",
          "git_url": "git://github.com/LindseyB/cosee.git",
          "ssh_url": "git@github.com=>LindseyB/cosee.git",
          "clone_url": "https://github.com/LindseyB/cosee.git",
          "svn_url": "https://github.com/LindseyB/cosee",
          "homepage": null,
          "size": 1,
          "stargazers_count": 0,
          "watchers_count": 0,
          "language": null,
          "has_issues": true,
          "has_projects": true,
          "has_downloads": true,
          "has_wiki": true,
          "has_pages": false,
          "forks_count": 0,
          "mirror_url": null,
          "open_issues_count": 0,
          "default_branch": "master",
          "code_of_conduct": {
            "key": "contributor_covenant",
            "name": "Contributor Covenant",
            "url": "https://github.com/LindseyB/cosee/blob/master/CODE_OF_CONDUCT.md"
          },
          "network_count": 0,
          "subscribers_count": 0
        }
      },
      "full-repository": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": true,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "pull": true,
            "triage": true,
            "push": false,
            "maintain": false,
            "admin": false
          },
          "allow_rebase_merge": true,
          "template_repository": null,
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0,
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          }
        }
      },
      "artifact-paginated": {
        "value": {
          "total_count": 2,
          "artifacts": [
            {
              "id": 11,
              "node_id": "MDg6QXJ0aWZhY3QxMQ==",
              "name": "Rails",
              "size_in_bytes": 556,
              "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
              "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
              "expired": false,
              "created_at": "2020-01-10T14:59:22Z",
              "expires_at": "2020-01-21T14:59:22Z"
            },
            {
              "id": 13,
              "node_id": "MDg6QXJ0aWZhY3QxMw==",
              "name": "",
              "size_in_bytes": 453,
              "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13",
              "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
              "expired": false,
              "created_at": "2020-01-10T14:59:22Z",
              "expires_at": "2020-01-21T14:59:22Z"
            }
          ]
        }
      },
      "artifact": {
        "value": {
          "id": 11,
          "node_id": "MDg6QXJ0aWZhY3QxMQ==",
          "name": "Rails",
          "size_in_bytes": 556,
          "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
          "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
          "expired": false,
          "created_at": "2020-01-10T14:59:22Z",
          "expires_at": "2020-01-21T14:59:22Z"
        }
      },
      "job": {
        "value": {
          "id": 399444496,
          "run_id": 29679449,
          "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
          "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
          "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
          "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
          "status": "completed",
          "conclusion": "success",
          "started_at": "2020-01-20T17:42:40Z",
          "completed_at": "2020-01-20T17:44:39Z",
          "name": "build",
          "steps": [
            {
              "name": "Set up job",
              "status": "completed",
              "conclusion": "success",
              "number": 1,
              "started_at": "2020-01-20T09:42:40.000-08:00",
              "completed_at": "2020-01-20T09:42:41.000-08:00"
            },
            {
              "name": "Run actions/checkout@v2",
              "status": "completed",
              "conclusion": "success",
              "number": 2,
              "started_at": "2020-01-20T09:42:41.000-08:00",
              "completed_at": "2020-01-20T09:42:45.000-08:00"
            },
            {
              "name": "Set up Ruby",
              "status": "completed",
              "conclusion": "success",
              "number": 3,
              "started_at": "2020-01-20T09:42:45.000-08:00",
              "completed_at": "2020-01-20T09:42:45.000-08:00"
            },
            {
              "name": "Run actions/cache@v2",
              "status": "completed",
              "conclusion": "success",
              "number": 4,
              "started_at": "2020-01-20T09:42:45.000-08:00",
              "completed_at": "2020-01-20T09:42:48.000-08:00"
            },
            {
              "name": "Install Bundler",
              "status": "completed",
              "conclusion": "success",
              "number": 5,
              "started_at": "2020-01-20T09:42:48.000-08:00",
              "completed_at": "2020-01-20T09:42:52.000-08:00"
            },
            {
              "name": "Install Gems",
              "status": "completed",
              "conclusion": "success",
              "number": 6,
              "started_at": "2020-01-20T09:42:52.000-08:00",
              "completed_at": "2020-01-20T09:42:53.000-08:00"
            },
            {
              "name": "Run Tests",
              "status": "completed",
              "conclusion": "success",
              "number": 7,
              "started_at": "2020-01-20T09:42:53.000-08:00",
              "completed_at": "2020-01-20T09:42:59.000-08:00"
            },
            {
              "name": "Deploy to Heroku",
              "status": "completed",
              "conclusion": "success",
              "number": 8,
              "started_at": "2020-01-20T09:42:59.000-08:00",
              "completed_at": "2020-01-20T09:44:39.000-08:00"
            },
            {
              "name": "Post actions/cache@v2",
              "status": "completed",
              "conclusion": "success",
              "number": 16,
              "started_at": "2020-01-20T09:44:39.000-08:00",
              "completed_at": "2020-01-20T09:44:39.000-08:00"
            },
            {
              "name": "Complete job",
              "status": "completed",
              "conclusion": "success",
              "number": 17,
              "started_at": "2020-01-20T09:44:39.000-08:00",
              "completed_at": "2020-01-20T09:44:39.000-08:00"
            }
          ],
          "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496"
        }
      },
      "workflow-run-paginated": {
        "value": {
          "total_count": 1,
          "workflow_runs": [
            {
              "id": 30433642,
              "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
              "head_branch": "master",
              "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
              "run_number": 562,
              "event": "push",
              "status": "queued",
              "conclusion": null,
              "workflow_id": 159038,
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
              "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
              "pull_requests": [],
              "created_at": "2020-01-22T19:33:08Z",
              "updated_at": "2020-01-22T19:33:08Z",
              "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
              "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
              "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
              "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
              "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
              "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
              "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
              "head_commit": {
                "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
                "message": "Create linter.yml",
                "timestamp": "2020-01-22T19:33:05Z",
                "author": {
                  "name": "Octo Cat",
                  "email": "octocat@github.com"
                },
                "committer": {
                  "name": "GitHub",
                  "email": "noreply@github.com"
                }
              },
              "repository": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
              },
              "head_repository": {
                "id": 217723378,
                "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                "name": "octo-repo",
                "full_name": "octo-org/octo-repo",
                "private": true,
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "html_url": "https://github.com/octo-org/octo-repo",
                "description": null,
                "fork": false,
                "url": "https://api.github.com/repos/octo-org/octo-repo",
                "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
              }
            }
          ]
        }
      },
      "workflow-run": {
        "value": {
          "id": 30433642,
          "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
          "head_branch": "master",
          "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
          "run_number": 562,
          "event": "push",
          "status": "queued",
          "conclusion": null,
          "workflow_id": 159038,
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
          "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
          "pull_requests": [],
          "created_at": "2020-01-22T19:33:08Z",
          "updated_at": "2020-01-22T19:33:08Z",
          "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
          "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
          "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
          "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
          "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
          "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
          "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
          "head_commit": {
            "id": "acb5820ced9479c074f688cc328bf03f341a511d",
            "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
            "message": "Create linter.yml",
            "timestamp": "2020-01-22T19:33:05Z",
            "author": {
              "name": "Octo Cat",
              "email": "octocat@github.com"
            },
            "committer": {
              "name": "GitHub",
              "email": "noreply@github.com"
            }
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "head_repository": {
            "id": 217723378,
            "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
            "name": "octo-repo",
            "full_name": "octo-org/octo-repo",
            "private": true,
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "html_url": "https://github.com/octo-org/octo-repo",
            "description": null,
            "fork": false,
            "url": "https://api.github.com/repos/octo-org/octo-repo",
            "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
            "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
            "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
            "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
            "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
            "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
            "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
            "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
            "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
            "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
            "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
            "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
            "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
            "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
            "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
            "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
            "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
            "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
            "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
            "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
            "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
          }
        }
      },
      "job-paginated": {
        "value": {
          "total_count": 1,
          "jobs": [
            {
              "id": 399444496,
              "run_id": 29679449,
              "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
              "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
              "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
              "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
              "status": "completed",
              "conclusion": "success",
              "started_at": "2020-01-20T17:42:40Z",
              "completed_at": "2020-01-20T17:44:39Z",
              "name": "build",
              "steps": [
                {
                  "name": "Set up job",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 1,
                  "started_at": "2020-01-20T09:42:40.000-08:00",
                  "completed_at": "2020-01-20T09:42:41.000-08:00"
                },
                {
                  "name": "Run actions/checkout@v2",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 2,
                  "started_at": "2020-01-20T09:42:41.000-08:00",
                  "completed_at": "2020-01-20T09:42:45.000-08:00"
                },
                {
                  "name": "Set up Ruby",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 3,
                  "started_at": "2020-01-20T09:42:45.000-08:00",
                  "completed_at": "2020-01-20T09:42:45.000-08:00"
                },
                {
                  "name": "Run actions/cache@v2",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 4,
                  "started_at": "2020-01-20T09:42:45.000-08:00",
                  "completed_at": "2020-01-20T09:42:48.000-08:00"
                },
                {
                  "name": "Install Bundler",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 5,
                  "started_at": "2020-01-20T09:42:48.000-08:00",
                  "completed_at": "2020-01-20T09:42:52.000-08:00"
                },
                {
                  "name": "Install Gems",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 6,
                  "started_at": "2020-01-20T09:42:52.000-08:00",
                  "completed_at": "2020-01-20T09:42:53.000-08:00"
                },
                {
                  "name": "Run Tests",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 7,
                  "started_at": "2020-01-20T09:42:53.000-08:00",
                  "completed_at": "2020-01-20T09:42:59.000-08:00"
                },
                {
                  "name": "Deploy to Heroku",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 8,
                  "started_at": "2020-01-20T09:42:59.000-08:00",
                  "completed_at": "2020-01-20T09:44:39.000-08:00"
                },
                {
                  "name": "Post actions/cache@v2",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 16,
                  "started_at": "2020-01-20T09:44:39.000-08:00",
                  "completed_at": "2020-01-20T09:44:39.000-08:00"
                },
                {
                  "name": "Complete job",
                  "status": "completed",
                  "conclusion": "success",
                  "number": 17,
                  "started_at": "2020-01-20T09:44:39.000-08:00",
                  "completed_at": "2020-01-20T09:44:39.000-08:00"
                }
              ],
              "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496"
            }
          ]
        }
      },
      "workflow-run-usage": {
        "value": {
          "billable": {
            "UBUNTU": {
              "total_ms": 180000,
              "jobs": 1
            },
            "MACOS": {
              "total_ms": 240000,
              "jobs": 4
            },
            "WINDOWS": {
              "total_ms": 300000,
              "jobs": 2
            }
          },
          "run_duration_ms": 500000
        }
      },
      "actions-secret-paginated": {
        "value": {
          "total_count": 2,
          "secrets": [
            {
              "name": "GH_TOKEN",
              "created_at": "2019-08-10T14:59:22Z",
              "updated_at": "2020-01-10T14:59:22Z"
            },
            {
              "name": "GIST_ID",
              "created_at": "2020-01-10T10:59:22Z",
              "updated_at": "2020-01-11T11:59:22Z"
            }
          ]
        }
      },
      "actions-secret": {
        "value": {
          "name": "GH_TOKEN",
          "created_at": "2019-08-10T14:59:22Z",
          "updated_at": "2020-01-10T14:59:22Z"
        }
      },
      "workflow-paginated": {
        "value": {
          "total_count": 2,
          "workflows": [
            {
              "id": 161335,
              "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
              "name": "CI",
              "path": ".github/workflows/blank.yml",
              "state": "active",
              "created_at": "2020-01-08T23:48:37.000-08:00",
              "updated_at": "2020-01-08T23:50:21.000-08:00",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335",
              "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
              "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg"
            },
            {
              "id": 269289,
              "node_id": "MDE4OldvcmtmbG93IFNlY29uZGFyeTI2OTI4OQ==",
              "name": "Linter",
              "path": ".github/workflows/linter.yml",
              "state": "active",
              "created_at": "2020-01-08T23:48:37.000-08:00",
              "updated_at": "2020-01-08T23:50:21.000-08:00",
              "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/269289",
              "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/269289",
              "badge_url": "https://github.com/octo-org/octo-repo/workflows/Linter/badge.svg"
            }
          ]
        }
      },
      "workflow": {
        "value": {
          "id": 161335,
          "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
          "name": "CI",
          "path": ".github/workflows/blank.yml",
          "state": "active",
          "created_at": "2020-01-08T23:48:37.000-08:00",
          "updated_at": "2020-01-08T23:50:21.000-08:00",
          "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335",
          "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
          "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg"
        }
      },
      "workflow-usage": {
        "value": {
          "billable": {
            "UBUNTU": {
              "total_ms": 180000
            },
            "MACOS": {
              "total_ms": 240000
            },
            "WINDOWS": {
              "total_ms": 300000
            }
          }
        }
      },
      "short-branch-with-protection-items": {
        "value": [
          {
            "name": "master",
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "protected": true,
            "protection": {
              "enabled": true,
              "required_status_checks": {
                "enforcement_level": "non_admins",
                "contexts": [
                  "ci-test",
                  "linter"
                ]
              }
            },
            "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
          }
        ]
      },
      "branch-with-protection": {
        "value": {
          "name": "master",
          "commit": {
            "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "node_id": "MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==",
            "commit": {
              "author": {
                "name": "The Octocat",
                "date": "2012-03-06T15:06:50-08:00",
                "email": "octocat@nowhere.com"
              },
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
              "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
              "tree": {
                "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
              },
              "committer": {
                "name": "The Octocat",
                "date": "2012-03-06T15:06:50-08:00",
                "email": "octocat@nowhere.com"
              },
              "verification": {
                "verified": false,
                "reason": "unsigned",
                "signature": null,
                "payload": null
              }
            },
            "author": {
              "gravatar_id": "",
              "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
              "url": "https://api.github.com/users/octocat",
              "id": 583231,
              "login": "octocat"
            },
            "parents": [
              {
                "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
              },
              {
                "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303"
              }
            ],
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "committer": {
              "gravatar_id": "",
              "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
              "url": "https://api.github.com/users/octocat",
              "id": 583231,
              "login": "octocat"
            }
          },
          "_links": {
            "html": "https://github.com/octocat/Hello-World/tree/master",
            "self": "https://api.github.com/repos/octocat/Hello-World/branches/master"
          },
          "protected": true,
          "protection": {
            "enabled": true,
            "required_status_checks": {
              "enforcement_level": "non_admins",
              "contexts": [
                "ci-test",
                "linter"
              ]
            }
          },
          "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
        }
      },
      "branch-protection": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection",
          "required_status_checks": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
            "strict": true,
            "contexts": [
              "continuous-integration/travis-ci"
            ],
            "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
          },
          "enforce_admins": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
            "enabled": true
          },
          "required_pull_request_reviews": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
            "dismissal_restrictions": {
              "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
              "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
              "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
              "users": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ],
              "teams": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://api.github.com/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            },
            "dismiss_stale_reviews": true,
            "require_code_owner_reviews": true,
            "required_approving_review_count": 2
          },
          "restrictions": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
            "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
            "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
            "users": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "teams": [
              {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://api.github.com/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            ],
            "apps": [
              {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              }
            ]
          },
          "required_linear_history": {
            "enabled": true
          },
          "allow_force_pushes": {
            "enabled": true
          },
          "allow_deletions": {
            "enabled": true
          }
        }
      },
      "protected-branch-admin-enforced-2": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
          "enabled": true
        }
      },
      "protected-branch-pull-request-review": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
          "dismissal_restrictions": {
            "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
            "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
            "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
            "users": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "teams": [
              {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://api.github.com/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            ]
          },
          "dismiss_stale_reviews": true,
          "require_code_owner_reviews": true,
          "required_approving_review_count": 2
        }
      },
      "protected-branch-admin-enforced": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures",
          "enabled": true
        }
      },
      "status-check-policy": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
          "strict": true,
          "contexts": [
            "continuous-integration/travis-ci"
          ],
          "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
        }
      },
      "branch-restriction-policy": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
          "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users",
          "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
          "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
          "users": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "teams": [
            {
              "id": 1,
              "node_id": "MDQ6VGVhbTE=",
              "url": "https://api.github.com/teams/1",
              "html_url": "https://api.github.com/teams/justice-league",
              "name": "Justice League",
              "slug": "justice-league",
              "description": "A great team.",
              "privacy": "closed",
              "permission": "admin",
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "parent": null
            }
          ],
          "apps": [
            {
              "id": 1,
              "slug": "octoapp",
              "node_id": "MDExOkludGVncmF0aW9uMQ==",
              "owner": {
                "login": "github",
                "id": 1,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "url": "https://api.github.com/orgs/github",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "events_url": "https://api.github.com/orgs/github/events",
                "hooks_url": "https://api.github.com/orgs/github/hooks",
                "issues_url": "https://api.github.com/orgs/github/issues",
                "members_url": "https://api.github.com/orgs/github/members{/member}",
                "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "description": "A great organization"
              },
              "name": "Octocat App",
              "description": "",
              "external_url": "https://example.com",
              "html_url": "https://github.com/apps/octoapp",
              "created_at": "2017-07-08T16:18:44-04:00",
              "updated_at": "2017-07-08T16:18:44-04:00",
              "permissions": {
                "metadata": "read",
                "contents": "read",
                "issues": "write",
                "single_file": "write"
              },
              "events": [
                "push",
                "pull_request"
              ]
            }
          ]
        }
      },
      "integration-items": {
        "value": [
          {
            "id": 1,
            "slug": "octoapp",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "name": "Octocat App",
            "description": "",
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "permissions": {
              "metadata": "read",
              "contents": "read",
              "issues": "write",
              "single_file": "write"
            },
            "events": [
              "push",
              "pull_request"
            ]
          }
        ]
      },
      "check-run-example-of-in-progress-conclusion": {
        "summary": "Example of in_progress conclusion",
        "value": {
          "id": 4,
          "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
          "node_id": "MDg6Q2hlY2tSdW40",
          "external_id": "42",
          "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
          "html_url": "http://github.com/github/hello-world/runs/4",
          "details_url": "https://example.com",
          "status": "in_progress",
          "conclusion": null,
          "started_at": "2018-05-04T01:14:52Z",
          "completed_at": null,
          "output": {
            "title": "Mighty Readme Report",
            "summary": "",
            "text": ""
          },
          "name": "mighty_readme",
          "check_suite": {
            "id": 5
          },
          "app": {
            "id": 1,
            "slug": "octoapp",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "name": "Octocat App",
            "description": "",
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "permissions": {
              "metadata": "read",
              "contents": "read",
              "issues": "write",
              "single_file": "write"
            },
            "events": [
              "push",
              "pull_request"
            ]
          },
          "pull_requests": [
            {
              "url": "https://api.github.com/repos/github/hello-world/pulls/1",
              "id": 1934,
              "number": 3956,
              "head": {
                "ref": "say-hello",
                "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                "repo": {
                  "id": 526,
                  "url": "https://api.github.com/repos/github/hello-world",
                  "name": "hello-world"
                }
              },
              "base": {
                "ref": "master",
                "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                "repo": {
                  "id": 526,
                  "url": "https://api.github.com/repos/github/hello-world",
                  "name": "hello-world"
                }
              }
            }
          ]
        }
      },
      "check-run-example-of-completed-conclusion": {
        "summary": "Example of completed conclusion",
        "value": {
          "id": 4,
          "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
          "node_id": "MDg6Q2hlY2tSdW40",
          "external_id": "",
          "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
          "html_url": "http://github.com/github/hello-world/runs/4",
          "details_url": "https://example.com",
          "status": "completed",
          "conclusion": "neutral",
          "started_at": "2018-05-04T01:14:52Z",
          "completed_at": "2018-05-04T01:14:52Z",
          "output": {
            "title": "Mighty Readme report",
            "summary": "There are 0 failures, 2 warnings, and 1 notice.",
            "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
            "annotations_count": 2,
            "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
          },
          "name": "mighty_readme",
          "check_suite": {
            "id": 5
          },
          "app": {
            "id": 1,
            "slug": "octoapp",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "name": "Octocat App",
            "description": "",
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "permissions": {
              "metadata": "read",
              "contents": "read",
              "issues": "write",
              "single_file": "write"
            },
            "events": [
              "push",
              "pull_request"
            ]
          },
          "pull_requests": [
            {
              "url": "https://api.github.com/repos/github/hello-world/pulls/1",
              "id": 1934,
              "number": 3956,
              "head": {
                "ref": "say-hello",
                "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                "repo": {
                  "id": 526,
                  "url": "https://api.github.com/repos/github/hello-world",
                  "name": "hello-world"
                }
              },
              "base": {
                "ref": "master",
                "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                "repo": {
                  "id": 526,
                  "url": "https://api.github.com/repos/github/hello-world",
                  "name": "hello-world"
                }
              }
            }
          ]
        }
      },
      "check-run": {
        "value": {
          "id": 4,
          "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
          "node_id": "MDg6Q2hlY2tSdW40",
          "external_id": "",
          "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
          "html_url": "http://github.com/github/hello-world/runs/4",
          "details_url": "https://example.com",
          "status": "completed",
          "conclusion": "neutral",
          "started_at": "2018-05-04T01:14:52Z",
          "completed_at": "2018-05-04T01:14:52Z",
          "output": {
            "title": "Mighty Readme report",
            "summary": "There are 0 failures, 2 warnings, and 1 notice.",
            "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
            "annotations_count": 2,
            "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
          },
          "name": "mighty_readme",
          "check_suite": {
            "id": 5
          },
          "app": {
            "id": 1,
            "slug": "octoapp",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "name": "Octocat App",
            "description": "",
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "permissions": {
              "metadata": "read",
              "contents": "read",
              "issues": "write",
              "single_file": "write"
            },
            "events": [
              "push",
              "pull_request"
            ]
          },
          "pull_requests": [
            {
              "url": "https://api.github.com/repos/github/hello-world/pulls/1",
              "id": 1934,
              "number": 3956,
              "head": {
                "ref": "say-hello",
                "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                "repo": {
                  "id": 526,
                  "url": "https://api.github.com/repos/github/hello-world",
                  "name": "hello-world"
                }
              },
              "base": {
                "ref": "master",
                "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                "repo": {
                  "id": 526,
                  "url": "https://api.github.com/repos/github/hello-world",
                  "name": "hello-world"
                }
              }
            }
          ]
        }
      },
      "check-annotation-items": {
        "value": [
          {
            "path": "README.md",
            "start_line": 2,
            "end_line": 2,
            "start_column": 5,
            "end_column": 10,
            "annotation_level": "warning",
            "title": "Spell Checker",
            "message": "Check your spelling for 'banaas'.",
            "raw_details": "Do you mean 'bananas' or 'banana'?"
          }
        ]
      },
      "check-suite": {
        "value": {
          "id": 5,
          "node_id": "MDEwOkNoZWNrU3VpdGU1",
          "head_branch": "master",
          "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "status": "completed",
          "conclusion": "neutral",
          "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
          "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
          "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
          "pull_requests": [],
          "app": {
            "id": 1,
            "slug": "octoapp",
            "node_id": "MDExOkludGVncmF0aW9uMQ==",
            "owner": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "name": "Octocat App",
            "description": "",
            "external_url": "https://example.com",
            "html_url": "https://github.com/apps/octoapp",
            "created_at": "2017-07-08T16:18:44-04:00",
            "updated_at": "2017-07-08T16:18:44-04:00",
            "permissions": {
              "metadata": "read",
              "contents": "read",
              "issues": "write",
              "single_file": "write"
            },
            "events": [
              "push",
              "pull_request"
            ]
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          }
        }
      },
      "check-suite-preference": {
        "value": {
          "preferences": {
            "auto_trigger_checks": [
              {
                "app_id": 2,
                "setting": true
              },
              {
                "app_id": 4,
                "setting": false
              }
            ]
          },
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          }
        }
      },
      "check-run-paginated": {
        "value": {
          "total_count": 1,
          "check_runs": [
            {
              "id": 4,
              "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
              "node_id": "MDg6Q2hlY2tSdW40",
              "external_id": "",
              "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
              "html_url": "http://github.com/github/hello-world/runs/4",
              "details_url": "https://example.com",
              "status": "completed",
              "conclusion": "neutral",
              "started_at": "2018-05-04T01:14:52Z",
              "completed_at": "2018-05-04T01:14:52Z",
              "output": {
                "title": "Mighty Readme report",
                "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                "annotations_count": 2,
                "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
              },
              "name": "mighty_readme",
              "check_suite": {
                "id": 5
              },
              "app": {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              },
              "pull_requests": [
                {
                  "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                  "id": 1934,
                  "number": 3956,
                  "head": {
                    "ref": "say-hello",
                    "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                    "repo": {
                      "id": 526,
                      "url": "https://api.github.com/repos/github/hello-world",
                      "name": "hello-world"
                    }
                  },
                  "base": {
                    "ref": "master",
                    "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                    "repo": {
                      "id": 526,
                      "url": "https://api.github.com/repos/github/hello-world",
                      "name": "hello-world"
                    }
                  }
                }
              ]
            }
          ]
        }
      },
      "code-scanning-alert-items": {
        "value": [
          {
            "rule_id": "js/trivial-conditional",
            "rule_severity": "warning",
            "rule_description": "Useless conditional",
            "tool": "CodeQL",
            "created_at": "2020-05-06T12:00:00Z",
            "open": true,
            "closed_by": null,
            "closed_at": null,
            "url": "https://api.github.com/repos/Octo-org/octo-repo/code-scanning/alerts/25",
            "html_url": "https://github.com/Octo-org/octo-repo/security/code-scanning/25"
          },
          {
            "rule_id": "js/useless-expression",
            "rule_severity": "warning",
            "rule_description": "Expression has no effect",
            "tool": "CodeQL",
            "created_at": "2020-05-06T12:00:00Z",
            "open": true,
            "closed_by": null,
            "closed_at": null,
            "url": "https://api.github.com/repos/Octo-org/octo-repo/code-scanning/alerts/88",
            "html_url": "https://github.com/Octo-org/octo-repo/security/code-scanning/88"
          }
        ]
      },
      "code-scanning-alert": {
        "value": {
          "rule_id": "js/useless-expression",
          "rule_severity": "warning",
          "rule_description": "Expression has no effect",
          "tool": "CodeQL",
          "created_at": "2020-05-06T12:00:00Z",
          "open": true,
          "closed_by": null,
          "closed_at": null,
          "url": "https://api.github.com/repos/Octo-org/octo-repo/code-scanning/alerts/88",
          "html_url": "https://github.com/Octo-org/octo-repo/security/code-scanning/88"
        }
      },
      "collaborator-items": {
        "value": [
          {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false,
            "permissions": {
              "pull": true,
              "push": true,
              "admin": false
            }
          }
        ]
      },
      "repository-invitation-response-when-a-new-invitation-is-created": {
        "value": {
          "id": 1,
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "invitee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "inviter": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "permissions": "write",
          "created_at": "2016-06-13T14:52:50-05:00",
          "url": "https://api.github.com/user/repository_invitations/1296269",
          "html_url": "https://github.com/octocat/Hello-World/invitations"
        }
      },
      "repository-collaborator-permission-response-if-user-has-admin-permissions": {
        "value": {
          "permission": "admin",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "commit-comment-items": {
        "value": [
          {
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
            "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
            "id": 1,
            "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
            "body": "Great stuff",
            "path": "file1.txt",
            "position": 4,
            "line": 14,
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-14T16:00:49Z",
            "updated_at": "2011-04-14T16:00:49Z"
          }
        ]
      },
      "commit-comment": {
        "value": {
          "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
          "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
          "id": 1,
          "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
          "body": "Great stuff",
          "path": "file1.txt",
          "position": 4,
          "line": 14,
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z"
        }
      },
      "commit-comment-2": {
        "value": {
          "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
          "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
          "id": 1,
          "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
          "body": "Nice change",
          "path": "file1.txt",
          "position": 4,
          "line": 14,
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z"
        }
      },
      "simple-commit-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
            "commit": {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "author": {
                "name": "Monalisa Octocat",
                "email": "support@github.com",
                "date": "2011-04-14T16:00:49Z"
              },
              "committer": {
                "name": "Monalisa Octocat",
                "email": "support@github.com",
                "date": "2011-04-14T16:00:49Z"
              },
              "message": "Fix all the bugs",
              "tree": {
                "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "comment_count": 0,
              "verification": {
                "verified": false,
                "reason": "unsigned",
                "signature": null,
                "payload": null
              }
            },
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "committer": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "parents": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            ]
          }
        ]
      },
      "branch-short-items": {
        "value": [
          {
            "name": "branch_5",
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "protected": false
          }
        ]
      },
      "pull-request-simple-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "id": 1,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
            "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
            "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
            "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "number": 1347,
            "state": "open",
            "locked": true,
            "title": "Amazing new feature",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Please pull these awesome changes in!",
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "active_lock_reason": "too heated",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:01:12Z",
            "closed_at": "2011-01-26T19:01:12Z",
            "merged_at": "2011-01-26T19:01:12Z",
            "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              {
                "login": "hubot",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hubot",
                "html_url": "https://github.com/hubot",
                "followers_url": "https://api.github.com/users/hubot/followers",
                "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                "organizations_url": "https://api.github.com/users/hubot/orgs",
                "repos_url": "https://api.github.com/users/hubot/repos",
                "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hubot/received_events",
                "type": "User",
                "site_admin": true
              }
            ],
            "requested_reviewers": [
              {
                "login": "other_user",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/other_user",
                "html_url": "https://github.com/other_user",
                "followers_url": "https://api.github.com/users/other_user/followers",
                "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                "organizations_url": "https://api.github.com/users/other_user/orgs",
                "repos_url": "https://api.github.com/users/other_user/repos",
                "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                "received_events_url": "https://api.github.com/users/other_user/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "requested_teams": [
              {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://api.github.com/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            ],
            "head": {
              "label": "octocat:new-topic",
              "ref": "new-topic",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "repo": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            },
            "base": {
              "label": "octocat:master",
              "ref": "master",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "repo": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            },
            "_links": {
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
              },
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1347"
              },
              "issue": {
                "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
              },
              "comments": {
                "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
              },
              "review_comments": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
              },
              "review_comment": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
              },
              "commits": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
              },
              "statuses": {
                "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            },
            "author_association": "OWNER",
            "draft": false
          }
        ]
      },
      "commit": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
          "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
          "commit": {
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "author": {
              "name": "Monalisa Octocat",
              "email": "support@github.com",
              "date": "2011-04-14T16:00:49Z"
            },
            "committer": {
              "name": "Monalisa Octocat",
              "email": "support@github.com",
              "date": "2011-04-14T16:00:49Z"
            },
            "message": "Fix all the bugs",
            "tree": {
              "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
            },
            "comment_count": 0,
            "verification": {
              "verified": false,
              "reason": "unsigned",
              "signature": null,
              "payload": null
            }
          },
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "committer": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "parents": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          ],
          "stats": {
            "additions": 104,
            "deletions": 4,
            "total": 108
          },
          "files": [
            {
              "filename": "file1.txt",
              "additions": 10,
              "deletions": 2,
              "changes": 12,
              "status": "modified",
              "raw_url": "https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
              "blob_url": "https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
              "patch": "@@ -29,7 +29,7 @@\n....."
            }
          ]
        }
      },
      "check-suite-paginated": {
        "value": {
          "total_count": 1,
          "check_suites": [
            {
              "id": 5,
              "node_id": "MDEwOkNoZWNrU3VpdGU1",
              "head_branch": "master",
              "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
              "status": "completed",
              "conclusion": "neutral",
              "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
              "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
              "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
              "pull_requests": [],
              "app": {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              },
              "repository": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            }
          ]
        }
      },
      "combined-commit-status": {
        "value": {
          "state": "success",
          "statuses": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "id": 1,
              "node_id": "MDY6U3RhdHVzMQ==",
              "state": "success",
              "description": "Build has completed successfully",
              "target_url": "https://ci.example.com/1000/output",
              "context": "continuous-integration/jenkins",
              "created_at": "2012-07-20T01:19:13Z",
              "updated_at": "2012-07-20T01:19:13Z"
            },
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "id": 2,
              "node_id": "MDY6U3RhdHVzMg==",
              "state": "success",
              "description": "Testing has completed successfully",
              "target_url": "https://ci.example.com/2000/output",
              "context": "security/brakeman",
              "created_at": "2012-08-20T01:19:13Z",
              "updated_at": "2012-08-20T01:19:13Z"
            }
          ],
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "total_count": 2,
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "commit_url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e/status"
        }
      },
      "status-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "avatar_url": "https://github.com/images/error/hubot_happy.gif",
            "id": 1,
            "node_id": "MDY6U3RhdHVzMQ==",
            "state": "success",
            "description": "Build has completed successfully",
            "target_url": "https://ci.example.com/1000/output",
            "context": "continuous-integration/jenkins",
            "created_at": "2012-07-20T01:19:13Z",
            "updated_at": "2012-07-20T01:19:13Z",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          }
        ]
      },
      "code-of-conduct-2": {
        "value": {
          "key": "contributor_covenant",
          "name": "Contributor Covenant",
          "url": "https://github.com/LindseyB/cosee/blob/master/CODE_OF_CONDUCT.md",
          "body": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include=>\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include=>\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\nto any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\nposting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at lindseyb@github.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        }
      },
      "community-profile": {
        "value": {
          "health_percentage": 100,
          "description": "My first repository on GitHub!",
          "documentation": true,
          "files": {
            "code_of_conduct": {
              "name": "Contributor Covenant",
              "key": "contributor_covenant",
              "url": "https://api.github.com/codes_of_conduct/contributor_covenant",
              "html_url": "https://github.com/octocat/Hello-World/blob/master/CODE_OF_CONDUCT.md"
            },
            "contributing": {
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/CONTRIBUTING",
              "html_url": "https://github.com/octocat/Hello-World/blob/master/CONTRIBUTING"
            },
            "issue_template": {
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/ISSUE_TEMPLATE",
              "html_url": "https://github.com/octocat/Hello-World/blob/master/ISSUE_TEMPLATE"
            },
            "pull_request_template": {
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/PULL_REQUEST_TEMPLATE",
              "html_url": "https://github.com/octocat/Hello-World/blob/master/PULL_REQUEST_TEMPLATE"
            },
            "license": {
              "name": "MIT License",
              "key": "mit",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit",
              "html_url": "https://github.com/octocat/Hello-World/blob/master/LICENSE"
            },
            "readme": {
              "url": "https://api.github.com/repos/octocat/Hello-World/contents/README.md",
              "html_url": "https://github.com/octocat/Hello-World/blob/master/README.md"
            }
          },
          "updated_at": "2017-02-28T19:09:29Z"
        }
      },
      "commit-comparison": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/compare/master...topic",
          "html_url": "https://github.com/octocat/Hello-World/compare/master...topic",
          "permalink_url": "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17",
          "diff_url": "https://github.com/octocat/Hello-World/compare/master...topic.diff",
          "patch_url": "https://github.com/octocat/Hello-World/compare/master...topic.patch",
          "base_commit": {
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
            "commit": {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "author": {
                "name": "Monalisa Octocat",
                "email": "support@github.com",
                "date": "2011-04-14T16:00:49Z"
              },
              "committer": {
                "name": "Monalisa Octocat",
                "email": "support@github.com",
                "date": "2011-04-14T16:00:49Z"
              },
              "message": "Fix all the bugs",
              "tree": {
                "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "comment_count": 0,
              "verification": {
                "verified": false,
                "reason": "unsigned",
                "signature": null,
                "payload": null
              }
            },
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "committer": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "parents": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            ]
          },
          "merge_base_commit": {
            "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
            "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
            "commit": {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "author": {
                "name": "Monalisa Octocat",
                "email": "support@github.com",
                "date": "2011-04-14T16:00:49Z"
              },
              "committer": {
                "name": "Monalisa Octocat",
                "email": "support@github.com",
                "date": "2011-04-14T16:00:49Z"
              },
              "message": "Fix all the bugs",
              "tree": {
                "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "comment_count": 0,
              "verification": {
                "verified": false,
                "reason": "unsigned",
                "signature": null,
                "payload": null
              }
            },
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "committer": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "parents": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              }
            ]
          },
          "status": "behind",
          "ahead_by": 1,
          "behind_by": 2,
          "total_commits": 1,
          "commits": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
              "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
              "commit": {
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "author": {
                  "name": "Monalisa Octocat",
                  "email": "support@github.com",
                  "date": "2011-04-14T16:00:49Z"
                },
                "committer": {
                  "name": "Monalisa Octocat",
                  "email": "support@github.com",
                  "date": "2011-04-14T16:00:49Z"
                },
                "message": "Fix all the bugs",
                "tree": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                },
                "comment_count": 0,
                "verification": {
                  "verified": false,
                  "reason": "unsigned",
                  "signature": null,
                  "payload": null
                }
              },
              "author": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "committer": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "parents": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                }
              ]
            }
          ],
          "files": [
            {
              "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
              "filename": "file1.txt",
              "status": "added",
              "additions": 103,
              "deletions": 21,
              "changes": 124,
              "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
              "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
              "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
              "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
            }
          ]
        }
      },
      "content-file-response-if-content-is-a-file": {
        "summary": "Response if content is a file",
        "value": {
          "type": "file",
          "encoding": "base64",
          "size": 5362,
          "name": "README.md",
          "path": "README.md",
          "content": "encoded content ...",
          "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
          "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
          "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
          "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
          "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
          "_links": {
            "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
            "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
            "html": "https://github.com/octokit/octokit.rb/blob/master/README.md"
          }
        }
      },
      "content-file-response-if-content-is-a-directory": {
        "summary": "Response if content is a directory",
        "value": [
          {
            "type": "file",
            "size": 625,
            "name": "octokit.rb",
            "path": "lib/octokit.rb",
            "sha": "fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
            "url": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit.rb",
            "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
            "html_url": "https://github.com/octokit/octokit.rb/blob/master/lib/octokit.rb",
            "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/lib/octokit.rb",
            "_links": {
              "self": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit.rb",
              "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
              "html": "https://github.com/octokit/octokit.rb/blob/master/lib/octokit.rb"
            }
          },
          {
            "type": "dir",
            "size": 0,
            "name": "octokit",
            "path": "lib/octokit",
            "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
            "url": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit",
            "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/trees/a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
            "html_url": "https://github.com/octokit/octokit.rb/tree/master/lib/octokit",
            "download_url": null,
            "_links": {
              "self": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit",
              "git": "https://api.github.com/repos/octokit/octokit.rb/git/trees/a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
              "html": "https://github.com/octokit/octokit.rb/tree/master/lib/octokit"
            }
          }
        ]
      },
      "content-file-response-if-content-is-a-symlink": {
        "summary": "Response if content is a symlink",
        "value": {
          "type": "symlink",
          "target": "/path/to/symlink/target",
          "size": 23,
          "name": "some-symlink",
          "path": "bin/some-symlink",
          "sha": "452a98979c88e093d682cab404a3ec82babebb48",
          "url": "https://api.github.com/repos/octokit/octokit.rb/contents/bin/some-symlink",
          "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/452a98979c88e093d682cab404a3ec82babebb48",
          "html_url": "https://github.com/octokit/octokit.rb/blob/master/bin/some-symlink",
          "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/bin/some-symlink",
          "_links": {
            "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/452a98979c88e093d682cab404a3ec82babebb48",
            "self": "https://api.github.com/repos/octokit/octokit.rb/contents/bin/some-symlink",
            "html": "https://github.com/octokit/octokit.rb/blob/master/bin/some-symlink"
          }
        }
      },
      "content-file-response-if-content-is-a-submodule": {
        "summary": "Response if content is a submodule",
        "value": {
          "type": "submodule",
          "submodule_git_url": "git://github.com/jquery/qunit.git",
          "size": 0,
          "name": "qunit",
          "path": "test/qunit",
          "sha": "6ca3721222109997540bd6d9ccd396902e0ad2f9",
          "url": "https://api.github.com/repos/jquery/jquery/contents/test/qunit?ref=master",
          "git_url": "https://api.github.com/repos/jquery/qunit/git/trees/6ca3721222109997540bd6d9ccd396902e0ad2f9",
          "html_url": "https://github.com/jquery/qunit/tree/6ca3721222109997540bd6d9ccd396902e0ad2f9",
          "download_url": null,
          "_links": {
            "git": "https://api.github.com/repos/jquery/qunit/git/trees/6ca3721222109997540bd6d9ccd396902e0ad2f9",
            "self": "https://api.github.com/repos/jquery/jquery/contents/test/qunit?ref=master",
            "html": "https://github.com/jquery/qunit/tree/6ca3721222109997540bd6d9ccd396902e0ad2f9"
          }
        }
      },
      "file-commit-example-for-updating-a-file": {
        "value": {
          "content": {
            "name": "hello.txt",
            "path": "notes/hello.txt",
            "sha": "a56507ed892d05a37c6d6128c260937ea4d287bd",
            "size": 9,
            "url": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
            "html_url": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
            "git_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd",
            "download_url": "https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt",
            "type": "file",
            "_links": {
              "self": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
              "git": "https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd",
              "html": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt"
            }
          },
          "commit": {
            "sha": "18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
            "node_id": "MDY6Q29tbWl0MThhNDNjZDhlMWUzYTc5Yzc4NmUzZDgwOGE3M2QyM2I2ZDIxMmIxNg==",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
            "html_url": "https://github.com/octocat/Hello-World/git/commit/18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
            "author": {
              "date": "2014-11-07T22:01:45Z",
              "name": "Monalisa Octocat",
              "email": "octocat@github.com"
            },
            "committer": {
              "date": "2014-11-07T22:01:45Z",
              "name": "Monalisa Octocat",
              "email": "octocat@github.com"
            },
            "message": "my commit message",
            "tree": {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f",
              "sha": "9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f"
            },
            "parents": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/da5a433788da5c255edad7979b328b67d79f53f6",
                "html_url": "https://github.com/octocat/Hello-World/git/commit/da5a433788da5c255edad7979b328b67d79f53f6",
                "sha": "da5a433788da5c255edad7979b328b67d79f53f6"
              }
            ],
            "verification": {
              "verified": false,
              "reason": "unsigned",
              "signature": null,
              "payload": null
            }
          }
        }
      },
      "file-commit-example-for-creating-a-file": {
        "value": {
          "content": {
            "name": "hello.txt",
            "path": "notes/hello.txt",
            "sha": "95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
            "size": 9,
            "url": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
            "html_url": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
            "git_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
            "download_url": "https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt",
            "type": "file",
            "_links": {
              "self": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
              "git": "https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
              "html": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt"
            }
          },
          "commit": {
            "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
            "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
            "html_url": "https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
            "author": {
              "date": "2014-11-07T22:01:45Z",
              "name": "Monalisa Octocat",
              "email": "octocat@github.com"
            },
            "committer": {
              "date": "2014-11-07T22:01:45Z",
              "name": "Monalisa Octocat",
              "email": "octocat@github.com"
            },
            "message": "my commit message",
            "tree": {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
              "sha": "691272480426f78a0138979dd3ce63b77f706feb"
            },
            "parents": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "html_url": "https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5"
              }
            ],
            "verification": {
              "verified": false,
              "reason": "unsigned",
              "signature": null,
              "payload": null
            }
          }
        }
      },
      "file-commit": {
        "value": {
          "content": null,
          "commit": {
            "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
            "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
            "html_url": "https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
            "author": {
              "date": "2014-11-07T22:01:45Z",
              "name": "Monalisa Octocat",
              "email": "octocat@github.com"
            },
            "committer": {
              "date": "2014-11-07T22:01:45Z",
              "name": "Monalisa Octocat",
              "email": "octocat@github.com"
            },
            "message": "my commit message",
            "tree": {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
              "sha": "691272480426f78a0138979dd3ce63b77f706feb"
            },
            "parents": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "html_url": "https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5"
              }
            ],
            "verification": {
              "verified": false,
              "reason": "unsigned",
              "signature": null,
              "payload": null
            }
          }
        }
      },
      "contributor-items-response-if-repository-contains-content": {
        "value": [
          {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false,
            "contributions": 32
          }
        ]
      },
      "deployment-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/example/deployments/1",
            "id": 1,
            "node_id": "MDEwOkRlcGxveW1lbnQx",
            "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
            "ref": "topic-branch",
            "task": "deploy",
            "payload": {
              "deploy": "migrate"
            },
            "original_environment": "staging",
            "environment": "production",
            "description": "Deploy request from hubot",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2012-07-20T01:19:13Z",
            "updated_at": "2012-07-20T01:19:13Z",
            "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
            "repository_url": "https://api.github.com/repos/octocat/example",
            "transient_environment": false,
            "production_environment": true
          }
        ]
      },
      "deployment-simple-example": {
        "summary": "Simple example",
        "value": {
          "url": "https://api.github.com/repos/octocat/example/deployments/1",
          "id": 1,
          "node_id": "MDEwOkRlcGxveW1lbnQx",
          "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "ref": "topic-branch",
          "task": "deploy",
          "payload": {
            "deploy": "migrate"
          },
          "original_environment": "staging",
          "environment": "production",
          "description": "Deploy request from hubot",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2012-07-20T01:19:13Z",
          "updated_at": "2012-07-20T01:19:13Z",
          "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "transient_environment": false,
          "production_environment": true
        }
      },
      "deployment-advanced-example": {
        "summary": "Advanced example",
        "value": {
          "url": "https://api.github.com/repos/octocat/example/deployments/1",
          "id": 1,
          "node_id": "MDEwOkRlcGxveW1lbnQx",
          "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "ref": "topic-branch",
          "task": "deploy",
          "payload": {
            "deploy": "migrate"
          },
          "original_environment": "staging",
          "environment": "production",
          "description": "Deploy request from hubot",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2012-07-20T01:19:13Z",
          "updated_at": "2012-07-20T01:19:13Z",
          "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "transient_environment": false,
          "production_environment": true
        }
      },
      "deployment": {
        "value": {
          "url": "https://api.github.com/repos/octocat/example/deployments/1",
          "id": 1,
          "node_id": "MDEwOkRlcGxveW1lbnQx",
          "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
          "ref": "topic-branch",
          "task": "deploy",
          "payload": {
            "deploy": "migrate"
          },
          "original_environment": "staging",
          "environment": "production",
          "description": "Deploy request from hubot",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2012-07-20T01:19:13Z",
          "updated_at": "2012-07-20T01:19:13Z",
          "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "transient_environment": false,
          "production_environment": true
        }
      },
      "deployment-status-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
            "id": 1,
            "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
            "state": "success",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "description": "Deployment finished successfully.",
            "environment": "production",
            "target_url": "https://example.com/deployment/42/output",
            "created_at": "2012-07-20T01:19:13Z",
            "updated_at": "2012-07-20T01:19:13Z",
            "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
            "repository_url": "https://api.github.com/repos/octocat/example",
            "environment_url": "",
            "log_url": "https://example.com/deployment/42/output"
          }
        ]
      },
      "deployment-status": {
        "value": {
          "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
          "id": 1,
          "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
          "state": "success",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "description": "Deployment finished successfully.",
          "environment": "production",
          "target_url": "https://example.com/deployment/42/output",
          "created_at": "2012-07-20T01:19:13Z",
          "updated_at": "2012-07-20T01:19:13Z",
          "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
          "repository_url": "https://api.github.com/repos/octocat/example",
          "environment_url": "",
          "log_url": "https://example.com/deployment/42/output"
        }
      },
      "minimal-repository-items-2": {
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": true,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "delete_branch_on_merge": true,
            "subscribers_count": 42,
            "network_count": 0,
            "license": {
              "key": "mit",
              "name": "MIT License",
              "spdx_id": "MIT",
              "url": "https://api.github.com/licenses/mit",
              "node_id": "MDc6TGljZW5zZW1pdA=="
            }
          }
        ]
      },
      "repository-2": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": true,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": true,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "push": false,
            "pull": true
          },
          "allow_rebase_merge": true,
          "template_repository": null,
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0
        }
      },
      "short-blob": {
        "value": {
          "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15"
        }
      },
      "blob": {
        "value": {
          "content": "Q29udGVudCBvZiB0aGUgYmxvYg==\n",
          "encoding": "base64",
          "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "size": 19
        }
      },
      "git-commit": {
        "value": {
          "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
          "author": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Monalisa Octocat",
            "email": "octocat@github.com"
          },
          "committer": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Monalisa Octocat",
            "email": "octocat@github.com"
          },
          "message": "my commit message",
          "tree": {
            "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132",
            "sha": "827efc6d56897b048c772eb4087f854f46256132"
          },
          "parents": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0",
              "sha": "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
            }
          ],
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      },
      "git-commit-2": {
        "value": {
          "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
          "author": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Monalisa Octocat",
            "email": "octocat@github.com"
          },
          "committer": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Monalisa Octocat",
            "email": "octocat@github.com"
          },
          "message": "added readme, because im a good github citizen",
          "tree": {
            "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
            "sha": "691272480426f78a0138979dd3ce63b77f706feb"
          },
          "parents": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
              "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5"
            }
          ],
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      },
      "git-ref-items": {
        "value": [
          {
            "ref": "refs/heads/feature-a",
            "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWE=",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-a",
            "object": {
              "type": "commit",
              "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
            }
          },
          {
            "ref": "refs/heads/feature-b",
            "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWI=",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-b",
            "object": {
              "type": "commit",
              "sha": "612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac"
            }
          }
        ]
      },
      "git-ref": {
        "value": {
          "ref": "refs/heads/featureA",
          "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
          "object": {
            "type": "commit",
            "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
          }
        }
      },
      "git-tag": {
        "value": {
          "node_id": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
          "tag": "v0.0.1",
          "sha": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "message": "initial version",
          "tagger": {
            "name": "Monalisa Octocat",
            "email": "octocat@github.com",
            "date": "2014-11-07T22:01:45Z"
          },
          "object": {
            "type": "commit",
            "sha": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
          },
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      },
      "git-tree": {
        "value": {
          "sha": "cd8274d15fa3ae2ab983129fb037999f264ba9a7",
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7",
          "tree": [
            {
              "path": "file.rb",
              "mode": "100644",
              "type": "blob",
              "size": 132,
              "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
            }
          ]
        }
      },
      "git-tree-default-response": {
        "summary": "Default response",
        "value": {
          "sha": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
          "tree": [
            {
              "path": "file.rb",
              "mode": "100644",
              "type": "blob",
              "size": 30,
              "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"
            },
            {
              "path": "subdir",
              "mode": "040000",
              "type": "tree",
              "sha": "f484d249c660418515fb01c2b9662073663c242e",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/f484d249c660418515fb01c2b9662073663c242e"
            },
            {
              "path": "exec_file",
              "mode": "100755",
              "type": "blob",
              "size": 75,
              "sha": "45b983be36b73c0788dc9cbcb76cbb80fc7bb057",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/45b983be36b73c0788dc9cbcb76cbb80fc7bb057"
            }
          ],
          "truncated": false
        }
      },
      "git-tree-response-recursively-retrieving-a-tree": {
        "summary": "Response recursively retrieving a tree",
        "value": {
          "sha": "fc6274d15fa3ae2ab983129fb037999f264ba9a7",
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/fc6274d15fa3ae2ab983129fb037999f264ba9a7",
          "tree": [
            {
              "path": "subdir/file.txt",
              "mode": "100644",
              "type": "blob",
              "size": 132,
              "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
            }
          ],
          "truncated": false
        }
      },
      "hook-items": {
        "value": [
          {
            "type": "Repository",
            "id": 12345678,
            "name": "web",
            "active": true,
            "events": [
              "push",
              "pull_request"
            ],
            "config": {
              "content_type": "json",
              "insecure_ssl": "0",
              "url": "https://example.com/webhook"
            },
            "updated_at": "2019-06-03T00:57:16Z",
            "created_at": "2019-06-03T00:57:16Z",
            "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
            "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
            "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
            "last_response": {
              "code": null,
              "status": "unused",
              "message": null
            }
          }
        ]
      },
      "hook": {
        "value": {
          "type": "Repository",
          "id": 12345678,
          "name": "web",
          "active": true,
          "events": [
            "push",
            "pull_request"
          ],
          "config": {
            "content_type": "json",
            "insecure_ssl": "0",
            "url": "https://example.com/webhook"
          },
          "updated_at": "2019-06-03T00:57:16Z",
          "created_at": "2019-06-03T00:57:16Z",
          "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
          "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
          "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
          "last_response": {
            "code": null,
            "status": "unused",
            "message": null
          }
        }
      },
      "import": {
        "value": {
          "vcs": "subversion",
          "use_lfs": "opt_in",
          "vcs_url": "http://svn.mycompany.com/svn/myproject",
          "status": "complete",
          "status_text": "Done",
          "has_large_files": true,
          "large_files_size": 132331036,
          "large_files_count": 1,
          "authors_count": 4,
          "url": "https://api.github.com/repos/octocat/socm/import",
          "html_url": "https://import.github.com/octocat/socm/import",
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "repository_url": "https://api.github.com/repos/octocat/socm"
        }
      },
      "import-2": {
        "value": {
          "vcs": "subversion",
          "use_lfs": "undecided",
          "vcs_url": "http://svn.mycompany.com/svn/myproject",
          "status": "importing",
          "status_text": "Importing...",
          "has_large_files": false,
          "large_files_size": 0,
          "large_files_count": 0,
          "authors_count": 0,
          "percent": 42,
          "commit_count": 1042,
          "url": "https://api.github.com/repos/octocat/socm/import",
          "html_url": "https://import.github.com/octocat/socm/import",
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "repository_url": "https://api.github.com/repos/octocat/socm"
        }
      },
      "import-example-1": {
        "summary": "Example 1",
        "value": {
          "vcs": "subversion",
          "use_lfs": "undecided",
          "vcs_url": "http://svn.mycompany.com/svn/myproject",
          "status": "detecting",
          "url": "https://api.github.com/repos/octocat/socm/import",
          "html_url": "https://import.github.com/octocat/socm/import",
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "repository_url": "https://api.github.com/repos/octocat/socm"
        }
      },
      "import-example-2": {
        "summary": "Example 2",
        "value": {
          "vcs": "tfvc",
          "use_lfs": "undecided",
          "vcs_url": "http://tfs.mycompany.com/tfs/myproject",
          "tfvc_project": "project1",
          "status": "importing",
          "status_text": "Importing...",
          "has_large_files": false,
          "large_files_size": 0,
          "large_files_count": 0,
          "authors_count": 0,
          "percent": 42,
          "commit_count": 1042,
          "url": "https://api.github.com/repos/octocat/socm/import",
          "html_url": "https://import.github.com/octocat/socm/import",
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "repository_url": "https://api.github.com/repos/octocat/socm"
        }
      },
      "import-response": {
        "summary": "Response",
        "value": {
          "vcs": "subversion",
          "use_lfs": "undecided",
          "vcs_url": "http://svn.mycompany.com/svn/myproject",
          "status": "importing",
          "status_text": "Importing...",
          "has_large_files": false,
          "large_files_size": 0,
          "large_files_count": 0,
          "authors_count": 0,
          "percent": 42,
          "commit_count": 1042,
          "url": "https://api.github.com/repos/octocat/socm/import",
          "html_url": "https://import.github.com/octocat/socm/import",
          "authors_url": "https://api.github.com/repos/octocat/socm/import/authors",
          "repository_url": "https://api.github.com/repos/octocat/socm"
        }
      },
      "porter-author-items": {
        "value": [
          {
            "id": 2268557,
            "remote_id": "nobody@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "remote_name": "nobody",
            "email": "hubot@github.com",
            "name": "Hubot",
            "url": "https://api.github.com/repos/octocat/socm/import/authors/2268557",
            "import_url": "https://api.github.com/repos/octocat/socm/import"
          },
          {
            "id": 2268558,
            "remote_id": "svner@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "remote_name": "svner",
            "email": "svner@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "name": "svner",
            "url": "https://api.github.com/repos/octocat/socm/import/authors/2268558",
            "import_url": "https://api.github.com/repos/octocat/socm/import"
          },
          {
            "id": 2268559,
            "remote_id": "svner@example.com@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "remote_name": "svner@example.com",
            "email": "svner@example.com@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
            "name": "svner@example.com",
            "url": "https://api.github.com/repos/octocat/socm/import/authors/2268559",
            "import_url": "https://api.github.com/repos/octocat/socm/import"
          }
        ]
      },
      "porter-author": {
        "value": {
          "id": 2268557,
          "remote_id": "nobody@fc7da526-431c-80fe-3c8c-c148ff18d7ef",
          "remote_name": "nobody",
          "email": "hubot@github.com",
          "name": "Hubot",
          "url": "https://api.github.com/repos/octocat/socm/import/authors/2268557",
          "import_url": "https://api.github.com/repos/octocat/socm/import"
        }
      },
      "porter-large-file-items": {
        "value": [
          {
            "ref_name": "refs/heads/master",
            "path": "foo/bar/1",
            "oid": "d3d9446802a44259755d38e6d163e820",
            "size": 10485760
          },
          {
            "ref_name": "refs/heads/master",
            "path": "foo/bar/2",
            "oid": "6512bd43d9caa6e02c990b0a82652dca",
            "size": 11534336
          },
          {
            "ref_name": "refs/heads/master",
            "path": "foo/bar/3",
            "oid": "c20ad4d76fe97759aa27a0c99bff6710",
            "size": 12582912
          }
        ]
      },
      "interaction-limit-2": {
        "value": {
          "limit": "collaborators_only",
          "origin": "repository",
          "expires_at": "2018-08-17T04:18:39Z"
        }
      },
      "repository-invitation-items": {
        "value": [
          {
            "id": 1,
            "repository": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
            },
            "invitee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "inviter": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "permissions": "write",
            "created_at": "2016-06-13T14:52:50-05:00",
            "url": "https://api.github.com/user/repository_invitations/1296269",
            "html_url": "https://github.com/octocat/Hello-World/invitations"
          }
        ]
      },
      "repository-invitation": {
        "value": {
          "id": 1,
          "repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          },
          "invitee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "inviter": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "permissions": "write",
          "created_at": "2016-06-13T14:52:50-05:00",
          "url": "https://api.github.com/user/repository_invitations/1296269",
          "html_url": "https://github.com/octocat/Hello-World/invitations"
        }
      },
      "issue-simple-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDU6SXNzdWUx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "number": 1347,
            "state": "open",
            "title": "Found a bug",
            "body": "I'm having a problem with this.",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "locked": true,
            "active_lock_reason": "too heated",
            "comments": 0,
            "pull_request": {
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
            },
            "closed_at": null,
            "created_at": "2011-04-22T13:33:48Z",
            "updated_at": "2011-04-22T13:33:48Z"
          }
        ]
      },
      "issue": {
        "value": {
          "id": 1,
          "node_id": "MDU6SXNzdWUx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "repository_url": "https://api.github.com/repos/octocat/Hello-World",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347",
          "number": 1347,
          "state": "open",
          "title": "Found a bug",
          "body": "I'm having a problem with this.",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "locked": true,
          "active_lock_reason": "too heated",
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
          },
          "closed_at": null,
          "created_at": "2011-04-22T13:33:48Z",
          "updated_at": "2011-04-22T13:33:48Z",
          "closed_by": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "issue-comment-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
            "body": "Me too",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-14T16:00:49Z",
            "updated_at": "2011-04-14T16:00:49Z"
          }
        ]
      },
      "issue-comment": {
        "value": {
          "id": 1,
          "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
          "body": "Me too",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z"
        }
      },
      "issue-event-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDEwOklzc3VlRXZlbnQx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
            "actor": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "event": "closed",
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z",
            "issue": {
              "id": 1,
              "node_id": "MDU6SXNzdWUx",
              "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
              "repository_url": "https://api.github.com/repos/octocat/Hello-World",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
              "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
              "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
              "html_url": "https://github.com/octocat/Hello-World/issues/1347",
              "number": 1347,
              "state": "open",
              "title": "Found a bug",
              "body": "I'm having a problem with this.",
              "user": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "labels": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                }
              ],
              "assignee": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "assignees": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ],
              "milestone": {
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "id": 1002604,
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "state": "open",
                "title": "v1.0",
                "description": "Tracking milestone for version 1.0",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "open_issues": 4,
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "closed_at": "2013-02-12T13:22:01Z",
                "due_on": "2012-10-09T23:39:01Z"
              },
              "locked": true,
              "active_lock_reason": "too heated",
              "comments": 0,
              "pull_request": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
              },
              "closed_at": null,
              "created_at": "2011-04-22T13:33:48Z",
              "updated_at": "2011-04-22T13:33:48Z"
            }
          }
        ]
      },
      "issue-event": {
        "value": {
          "id": 1,
          "node_id": "MDEwOklzc3VlRXZlbnQx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
          "actor": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "event": "closed",
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "created_at": "2011-04-14T16:00:49Z",
          "issue": {
            "id": 1,
            "node_id": "MDU6SXNzdWUx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
            "repository_url": "https://api.github.com/repos/octocat/Hello-World",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
            "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
            "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
            "html_url": "https://github.com/octocat/Hello-World/issues/1347",
            "number": 1347,
            "state": "open",
            "title": "Found a bug",
            "body": "I'm having a problem with this.",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "labels": [
              {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            ],
            "assignee": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assignees": [
              {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            ],
            "milestone": {
              "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
              "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
              "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
              "id": 1002604,
              "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
              "number": 1,
              "state": "open",
              "title": "v1.0",
              "description": "Tracking milestone for version 1.0",
              "creator": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "open_issues": 4,
              "closed_issues": 8,
              "created_at": "2011-04-10T20:09:31Z",
              "updated_at": "2014-03-03T18:58:10Z",
              "closed_at": "2013-02-12T13:22:01Z",
              "due_on": "2012-10-09T23:39:01Z"
            },
            "locked": true,
            "active_lock_reason": "too heated",
            "comments": 0,
            "pull_request": {
              "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
              "html_url": "https://github.com/octocat/Hello-World/pull/1347",
              "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
              "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
            },
            "closed_at": null,
            "created_at": "2011-04-22T13:33:48Z",
            "updated_at": "2011-04-22T13:33:48Z"
          }
        }
      },
      "issue-simple": {
        "value": {
          "id": 1,
          "node_id": "MDU6SXNzdWUx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "repository_url": "https://api.github.com/repos/octocat/Hello-World",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347",
          "number": 1347,
          "state": "open",
          "title": "Found a bug",
          "body": "I'm having a problem with this.",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "hubot",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/hubot",
              "html_url": "https://github.com/hubot",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "type": "User",
              "site_admin": true
            },
            {
              "login": "other_user",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/other_user",
              "html_url": "https://github.com/other_user",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "locked": true,
          "active_lock_reason": "too heated",
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
          },
          "closed_at": null,
          "created_at": "2011-04-22T13:33:48Z",
          "updated_at": "2011-04-22T13:33:48Z"
        }
      },
      "issue-simple-2": {
        "value": {
          "id": 1,
          "node_id": "MDU6SXNzdWUx",
          "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "repository_url": "https://api.github.com/repos/octocat/Hello-World",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
          "html_url": "https://github.com/octocat/Hello-World/issues/1347",
          "number": 1347,
          "state": "open",
          "title": "Found a bug",
          "body": "I'm having a problem with this.",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "locked": true,
          "active_lock_reason": "too heated",
          "comments": 0,
          "pull_request": {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
            "html_url": "https://github.com/octocat/Hello-World/pull/1347",
            "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
            "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
          },
          "closed_at": null,
          "created_at": "2011-04-22T13:33:48Z",
          "updated_at": "2011-04-22T13:33:48Z"
        }
      },
      "issue-event-for-issue-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDEwOklzc3VlRXZlbnQx",
            "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
            "actor": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "event": "closed",
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "created_at": "2011-04-14T16:00:49Z"
          }
        ]
      },
      "label-items": {
        "value": [
          {
            "id": 208045946,
            "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
            "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
            "name": "bug",
            "description": "Something isn't working",
            "color": "f29513",
            "default": true
          },
          {
            "id": 208045947,
            "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
            "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement",
            "name": "enhancement",
            "description": "New feature or request",
            "color": "a2eeef",
            "default": false
          }
        ]
      },
      "label-items-2": {
        "value": [
          {
            "id": 208045946,
            "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
            "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
            "name": "bug",
            "description": "Something isn't working",
            "color": "f29513",
            "default": true
          }
        ]
      },
      "deploy-key-items": {
        "value": [
          {
            "id": 1,
            "key": "ssh-rsa AAA...",
            "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
            "title": "octocat@octomac",
            "verified": true,
            "created_at": "2014-12-10T15:53:42Z",
            "read_only": true
          }
        ]
      },
      "deploy-key": {
        "value": {
          "id": 1,
          "key": "ssh-rsa AAA...",
          "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
          "title": "octocat@octomac",
          "verified": true,
          "created_at": "2014-12-10T15:53:42Z",
          "read_only": true
        }
      },
      "label": {
        "value": {
          "id": 208045946,
          "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
          "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
          "name": "bug",
          "description": "Something isn't working",
          "color": "f29513",
          "default": true
        }
      },
      "label-2": {
        "value": {
          "id": 208045946,
          "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
          "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug%20:bug:",
          "name": "bug :bug:",
          "description": "Small bug fix required",
          "color": "b01f26",
          "default": true
        }
      },
      "language": {
        "value": {
          "C": 78769,
          "Python": 7769
        }
      },
      "license-content": {
        "value": {
          "name": "LICENSE",
          "path": "LICENSE",
          "sha": "401c59dcc4570b954dd6d345e76199e1f4e76266",
          "size": 1077,
          "url": "https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master",
          "html_url": "https://github.com/benbalter/gman/blob/master/LICENSE",
          "git_url": "https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266",
          "download_url": "https://raw.githubusercontent.com/benbalter/gman/master/LICENSE?lab=true",
          "type": "file",
          "content": "VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTMgQmVu\nIEJhbHRlcgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBv\nZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZgp0\naGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmls\nZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgp0aGUgU29mdHdhcmUg\nd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRh\ndGlvbiB0aGUgcmlnaHRzIHRvCnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwg\ncHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwg\nY29waWVzIG9mCnRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25z\nIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywK\nc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJv\ndmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGlj\nZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50\naWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJ\nUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBL\nSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJ\nTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBG\nSVRORVNTCkZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklO\nR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUgpDT1BZ\nUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdF\nUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIKSU4gQU4gQUNUSU9OIE9G\nIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBP\nVVQgT0YgT1IgSU4KQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBU\nSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4K\n",
          "encoding": "base64",
          "_links": {
            "self": "https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master",
            "git": "https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266",
            "html": "https://github.com/benbalter/gman/blob/master/LICENSE"
          },
          "license": {
            "key": "mit",
            "name": "MIT License",
            "spdx_id": "MIT",
            "url": "https://api.github.com/licenses/mit",
            "node_id": "MDc6TGljZW5zZW1pdA=="
          }
        }
      },
      "simple-commit": {
        "value": {
          "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
          "node_id": "MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==",
          "commit": {
            "author": {
              "name": "The Octocat",
              "date": "2012-03-06T15:06:50-08:00",
              "email": "octocat@nowhere.com"
            },
            "committer": {
              "name": "The Octocat",
              "date": "2012-03-06T15:06:50-08:00",
              "email": "octocat@nowhere.com"
            },
            "message": "Shipped cool_feature!",
            "tree": {
              "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
            },
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
            "comment_count": 0,
            "verification": {
              "verified": false,
              "reason": "unsigned",
              "signature": null,
              "payload": null
            }
          },
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
          "html_url": "https://github.com/octocat/Hello-World/commit/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d/comments",
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "committer": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "parents": [
            {
              "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
            },
            {
              "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303"
            }
          ]
        }
      },
      "milestone-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          }
        ]
      },
      "milestone": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
          "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
          "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
          "id": 1002604,
          "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
          "number": 1,
          "state": "open",
          "title": "v1.0",
          "description": "Tracking milestone for version 1.0",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "open_issues": 4,
          "closed_issues": 8,
          "created_at": "2011-04-10T20:09:31Z",
          "updated_at": "2014-03-03T18:58:10Z",
          "closed_at": "2013-02-12T13:22:01Z",
          "due_on": "2012-10-09T23:39:01Z"
        }
      },
      "page": {
        "value": {
          "url": "https://api.github.com/repos/github/developer.github.com/pages",
          "status": "built",
          "cname": "developer.github.com",
          "custom_404": false,
          "html_url": "https://developer.github.com",
          "source": {
            "branch": "master",
            "directory": "/"
          }
        }
      },
      "page-build-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601",
            "status": "built",
            "error": {
              "message": null
            },
            "pusher": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
            "duration": 2104,
            "created_at": "2014-02-10T19:00:49Z",
            "updated_at": "2014-02-10T19:00:51Z"
          }
        ]
      },
      "page-build-status": {
        "value": {
          "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/latest",
          "status": "queued"
        }
      },
      "page-build": {
        "value": {
          "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601",
          "status": "built",
          "error": {
            "message": null
          },
          "pusher": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
          "duration": 2104,
          "created_at": "2014-02-10T19:00:49Z",
          "updated_at": "2014-02-10T19:00:51Z"
        }
      },
      "project-items-2": {
        "value": [
          {
            "owner_url": "https://api.github.com/repos/api-playground/projects-test",
            "url": "https://api.github.com/projects/1002604",
            "html_url": "https://github.com/api-playground/projects-test/projects/1",
            "columns_url": "https://api.github.com/projects/1002604/columns",
            "id": 1002604,
            "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
            "name": "Projects Documentation",
            "body": "Developer documentation project for the developer site.",
            "number": 1,
            "state": "open",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z"
          }
        ]
      },
      "pull-request": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "id": 1,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "html_url": "https://github.com/octocat/Hello-World/pull/1347",
          "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "number": 1347,
          "state": "open",
          "locked": true,
          "title": "Amazing new feature",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Please pull these awesome changes in!",
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "active_lock_reason": "too heated",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:01:12Z",
          "closed_at": "2011-01-26T19:01:12Z",
          "merged_at": "2011-01-26T19:01:12Z",
          "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "hubot",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/hubot",
              "html_url": "https://github.com/hubot",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "type": "User",
              "site_admin": true
            }
          ],
          "requested_reviewers": [
            {
              "login": "other_user",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/other_user",
              "html_url": "https://github.com/other_user",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "requested_teams": [
            {
              "id": 1,
              "node_id": "MDQ6VGVhbTE=",
              "url": "https://api.github.com/teams/1",
              "html_url": "https://api.github.com/teams/justice-league",
              "name": "Justice League",
              "slug": "justice-league",
              "description": "A great team.",
              "privacy": "closed",
              "permission": "admin",
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "parent": null
            }
          ],
          "head": {
            "label": "octocat:new-topic",
            "ref": "new-topic",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          },
          "base": {
            "label": "octocat:master",
            "ref": "master",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          },
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1347"
            },
            "issue": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
            },
            "comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
            },
            "review_comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
            },
            "review_comment": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
            },
            "commits": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
            },
            "statuses": {
              "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          },
          "author_association": "OWNER",
          "draft": false,
          "merged": false,
          "mergeable": true,
          "rebaseable": true,
          "mergeable_state": "clean",
          "merged_by": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "comments": 10,
          "review_comments": 0,
          "maintainer_can_modify": true,
          "commits": 3,
          "additions": 100,
          "deletions": 3,
          "changed_files": 5
        }
      },
      "pull-request-review-comment-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
            "pull_request_review_id": 42,
            "id": 10,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
            "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
            "path": "file1.txt",
            "position": 1,
            "original_position": 4,
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
            "in_reply_to_id": 8,
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Great stuff!",
            "created_at": "2011-04-14T16:00:49Z",
            "updated_at": "2011-04-14T16:00:49Z",
            "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
            "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
            "author_association": "NONE",
            "_links": {
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
              },
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
              },
              "pull_request": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
              }
            },
            "start_line": 1,
            "original_start_line": 1,
            "start_side": "RIGHT",
            "line": 2,
            "original_line": 2,
            "side": "RIGHT"
          }
        ]
      },
      "pull-request-review-comment-2": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "pull_request_review_id": 42,
          "id": 10,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "path": "file1.txt",
          "position": 1,
          "original_position": 4,
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "in_reply_to_id": 8,
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Great stuff!",
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "author_association": "NONE",
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            }
          },
          "start_line": 1,
          "original_start_line": 1,
          "start_side": "RIGHT",
          "line": 2,
          "original_line": 2,
          "side": "RIGHT"
        }
      },
      "pull-request-review-comment-example-for-a-multi-line-comment": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "pull_request_review_id": 42,
          "id": 10,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "path": "file1.txt",
          "position": 1,
          "original_position": 4,
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "in_reply_to_id": 8,
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Great stuff!",
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "author_association": "NONE",
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            }
          },
          "start_line": 1,
          "original_start_line": 1,
          "start_side": "RIGHT",
          "line": 2,
          "original_line": 2,
          "side": "RIGHT"
        }
      },
      "pull-request-review-comment": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
          "pull_request_review_id": 42,
          "id": 10,
          "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
          "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
          "path": "file1.txt",
          "position": 1,
          "original_position": 4,
          "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
          "in_reply_to_id": 426899381,
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Great stuff!",
          "created_at": "2011-04-14T16:00:49Z",
          "updated_at": "2011-04-14T16:00:49Z",
          "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
          "author_association": "NONE",
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
            }
          },
          "start_line": 1,
          "original_start_line": 1,
          "start_side": "RIGHT",
          "line": 2,
          "original_line": 2,
          "side": "RIGHT"
        }
      },
      "diff-entry-items": {
        "value": [
          {
            "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
            "filename": "file1.txt",
            "status": "added",
            "additions": 103,
            "deletions": 21,
            "changes": 124,
            "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
            "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
            "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
          }
        ]
      },
      "pull-request-merge-result-response-if-merge-was-successful": {
        "value": {
          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "merged": true,
          "message": "Pull Request successfully merged"
        }
      },
      "simple-pull-request-review-request": {
        "value": {
          "users": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "teams": [
            {
              "id": 1,
              "node_id": "MDQ6VGVhbTE=",
              "url": "https://api.github.com/teams/1",
              "html_url": "https://api.github.com/teams/justice-league",
              "name": "Justice League",
              "slug": "justice-league",
              "description": "A great team.",
              "privacy": "closed",
              "permission": "admin",
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "parent": null
            }
          ]
        }
      },
      "pull-request-review-request": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
          "id": 1,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
          "html_url": "https://github.com/octocat/Hello-World/pull/1347",
          "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
          "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
          "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
          "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
          "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
          "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
          "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
          "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "number": 1347,
          "state": "open",
          "locked": true,
          "title": "Amazing new feature",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Please pull these awesome changes in!",
          "labels": [
            {
              "id": 208045946,
              "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
              "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
              "name": "bug",
              "description": "Something isn't working",
              "color": "f29513",
              "default": true
            }
          ],
          "milestone": {
            "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
            "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
            "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
            "id": 1002604,
            "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
            "number": 1,
            "state": "open",
            "title": "v1.0",
            "description": "Tracking milestone for version 1.0",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 4,
            "closed_issues": 8,
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z",
            "closed_at": "2013-02-12T13:22:01Z",
            "due_on": "2012-10-09T23:39:01Z"
          },
          "active_lock_reason": "too heated",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:01:12Z",
          "closed_at": "2011-01-26T19:01:12Z",
          "merged_at": "2011-01-26T19:01:12Z",
          "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
          "assignee": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assignees": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "hubot",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/hubot",
              "html_url": "https://github.com/hubot",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "type": "User",
              "site_admin": true
            }
          ],
          "requested_reviewers": [
            {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            {
              "login": "hubot",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/hubot_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/hubot",
              "html_url": "https://github.com/hubot",
              "followers_url": "https://api.github.com/users/hubot/followers",
              "following_url": "https://api.github.com/users/hubot/following{/other_user}",
              "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
              "organizations_url": "https://api.github.com/users/hubot/orgs",
              "repos_url": "https://api.github.com/users/hubot/repos",
              "events_url": "https://api.github.com/users/hubot/events{/privacy}",
              "received_events_url": "https://api.github.com/users/hubot/received_events",
              "type": "User",
              "site_admin": true
            },
            {
              "login": "other_user",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/other_user_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/other_user",
              "html_url": "https://github.com/other_user",
              "followers_url": "https://api.github.com/users/other_user/followers",
              "following_url": "https://api.github.com/users/other_user/following{/other_user}",
              "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
              "organizations_url": "https://api.github.com/users/other_user/orgs",
              "repos_url": "https://api.github.com/users/other_user/repos",
              "events_url": "https://api.github.com/users/other_user/events{/privacy}",
              "received_events_url": "https://api.github.com/users/other_user/received_events",
              "type": "User",
              "site_admin": false
            }
          ],
          "requested_teams": [
            {
              "id": 1,
              "node_id": "MDQ6VGVhbTE=",
              "url": "https://api.github.com/teams/1",
              "html_url": "https://api.github.com/teams/justice-league",
              "name": "Justice League",
              "slug": "justice-league",
              "description": "A great team.",
              "privacy": "closed",
              "permission": "admin",
              "members_url": "https://api.github.com/teams/1/members{/member}",
              "repositories_url": "https://api.github.com/teams/1/repos",
              "parent": null
            }
          ],
          "head": {
            "label": "octocat:new-topic",
            "ref": "new-topic",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          },
          "base": {
            "label": "octocat:master",
            "ref": "master",
            "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          },
          "_links": {
            "self": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
            },
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/1347"
            },
            "issue": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
            },
            "comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
            },
            "review_comments": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
            },
            "review_comment": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
            },
            "commits": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
            },
            "statuses": {
              "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
            }
          },
          "author_association": "OWNER",
          "draft": false
        }
      },
      "pull-request-review-items": {
        "value": [
          {
            "id": 80,
            "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Here is the body for the review.",
            "state": "APPROVED",
            "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
            "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
            "_links": {
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
              },
              "pull_request": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
              }
            },
            "submitted_at": "2019-11-17T17:43:43Z",
            "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091"
          }
        ]
      },
      "pull-request-review": {
        "value": {
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "This is close to perfect! Please address the suggested inline change.",
          "state": "CHANGES_REQUESTED",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "submitted_at": "2019-11-17T17:43:43Z",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091"
        }
      },
      "pull-request-review-4": {
        "value": {
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Here is the body for the review.",
          "state": "APPROVED",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "submitted_at": "2019-11-17T17:43:43Z",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091"
        }
      },
      "pull-request-review-5": {
        "value": {
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "This is close to perfect! Please address the suggested inline change. And add more about this.",
          "state": "CHANGES_REQUESTED",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "submitted_at": "2019-11-17T17:43:43Z",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091"
        }
      },
      "pull-request-review-2": {
        "value": {
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Here is the body for the review.",
          "state": "PENDING",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091"
        }
      },
      "legacy-review-comment-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
            "pull_request_review_id": 42,
            "id": 10,
            "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
            "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
            "path": "file1.txt",
            "position": 1,
            "original_position": 4,
            "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
            "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
            "in_reply_to_id": 8,
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "body": "Great stuff!",
            "created_at": "2011-04-14T16:00:49Z",
            "updated_at": "2011-04-14T16:00:49Z",
            "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
            "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
            "author_association": "NONE",
            "_links": {
              "self": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
              },
              "html": {
                "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
              },
              "pull_request": {
                "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
              }
            }
          }
        ]
      },
      "pull-request-review-3": {
        "value": {
          "id": 80,
          "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "body": "Here is the body for the review.",
          "state": "DISMISSED",
          "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
          "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
          "_links": {
            "html": {
              "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
            },
            "pull_request": {
              "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
            }
          },
          "submitted_at": "2019-11-17T17:43:43Z",
          "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091"
        }
      },
      "content-file": {
        "value": {
          "type": "file",
          "encoding": "base64",
          "size": 5362,
          "name": "README.md",
          "path": "README.md",
          "content": "encoded content ...",
          "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
          "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
          "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
          "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
          "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
          "_links": {
            "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
            "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
            "html": "https://github.com/octokit/octokit.rb/blob/master/README.md"
          }
        }
      },
      "release-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
            "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
            "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
            "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
            "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
            "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
            "id": 1,
            "node_id": "MDc6UmVsZWFzZTE=",
            "tag_name": "v1.0.0",
            "target_commitish": "master",
            "name": "v1.0.0",
            "body": "Description of the release",
            "draft": false,
            "prerelease": false,
            "created_at": "2013-02-27T19:35:32Z",
            "published_at": "2013-02-27T19:35:32Z",
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "assets": [
              {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                "id": 1,
                "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                "name": "example.zip",
                "label": "short description",
                "state": "uploaded",
                "content_type": "application/zip",
                "size": 1024,
                "download_count": 42,
                "created_at": "2013-02-27T19:35:32Z",
                "updated_at": "2013-02-27T19:35:32Z",
                "uploader": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            ]
          }
        ]
      },
      "release": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
          "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
          "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
          "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
          "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
          "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
          "id": 1,
          "node_id": "MDc6UmVsZWFzZTE=",
          "tag_name": "v1.0.0",
          "target_commitish": "master",
          "name": "v1.0.0",
          "body": "Description of the release",
          "draft": false,
          "prerelease": false,
          "created_at": "2013-02-27T19:35:32Z",
          "published_at": "2013-02-27T19:35:32Z",
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assets": []
        }
      },
      "release-asset": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
          "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
          "id": 1,
          "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
          "name": "example.zip",
          "label": "short description",
          "state": "uploaded",
          "content_type": "application/zip",
          "size": 1024,
          "download_count": 42,
          "created_at": "2013-02-27T19:35:32Z",
          "updated_at": "2013-02-27T19:35:32Z",
          "uploader": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "release-2": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
          "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
          "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
          "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
          "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
          "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
          "id": 1,
          "node_id": "MDc6UmVsZWFzZTE=",
          "tag_name": "v1.0.0",
          "target_commitish": "master",
          "name": "v1.0.0",
          "body": "Description of the release",
          "draft": false,
          "prerelease": false,
          "created_at": "2013-02-27T19:35:32Z",
          "published_at": "2013-02-27T19:35:32Z",
          "author": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "assets": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
              "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
              "id": 1,
              "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
              "name": "example.zip",
              "label": "short description",
              "state": "uploaded",
              "content_type": "application/zip",
              "size": 1024,
              "download_count": 42,
              "created_at": "2013-02-27T19:35:32Z",
              "updated_at": "2013-02-27T19:35:32Z",
              "uploader": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            }
          ]
        }
      },
      "release-asset-items": {
        "value": [
          {
            "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
            "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
            "id": 1,
            "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
            "name": "example.zip",
            "label": "short description",
            "state": "uploaded",
            "content_type": "application/zip",
            "size": 1024,
            "download_count": 42,
            "created_at": "2013-02-27T19:35:32Z",
            "updated_at": "2013-02-27T19:35:32Z",
            "uploader": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          }
        ]
      },
      "release-asset-response-for-successful-upload": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
          "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
          "id": 1,
          "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
          "name": "example.zip",
          "label": "short description",
          "state": "uploaded",
          "content_type": "application/zip",
          "size": 1024,
          "download_count": 42,
          "created_at": "2013-02-27T19:35:32Z",
          "updated_at": "2013-02-27T19:35:32Z",
          "uploader": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "simple-user-items-default-response": {
        "summary": "Default response",
        "value": [
          {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        ]
      },
      "stargazer-items-alternative-response-with-star-creation-timestamps": {
        "summary": "Alternative response with star creation timestamps",
        "value": [
          {
            "starred_at": "2011-01-16T19:06:43Z",
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          }
        ]
      },
      "code-frequency-stat-items": {
        "value": [
          [
            1302998400,
            1124,
            -435
          ]
        ]
      },
      "commit-activity-items": {
        "value": [
          {
            "days": [
              0,
              3,
              26,
              20,
              39,
              1,
              0
            ],
            "total": 89,
            "week": 1336280400
          }
        ]
      },
      "contributor-activity-items": {
        "value": [
          {
            "author": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "total": 135,
            "weeks": [
              {
                "w": "1367712000",
                "a": 6898,
                "d": 77,
                "c": 10
              }
            ]
          }
        ]
      },
      "participation-stats": {
        "value": {
          "all": [
            11,
            21,
            15,
            2,
            8,
            1,
            8,
            23,
            17,
            21,
            11,
            10,
            33,
            91,
            38,
            34,
            22,
            23,
            32,
            3,
            43,
            87,
            71,
            18,
            13,
            5,
            13,
            16,
            66,
            27,
            12,
            45,
            110,
            117,
            13,
            8,
            18,
            9,
            19,
            26,
            39,
            12,
            20,
            31,
            46,
            91,
            45,
            10,
            24,
            9,
            29,
            7
          ],
          "owner": [
            3,
            2,
            3,
            0,
            2,
            0,
            5,
            14,
            7,
            9,
            1,
            5,
            0,
            48,
            19,
            2,
            0,
            1,
            10,
            2,
            23,
            40,
            35,
            8,
            8,
            2,
            10,
            6,
            30,
            0,
            2,
            9,
            53,
            104,
            3,
            3,
            10,
            4,
            7,
            11,
            21,
            4,
            4,
            22,
            26,
            63,
            11,
            2,
            14,
            1,
            10,
            3
          ]
        }
      },
      "code-frequency-stat-items-2": {
        "value": [
          [
            0,
            0,
            5
          ],
          [
            0,
            1,
            43
          ],
          [
            0,
            2,
            21
          ]
        ]
      },
      "status": {
        "value": {
          "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
          "avatar_url": "https://github.com/images/error/hubot_happy.gif",
          "id": 1,
          "node_id": "MDY6U3RhdHVzMQ==",
          "state": "success",
          "description": "Build has completed successfully",
          "target_url": "https://ci.example.com/1000/output",
          "context": "continuous-integration/jenkins",
          "created_at": "2012-07-20T01:19:13Z",
          "updated_at": "2012-07-20T01:19:13Z",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "repository-subscription-response-if-you-subscribe-to-the-repository": {
        "value": {
          "subscribed": true,
          "ignored": false,
          "reason": null,
          "created_at": "2012-10-06T21:34:12Z",
          "url": "https://api.github.com/repos/octocat/example/subscription",
          "repository_url": "https://api.github.com/repos/octocat/example"
        }
      },
      "repository-subscription": {
        "value": {
          "subscribed": true,
          "ignored": false,
          "reason": null,
          "created_at": "2012-10-06T21:34:12Z",
          "url": "https://api.github.com/repos/octocat/example/subscription",
          "repository_url": "https://api.github.com/repos/octocat/example"
        }
      },
      "tag-items": {
        "value": [
          {
            "name": "v0.1",
            "commit": {
              "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
              "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
            },
            "zipball_url": "https://github.com/octocat/Hello-World/zipball/v0.1",
            "tarball_url": "https://github.com/octocat/Hello-World/tarball/v0.1"
          }
        ]
      },
      "topic": {
        "value": {
          "names": [
            "octocat",
            "atom",
            "electron",
            "api"
          ]
        }
      },
      "clone-traffic": {
        "value": {
          "count": 173,
          "uniques": 128,
          "clones": [
            {
              "timestamp": "2016-10-10T00:00:00Z",
              "count": 2,
              "uniques": 1
            },
            {
              "timestamp": "2016-10-11T00:00:00Z",
              "count": 17,
              "uniques": 16
            },
            {
              "timestamp": "2016-10-12T00:00:00Z",
              "count": 21,
              "uniques": 15
            },
            {
              "timestamp": "2016-10-13T00:00:00Z",
              "count": 8,
              "uniques": 7
            },
            {
              "timestamp": "2016-10-14T00:00:00Z",
              "count": 5,
              "uniques": 5
            },
            {
              "timestamp": "2016-10-15T00:00:00Z",
              "count": 2,
              "uniques": 2
            },
            {
              "timestamp": "2016-10-16T00:00:00Z",
              "count": 8,
              "uniques": 7
            },
            {
              "timestamp": "2016-10-17T00:00:00Z",
              "count": 26,
              "uniques": 15
            },
            {
              "timestamp": "2016-10-18T00:00:00Z",
              "count": 19,
              "uniques": 17
            },
            {
              "timestamp": "2016-10-19T00:00:00Z",
              "count": 19,
              "uniques": 14
            },
            {
              "timestamp": "2016-10-20T00:00:00Z",
              "count": 19,
              "uniques": 15
            },
            {
              "timestamp": "2016-10-21T00:00:00Z",
              "count": 9,
              "uniques": 7
            },
            {
              "timestamp": "2016-10-22T00:00:00Z",
              "count": 5,
              "uniques": 5
            },
            {
              "timestamp": "2016-10-23T00:00:00Z",
              "count": 6,
              "uniques": 5
            },
            {
              "timestamp": "2016-10-24T00:00:00Z",
              "count": 7,
              "uniques": 5
            }
          ]
        }
      },
      "content-traffic-items": {
        "value": [
          {
            "path": "/github/hubot",
            "title": "github/hubot: A customizable life embetterment robot.",
            "count": 3542,
            "uniques": 2225
          },
          {
            "path": "/github/hubot/blob/master/docs/scripting.md",
            "title": "hubot/scripting.md at master · github/hubot · GitHub",
            "count": 1707,
            "uniques": 804
          },
          {
            "path": "/github/hubot/tree/master/docs",
            "title": "hubot/docs at master · github/hubot · GitHub",
            "count": 685,
            "uniques": 435
          },
          {
            "path": "/github/hubot/tree/master/src",
            "title": "hubot/src at master · github/hubot · GitHub",
            "count": 577,
            "uniques": 347
          },
          {
            "path": "/github/hubot/blob/master/docs/index.md",
            "title": "hubot/index.md at master · github/hubot · GitHub",
            "count": 379,
            "uniques": 259
          },
          {
            "path": "/github/hubot/blob/master/docs/adapters.md",
            "title": "hubot/adapters.md at master · github/hubot · GitHub",
            "count": 354,
            "uniques": 201
          },
          {
            "path": "/github/hubot/tree/master/examples",
            "title": "hubot/examples at master · github/hubot · GitHub",
            "count": 340,
            "uniques": 260
          },
          {
            "path": "/github/hubot/blob/master/docs/deploying/heroku.md",
            "title": "hubot/heroku.md at master · github/hubot · GitHub",
            "count": 324,
            "uniques": 217
          },
          {
            "path": "/github/hubot/blob/master/src/robot.coffee",
            "title": "hubot/robot.coffee at master · github/hubot · GitHub",
            "count": 293,
            "uniques": 191
          },
          {
            "path": "/github/hubot/blob/master/LICENSE.md",
            "title": "hubot/LICENSE.md at master · github/hubot · GitHub",
            "count": 281,
            "uniques": 222
          }
        ]
      },
      "referrer-traffic-items": {
        "value": [
          {
            "referrer": "Google",
            "count": 4,
            "uniques": 3
          },
          {
            "referrer": "stackoverflow.com",
            "count": 2,
            "uniques": 2
          },
          {
            "referrer": "eggsonbread.com",
            "count": 1,
            "uniques": 1
          },
          {
            "referrer": "yandex.ru",
            "count": 1,
            "uniques": 1
          }
        ]
      },
      "view-traffic": {
        "value": {
          "count": 14850,
          "uniques": 3782,
          "views": [
            {
              "timestamp": "2016-10-10T00:00:00Z",
              "count": 440,
              "uniques": 143
            },
            {
              "timestamp": "2016-10-11T00:00:00Z",
              "count": 1308,
              "uniques": 414
            },
            {
              "timestamp": "2016-10-12T00:00:00Z",
              "count": 1486,
              "uniques": 452
            },
            {
              "timestamp": "2016-10-13T00:00:00Z",
              "count": 1170,
              "uniques": 401
            },
            {
              "timestamp": "2016-10-14T00:00:00Z",
              "count": 868,
              "uniques": 266
            },
            {
              "timestamp": "2016-10-15T00:00:00Z",
              "count": 495,
              "uniques": 157
            },
            {
              "timestamp": "2016-10-16T00:00:00Z",
              "count": 524,
              "uniques": 175
            },
            {
              "timestamp": "2016-10-17T00:00:00Z",
              "count": 1263,
              "uniques": 412
            },
            {
              "timestamp": "2016-10-18T00:00:00Z",
              "count": 1402,
              "uniques": 417
            },
            {
              "timestamp": "2016-10-19T00:00:00Z",
              "count": 1394,
              "uniques": 424
            },
            {
              "timestamp": "2016-10-20T00:00:00Z",
              "count": 1492,
              "uniques": 448
            },
            {
              "timestamp": "2016-10-21T00:00:00Z",
              "count": 1153,
              "uniques": 332
            },
            {
              "timestamp": "2016-10-22T00:00:00Z",
              "count": 566,
              "uniques": 168
            },
            {
              "timestamp": "2016-10-23T00:00:00Z",
              "count": 675,
              "uniques": 184
            },
            {
              "timestamp": "2016-10-24T00:00:00Z",
              "count": 614,
              "uniques": 237
            }
          ]
        }
      },
      "repository-3": {
        "value": {
          "id": 1296269,
          "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
          "name": "Hello-World",
          "full_name": "octocat/Hello-World",
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "private": false,
          "html_url": "https://github.com/octocat/Hello-World",
          "description": "This your first repo!",
          "fork": false,
          "url": "https://api.github.com/repos/octocat/Hello-World",
          "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
          "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
          "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
          "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
          "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
          "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
          "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
          "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
          "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
          "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
          "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
          "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
          "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
          "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
          "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
          "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
          "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
          "git_url": "git:github.com/octocat/Hello-World.git",
          "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
          "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
          "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
          "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
          "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
          "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
          "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
          "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
          "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
          "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
          "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
          "ssh_url": "git@github.com:octocat/Hello-World.git",
          "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
          "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
          "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
          "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
          "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
          "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
          "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
          "clone_url": "https://github.com/octocat/Hello-World.git",
          "mirror_url": "git:git.example.com/octocat/Hello-World",
          "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
          "svn_url": "https://svn.github.com/octocat/Hello-World",
          "homepage": "https://github.com",
          "language": null,
          "forks_count": 9,
          "stargazers_count": 80,
          "watchers_count": 80,
          "size": 108,
          "default_branch": "master",
          "open_issues_count": 0,
          "is_template": false,
          "topics": [
            "octocat",
            "atom",
            "electron",
            "api"
          ],
          "has_issues": true,
          "has_projects": true,
          "has_wiki": true,
          "has_pages": false,
          "has_downloads": true,
          "archived": false,
          "disabled": false,
          "visibility": "public",
          "pushed_at": "2011-01-26T19:06:43Z",
          "created_at": "2011-01-26T19:01:12Z",
          "updated_at": "2011-01-26T19:14:43Z",
          "permissions": {
            "admin": false,
            "push": false,
            "pull": true
          },
          "allow_rebase_merge": true,
          "template_repository": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
          "allow_squash_merge": true,
          "delete_branch_on_merge": true,
          "allow_merge_commit": true,
          "subscribers_count": 42,
          "network_count": 0
        }
      },
      "public-repository-items": {
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
          }
        ]
      },
      "scim-user-list-response-with-filter": {
        "summary": "Response with filter",
        "value": {
          "schemas": [
            "urn:ietf:params:scim:api:messages:2.0:ListResponse"
          ],
          "totalResults": 1,
          "itemsPerPage": 1,
          "startIndex": 1,
          "Resources": [
            {
              "schemas": [
                "urn:ietf:params:scim:schemas:core:2.0:User"
              ],
              "id": "5fc0c238-1112-11e8-8e45-920c87bdbd75",
              "externalId": "00u1dhhb1fkIGP7RL1d8",
              "userName": "octocat@github.com",
              "name": {
                "givenName": "Mona",
                "familyName": "Octocat"
              },
              "emails": [
                {
                  "value": "octocat@github.com",
                  "primary": true,
                  "type": "work"
                }
              ],
              "active": true,
              "meta": {
                "resourceType": "User",
                "created": "2018-02-13T15:05:24.000-08:00",
                "lastModified": "2018-02-13T15:05:55.000-08:00",
                "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/5fc0c238-1112-11e8-8e45-920c87bdbd75"
              }
            }
          ]
        }
      },
      "scim-user": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
          ],
          "id": "edefdfedf-050c-11e7-8d32",
          "externalId": "a7d0f98382",
          "userName": "mona.octocat@okta.example.com",
          "name": {
            "givenName": "Mona",
            "familyName": "Octocat"
          },
          "emails": [
            {
              "value": "mona.octocat@okta.example.com",
              "type": "work",
              "primary": true
            }
          ],
          "active": true,
          "meta": {
            "resourceType": "User",
            "created": "2017-03-09T16:11:13-05:00",
            "lastModified": "2017-03-09T16:11:13-05:00",
            "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/edefdfedf-050c-11e7-8d32"
          }
        }
      },
      "scim-user-2": {
        "value": {
          "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
          ],
          "id": "edefdfedf-050c-11e7-8d32",
          "externalId": "a7d0f98382",
          "userName": "mona.octocat@okta.example.com",
          "name": {
            "givenName": "Monalisa",
            "familyName": "Octocat"
          },
          "emails": [
            {
              "value": "mona.octocat@okta.example.com",
              "type": "work",
              "primary": true
            },
            {
              "value": "monalisa@octocat.github.com",
              "type": "home"
            }
          ],
          "active": true,
          "meta": {
            "resourceType": "User",
            "created": "2017-03-09T16:11:13-05:00",
            "lastModified": "2017-03-09T16:11:13-05:00",
            "location": "https://api.github.com/scim/v2/organizations/octo-org/Users/edefdfedf-050c-11e7-8d32"
          }
        }
      },
      "code-search-result-item-paginated": {
        "value": {
          "total_count": 7,
          "incomplete_results": false,
          "items": [
            {
              "name": "classes.js",
              "path": "src/attributes/classes.js",
              "sha": "d7212f9dee2dcc18f084d7df8f417b80846ded5a",
              "url": "https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4",
              "git_url": "https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a",
              "html_url": "https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js",
              "repository": {
                "id": 167174,
                "node_id": "MDEwOlJlcG9zaXRvcnkxNjcxNzQ=",
                "name": "jquery",
                "full_name": "jquery/jquery",
                "owner": {
                  "login": "jquery",
                  "id": 70142,
                  "node_id": "MDQ6VXNlcjcwMTQy",
                  "avatar_url": "https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/jquery",
                  "html_url": "https://github.com/jquery",
                  "followers_url": "https://api.github.com/users/jquery/followers",
                  "following_url": "https://api.github.com/users/jquery/following{/other_user}",
                  "gists_url": "https://api.github.com/users/jquery/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/jquery/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/jquery/subscriptions",
                  "organizations_url": "https://api.github.com/users/jquery/orgs",
                  "repos_url": "https://api.github.com/users/jquery/repos",
                  "events_url": "https://api.github.com/users/jquery/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/jquery/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/jquery/jquery",
                "description": "jQuery JavaScript Library",
                "fork": false,
                "url": "https://api.github.com/repos/jquery/jquery",
                "forks_url": "https://api.github.com/repos/jquery/jquery/forks",
                "keys_url": "https://api.github.com/repos/jquery/jquery/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/jquery/jquery/teams",
                "hooks_url": "https://api.github.com/repos/jquery/jquery/hooks",
                "issue_events_url": "https://api.github.com/repos/jquery/jquery/issues/events{/number}",
                "events_url": "https://api.github.com/repos/jquery/jquery/events",
                "assignees_url": "https://api.github.com/repos/jquery/jquery/assignees{/user}",
                "branches_url": "https://api.github.com/repos/jquery/jquery/branches{/branch}",
                "tags_url": "https://api.github.com/repos/jquery/jquery/tags",
                "blobs_url": "https://api.github.com/repos/jquery/jquery/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/jquery/jquery/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/jquery/jquery/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/jquery/jquery/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/jquery/jquery/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/jquery/jquery/languages",
                "stargazers_url": "https://api.github.com/repos/jquery/jquery/stargazers",
                "contributors_url": "https://api.github.com/repos/jquery/jquery/contributors",
                "subscribers_url": "https://api.github.com/repos/jquery/jquery/subscribers",
                "subscription_url": "https://api.github.com/repos/jquery/jquery/subscription",
                "commits_url": "https://api.github.com/repos/jquery/jquery/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/jquery/jquery/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/jquery/jquery/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/jquery/jquery/issues/comments/{number}",
                "contents_url": "https://api.github.com/repos/jquery/jquery/contents/{+path}",
                "compare_url": "https://api.github.com/repos/jquery/jquery/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/jquery/jquery/merges",
                "archive_url": "https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/jquery/jquery/downloads",
                "issues_url": "https://api.github.com/repos/jquery/jquery/issues{/number}",
                "pulls_url": "https://api.github.com/repos/jquery/jquery/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/jquery/jquery/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/jquery/jquery/labels{/name}"
              },
              "score": 1
            }
          ]
        }
      },
      "commit-search-result-item-paginated": {
        "value": {
          "total_count": 1,
          "incomplete_results": false,
          "items": [
            {
              "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "sha": "bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "html_url": "https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
              "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments",
              "commit": {
                "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
                "author": {
                  "date": "2014-02-04T14:38:36-08:00",
                  "name": "The Octocat",
                  "email": "octocat@nowhere.com"
                },
                "committer": {
                  "date": "2014-02-12T15:18:55-08:00",
                  "name": "The Octocat",
                  "email": "octocat@nowhere.com"
                },
                "message": "Create styles.css and updated README",
                "tree": {
                  "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68",
                  "sha": "a639e96f9038797fba6e0469f94a4b0cc459fa68"
                },
                "comment_count": 8
              },
              "author": {
                "login": "octocat",
                "id": 583231,
                "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "committer": {
                "login": "octocat",
                "id": 583231,
                "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "parents": [
                {
                  "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                  "html_url": "https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                  "sha": "a30c19e3f13765a3b48829788bc1cb8b4e95cee4"
                }
              ],
              "repository": {
                "id": 1300192,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMzAwMTky",
                "name": "Spoon-Knife",
                "full_name": "octocat/Spoon-Knife",
                "owner": {
                  "login": "octocat",
                  "id": 583231,
                  "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                  "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Spoon-Knife",
                "description": "This repo is for demonstration purposes only.",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Spoon-Knife",
                "forks_url": "https://api.github.com/repos/octocat/Spoon-Knife/forks",
                "keys_url": "https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/octocat/Spoon-Knife/teams",
                "hooks_url": "https://api.github.com/repos/octocat/Spoon-Knife/hooks",
                "issue_events_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}",
                "events_url": "https://api.github.com/repos/octocat/Spoon-Knife/events",
                "assignees_url": "https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}",
                "branches_url": "https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}",
                "tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/tags",
                "blobs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/octocat/Spoon-Knife/languages",
                "stargazers_url": "https://api.github.com/repos/octocat/Spoon-Knife/stargazers",
                "contributors_url": "https://api.github.com/repos/octocat/Spoon-Knife/contributors",
                "subscribers_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscription",
                "commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}",
                "contents_url": "https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}",
                "compare_url": "https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/octocat/Spoon-Knife/merges",
                "archive_url": "https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/octocat/Spoon-Knife/downloads",
                "issues_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}",
                "pulls_url": "https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}",
                "releases_url": "https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}",
                "deployments_url": "https://api.github.com/repos/octocat/Spoon-Knife/deployments"
              },
              "score": 1
            }
          ]
        }
      },
      "issue-search-result-item-paginated": {
        "value": {
          "total_count": 280,
          "incomplete_results": false,
          "items": [
            {
              "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132",
              "repository_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit",
              "labels_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}",
              "comments_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments",
              "events_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events",
              "html_url": "https://github.com/batterseapower/pinyin-toolkit/issues/132",
              "id": 35802,
              "node_id": "MDU6SXNzdWUzNTgwMg==",
              "number": 132,
              "title": "Line Number Indexes Beyond 20 Not Displayed",
              "user": {
                "login": "Nick3C",
                "id": 90254,
                "node_id": "MDQ6VXNlcjkwMjU0",
                "avatar_url": "https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Nick3C",
                "html_url": "https://github.com/Nick3C",
                "followers_url": "https://api.github.com/users/Nick3C/followers",
                "following_url": "https://api.github.com/users/Nick3C/following{/other_user}",
                "gists_url": "https://api.github.com/users/Nick3C/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Nick3C/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Nick3C/subscriptions",
                "organizations_url": "https://api.github.com/users/Nick3C/orgs",
                "repos_url": "https://api.github.com/users/Nick3C/repos",
                "events_url": "https://api.github.com/users/Nick3C/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Nick3C/received_events",
                "type": "User"
              },
              "labels": [
                {
                  "id": 4,
                  "node_id": "MDU6TGFiZWw0",
                  "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug",
                  "name": "bug",
                  "color": "ff0000"
                }
              ],
              "state": "open",
              "assignee": null,
              "milestone": null,
              "comments": 15,
              "created_at": "2009-07-12T20:10:41Z",
              "updated_at": "2009-07-19T09:23:43Z",
              "closed_at": null,
              "pull_request": {
                "html_url": null,
                "diff_url": null,
                "patch_url": null
              },
              "body": "...",
              "score": 1
            }
          ]
        }
      },
      "label-search-result-item-paginated": {
        "value": {
          "total_count": 2,
          "incomplete_results": false,
          "items": [
            {
              "id": 418327088,
              "node_id": "MDU6TGFiZWw0MTgzMjcwODg=",
              "url": "https://api.github.com/repos/octocat/linguist/labels/enhancement",
              "name": "enhancement",
              "color": "84b6eb",
              "default": true,
              "description": "New feature or request.",
              "score": 1
            },
            {
              "id": 418327086,
              "node_id": "MDU6TGFiZWw0MTgzMjcwODY=",
              "url": "https://api.github.com/repos/octocat/linguist/labels/bug",
              "name": "bug",
              "color": "ee0701",
              "default": true,
              "description": "Something isn't working.",
              "score": 1
            }
          ]
        }
      },
      "repo-search-result-item-paginated": {
        "value": {
          "total_count": 40,
          "incomplete_results": false,
          "items": [
            {
              "id": 3081286,
              "node_id": "MDEwOlJlcG9zaXRvcnkzMDgxMjg2",
              "name": "Tetris",
              "full_name": "dtrupenn/Tetris",
              "owner": {
                "login": "dtrupenn",
                "id": 872147,
                "node_id": "MDQ6VXNlcjg3MjE0Nw==",
                "avatar_url": "https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dtrupenn",
                "received_events_url": "https://api.github.com/users/dtrupenn/received_events",
                "type": "User"
              },
              "private": false,
              "html_url": "https://github.com/dtrupenn/Tetris",
              "description": "A C implementation of Tetris using Pennsim through LC4",
              "fork": false,
              "url": "https://api.github.com/repos/dtrupenn/Tetris",
              "created_at": "2012-01-01T00:31:50Z",
              "updated_at": "2013-01-05T17:58:47Z",
              "pushed_at": "2012-01-01T00:37:02Z",
              "homepage": "",
              "size": 524,
              "stargazers_count": 1,
              "watchers_count": 1,
              "language": "Assembly",
              "forks_count": 0,
              "open_issues_count": 0,
              "master_branch": "master",
              "default_branch": "master",
              "score": 1
            }
          ]
        }
      },
      "topic-search-result-item-paginated": {
        "value": {
          "total_count": 6,
          "incomplete_results": false,
          "items": [
            {
              "name": "ruby",
              "display_name": "Ruby",
              "short_description": "Ruby is a scripting language designed for simplified object-oriented programming.",
              "description": "Ruby was developed by Yukihiro \"Matz\" Matsumoto in 1995 with the intent of having an easily readable programming language. It is integrated with the Rails framework to create dynamic web-applications. Ruby's syntax is similar to that of Perl and Python.",
              "created_by": "Yukihiro Matsumoto",
              "released": "December 21, 1995",
              "created_at": "2016-11-28T22:03:59Z",
              "updated_at": "2017-10-30T18:16:32Z",
              "featured": true,
              "curated": true,
              "score": 1
            },
            {
              "name": "rails",
              "display_name": "Rails",
              "short_description": "Ruby on Rails (Rails) is a web application framework written in Ruby.",
              "description": "Ruby on Rails (Rails) is a web application framework written in Ruby. It is meant to help simplify the building of complex websites.",
              "created_by": "David Heinemeier Hansson",
              "released": "December 13 2005",
              "created_at": "2016-12-09T17:03:50Z",
              "updated_at": "2017-10-30T16:20:19Z",
              "featured": true,
              "curated": true,
              "score": 1
            },
            {
              "name": "python",
              "display_name": "Python",
              "short_description": "Python is a dynamically typed programming language.",
              "description": "Python is a dynamically typed programming language designed by Guido Van Rossum. Much like the programming language Ruby, Python was designed to be easily read by programmers. Because of its large following and many libraries, Python can be implemented and used to do anything from webpages to scientific research.",
              "created_by": "Guido van Rossum",
              "released": "February 20, 1991",
              "created_at": "2016-12-07T00:07:02Z",
              "updated_at": "2017-10-27T22:45:43Z",
              "featured": true,
              "curated": true,
              "score": 1
            },
            {
              "name": "jekyll",
              "display_name": "Jekyll",
              "short_description": "Jekyll is a simple, blog-aware static site generator.",
              "description": "Jekyll is a blog-aware, site generator written in Ruby. It takes raw text files, runs it through a renderer and produces a publishable static website.",
              "created_by": "Tom Preston-Werner",
              "released": "2008",
              "created_at": "2016-12-16T21:53:08Z",
              "updated_at": "2017-10-27T19:00:24Z",
              "featured": true,
              "curated": true,
              "score": 1
            },
            {
              "name": "sass",
              "display_name": "Sass",
              "short_description": "Sass is a stable extension to classic CSS.",
              "description": "Sass is a stylesheet language with a main implementation in Ruby. It is an extension of CSS that makes improvements to the old stylesheet format, such as being able to declare variables and using a cleaner nesting syntax.",
              "created_by": "Hampton Catlin, Natalie Weizenbaum, Chris Eppstein",
              "released": "November 28, 2006",
              "created_at": "2016-12-16T21:53:45Z",
              "updated_at": "2018-01-16T16:30:40Z",
              "featured": true,
              "curated": true,
              "score": 1
            },
            {
              "name": "homebrew",
              "display_name": "Homebrew",
              "short_description": "Homebrew is a package manager for macOS.",
              "description": "Homebrew is a package manager for Apple's macOS operating system. It simplifies the installation of software and is popular in the Ruby on Rails community.",
              "created_by": "Max Howell",
              "released": "2009",
              "created_at": "2016-12-17T20:30:44Z",
              "updated_at": "2018-02-06T16:14:56Z",
              "featured": true,
              "curated": true,
              "score": 1
            }
          ]
        }
      },
      "user-search-result-item-paginated": {
        "value": {
          "total_count": 12,
          "incomplete_results": false,
          "items": [
            {
              "login": "mojombo",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
              "gravatar_id": "",
              "url": "https://api.github.com/users/mojombo",
              "html_url": "https://github.com/mojombo",
              "followers_url": "https://api.github.com/users/mojombo/followers",
              "subscriptions_url": "https://api.github.com/users/mojombo/subscriptions",
              "organizations_url": "https://api.github.com/users/mojombo/orgs",
              "repos_url": "https://api.github.com/users/mojombo/repos",
              "received_events_url": "https://api.github.com/users/mojombo/received_events",
              "type": "User",
              "score": 1
            }
          ]
        }
      },
      "team-repository-alternative-response-with-extra-repository-information": {
        "summary": "Alternative response with extra repository information",
        "value": {
          "organization": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "Organization",
            "site_admin": false
          },
          "parent": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "source": {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          },
          "permissions": {
            "pull": true,
            "triage": true,
            "push": false,
            "maintain": false,
            "admin": false
          }
        }
      },
      "group-mapping-2": {
        "value": {
          "groups": [
            {
              "group_id": "123",
              "group_name": "Octocat admins",
              "group_description": "The people who configure your octoworld."
            }
          ]
        }
      },
      "private-user-response-with-public-and-private-profile-information": {
        "summary": "Response with public and private profile information",
        "value": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false,
          "name": "monalisa octocat",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "hireable": false,
          "bio": "There once was...",
          "twitter_username": "monatheoctocat",
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2008-01-14T04:33:35Z",
          "private_gists": 81,
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "disk_usage": 10000,
          "collaborators": 8,
          "two_factor_authentication": true,
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20,
            "collaborators": 0
          }
        }
      },
      "private-user-response-with-public-profile-information": {
        "summary": "Response with public profile information",
        "value": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false,
          "name": "monalisa octocat",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "hireable": false,
          "bio": "There once was...",
          "twitter_username": "monatheoctocat",
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2008-01-14T04:33:35Z"
        }
      },
      "private-user": {
        "value": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false,
          "name": "monalisa octocat",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "hireable": false,
          "bio": "There once was...",
          "twitter_username": "monatheoctocat",
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2008-01-14T04:33:35Z",
          "private_gists": 81,
          "total_private_repos": 100,
          "owned_private_repos": 100,
          "disk_usage": 10000,
          "collaborators": 8,
          "two_factor_authentication": true,
          "plan": {
            "name": "Medium",
            "space": 400,
            "private_repos": 20,
            "collaborators": 0
          }
        }
      },
      "email-items-3": {
        "value": [
          {
            "email": "octocat@github.com",
            "primary": true,
            "verified": true,
            "visibility": "private"
          }
        ]
      },
      "email-items-2": {
        "value": [
          {
            "email": "octocat@github.com",
            "verified": true,
            "primary": true,
            "visibility": "public"
          }
        ]
      },
      "email-items": {
        "value": [
          {
            "email": "octocat@octocat.org",
            "primary": false,
            "verified": false,
            "visibility": "public"
          },
          {
            "email": "octocat@github.com",
            "primary": false,
            "verified": false,
            "visibility": null
          },
          {
            "email": "support@github.com",
            "primary": false,
            "verified": false,
            "visibility": null
          }
        ]
      },
      "gpg-key-items": {
        "value": [
          {
            "id": 3,
            "primary_key_id": null,
            "key_id": "3262EFF25BA0D270",
            "public_key": "xsBNBFayYZ...",
            "emails": [
              {
                "email": "mastahyeti@users.noreply.github.com",
                "verified": true
              }
            ],
            "subkeys": [
              {
                "id": 4,
                "primary_key_id": 3,
                "key_id": "4A595D4C72EE49C7",
                "public_key": "zsBNBFayYZ...",
                "emails": [],
                "subkeys": [],
                "can_sign": false,
                "can_encrypt_comms": true,
                "can_encrypt_storage": true,
                "can_certify": false,
                "created_at": "2016-03-24T11:31:04-06:00",
                "expires_at": null
              }
            ],
            "can_sign": true,
            "can_encrypt_comms": false,
            "can_encrypt_storage": false,
            "can_certify": true,
            "created_at": "2016-03-24T11:31:04-06:00",
            "expires_at": null
          }
        ]
      },
      "gpg-key": {
        "value": {
          "id": 3,
          "primary_key_id": null,
          "key_id": "3262EFF25BA0D270",
          "public_key": "xsBNBFayYZ...",
          "emails": [
            {
              "email": "mastahyeti@users.noreply.github.com",
              "verified": true
            }
          ],
          "subkeys": [
            {
              "id": 4,
              "primary_key_id": 3,
              "key_id": "4A595D4C72EE49C7",
              "public_key": "zsBNBFayYZ...",
              "emails": [],
              "subkeys": [],
              "can_sign": false,
              "can_encrypt_comms": true,
              "can_encrypt_storage": true,
              "can_certify": false,
              "created_at": "2016-03-24T11:31:04-06:00",
              "expires_at": null
            }
          ],
          "can_sign": true,
          "can_encrypt_comms": false,
          "can_encrypt_storage": false,
          "can_certify": true,
          "created_at": "2016-03-24T11:31:04-06:00",
          "expires_at": null
        }
      },
      "base-installation-for-auth-user-paginated": {
        "value": {
          "total_count": 2,
          "installations": [
            {
              "id": 1,
              "account": {
                "login": "github",
                "id": 1,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "url": "https://api.github.com/orgs/github",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "events_url": "https://api.github.com/orgs/github/events",
                "hooks_url": "https://api.github.com/orgs/github/hooks",
                "issues_url": "https://api.github.com/orgs/github/issues",
                "members_url": "https://api.github.com/orgs/github/members{/member}",
                "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "description": "A great organization"
              },
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "app_id": 1,
              "target_id": 1,
              "target_type": "Organization",
              "permissions": {
                "checks": "write",
                "metadata": "read",
                "contents": "read"
              },
              "events": [
                "push",
                "pull_request"
              ],
              "single_file_name": "config.yml"
            },
            {
              "id": 3,
              "account": {
                "login": "octocat",
                "id": 2,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
              "repositories_url": "https://api.github.com/installation/repositories",
              "html_url": "https://github.com/organizations/github/settings/installations/1",
              "app_id": 1,
              "target_id": 1,
              "target_type": "Organization",
              "permissions": {
                "checks": "write",
                "metadata": "read",
                "contents": "read"
              },
              "events": [
                "push",
                "pull_request"
              ],
              "single_file_name": "config.yml"
            }
          ]
        }
      },
      "repository-paginated": {
        "value": {
          "total_count": 1,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ]
        }
      },
      "actions-public-key-items": {
        "value": [
          {
            "key_id": "012345678912345678",
            "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
          }
        ]
      },
      "user-marketplace-purchase-items": {
        "value": [
          {
            "billing_cycle": "monthly",
            "next_billing_date": "2017-11-11T00:00:00Z",
            "unit_count": null,
            "on_free_trial": true,
            "free_trial_ends_on": "2017-11-11T00:00:00Z",
            "updated_at": "2017-11-02T01:12:12Z",
            "account": {
              "login": "github",
              "id": 4,
              "url": "https://api.github.com/orgs/github",
              "email": null,
              "organization_billing_email": "billing@github.com",
              "type": "Organization"
            },
            "plan": {
              "url": "https://api.github.com/marketplace_listing/plans/1313",
              "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
              "id": 1313,
              "number": 3,
              "name": "Pro",
              "description": "A professional-grade CI solution",
              "monthly_price_in_cents": 1099,
              "yearly_price_in_cents": 11870,
              "price_model": "flat-rate",
              "has_free_trial": true,
              "unit_name": null,
              "state": "published",
              "bullets": [
                "Up to 25 private repositories",
                "11 concurrent builds"
              ]
            }
          }
        ]
      },
      "org-membership-items": {
        "value": [
          {
            "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
            "state": "active",
            "role": "admin",
            "organization_url": "https://api.github.com/orgs/octocat",
            "organization": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          },
          {
            "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
            "state": "pending",
            "role": "admin",
            "organization_url": "https://api.github.com/orgs/invitocat",
            "organization": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization"
            },
            "user": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            }
          }
        ]
      },
      "org-membership": {
        "value": {
          "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
          "state": "pending",
          "role": "admin",
          "organization_url": "https://api.github.com/orgs/invitocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "org-membership-2": {
        "value": {
          "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
          "state": "active",
          "role": "admin",
          "organization_url": "https://api.github.com/orgs/octocat",
          "organization": {
            "login": "github",
            "id": 1,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
            "url": "https://api.github.com/orgs/github",
            "repos_url": "https://api.github.com/orgs/github/repos",
            "events_url": "https://api.github.com/orgs/github/events",
            "hooks_url": "https://api.github.com/orgs/github/hooks",
            "issues_url": "https://api.github.com/orgs/github/issues",
            "members_url": "https://api.github.com/orgs/github/members{/member}",
            "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "description": "A great organization"
          },
          "user": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          }
        }
      },
      "migration-items": {
        "value": [
          {
            "id": 79,
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
            "state": "pending",
            "lock_repositories": true,
            "exclude_attachments": false,
            "repositories": [
              {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "language": null,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": true,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": null,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            ],
            "url": "https://api.github.com/orgs/octo-org/migrations/79",
            "created_at": "2015-07-06T15:33:38-07:00",
            "updated_at": "2015-07-06T15:33:38-07:00"
          }
        ]
      },
      "migration-2": {
        "value": {
          "id": 79,
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "pending",
          "lock_repositories": true,
          "exclude_attachments": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "migration": {
        "value": {
          "id": 79,
          "owner": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
          "state": "exported",
          "lock_repositories": true,
          "exclude_attachments": false,
          "repositories": [
            {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          ],
          "url": "https://api.github.com/orgs/octo-org/migrations/79",
          "created_at": "2015-07-06T15:33:38-07:00",
          "updated_at": "2015-07-06T15:33:38-07:00"
        }
      },
      "project": {
        "value": {
          "owner_url": "https://api.github.com/users/octocat",
          "url": "https://api.github.com/projects/1002603",
          "html_url": "https://github.com/users/octocat/projects/1",
          "columns_url": "https://api.github.com/projects/1002603/columns",
          "id": 1002603,
          "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
          "name": "My Projects",
          "body": "A board to manage my personal projects.",
          "number": 1,
          "state": "open",
          "creator": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "created_at": "2011-04-10T20:09:31Z",
          "updated_at": "2014-03-03T18:58:10Z"
        }
      },
      "repository-items-default-response": {
        "summary": "Default response",
        "value": [
          {
            "id": 1296269,
            "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
            "name": "Hello-World",
            "full_name": "octocat/Hello-World",
            "owner": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/octocat/Hello-World",
            "description": "This your first repo!",
            "fork": false,
            "url": "https://api.github.com/repos/octocat/Hello-World",
            "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
            "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
            "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
            "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
            "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
            "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
            "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
            "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
            "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
            "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
            "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
            "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
            "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
            "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
            "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
            "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
            "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
            "git_url": "git:github.com/octocat/Hello-World.git",
            "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
            "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
            "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
            "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
            "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
            "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
            "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
            "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
            "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
            "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
            "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
            "ssh_url": "git@github.com:octocat/Hello-World.git",
            "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
            "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
            "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
            "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
            "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
            "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
            "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
            "clone_url": "https://github.com/octocat/Hello-World.git",
            "mirror_url": "git:git.example.com/octocat/Hello-World",
            "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
            "svn_url": "https://svn.github.com/octocat/Hello-World",
            "homepage": "https://github.com",
            "language": null,
            "forks_count": 9,
            "stargazers_count": 80,
            "watchers_count": 80,
            "size": 108,
            "default_branch": "master",
            "open_issues_count": 0,
            "is_template": true,
            "topics": [
              "octocat",
              "atom",
              "electron",
              "api"
            ],
            "has_issues": true,
            "has_projects": true,
            "has_wiki": true,
            "has_pages": false,
            "has_downloads": true,
            "archived": false,
            "disabled": false,
            "visibility": "public",
            "pushed_at": "2011-01-26T19:06:43Z",
            "created_at": "2011-01-26T19:01:12Z",
            "updated_at": "2011-01-26T19:14:43Z",
            "permissions": {
              "admin": false,
              "push": false,
              "pull": true
            },
            "allow_rebase_merge": true,
            "template_repository": null,
            "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
            "allow_squash_merge": true,
            "delete_branch_on_merge": true,
            "allow_merge_commit": true,
            "subscribers_count": 42,
            "network_count": 0
          }
        ]
      },
      "starred-repository-items-alternative-response-with-star-creation-timestamps": {
        "summary": "Alternative response with star creation timestamps",
        "value": [
          {
            "starred_at": "2011-01-16T19:06:43Z",
            "repo": {
              "id": 1296269,
              "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
              "name": "Hello-World",
              "full_name": "octocat/Hello-World",
              "owner": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              },
              "private": false,
              "html_url": "https://github.com/octocat/Hello-World",
              "description": "This your first repo!",
              "fork": false,
              "url": "https://api.github.com/repos/octocat/Hello-World",
              "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
              "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
              "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
              "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
              "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
              "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
              "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
              "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
              "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
              "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
              "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
              "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
              "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
              "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
              "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
              "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
              "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
              "git_url": "git:github.com/octocat/Hello-World.git",
              "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
              "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
              "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
              "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
              "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
              "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
              "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
              "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
              "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
              "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
              "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
              "ssh_url": "git@github.com:octocat/Hello-World.git",
              "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
              "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
              "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
              "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
              "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
              "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
              "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
              "clone_url": "https://github.com/octocat/Hello-World.git",
              "mirror_url": "git:git.example.com/octocat/Hello-World",
              "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
              "svn_url": "https://svn.github.com/octocat/Hello-World",
              "homepage": "https://github.com",
              "language": null,
              "forks_count": 9,
              "stargazers_count": 80,
              "watchers_count": 80,
              "size": 108,
              "default_branch": "master",
              "open_issues_count": 0,
              "is_template": true,
              "topics": [
                "octocat",
                "atom",
                "electron",
                "api"
              ],
              "has_issues": true,
              "has_projects": true,
              "has_wiki": true,
              "has_pages": false,
              "has_downloads": true,
              "archived": false,
              "disabled": false,
              "visibility": "public",
              "pushed_at": "2011-01-26T19:06:43Z",
              "created_at": "2011-01-26T19:01:12Z",
              "updated_at": "2011-01-26T19:14:43Z",
              "permissions": {
                "admin": false,
                "push": false,
                "pull": true
              },
              "allow_rebase_merge": true,
              "template_repository": null,
              "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
              "allow_squash_merge": true,
              "delete_branch_on_merge": true,
              "allow_merge_commit": true,
              "subscribers_count": 42,
              "network_count": 0
            }
          }
        ]
      },
      "team-full-items": {
        "value": [
          {
            "id": 1,
            "node_id": "MDQ6VGVhbTE=",
            "url": "https://api.github.com/teams/1",
            "html_url": "https://api.github.com/teams/justice-league",
            "name": "Justice League",
            "slug": "justice-league",
            "description": "A great team.",
            "privacy": "closed",
            "permission": "admin",
            "members_url": "https://api.github.com/teams/1/members{/member}",
            "repositories_url": "https://api.github.com/teams/1/repos",
            "parent": null,
            "members_count": 3,
            "repos_count": 10,
            "created_at": "2017-07-14T16:53:42Z",
            "updated_at": "2017-08-17T12:37:15Z",
            "organization": {
              "login": "github",
              "id": 1,
              "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
              "url": "https://api.github.com/orgs/github",
              "repos_url": "https://api.github.com/orgs/github/repos",
              "events_url": "https://api.github.com/orgs/github/events",
              "hooks_url": "https://api.github.com/orgs/github/hooks",
              "issues_url": "https://api.github.com/orgs/github/issues",
              "members_url": "https://api.github.com/orgs/github/members{/member}",
              "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "description": "A great organization",
              "name": "github",
              "company": "GitHub",
              "blog": "https://github.com/blog",
              "location": "San Francisco",
              "email": "octocat@github.com",
              "twitter_username": "github",
              "is_verified": true,
              "has_organization_projects": true,
              "has_repository_projects": true,
              "public_repos": 2,
              "public_gists": 1,
              "followers": 20,
              "following": 0,
              "html_url": "https://github.com/octocat",
              "created_at": "2008-01-14T04:33:35Z",
              "type": "Organization"
            }
          }
        ]
      },
      "public-user-default-response": {
        "summary": "Default response",
        "value": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false,
          "name": "monalisa octocat",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "hireable": false,
          "bio": "There once was...",
          "twitter_username": "monatheoctocat",
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2008-01-14T04:33:35Z"
        }
      },
      "public-user-response-with-git-hub-plan-information": {
        "summary": "Response with GitHub plan information",
        "value": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false,
          "name": "monalisa octocat",
          "company": "GitHub",
          "blog": "https://github.com/blog",
          "location": "San Francisco",
          "email": "octocat@github.com",
          "hireable": false,
          "bio": "There once was...",
          "twitter_username": "monatheoctocat",
          "public_repos": 2,
          "public_gists": 1,
          "followers": 20,
          "following": 0,
          "created_at": "2008-01-14T04:33:35Z",
          "updated_at": "2008-01-14T04:33:35Z",
          "plan": {
            "name": "pro",
            "space": 976562499,
            "collaborators": 0,
            "private_repos": 9999
          }
        }
      },
      "hovercard": {
        "value": {
          "contexts": [
            {
              "message": "Owns this repository",
              "octicon": "repo"
            }
          ]
        }
      },
      "installation-2": {
        "value": {
          "id": 3,
          "account": {
            "login": "octocat",
            "id": 1,
            "node_id": "MDQ6VXNlcjE=",
            "avatar_url": "https://github.com/images/error/octocat_happy.gif",
            "gravatar_id": "",
            "url": "https://api.github.com/users/octocat",
            "html_url": "https://github.com/octocat",
            "followers_url": "https://api.github.com/users/octocat/followers",
            "following_url": "https://api.github.com/users/octocat/following{/other_user}",
            "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
            "organizations_url": "https://api.github.com/users/octocat/orgs",
            "repos_url": "https://api.github.com/users/octocat/repos",
            "events_url": "https://api.github.com/users/octocat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/octocat/received_events",
            "type": "User",
            "site_admin": false
          },
          "repository_selection": "selected",
          "access_tokens_url": "https://api.github.com/installations/3/access_tokens",
          "repositories_url": "https://api.github.com/installation/repositories",
          "html_url": "https://github.com/organizations/github/settings/installations/3",
          "app_id": 2,
          "target_id": 1,
          "target_type": "User",
          "permissions": {
            "checks": "write",
            "metadata": "read",
            "contents": "read"
          },
          "events": [
            "label"
          ],
          "created_at": "2018-02-22T20:51:14Z",
          "updated_at": "2018-02-22T20:51:14Z",
          "single_file_name": null
        }
      },
      "key-simple-items": {
        "value": [
          {
            "id": 1,
            "key": "ssh-rsa AAA..."
          }
        ]
      },
      "project-items-3": {
        "value": [
          {
            "owner_url": "https://api.github.com/users/octocat",
            "url": "https://api.github.com/projects/1002603",
            "html_url": "https://github.com/users/octocat/projects/1",
            "columns_url": "https://api.github.com/projects/1002603/columns",
            "id": 1002603,
            "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
            "name": "My Projects",
            "body": "A board to manage my personal projects.",
            "number": 1,
            "state": "open",
            "creator": {
              "login": "octocat",
              "id": 1,
              "node_id": "MDQ6VXNlcjE=",
              "avatar_url": "https://github.com/images/error/octocat_happy.gif",
              "gravatar_id": "",
              "url": "https://api.github.com/users/octocat",
              "html_url": "https://github.com/octocat",
              "followers_url": "https://api.github.com/users/octocat/followers",
              "following_url": "https://api.github.com/users/octocat/following{/other_user}",
              "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
              "organizations_url": "https://api.github.com/users/octocat/orgs",
              "repos_url": "https://api.github.com/users/octocat/repos",
              "events_url": "https://api.github.com/users/octocat/events{/privacy}",
              "received_events_url": "https://api.github.com/users/octocat/received_events",
              "type": "User",
              "site_admin": false
            },
            "created_at": "2011-04-10T20:09:31Z",
            "updated_at": "2014-03-03T18:58:10Z"
          }
        ]
      }
    },
    "parameters": {
      "accept": {
        "name": "accept",
        "description": "Setting to `application/vnd.github.v3+json` is recommended",
        "in": "header",
        "schema": {
          "type": "string",
          "default": "application/vnd.github.v3+json"
        }
      },
      "code": {
        "name": "code",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "per_page": {
        "name": "per_page",
        "description": "Results per page (max 100)",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 30
        }
      },
      "page": {
        "name": "page",
        "description": "Page number of the results to fetch.",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "installation_id": {
        "name": "installation_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "grant_id": {
        "name": "grant_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "client_id": {
        "name": "client_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "access_token": {
        "name": "access_token",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "app_slug": {
        "name": "app_slug",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "fingerprint": {
        "name": "fingerprint",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "authorization_id": {
        "name": "authorization_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "key": {
        "name": "key",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "content_reference_id": {
        "name": "content_reference_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "enterprise_id": {
        "name": "enterprise_id",
        "description": "Unique identifier of the GitHub Enterprise Cloud instance.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "gist_id": {
        "name": "gist_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "comment_id": {
        "name": "comment_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "sha": {
        "name": "sha",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "name": {
        "name": "name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "labels": {
        "name": "labels",
        "description": "A list of comma separated label names. Example: `bug,ui,@high`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "license": {
        "name": "license",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "content-type": {
        "name": "content-type",
        "description": "Setting content-type header is required for this endpoint",
        "in": "header",
        "schema": {
          "type": "string",
          "enum": [
            "text/plain; charset=utf-8"
          ]
        }
      },
      "account_id": {
        "name": "account_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "plan_id": {
        "name": "plan_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "owner": {
        "name": "owner",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repo": {
        "name": "repo",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "all": {
        "name": "all",
        "description": "If `true`, show notifications marked as read.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "participating": {
        "name": "participating",
        "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "since": {
        "name": "since",
        "description": "Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "before": {
        "name": "before",
        "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "thread_id": {
        "name": "thread_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "org": {
        "name": "org",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "runner_id": {
        "name": "runner_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "secret_name": {
        "name": "secret_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repository_id": {
        "name": "repository_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "username": {
        "name": "username",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "credential_id": {
        "name": "credential_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "hook_id": {
        "name": "hook_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "invitation_id": {
        "name": "invitation_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "role": {
        "name": "role",
        "description": "Filter members returned by their role. Can be one of:  \n\\* `all` - All members of the organization, regardless of role.  \n\\* `admin` - Organization owners.  \n\\* `member` - Non-owner organization members.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "admin",
            "member"
          ],
          "default": "all"
        }
      },
      "migration_id": {
        "name": "migration_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "repo_name": {
        "name": "repo_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "team_slug": {
        "name": "team_slug",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "discussion_number": {
        "name": "discussion_number",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "comment_number": {
        "name": "comment_number",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "reaction_id": {
        "name": "reaction_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "project_id": {
        "name": "project_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "card_id": {
        "name": "card_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "column_id": {
        "name": "column_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "archived_state": {
        "name": "archived_state",
        "description": "Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "archived",
            "not_archived"
          ],
          "default": "not_archived"
        }
      },
      "affiliation": {
        "name": "affiliation",
        "description": "Filters the collaborators by their affiliation. Can be one of:  \n\\* `outside`: Outside collaborators of a project that are not a member of the project's organization.  \n\\* `direct`: Collaborators with permissions to a project, regardless of organization membership status.  \n\\* `all`: All collaborators the authenticated user can see.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "outside",
            "direct",
            "all"
          ],
          "default": "all"
        }
      },
      "artifact_id": {
        "name": "artifact_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "archive_format": {
        "name": "archive_format",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "job_id": {
        "name": "job_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "actor": {
        "name": "actor",
        "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "branch": {
        "name": "branch",
        "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "event": {
        "name": "event",
        "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "status": {
        "name": "status",
        "description": "Returns workflow runs associated with the check run `status` or `conclusion` you specify. For example, a conclusion can be `success` or a status can be `completed`. For more information, see the `status` and `conclusion` options available in \"[Create a check run](https://developer.github.com/v3/checks/runs/#create-a-check-run).\"",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "completed",
            "status",
            "conclusion"
          ]
        }
      },
      "run_id": {
        "name": "run_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "filter": {
        "name": "filter",
        "description": "Filters jobs by their `completed_at` timestamp. Can be one of:  \n\\* `latest`: Returns jobs from the most recent execution of the workflow run.  \n\\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "latest",
            "all"
          ],
          "default": "latest"
        }
      },
      "workflow_id": {
        "name": "workflow_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "assignee": {
        "name": "assignee",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "protected": {
        "name": "protected",
        "description": "Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "check_run_id": {
        "name": "check_run_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "check_suite_id": {
        "name": "check_suite_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "check_name": {
        "name": "check_name",
        "description": "Returns check runs with the specified `name`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "state": {
        "name": "state",
        "description": "Set to `closed` to list only closed code scanning alerts.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "default": "open"
        }
      },
      "alert_id": {
        "name": "alert_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "content": {
        "name": "content",
        "description": "Returns a single [reaction type](https://developer.github.com/v3/reactions/#reaction-types). Omit this parameter to list all reactions to a commit comment.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "+1",
            "-1",
            "laugh",
            "confused",
            "heart",
            "hooray",
            "rocket",
            "eyes"
          ]
        }
      },
      "author": {
        "name": "author",
        "description": "GitHub login or email address by which to filter by commit author.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "until": {
        "name": "until",
        "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "commit_sha": {
        "name": "commit_sha",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ref": {
        "name": "ref",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "app_id": {
        "name": "app_id",
        "description": "Filters check suites by GitHub App `id`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "example": 1
      },
      "accept-black-panther": {
        "name": "accept",
        "description": "This API is under preview and subject to change.",
        "in": "header",
        "schema": {
          "type": "string",
          "default": "application/vnd.github.black-panther+json"
        },
        "required": true
      },
      "path": {
        "name": "path",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "anon": {
        "name": "anon",
        "description": "Set to `1` or `true` to include anonymous contributors in results.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "task": {
        "name": "task",
        "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "default": "none"
        }
      },
      "environment": {
        "name": "environment",
        "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "default": "none"
        }
      },
      "deployment_id": {
        "name": "deployment_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "status_id": {
        "name": "status_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "file_sha": {
        "name": "file_sha",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tag_sha": {
        "name": "tag_sha",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tree_sha": {
        "name": "tree_sha",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "recursive": {
        "name": "recursive",
        "description": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "author_id": {
        "name": "author_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "milestone": {
        "name": "milestone",
        "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "creator": {
        "name": "creator",
        "description": "The user that created the issue.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "mentioned": {
        "name": "mentioned",
        "description": "A user that's mentioned in the issue.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "event_id": {
        "name": "event_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "issue_number": {
        "name": "issue_number",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "key_id": {
        "name": "key_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "milestone_number": {
        "name": "milestone_number",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "build_id": {
        "name": "build_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "head": {
        "name": "head",
        "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "base": {
        "name": "base",
        "description": "Filter pulls by base branch name. Example: `gh-pages`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "pull_number": {
        "name": "pull_number",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "review_id": {
        "name": "review_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "asset_id": {
        "name": "asset_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "tag": {
        "name": "tag",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "release_id": {
        "name": "release_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "content-length": {
        "name": "content-length",
        "description": "Size of the asset in bytes. Most libraries will calculate the header automatically",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "label": {
        "name": "label",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "label parameter"
      },
      "per": {
        "name": "per",
        "description": "Must be one of: `day`, `week`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "day",
            "week"
          ],
          "default": "day"
        }
      },
      "template_owner": {
        "name": "template_owner",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "template_repo": {
        "name": "template_repo",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "startIndex": {
        "name": "startIndex",
        "description": "Used for pagination: the index of the first result to return.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "count": {
        "name": "count",
        "description": "Used for pagination: the number of results to return.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "scim_user_id": {
        "name": "scim_user_id",
        "description": "Identifier generated by the GitHub SCIM endpoint.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "q": {
        "name": "q",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers.",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "order": {
        "name": "order",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "desc",
            "asc"
          ],
          "default": "desc"
        }
      },
      "accept-mercy": {
        "name": "accept",
        "description": "This API is under preview and subject to change.",
        "in": "header",
        "schema": {
          "type": "string",
          "default": "application/vnd.github.mercy-preview+json"
        },
        "required": true
      },
      "team_id": {
        "name": "team_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "gpg_key_id": {
        "name": "gpg_key_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "visibility": {
        "name": "visibility",
        "description": "Can be one of `all`, `public`, or `private`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "public",
            "private"
          ],
          "default": "all"
        }
      },
      "type": {
        "name": "type",
        "description": "Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`  \n  \nWill cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "owner",
            "public",
            "private",
            "member"
          ],
          "default": "all"
        }
      },
      "sort": {
        "name": "sort",
        "description": "One of `created` (when the repository was starred) or `updated` (when it was last pushed to).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created",
            "updated"
          ],
          "default": "created"
        }
      },
      "direction": {
        "name": "direction",
        "description": "One of `asc` (ascending) or `desc` (descending).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "desc"
        }
      },
      "target_user": {
        "name": "target_user",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "subject_type": {
        "name": "subject_type",
        "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "organization",
            "repository",
            "issue",
            "pull_request"
          ]
        }
      },
      "subject_id": {
        "name": "subject_id",
        "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "Link": {
        "example": "<https://api.github.com/resource?page=2>; rel=\"next\", <https://api.github.com/resource?page=5>; rel=\"last\"",
        "schema": {
          "type": "string"
        }
      },
      "Content-Type": {
        "example": "text/html",
        "schema": {
          "type": "string"
        }
      },
      "X-CommonMarker-Version": {
        "example": "0.17.4",
        "schema": {
          "type": "string"
        }
      },
      "Content-Length": {
        "example": "68",
        "schema": {
          "type": "string"
        }
      },
      "X-RateLimit-Limit": {
        "example": "5000",
        "schema": {
          "type": "integer"
        }
      },
      "X-RateLimit-Remaining": {
        "example": "4999",
        "schema": {
          "type": "integer"
        }
      },
      "X-RateLimit-Reset": {
        "example": "1372700873",
        "schema": {
          "type": "integer",
          "format": "timestamp"
        }
      },
      "Location": {
        "example": "https://pipelines.actions.githubusercontent.com/OhgS4QRKqmgx7bKC27GKU83jnQjyeqG8oIMTge8eqtheppcmw8/_apis/pipelines/1/runs/176/signedlogcontent?urlExpires=2020-01-24T18%3A10%3A31.5729946Z&urlSigningMethod=HMACV1&urlSignature=agG73JakPYkHrh06seAkvmH7rBR4Ji4c2%2B6a2ejYh3E%3D",
        "schema": {
          "type": "string"
        }
      }
    }
  }
}