// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
)

/*
InteractionsAddOrUpdateRestrictionsForOrg performs requests for "interactions/add-or-update-restrictions-for-org"

Add or update interaction restrictions for an organization.

  PUT /orgs/{org}/interaction-limits

https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization
*/
func (c *Client) InteractionsAddOrUpdateRestrictionsForOrg(ctx context.Context, req *InteractionsAddOrUpdateRestrictionsForOrgReq, opt ...RequestOption) (*InteractionsAddOrUpdateRestrictionsForOrgResponse, error) {
	r, err := c.doRequest(ctx, req, opt...)
	if err != nil {
		return nil, err
	}
	resp := &InteractionsAddOrUpdateRestrictionsForOrgResponse{
		request:  req,
		response: *r,
	}
	resp.Data = new(InteractionsAddOrUpdateRestrictionsForOrgResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
InteractionsAddOrUpdateRestrictionsForOrgReq is request data for Client.InteractionsAddOrUpdateRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization
*/
type InteractionsAddOrUpdateRestrictionsForOrgReq struct {
	pgURL       string
	Org         string
	RequestBody InteractionsAddOrUpdateRestrictionsForOrgReqBody

	/*
	The Interactions API is currently in public preview. See the [blog
	post](https://developer.github.com/changes/2018-12-18-interactions-preview)
	preview for more details. To access the API during the preview period, you must
	set this to true.
	*/
	SombraPreview bool
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) pagingURL() string {
	return r.pgURL
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/interaction-limits", r.Org)
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) method() string {
	return "PUT"
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"sombra": r.SombraPreview}
	if requiredPreviews {
		previewVals["sombra"] = true
	}
	if allPreviews {
		previewVals["sombra"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) body() interface{} {
	return r.RequestBody
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) dataStatuses() []int {
	return []int{200}
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) validStatuses() []int {
	return []int{200}
}

func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// httpRequest creates an http request
func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *InteractionsAddOrUpdateRestrictionsForOrgReq) Rel(link RelName, resp *InteractionsAddOrUpdateRestrictionsForOrgResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
InteractionsAddOrUpdateRestrictionsForOrgReqBody is a request body for interactions/add-or-update-restrictions-for-org

https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization
*/
type InteractionsAddOrUpdateRestrictionsForOrgReqBody struct {

	/*
	   Specifies the group of GitHub users who can comment, open issues, or create pull
	   requests in public repositories for the given organization. Must be one of:
	   `existing_users`, `contributors_only`, or `collaborators_only`.
	*/
	Limit *string `json:"limit"`
}

/*
InteractionsAddOrUpdateRestrictionsForOrgResponseBody is a response body for InteractionsAddOrUpdateRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization
*/
type InteractionsAddOrUpdateRestrictionsForOrgResponseBody struct {
	components.InteractionLimit
}

/*
InteractionsAddOrUpdateRestrictionsForOrgResponse is a response for InteractionsAddOrUpdateRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization
*/
type InteractionsAddOrUpdateRestrictionsForOrgResponse struct {
	response
	request *InteractionsAddOrUpdateRestrictionsForOrgReq
	Data    *InteractionsAddOrUpdateRestrictionsForOrgResponseBody
}

/*
InteractionsAddOrUpdateRestrictionsForRepo performs requests for "interactions/add-or-update-restrictions-for-repo"

Add or update interaction restrictions for a repository.

  PUT /repos/{owner}/{repo}/interaction-limits

https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository
*/
func (c *Client) InteractionsAddOrUpdateRestrictionsForRepo(ctx context.Context, req *InteractionsAddOrUpdateRestrictionsForRepoReq, opt ...RequestOption) (*InteractionsAddOrUpdateRestrictionsForRepoResponse, error) {
	r, err := c.doRequest(ctx, req, opt...)
	if err != nil {
		return nil, err
	}
	resp := &InteractionsAddOrUpdateRestrictionsForRepoResponse{
		request:  req,
		response: *r,
	}
	resp.Data = new(InteractionsAddOrUpdateRestrictionsForRepoResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
InteractionsAddOrUpdateRestrictionsForRepoReq is request data for Client.InteractionsAddOrUpdateRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository
*/
type InteractionsAddOrUpdateRestrictionsForRepoReq struct {
	pgURL       string
	Owner       string
	Repo        string
	RequestBody InteractionsAddOrUpdateRestrictionsForRepoReqBody

	/*
	The Interactions API is currently in public preview. See the [blog
	post](https://developer.github.com/changes/2018-12-18-interactions-preview)
	preview for more details. To access the API during the preview period, you must
	set this to true.
	*/
	SombraPreview bool
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) pagingURL() string {
	return r.pgURL
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/interaction-limits", r.Owner, r.Repo)
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) method() string {
	return "PUT"
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"sombra": r.SombraPreview}
	if requiredPreviews {
		previewVals["sombra"] = true
	}
	if allPreviews {
		previewVals["sombra"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) body() interface{} {
	return r.RequestBody
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) dataStatuses() []int {
	return []int{200}
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) validStatuses() []int {
	return []int{200}
}

func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// httpRequest creates an http request
func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *InteractionsAddOrUpdateRestrictionsForRepoReq) Rel(link RelName, resp *InteractionsAddOrUpdateRestrictionsForRepoResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
InteractionsAddOrUpdateRestrictionsForRepoReqBody is a request body for interactions/add-or-update-restrictions-for-repo

https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository
*/
type InteractionsAddOrUpdateRestrictionsForRepoReqBody struct {

	/*
	   Specifies the group of GitHub users who can comment, open issues, or create pull
	   requests for the given repository. Must be one of: `existing_users`,
	   `contributors_only`, or `collaborators_only`.
	*/
	Limit *string `json:"limit"`
}

/*
InteractionsAddOrUpdateRestrictionsForRepoResponseBody is a response body for InteractionsAddOrUpdateRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository
*/
type InteractionsAddOrUpdateRestrictionsForRepoResponseBody struct {
	components.InteractionLimit
}

/*
InteractionsAddOrUpdateRestrictionsForRepoResponse is a response for InteractionsAddOrUpdateRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository
*/
type InteractionsAddOrUpdateRestrictionsForRepoResponse struct {
	response
	request *InteractionsAddOrUpdateRestrictionsForRepoReq
	Data    *InteractionsAddOrUpdateRestrictionsForRepoResponseBody
}

/*
InteractionsGetRestrictionsForOrg performs requests for "interactions/get-restrictions-for-org"

Get interaction restrictions for an organization.

  GET /orgs/{org}/interaction-limits

https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization
*/
func (c *Client) InteractionsGetRestrictionsForOrg(ctx context.Context, req *InteractionsGetRestrictionsForOrgReq, opt ...RequestOption) (*InteractionsGetRestrictionsForOrgResponse, error) {
	r, err := c.doRequest(ctx, req, opt...)
	if err != nil {
		return nil, err
	}
	resp := &InteractionsGetRestrictionsForOrgResponse{
		request:  req,
		response: *r,
	}
	resp.Data = new(InteractionsGetRestrictionsForOrgResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
InteractionsGetRestrictionsForOrgReq is request data for Client.InteractionsGetRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization
*/
type InteractionsGetRestrictionsForOrgReq struct {
	pgURL string
	Org   string

	/*
	The Interactions API is currently in public preview. See the [blog
	post](https://developer.github.com/changes/2018-12-18-interactions-preview)
	preview for more details. To access the API during the preview period, you must
	set this to true.
	*/
	SombraPreview bool
}

func (r *InteractionsGetRestrictionsForOrgReq) pagingURL() string {
	return r.pgURL
}

func (r *InteractionsGetRestrictionsForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/interaction-limits", r.Org)
}

func (r *InteractionsGetRestrictionsForOrgReq) method() string {
	return "GET"
}

func (r *InteractionsGetRestrictionsForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *InteractionsGetRestrictionsForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"sombra": r.SombraPreview}
	if requiredPreviews {
		previewVals["sombra"] = true
	}
	if allPreviews {
		previewVals["sombra"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *InteractionsGetRestrictionsForOrgReq) body() interface{} {
	return nil
}

func (r *InteractionsGetRestrictionsForOrgReq) dataStatuses() []int {
	return []int{200}
}

func (r *InteractionsGetRestrictionsForOrgReq) validStatuses() []int {
	return []int{200}
}

func (r *InteractionsGetRestrictionsForOrgReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *InteractionsGetRestrictionsForOrgReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *InteractionsGetRestrictionsForOrgReq) Rel(link RelName, resp *InteractionsGetRestrictionsForOrgResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
InteractionsGetRestrictionsForOrgResponseBody is a response body for InteractionsGetRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization
*/
type InteractionsGetRestrictionsForOrgResponseBody struct {
	components.InteractionLimit
}

/*
InteractionsGetRestrictionsForOrgResponse is a response for InteractionsGetRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization
*/
type InteractionsGetRestrictionsForOrgResponse struct {
	response
	request *InteractionsGetRestrictionsForOrgReq
	Data    *InteractionsGetRestrictionsForOrgResponseBody
}

/*
InteractionsGetRestrictionsForRepo performs requests for "interactions/get-restrictions-for-repo"

Get interaction restrictions for a repository.

  GET /repos/{owner}/{repo}/interaction-limits

https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository
*/
func (c *Client) InteractionsGetRestrictionsForRepo(ctx context.Context, req *InteractionsGetRestrictionsForRepoReq, opt ...RequestOption) (*InteractionsGetRestrictionsForRepoResponse, error) {
	r, err := c.doRequest(ctx, req, opt...)
	if err != nil {
		return nil, err
	}
	resp := &InteractionsGetRestrictionsForRepoResponse{
		request:  req,
		response: *r,
	}
	resp.Data = new(InteractionsGetRestrictionsForRepoResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
InteractionsGetRestrictionsForRepoReq is request data for Client.InteractionsGetRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository
*/
type InteractionsGetRestrictionsForRepoReq struct {
	pgURL string
	Owner string
	Repo  string

	/*
	The Interactions API is currently in public preview. See the [blog
	post](https://developer.github.com/changes/2018-12-18-interactions-preview)
	preview for more details. To access the API during the preview period, you must
	set this to true.
	*/
	SombraPreview bool
}

func (r *InteractionsGetRestrictionsForRepoReq) pagingURL() string {
	return r.pgURL
}

func (r *InteractionsGetRestrictionsForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/interaction-limits", r.Owner, r.Repo)
}

func (r *InteractionsGetRestrictionsForRepoReq) method() string {
	return "GET"
}

func (r *InteractionsGetRestrictionsForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *InteractionsGetRestrictionsForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"sombra": r.SombraPreview}
	if requiredPreviews {
		previewVals["sombra"] = true
	}
	if allPreviews {
		previewVals["sombra"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *InteractionsGetRestrictionsForRepoReq) body() interface{} {
	return nil
}

func (r *InteractionsGetRestrictionsForRepoReq) dataStatuses() []int {
	return []int{200}
}

func (r *InteractionsGetRestrictionsForRepoReq) validStatuses() []int {
	return []int{200}
}

func (r *InteractionsGetRestrictionsForRepoReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *InteractionsGetRestrictionsForRepoReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *InteractionsGetRestrictionsForRepoReq) Rel(link RelName, resp *InteractionsGetRestrictionsForRepoResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
InteractionsGetRestrictionsForRepoResponseBody is a response body for InteractionsGetRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository
*/
type InteractionsGetRestrictionsForRepoResponseBody struct {
	components.InteractionLimit
}

/*
InteractionsGetRestrictionsForRepoResponse is a response for InteractionsGetRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository
*/
type InteractionsGetRestrictionsForRepoResponse struct {
	response
	request *InteractionsGetRestrictionsForRepoReq
	Data    *InteractionsGetRestrictionsForRepoResponseBody
}

/*
InteractionsRemoveRestrictionsForOrg performs requests for "interactions/remove-restrictions-for-org"

Remove interaction restrictions for an organization.

  DELETE /orgs/{org}/interaction-limits

https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization
*/
func (c *Client) InteractionsRemoveRestrictionsForOrg(ctx context.Context, req *InteractionsRemoveRestrictionsForOrgReq, opt ...RequestOption) (*InteractionsRemoveRestrictionsForOrgResponse, error) {
	r, err := c.doRequest(ctx, req, opt...)
	if err != nil {
		return nil, err
	}
	resp := &InteractionsRemoveRestrictionsForOrgResponse{
		request:  req,
		response: *r,
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
InteractionsRemoveRestrictionsForOrgReq is request data for Client.InteractionsRemoveRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization
*/
type InteractionsRemoveRestrictionsForOrgReq struct {
	pgURL string
	Org   string

	/*
	The Interactions API is currently in public preview. See the [blog
	post](https://developer.github.com/changes/2018-12-18-interactions-preview)
	preview for more details. To access the API during the preview period, you must
	set this to true.
	*/
	SombraPreview bool
}

func (r *InteractionsRemoveRestrictionsForOrgReq) pagingURL() string {
	return r.pgURL
}

func (r *InteractionsRemoveRestrictionsForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/interaction-limits", r.Org)
}

func (r *InteractionsRemoveRestrictionsForOrgReq) method() string {
	return "DELETE"
}

func (r *InteractionsRemoveRestrictionsForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *InteractionsRemoveRestrictionsForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"sombra": r.SombraPreview}
	if requiredPreviews {
		previewVals["sombra"] = true
	}
	if allPreviews {
		previewVals["sombra"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *InteractionsRemoveRestrictionsForOrgReq) body() interface{} {
	return nil
}

func (r *InteractionsRemoveRestrictionsForOrgReq) dataStatuses() []int {
	return []int{}
}

func (r *InteractionsRemoveRestrictionsForOrgReq) validStatuses() []int {
	return []int{204}
}

func (r *InteractionsRemoveRestrictionsForOrgReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *InteractionsRemoveRestrictionsForOrgReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *InteractionsRemoveRestrictionsForOrgReq) Rel(link RelName, resp *InteractionsRemoveRestrictionsForOrgResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
InteractionsRemoveRestrictionsForOrgResponse is a response for InteractionsRemoveRestrictionsForOrg

https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization
*/
type InteractionsRemoveRestrictionsForOrgResponse struct {
	response
	request *InteractionsRemoveRestrictionsForOrgReq
}

/*
InteractionsRemoveRestrictionsForRepo performs requests for "interactions/remove-restrictions-for-repo"

Remove interaction restrictions for a repository.

  DELETE /repos/{owner}/{repo}/interaction-limits

https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository
*/
func (c *Client) InteractionsRemoveRestrictionsForRepo(ctx context.Context, req *InteractionsRemoveRestrictionsForRepoReq, opt ...RequestOption) (*InteractionsRemoveRestrictionsForRepoResponse, error) {
	r, err := c.doRequest(ctx, req, opt...)
	if err != nil {
		return nil, err
	}
	resp := &InteractionsRemoveRestrictionsForRepoResponse{
		request:  req,
		response: *r,
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
InteractionsRemoveRestrictionsForRepoReq is request data for Client.InteractionsRemoveRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository
*/
type InteractionsRemoveRestrictionsForRepoReq struct {
	pgURL string
	Owner string
	Repo  string

	/*
	The Interactions API is currently in public preview. See the [blog
	post](https://developer.github.com/changes/2018-12-18-interactions-preview)
	preview for more details. To access the API during the preview period, you must
	set this to true.
	*/
	SombraPreview bool
}

func (r *InteractionsRemoveRestrictionsForRepoReq) pagingURL() string {
	return r.pgURL
}

func (r *InteractionsRemoveRestrictionsForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/interaction-limits", r.Owner, r.Repo)
}

func (r *InteractionsRemoveRestrictionsForRepoReq) method() string {
	return "DELETE"
}

func (r *InteractionsRemoveRestrictionsForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *InteractionsRemoveRestrictionsForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"sombra": r.SombraPreview}
	if requiredPreviews {
		previewVals["sombra"] = true
	}
	if allPreviews {
		previewVals["sombra"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *InteractionsRemoveRestrictionsForRepoReq) body() interface{} {
	return nil
}

func (r *InteractionsRemoveRestrictionsForRepoReq) dataStatuses() []int {
	return []int{}
}

func (r *InteractionsRemoveRestrictionsForRepoReq) validStatuses() []int {
	return []int{204}
}

func (r *InteractionsRemoveRestrictionsForRepoReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *InteractionsRemoveRestrictionsForRepoReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *InteractionsRemoveRestrictionsForRepoReq) Rel(link RelName, resp *InteractionsRemoveRestrictionsForRepoResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r.pgURL = u
	return true
}

/*
InteractionsRemoveRestrictionsForRepoResponse is a response for InteractionsRemoveRestrictionsForRepo

https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository
*/
type InteractionsRemoveRestrictionsForRepoResponse struct {
	response
	request *InteractionsRemoveRestrictionsForRepoReq
}
