// Code generated by octo-go; DO NOT EDIT.

package reactions

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	internal "github.com/willabides/octo-go/internal"
	requests "github.com/willabides/octo-go/requests"
	"net/http"
	"net/url"
	"strconv"
)

func strPtr(s string) *string { return &s }

// Client is a set of options to apply to requests
type Client []requests.Option

// NewClient returns a new Client
func NewClient(opt ...requests.Option) Client {
	return opt
}

/*
CreateForCommitComment performs requests for "reactions/create-for-commit-comment"

Create reaction for a commit comment.

  POST /repos/{owner}/{repo}/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
func CreateForCommitComment(ctx context.Context, req *CreateForCommitCommentReq, opt ...requests.Option) (*CreateForCommitCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForCommitCommentReq)
	}
	resp := &CreateForCommitCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForCommitCommentResponse(r, opts.PreserveResponseBody())
}

// NewCreateForCommitCommentResponse builds a new *CreateForCommitCommentResponse from an *http.Response
func NewCreateForCommitCommentResponse(resp *http.Response, preserveBody bool) (*CreateForCommitCommentResponse, error) {
	var result CreateForCommitCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200, 201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200, 201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForCommitComment performs requests for "reactions/create-for-commit-comment"

Create reaction for a commit comment.

  POST /repos/{owner}/{repo}/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
func (c Client) CreateForCommitComment(ctx context.Context, req *CreateForCommitCommentReq, opt ...requests.Option) (*CreateForCommitCommentResponse, error) {
	return CreateForCommitComment(ctx, req, append(c, opt...)...)
}

/*
CreateForCommitCommentReq is request data for Client.CreateForCommitComment

https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
type CreateForCommitCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId   int64
	RequestBody CreateForCommitCommentReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForCommitCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForCommitCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-commit-comment",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/repos/%v/%v/comments/%v/reactions", r.Owner, r.Repo, r.CommentId),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForCommitCommentReq) Rel(link string, resp *CreateForCommitCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForCommitCommentReqBody is a request body for reactions/create-for-commit-comment

https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
type CreateForCommitCommentReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the commit comment.
	Content *string `json:"content"`
}

/*
CreateForCommitCommentResponse is a response for CreateForCommitComment

https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment
*/
type CreateForCommitCommentResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForCommitCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForIssue performs requests for "reactions/create-for-issue"

Create reaction for an issue.

  POST /repos/{owner}/{repo}/issues/{issue_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
func CreateForIssue(ctx context.Context, req *CreateForIssueReq, opt ...requests.Option) (*CreateForIssueResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForIssueReq)
	}
	resp := &CreateForIssueResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForIssueResponse(r, opts.PreserveResponseBody())
}

// NewCreateForIssueResponse builds a new *CreateForIssueResponse from an *http.Response
func NewCreateForIssueResponse(resp *http.Response, preserveBody bool) (*CreateForIssueResponse, error) {
	var result CreateForIssueResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForIssue performs requests for "reactions/create-for-issue"

Create reaction for an issue.

  POST /repos/{owner}/{repo}/issues/{issue_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
func (c Client) CreateForIssue(ctx context.Context, req *CreateForIssueReq, opt ...requests.Option) (*CreateForIssueResponse, error) {
	return CreateForIssue(ctx, req, append(c, opt...)...)
}

/*
CreateForIssueReq is request data for Client.CreateForIssue

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
type CreateForIssueReq struct {
	_url  string
	Owner string
	Repo  string

	// issue_number parameter
	IssueNumber int64
	RequestBody CreateForIssueReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForIssueReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForIssueReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-issue",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/repos/%v/%v/issues/%v/reactions", r.Owner, r.Repo, r.IssueNumber),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForIssueReq) Rel(link string, resp *CreateForIssueResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForIssueReqBody is a request body for reactions/create-for-issue

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
type CreateForIssueReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue.
	Content *string `json:"content"`
}

/*
CreateForIssueResponse is a response for CreateForIssue

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue
*/
type CreateForIssueResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForIssueResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForIssueComment performs requests for "reactions/create-for-issue-comment"

Create reaction for an issue comment.

  POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
func CreateForIssueComment(ctx context.Context, req *CreateForIssueCommentReq, opt ...requests.Option) (*CreateForIssueCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForIssueCommentReq)
	}
	resp := &CreateForIssueCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForIssueCommentResponse(r, opts.PreserveResponseBody())
}

// NewCreateForIssueCommentResponse builds a new *CreateForIssueCommentResponse from an *http.Response
func NewCreateForIssueCommentResponse(resp *http.Response, preserveBody bool) (*CreateForIssueCommentResponse, error) {
	var result CreateForIssueCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200, 201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200, 201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForIssueComment performs requests for "reactions/create-for-issue-comment"

Create reaction for an issue comment.

  POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
func (c Client) CreateForIssueComment(ctx context.Context, req *CreateForIssueCommentReq, opt ...requests.Option) (*CreateForIssueCommentResponse, error) {
	return CreateForIssueComment(ctx, req, append(c, opt...)...)
}

/*
CreateForIssueCommentReq is request data for Client.CreateForIssueComment

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
type CreateForIssueCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId   int64
	RequestBody CreateForIssueCommentReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForIssueCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-issue-comment",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/repos/%v/%v/issues/comments/%v/reactions", r.Owner, r.Repo, r.CommentId),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForIssueCommentReq) Rel(link string, resp *CreateForIssueCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForIssueCommentReqBody is a request body for reactions/create-for-issue-comment

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
type CreateForIssueCommentReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the issue comment.
	Content *string `json:"content"`
}

/*
CreateForIssueCommentResponse is a response for CreateForIssueComment

https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment
*/
type CreateForIssueCommentResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForIssueCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForPullRequestReviewComment performs requests for "reactions/create-for-pull-request-review-comment"

Create reaction for a pull request review comment.

  POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
func CreateForPullRequestReviewComment(ctx context.Context, req *CreateForPullRequestReviewCommentReq, opt ...requests.Option) (*CreateForPullRequestReviewCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForPullRequestReviewCommentReq)
	}
	resp := &CreateForPullRequestReviewCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForPullRequestReviewCommentResponse(r, opts.PreserveResponseBody())
}

// NewCreateForPullRequestReviewCommentResponse builds a new *CreateForPullRequestReviewCommentResponse from an *http.Response
func NewCreateForPullRequestReviewCommentResponse(resp *http.Response, preserveBody bool) (*CreateForPullRequestReviewCommentResponse, error) {
	var result CreateForPullRequestReviewCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200, 201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200, 201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForPullRequestReviewComment performs requests for "reactions/create-for-pull-request-review-comment"

Create reaction for a pull request review comment.

  POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
func (c Client) CreateForPullRequestReviewComment(ctx context.Context, req *CreateForPullRequestReviewCommentReq, opt ...requests.Option) (*CreateForPullRequestReviewCommentResponse, error) {
	return CreateForPullRequestReviewComment(ctx, req, append(c, opt...)...)
}

/*
CreateForPullRequestReviewCommentReq is request data for Client.CreateForPullRequestReviewComment

https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
type CreateForPullRequestReviewCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId   int64
	RequestBody CreateForPullRequestReviewCommentReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForPullRequestReviewCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForPullRequestReviewCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-pull-request-review-comment",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/repos/%v/%v/pulls/comments/%v/reactions", r.Owner, r.Repo, r.CommentId),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForPullRequestReviewCommentReq) Rel(link string, resp *CreateForPullRequestReviewCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForPullRequestReviewCommentReqBody is a request body for reactions/create-for-pull-request-review-comment

https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
type CreateForPullRequestReviewCommentReqBody struct {

	/*
	The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)
	to add to the pull request review comment.
	*/
	Content *string `json:"content"`
}

/*
CreateForPullRequestReviewCommentResponse is a response for CreateForPullRequestReviewComment

https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment
*/
type CreateForPullRequestReviewCommentResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForPullRequestReviewCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForTeamDiscussionCommentInOrg performs requests for "reactions/create-for-team-discussion-comment-in-org"

Create reaction for a team discussion comment.

  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
func CreateForTeamDiscussionCommentInOrg(ctx context.Context, req *CreateForTeamDiscussionCommentInOrgReq, opt ...requests.Option) (*CreateForTeamDiscussionCommentInOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForTeamDiscussionCommentInOrgReq)
	}
	resp := &CreateForTeamDiscussionCommentInOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForTeamDiscussionCommentInOrgResponse(r, opts.PreserveResponseBody())
}

// NewCreateForTeamDiscussionCommentInOrgResponse builds a new *CreateForTeamDiscussionCommentInOrgResponse from an *http.Response
func NewCreateForTeamDiscussionCommentInOrgResponse(resp *http.Response, preserveBody bool) (*CreateForTeamDiscussionCommentInOrgResponse, error) {
	var result CreateForTeamDiscussionCommentInOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForTeamDiscussionCommentInOrg performs requests for "reactions/create-for-team-discussion-comment-in-org"

Create reaction for a team discussion comment.

  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
func (c Client) CreateForTeamDiscussionCommentInOrg(ctx context.Context, req *CreateForTeamDiscussionCommentInOrgReq, opt ...requests.Option) (*CreateForTeamDiscussionCommentInOrgResponse, error) {
	return CreateForTeamDiscussionCommentInOrg(ctx, req, append(c, opt...)...)
}

/*
CreateForTeamDiscussionCommentInOrgReq is request data for Client.CreateForTeamDiscussionCommentInOrg

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
type CreateForTeamDiscussionCommentInOrgReq struct {
	_url string
	Org  string

	// team_slug parameter
	TeamSlug         string
	DiscussionNumber int64
	CommentNumber    int64
	RequestBody      CreateForTeamDiscussionCommentInOrgReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForTeamDiscussionCommentInOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForTeamDiscussionCommentInOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-team-discussion-comment-in-org",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForTeamDiscussionCommentInOrgReq) Rel(link string, resp *CreateForTeamDiscussionCommentInOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForTeamDiscussionCommentInOrgReqBody is a request body for reactions/create-for-team-discussion-comment-in-org

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
type CreateForTeamDiscussionCommentInOrgReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.
	Content *string `json:"content"`
}

/*
CreateForTeamDiscussionCommentInOrgResponse is a response for CreateForTeamDiscussionCommentInOrg

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment
*/
type CreateForTeamDiscussionCommentInOrgResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForTeamDiscussionCommentInOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForTeamDiscussionCommentLegacy performs requests for "reactions/create-for-team-discussion-comment-legacy"

Create reaction for a team discussion comment (Legacy).

  POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
func CreateForTeamDiscussionCommentLegacy(ctx context.Context, req *CreateForTeamDiscussionCommentLegacyReq, opt ...requests.Option) (*CreateForTeamDiscussionCommentLegacyResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForTeamDiscussionCommentLegacyReq)
	}
	resp := &CreateForTeamDiscussionCommentLegacyResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForTeamDiscussionCommentLegacyResponse(r, opts.PreserveResponseBody())
}

// NewCreateForTeamDiscussionCommentLegacyResponse builds a new *CreateForTeamDiscussionCommentLegacyResponse from an *http.Response
func NewCreateForTeamDiscussionCommentLegacyResponse(resp *http.Response, preserveBody bool) (*CreateForTeamDiscussionCommentLegacyResponse, error) {
	var result CreateForTeamDiscussionCommentLegacyResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForTeamDiscussionCommentLegacy performs requests for "reactions/create-for-team-discussion-comment-legacy"

Create reaction for a team discussion comment (Legacy).

  POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
func (c Client) CreateForTeamDiscussionCommentLegacy(ctx context.Context, req *CreateForTeamDiscussionCommentLegacyReq, opt ...requests.Option) (*CreateForTeamDiscussionCommentLegacyResponse, error) {
	return CreateForTeamDiscussionCommentLegacy(ctx, req, append(c, opt...)...)
}

/*
CreateForTeamDiscussionCommentLegacyReq is request data for Client.CreateForTeamDiscussionCommentLegacy

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
type CreateForTeamDiscussionCommentLegacyReq struct {
	_url             string
	TeamId           int64
	DiscussionNumber int64
	CommentNumber    int64
	RequestBody      CreateForTeamDiscussionCommentLegacyReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForTeamDiscussionCommentLegacyReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForTeamDiscussionCommentLegacyReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-team-discussion-comment-legacy",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/teams/%v/discussions/%v/comments/%v/reactions", r.TeamId, r.DiscussionNumber, r.CommentNumber),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForTeamDiscussionCommentLegacyReq) Rel(link string, resp *CreateForTeamDiscussionCommentLegacyResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForTeamDiscussionCommentLegacyReqBody is a request body for reactions/create-for-team-discussion-comment-legacy

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
type CreateForTeamDiscussionCommentLegacyReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion comment.
	Content *string `json:"content"`
}

/*
CreateForTeamDiscussionCommentLegacyResponse is a response for CreateForTeamDiscussionCommentLegacy

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy
*/
type CreateForTeamDiscussionCommentLegacyResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForTeamDiscussionCommentLegacyResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForTeamDiscussionInOrg performs requests for "reactions/create-for-team-discussion-in-org"

Create reaction for a team discussion.

  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
func CreateForTeamDiscussionInOrg(ctx context.Context, req *CreateForTeamDiscussionInOrgReq, opt ...requests.Option) (*CreateForTeamDiscussionInOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForTeamDiscussionInOrgReq)
	}
	resp := &CreateForTeamDiscussionInOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForTeamDiscussionInOrgResponse(r, opts.PreserveResponseBody())
}

// NewCreateForTeamDiscussionInOrgResponse builds a new *CreateForTeamDiscussionInOrgResponse from an *http.Response
func NewCreateForTeamDiscussionInOrgResponse(resp *http.Response, preserveBody bool) (*CreateForTeamDiscussionInOrgResponse, error) {
	var result CreateForTeamDiscussionInOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForTeamDiscussionInOrg performs requests for "reactions/create-for-team-discussion-in-org"

Create reaction for a team discussion.

  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
func (c Client) CreateForTeamDiscussionInOrg(ctx context.Context, req *CreateForTeamDiscussionInOrgReq, opt ...requests.Option) (*CreateForTeamDiscussionInOrgResponse, error) {
	return CreateForTeamDiscussionInOrg(ctx, req, append(c, opt...)...)
}

/*
CreateForTeamDiscussionInOrgReq is request data for Client.CreateForTeamDiscussionInOrg

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
type CreateForTeamDiscussionInOrgReq struct {
	_url string
	Org  string

	// team_slug parameter
	TeamSlug         string
	DiscussionNumber int64
	RequestBody      CreateForTeamDiscussionInOrgReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForTeamDiscussionInOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForTeamDiscussionInOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-team-discussion-in-org",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForTeamDiscussionInOrgReq) Rel(link string, resp *CreateForTeamDiscussionInOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForTeamDiscussionInOrgReqBody is a request body for reactions/create-for-team-discussion-in-org

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
type CreateForTeamDiscussionInOrgReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.
	Content *string `json:"content"`
}

/*
CreateForTeamDiscussionInOrgResponse is a response for CreateForTeamDiscussionInOrg

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion
*/
type CreateForTeamDiscussionInOrgResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForTeamDiscussionInOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
CreateForTeamDiscussionLegacy performs requests for "reactions/create-for-team-discussion-legacy"

Create reaction for a team discussion (Legacy).

  POST /teams/{team_id}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
func CreateForTeamDiscussionLegacy(ctx context.Context, req *CreateForTeamDiscussionLegacyReq, opt ...requests.Option) (*CreateForTeamDiscussionLegacyResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CreateForTeamDiscussionLegacyReq)
	}
	resp := &CreateForTeamDiscussionLegacyResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewCreateForTeamDiscussionLegacyResponse(r, opts.PreserveResponseBody())
}

// NewCreateForTeamDiscussionLegacyResponse builds a new *CreateForTeamDiscussionLegacyResponse from an *http.Response
func NewCreateForTeamDiscussionLegacyResponse(resp *http.Response, preserveBody bool) (*CreateForTeamDiscussionLegacyResponse, error) {
	var result CreateForTeamDiscussionLegacyResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{201})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{201}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
CreateForTeamDiscussionLegacy performs requests for "reactions/create-for-team-discussion-legacy"

Create reaction for a team discussion (Legacy).

  POST /teams/{team_id}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
func (c Client) CreateForTeamDiscussionLegacy(ctx context.Context, req *CreateForTeamDiscussionLegacyReq, opt ...requests.Option) (*CreateForTeamDiscussionLegacyResponse, error) {
	return CreateForTeamDiscussionLegacy(ctx, req, append(c, opt...)...)
}

/*
CreateForTeamDiscussionLegacyReq is request data for Client.CreateForTeamDiscussionLegacy

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
type CreateForTeamDiscussionLegacyReq struct {
	_url             string
	TeamId           int64
	DiscussionNumber int64
	RequestBody      CreateForTeamDiscussionLegacyReqBody

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CreateForTeamDiscussionLegacyReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CreateForTeamDiscussionLegacyReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               r.RequestBody,
		EndpointAttributes: []internal.EndpointAttribute{internal.AttrJSONRequestBody},
		ExplicitURL:        r._url,
		HeaderVals: map[string]*string{
			"accept":       internal.String("application/json"),
			"content-type": internal.String("application/json"),
		},
		Method:           "POST",
		OperationID:      "reactions/create-for-team-discussion-legacy",
		Previews:         map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews: []string{"squirrel-girl"},
		URLPath:          fmt.Sprintf("/teams/%v/discussions/%v/reactions", r.TeamId, r.DiscussionNumber),
		URLQuery:         query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CreateForTeamDiscussionLegacyReq) Rel(link string, resp *CreateForTeamDiscussionLegacyResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CreateForTeamDiscussionLegacyReqBody is a request body for reactions/create-for-team-discussion-legacy

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
type CreateForTeamDiscussionLegacyReqBody struct {

	// The [reaction type](https://developer.github.com/v3/reactions/#reaction-types) to add to the team discussion.
	Content *string `json:"content"`
}

/*
CreateForTeamDiscussionLegacyResponse is a response for CreateForTeamDiscussionLegacy

https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy
*/
type CreateForTeamDiscussionLegacyResponse struct {
	httpResponse *http.Response
	Data         components.Reaction
}

func (r *CreateForTeamDiscussionLegacyResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteForCommitComment performs requests for "reactions/delete-for-commit-comment"

Delete a commit comment reaction.

  DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction
*/
func DeleteForCommitComment(ctx context.Context, req *DeleteForCommitCommentReq, opt ...requests.Option) (*DeleteForCommitCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteForCommitCommentReq)
	}
	resp := &DeleteForCommitCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteForCommitCommentResponse(r, opts.PreserveResponseBody())
}

// NewDeleteForCommitCommentResponse builds a new *DeleteForCommitCommentResponse from an *http.Response
func NewDeleteForCommitCommentResponse(resp *http.Response, preserveBody bool) (*DeleteForCommitCommentResponse, error) {
	var result DeleteForCommitCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteForCommitComment performs requests for "reactions/delete-for-commit-comment"

Delete a commit comment reaction.

  DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction
*/
func (c Client) DeleteForCommitComment(ctx context.Context, req *DeleteForCommitCommentReq, opt ...requests.Option) (*DeleteForCommitCommentResponse, error) {
	return DeleteForCommitComment(ctx, req, append(c, opt...)...)
}

/*
DeleteForCommitCommentReq is request data for Client.DeleteForCommitComment

https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction
*/
type DeleteForCommitCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId  int64
	ReactionId int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteForCommitCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteForCommitCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-for-commit-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/comments/%v/reactions/%v", r.Owner, r.Repo, r.CommentId, r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteForCommitCommentReq) Rel(link string, resp *DeleteForCommitCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteForCommitCommentResponse is a response for DeleteForCommitComment

https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction
*/
type DeleteForCommitCommentResponse struct {
	httpResponse *http.Response
}

func (r *DeleteForCommitCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteForIssue performs requests for "reactions/delete-for-issue"

Delete an issue reaction.

  DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-an-issue-reaction
*/
func DeleteForIssue(ctx context.Context, req *DeleteForIssueReq, opt ...requests.Option) (*DeleteForIssueResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteForIssueReq)
	}
	resp := &DeleteForIssueResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteForIssueResponse(r, opts.PreserveResponseBody())
}

// NewDeleteForIssueResponse builds a new *DeleteForIssueResponse from an *http.Response
func NewDeleteForIssueResponse(resp *http.Response, preserveBody bool) (*DeleteForIssueResponse, error) {
	var result DeleteForIssueResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteForIssue performs requests for "reactions/delete-for-issue"

Delete an issue reaction.

  DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-an-issue-reaction
*/
func (c Client) DeleteForIssue(ctx context.Context, req *DeleteForIssueReq, opt ...requests.Option) (*DeleteForIssueResponse, error) {
	return DeleteForIssue(ctx, req, append(c, opt...)...)
}

/*
DeleteForIssueReq is request data for Client.DeleteForIssue

https://developer.github.com/v3/reactions/#delete-an-issue-reaction
*/
type DeleteForIssueReq struct {
	_url  string
	Owner string
	Repo  string

	// issue_number parameter
	IssueNumber int64
	ReactionId  int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteForIssueReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteForIssueReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-for-issue",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/issues/%v/reactions/%v", r.Owner, r.Repo, r.IssueNumber, r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteForIssueReq) Rel(link string, resp *DeleteForIssueResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteForIssueResponse is a response for DeleteForIssue

https://developer.github.com/v3/reactions/#delete-an-issue-reaction
*/
type DeleteForIssueResponse struct {
	httpResponse *http.Response
}

func (r *DeleteForIssueResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteForIssueComment performs requests for "reactions/delete-for-issue-comment"

Delete an issue comment reaction.

  DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction
*/
func DeleteForIssueComment(ctx context.Context, req *DeleteForIssueCommentReq, opt ...requests.Option) (*DeleteForIssueCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteForIssueCommentReq)
	}
	resp := &DeleteForIssueCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteForIssueCommentResponse(r, opts.PreserveResponseBody())
}

// NewDeleteForIssueCommentResponse builds a new *DeleteForIssueCommentResponse from an *http.Response
func NewDeleteForIssueCommentResponse(resp *http.Response, preserveBody bool) (*DeleteForIssueCommentResponse, error) {
	var result DeleteForIssueCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteForIssueComment performs requests for "reactions/delete-for-issue-comment"

Delete an issue comment reaction.

  DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction
*/
func (c Client) DeleteForIssueComment(ctx context.Context, req *DeleteForIssueCommentReq, opt ...requests.Option) (*DeleteForIssueCommentResponse, error) {
	return DeleteForIssueComment(ctx, req, append(c, opt...)...)
}

/*
DeleteForIssueCommentReq is request data for Client.DeleteForIssueComment

https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction
*/
type DeleteForIssueCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId  int64
	ReactionId int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteForIssueCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-for-issue-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/issues/comments/%v/reactions/%v", r.Owner, r.Repo, r.CommentId, r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteForIssueCommentReq) Rel(link string, resp *DeleteForIssueCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteForIssueCommentResponse is a response for DeleteForIssueComment

https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction
*/
type DeleteForIssueCommentResponse struct {
	httpResponse *http.Response
}

func (r *DeleteForIssueCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteForPullRequestComment performs requests for "reactions/delete-for-pull-request-comment"

Delete a pull request comment reaction.

  DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction
*/
func DeleteForPullRequestComment(ctx context.Context, req *DeleteForPullRequestCommentReq, opt ...requests.Option) (*DeleteForPullRequestCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteForPullRequestCommentReq)
	}
	resp := &DeleteForPullRequestCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteForPullRequestCommentResponse(r, opts.PreserveResponseBody())
}

// NewDeleteForPullRequestCommentResponse builds a new *DeleteForPullRequestCommentResponse from an *http.Response
func NewDeleteForPullRequestCommentResponse(resp *http.Response, preserveBody bool) (*DeleteForPullRequestCommentResponse, error) {
	var result DeleteForPullRequestCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteForPullRequestComment performs requests for "reactions/delete-for-pull-request-comment"

Delete a pull request comment reaction.

  DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction
*/
func (c Client) DeleteForPullRequestComment(ctx context.Context, req *DeleteForPullRequestCommentReq, opt ...requests.Option) (*DeleteForPullRequestCommentResponse, error) {
	return DeleteForPullRequestComment(ctx, req, append(c, opt...)...)
}

/*
DeleteForPullRequestCommentReq is request data for Client.DeleteForPullRequestComment

https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction
*/
type DeleteForPullRequestCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId  int64
	ReactionId int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteForPullRequestCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteForPullRequestCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-for-pull-request-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/pulls/comments/%v/reactions/%v", r.Owner, r.Repo, r.CommentId, r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteForPullRequestCommentReq) Rel(link string, resp *DeleteForPullRequestCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteForPullRequestCommentResponse is a response for DeleteForPullRequestComment

https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction
*/
type DeleteForPullRequestCommentResponse struct {
	httpResponse *http.Response
}

func (r *DeleteForPullRequestCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteForTeamDiscussion performs requests for "reactions/delete-for-team-discussion"

Delete team discussion reaction.

  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-team-discussion-reaction
*/
func DeleteForTeamDiscussion(ctx context.Context, req *DeleteForTeamDiscussionReq, opt ...requests.Option) (*DeleteForTeamDiscussionResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteForTeamDiscussionReq)
	}
	resp := &DeleteForTeamDiscussionResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteForTeamDiscussionResponse(r, opts.PreserveResponseBody())
}

// NewDeleteForTeamDiscussionResponse builds a new *DeleteForTeamDiscussionResponse from an *http.Response
func NewDeleteForTeamDiscussionResponse(resp *http.Response, preserveBody bool) (*DeleteForTeamDiscussionResponse, error) {
	var result DeleteForTeamDiscussionResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteForTeamDiscussion performs requests for "reactions/delete-for-team-discussion"

Delete team discussion reaction.

  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-team-discussion-reaction
*/
func (c Client) DeleteForTeamDiscussion(ctx context.Context, req *DeleteForTeamDiscussionReq, opt ...requests.Option) (*DeleteForTeamDiscussionResponse, error) {
	return DeleteForTeamDiscussion(ctx, req, append(c, opt...)...)
}

/*
DeleteForTeamDiscussionReq is request data for Client.DeleteForTeamDiscussion

https://developer.github.com/v3/reactions/#delete-team-discussion-reaction
*/
type DeleteForTeamDiscussionReq struct {
	_url string
	Org  string

	// team_slug parameter
	TeamSlug         string
	DiscussionNumber int64
	ReactionId       int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteForTeamDiscussionReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteForTeamDiscussionReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-for-team-discussion",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/reactions/%v", r.Org, r.TeamSlug, r.DiscussionNumber, r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteForTeamDiscussionReq) Rel(link string, resp *DeleteForTeamDiscussionResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteForTeamDiscussionResponse is a response for DeleteForTeamDiscussion

https://developer.github.com/v3/reactions/#delete-team-discussion-reaction
*/
type DeleteForTeamDiscussionResponse struct {
	httpResponse *http.Response
}

func (r *DeleteForTeamDiscussionResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteForTeamDiscussionComment performs requests for "reactions/delete-for-team-discussion-comment"

Delete team discussion comment reaction.

  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction
*/
func DeleteForTeamDiscussionComment(ctx context.Context, req *DeleteForTeamDiscussionCommentReq, opt ...requests.Option) (*DeleteForTeamDiscussionCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteForTeamDiscussionCommentReq)
	}
	resp := &DeleteForTeamDiscussionCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteForTeamDiscussionCommentResponse(r, opts.PreserveResponseBody())
}

// NewDeleteForTeamDiscussionCommentResponse builds a new *DeleteForTeamDiscussionCommentResponse from an *http.Response
func NewDeleteForTeamDiscussionCommentResponse(resp *http.Response, preserveBody bool) (*DeleteForTeamDiscussionCommentResponse, error) {
	var result DeleteForTeamDiscussionCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteForTeamDiscussionComment performs requests for "reactions/delete-for-team-discussion-comment"

Delete team discussion comment reaction.

  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction
*/
func (c Client) DeleteForTeamDiscussionComment(ctx context.Context, req *DeleteForTeamDiscussionCommentReq, opt ...requests.Option) (*DeleteForTeamDiscussionCommentResponse, error) {
	return DeleteForTeamDiscussionComment(ctx, req, append(c, opt...)...)
}

/*
DeleteForTeamDiscussionCommentReq is request data for Client.DeleteForTeamDiscussionComment

https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction
*/
type DeleteForTeamDiscussionCommentReq struct {
	_url string
	Org  string

	// team_slug parameter
	TeamSlug         string
	DiscussionNumber int64
	CommentNumber    int64
	ReactionId       int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteForTeamDiscussionCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteForTeamDiscussionCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-for-team-discussion-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions/%v", r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber, r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteForTeamDiscussionCommentReq) Rel(link string, resp *DeleteForTeamDiscussionCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteForTeamDiscussionCommentResponse is a response for DeleteForTeamDiscussionComment

https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction
*/
type DeleteForTeamDiscussionCommentResponse struct {
	httpResponse *http.Response
}

func (r *DeleteForTeamDiscussionCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
DeleteLegacy performs requests for "reactions/delete-legacy"

Delete a reaction (Legacy).

  DELETE /reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-reaction-legacy
*/
func DeleteLegacy(ctx context.Context, req *DeleteLegacyReq, opt ...requests.Option) (*DeleteLegacyResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(DeleteLegacyReq)
	}
	resp := &DeleteLegacyResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewDeleteLegacyResponse(r, opts.PreserveResponseBody())
}

// NewDeleteLegacyResponse builds a new *DeleteLegacyResponse from an *http.Response
func NewDeleteLegacyResponse(resp *http.Response, preserveBody bool) (*DeleteLegacyResponse, error) {
	var result DeleteLegacyResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{204, 304})
	if err != nil {
		return &result, err
	}
	return &result, nil
}

/*
DeleteLegacy performs requests for "reactions/delete-legacy"

Delete a reaction (Legacy).

  DELETE /reactions/{reaction_id}

https://developer.github.com/v3/reactions/#delete-a-reaction-legacy
*/
func (c Client) DeleteLegacy(ctx context.Context, req *DeleteLegacyReq, opt ...requests.Option) (*DeleteLegacyResponse, error) {
	return DeleteLegacy(ctx, req, append(c, opt...)...)
}

/*
DeleteLegacyReq is request data for Client.DeleteLegacy

https://developer.github.com/v3/reactions/#delete-a-reaction-legacy
*/
type DeleteLegacyReq struct {
	_url       string
	ReactionId int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *DeleteLegacyReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *DeleteLegacyReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{},
		Method:             "DELETE",
		OperationID:        "reactions/delete-legacy",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/reactions/%v", r.ReactionId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *DeleteLegacyReq) Rel(link string, resp *DeleteLegacyResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
DeleteLegacyResponse is a response for DeleteLegacy

https://developer.github.com/v3/reactions/#delete-a-reaction-legacy
*/
type DeleteLegacyResponse struct {
	httpResponse *http.Response
}

func (r *DeleteLegacyResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForCommitComment performs requests for "reactions/list-for-commit-comment"

List reactions for a commit comment.

  GET /repos/{owner}/{repo}/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
*/
func ListForCommitComment(ctx context.Context, req *ListForCommitCommentReq, opt ...requests.Option) (*ListForCommitCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForCommitCommentReq)
	}
	resp := &ListForCommitCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForCommitCommentResponse(r, opts.PreserveResponseBody())
}

// NewListForCommitCommentResponse builds a new *ListForCommitCommentResponse from an *http.Response
func NewListForCommitCommentResponse(resp *http.Response, preserveBody bool) (*ListForCommitCommentResponse, error) {
	var result ListForCommitCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForCommitComment performs requests for "reactions/list-for-commit-comment"

List reactions for a commit comment.

  GET /repos/{owner}/{repo}/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
*/
func (c Client) ListForCommitComment(ctx context.Context, req *ListForCommitCommentReq, opt ...requests.Option) (*ListForCommitCommentResponse, error) {
	return ListForCommitComment(ctx, req, append(c, opt...)...)
}

/*
ListForCommitCommentReq is request data for Client.ListForCommitComment

https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
*/
type ListForCommitCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a commit comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForCommitCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForCommitCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-commit-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/comments/%v/reactions", r.Owner, r.Repo, r.CommentId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForCommitCommentReq) Rel(link string, resp *ListForCommitCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForCommitCommentResponse is a response for ListForCommitComment

https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment
*/
type ListForCommitCommentResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForCommitCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForIssue performs requests for "reactions/list-for-issue"

List reactions for an issue.

  GET /repos/{owner}/{repo}/issues/{issue_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
*/
func ListForIssue(ctx context.Context, req *ListForIssueReq, opt ...requests.Option) (*ListForIssueResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForIssueReq)
	}
	resp := &ListForIssueResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForIssueResponse(r, opts.PreserveResponseBody())
}

// NewListForIssueResponse builds a new *ListForIssueResponse from an *http.Response
func NewListForIssueResponse(resp *http.Response, preserveBody bool) (*ListForIssueResponse, error) {
	var result ListForIssueResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForIssue performs requests for "reactions/list-for-issue"

List reactions for an issue.

  GET /repos/{owner}/{repo}/issues/{issue_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
*/
func (c Client) ListForIssue(ctx context.Context, req *ListForIssueReq, opt ...requests.Option) (*ListForIssueResponse, error) {
	return ListForIssue(ctx, req, append(c, opt...)...)
}

/*
ListForIssueReq is request data for Client.ListForIssue

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
*/
type ListForIssueReq struct {
	_url  string
	Owner string
	Repo  string

	// issue_number parameter
	IssueNumber int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to an issue.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForIssueReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForIssueReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-issue",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/issues/%v/reactions", r.Owner, r.Repo, r.IssueNumber),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForIssueReq) Rel(link string, resp *ListForIssueResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForIssueResponse is a response for ListForIssue

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue
*/
type ListForIssueResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForIssueResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForIssueComment performs requests for "reactions/list-for-issue-comment"

List reactions for an issue comment.

  GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
*/
func ListForIssueComment(ctx context.Context, req *ListForIssueCommentReq, opt ...requests.Option) (*ListForIssueCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForIssueCommentReq)
	}
	resp := &ListForIssueCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForIssueCommentResponse(r, opts.PreserveResponseBody())
}

// NewListForIssueCommentResponse builds a new *ListForIssueCommentResponse from an *http.Response
func NewListForIssueCommentResponse(resp *http.Response, preserveBody bool) (*ListForIssueCommentResponse, error) {
	var result ListForIssueCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForIssueComment performs requests for "reactions/list-for-issue-comment"

List reactions for an issue comment.

  GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
*/
func (c Client) ListForIssueComment(ctx context.Context, req *ListForIssueCommentReq, opt ...requests.Option) (*ListForIssueCommentResponse, error) {
	return ListForIssueComment(ctx, req, append(c, opt...)...)
}

/*
ListForIssueCommentReq is request data for Client.ListForIssueComment

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
*/
type ListForIssueCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to an issue comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForIssueCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-issue-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/issues/comments/%v/reactions", r.Owner, r.Repo, r.CommentId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForIssueCommentReq) Rel(link string, resp *ListForIssueCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForIssueCommentResponse is a response for ListForIssueComment

https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment
*/
type ListForIssueCommentResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForIssueCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForPullRequestReviewComment performs requests for "reactions/list-for-pull-request-review-comment"

List reactions for a pull request review comment.

  GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
*/
func ListForPullRequestReviewComment(ctx context.Context, req *ListForPullRequestReviewCommentReq, opt ...requests.Option) (*ListForPullRequestReviewCommentResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForPullRequestReviewCommentReq)
	}
	resp := &ListForPullRequestReviewCommentResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForPullRequestReviewCommentResponse(r, opts.PreserveResponseBody())
}

// NewListForPullRequestReviewCommentResponse builds a new *ListForPullRequestReviewCommentResponse from an *http.Response
func NewListForPullRequestReviewCommentResponse(resp *http.Response, preserveBody bool) (*ListForPullRequestReviewCommentResponse, error) {
	var result ListForPullRequestReviewCommentResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForPullRequestReviewComment performs requests for "reactions/list-for-pull-request-review-comment"

List reactions for a pull request review comment.

  GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
*/
func (c Client) ListForPullRequestReviewComment(ctx context.Context, req *ListForPullRequestReviewCommentReq, opt ...requests.Option) (*ListForPullRequestReviewCommentResponse, error) {
	return ListForPullRequestReviewComment(ctx, req, append(c, opt...)...)
}

/*
ListForPullRequestReviewCommentReq is request data for Client.ListForPullRequestReviewComment

https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
*/
type ListForPullRequestReviewCommentReq struct {
	_url  string
	Owner string
	Repo  string

	// comment_id parameter
	CommentId int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a pull request review comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForPullRequestReviewCommentReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForPullRequestReviewCommentReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-pull-request-review-comment",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/pulls/comments/%v/reactions", r.Owner, r.Repo, r.CommentId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForPullRequestReviewCommentReq) Rel(link string, resp *ListForPullRequestReviewCommentResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForPullRequestReviewCommentResponse is a response for ListForPullRequestReviewComment

https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment
*/
type ListForPullRequestReviewCommentResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForPullRequestReviewCommentResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForTeamDiscussionCommentInOrg performs requests for "reactions/list-for-team-discussion-comment-in-org"

List reactions for a team discussion comment.

  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
*/
func ListForTeamDiscussionCommentInOrg(ctx context.Context, req *ListForTeamDiscussionCommentInOrgReq, opt ...requests.Option) (*ListForTeamDiscussionCommentInOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForTeamDiscussionCommentInOrgReq)
	}
	resp := &ListForTeamDiscussionCommentInOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForTeamDiscussionCommentInOrgResponse(r, opts.PreserveResponseBody())
}

// NewListForTeamDiscussionCommentInOrgResponse builds a new *ListForTeamDiscussionCommentInOrgResponse from an *http.Response
func NewListForTeamDiscussionCommentInOrgResponse(resp *http.Response, preserveBody bool) (*ListForTeamDiscussionCommentInOrgResponse, error) {
	var result ListForTeamDiscussionCommentInOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForTeamDiscussionCommentInOrg performs requests for "reactions/list-for-team-discussion-comment-in-org"

List reactions for a team discussion comment.

  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
*/
func (c Client) ListForTeamDiscussionCommentInOrg(ctx context.Context, req *ListForTeamDiscussionCommentInOrgReq, opt ...requests.Option) (*ListForTeamDiscussionCommentInOrgResponse, error) {
	return ListForTeamDiscussionCommentInOrg(ctx, req, append(c, opt...)...)
}

/*
ListForTeamDiscussionCommentInOrgReq is request data for Client.ListForTeamDiscussionCommentInOrg

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
*/
type ListForTeamDiscussionCommentInOrgReq struct {
	_url string
	Org  string

	// team_slug parameter
	TeamSlug         string
	DiscussionNumber int64
	CommentNumber    int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForTeamDiscussionCommentInOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForTeamDiscussionCommentInOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-team-discussion-comment-in-org",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForTeamDiscussionCommentInOrgReq) Rel(link string, resp *ListForTeamDiscussionCommentInOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForTeamDiscussionCommentInOrgResponse is a response for ListForTeamDiscussionCommentInOrg

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment
*/
type ListForTeamDiscussionCommentInOrgResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForTeamDiscussionCommentInOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForTeamDiscussionCommentLegacy performs requests for "reactions/list-for-team-discussion-comment-legacy"

List reactions for a team discussion comment (Legacy).

  GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
*/
func ListForTeamDiscussionCommentLegacy(ctx context.Context, req *ListForTeamDiscussionCommentLegacyReq, opt ...requests.Option) (*ListForTeamDiscussionCommentLegacyResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForTeamDiscussionCommentLegacyReq)
	}
	resp := &ListForTeamDiscussionCommentLegacyResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForTeamDiscussionCommentLegacyResponse(r, opts.PreserveResponseBody())
}

// NewListForTeamDiscussionCommentLegacyResponse builds a new *ListForTeamDiscussionCommentLegacyResponse from an *http.Response
func NewListForTeamDiscussionCommentLegacyResponse(resp *http.Response, preserveBody bool) (*ListForTeamDiscussionCommentLegacyResponse, error) {
	var result ListForTeamDiscussionCommentLegacyResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForTeamDiscussionCommentLegacy performs requests for "reactions/list-for-team-discussion-comment-legacy"

List reactions for a team discussion comment (Legacy).

  GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
*/
func (c Client) ListForTeamDiscussionCommentLegacy(ctx context.Context, req *ListForTeamDiscussionCommentLegacyReq, opt ...requests.Option) (*ListForTeamDiscussionCommentLegacyResponse, error) {
	return ListForTeamDiscussionCommentLegacy(ctx, req, append(c, opt...)...)
}

/*
ListForTeamDiscussionCommentLegacyReq is request data for Client.ListForTeamDiscussionCommentLegacy

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
*/
type ListForTeamDiscussionCommentLegacyReq struct {
	_url             string
	TeamId           int64
	DiscussionNumber int64
	CommentNumber    int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion comment.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForTeamDiscussionCommentLegacyReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForTeamDiscussionCommentLegacyReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-team-discussion-comment-legacy",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/teams/%v/discussions/%v/comments/%v/reactions", r.TeamId, r.DiscussionNumber, r.CommentNumber),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForTeamDiscussionCommentLegacyReq) Rel(link string, resp *ListForTeamDiscussionCommentLegacyResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForTeamDiscussionCommentLegacyResponse is a response for ListForTeamDiscussionCommentLegacy

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy
*/
type ListForTeamDiscussionCommentLegacyResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForTeamDiscussionCommentLegacyResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForTeamDiscussionInOrg performs requests for "reactions/list-for-team-discussion-in-org"

List reactions for a team discussion.

  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
*/
func ListForTeamDiscussionInOrg(ctx context.Context, req *ListForTeamDiscussionInOrgReq, opt ...requests.Option) (*ListForTeamDiscussionInOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForTeamDiscussionInOrgReq)
	}
	resp := &ListForTeamDiscussionInOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForTeamDiscussionInOrgResponse(r, opts.PreserveResponseBody())
}

// NewListForTeamDiscussionInOrgResponse builds a new *ListForTeamDiscussionInOrgResponse from an *http.Response
func NewListForTeamDiscussionInOrgResponse(resp *http.Response, preserveBody bool) (*ListForTeamDiscussionInOrgResponse, error) {
	var result ListForTeamDiscussionInOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForTeamDiscussionInOrg performs requests for "reactions/list-for-team-discussion-in-org"

List reactions for a team discussion.

  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
*/
func (c Client) ListForTeamDiscussionInOrg(ctx context.Context, req *ListForTeamDiscussionInOrgReq, opt ...requests.Option) (*ListForTeamDiscussionInOrgResponse, error) {
	return ListForTeamDiscussionInOrg(ctx, req, append(c, opt...)...)
}

/*
ListForTeamDiscussionInOrgReq is request data for Client.ListForTeamDiscussionInOrg

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
*/
type ListForTeamDiscussionInOrgReq struct {
	_url string
	Org  string

	// team_slug parameter
	TeamSlug         string
	DiscussionNumber int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForTeamDiscussionInOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForTeamDiscussionInOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-team-discussion-in-org",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/orgs/%v/teams/%v/discussions/%v/reactions", r.Org, r.TeamSlug, r.DiscussionNumber),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForTeamDiscussionInOrgReq) Rel(link string, resp *ListForTeamDiscussionInOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForTeamDiscussionInOrgResponse is a response for ListForTeamDiscussionInOrg

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion
*/
type ListForTeamDiscussionInOrgResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForTeamDiscussionInOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
ListForTeamDiscussionLegacy performs requests for "reactions/list-for-team-discussion-legacy"

List reactions for a team discussion (Legacy).

  GET /teams/{team_id}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
*/
func ListForTeamDiscussionLegacy(ctx context.Context, req *ListForTeamDiscussionLegacyReq, opt ...requests.Option) (*ListForTeamDiscussionLegacyResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(ListForTeamDiscussionLegacyReq)
	}
	resp := &ListForTeamDiscussionLegacyResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewListForTeamDiscussionLegacyResponse(r, opts.PreserveResponseBody())
}

// NewListForTeamDiscussionLegacyResponse builds a new *ListForTeamDiscussionLegacyResponse from an *http.Response
func NewListForTeamDiscussionLegacyResponse(resp *http.Response, preserveBody bool) (*ListForTeamDiscussionLegacyResponse, error) {
	var result ListForTeamDiscussionLegacyResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
ListForTeamDiscussionLegacy performs requests for "reactions/list-for-team-discussion-legacy"

List reactions for a team discussion (Legacy).

  GET /teams/{team_id}/discussions/{discussion_number}/reactions

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
*/
func (c Client) ListForTeamDiscussionLegacy(ctx context.Context, req *ListForTeamDiscussionLegacyReq, opt ...requests.Option) (*ListForTeamDiscussionLegacyResponse, error) {
	return ListForTeamDiscussionLegacy(ctx, req, append(c, opt...)...)
}

/*
ListForTeamDiscussionLegacyReq is request data for Client.ListForTeamDiscussionLegacy

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
*/
type ListForTeamDiscussionLegacyReq struct {
	_url             string
	TeamId           int64
	DiscussionNumber int64

	/*
	Returns a single [reaction
	type](https://developer.github.com/v3/reactions/#reaction-types). Omit this
	parameter to list all reactions to a team discussion.
	*/
	Content *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	An additional `reactions` object in the issue comment payload is currently
	available for developers to preview. During the preview period, the APIs may
	change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for
	full details.

	To access the API you must set this to true.
	*/
	SquirrelGirlPreview bool
}

// HTTPRequest builds an *http.Request
func (r *ListForTeamDiscussionLegacyReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *ListForTeamDiscussionLegacyReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}
	if r.Content != nil {
		query.Set("content", *r.Content)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"squirrel-girl"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "reactions/list-for-team-discussion-legacy",
		Previews:           map[string]bool{"squirrel-girl": r.SquirrelGirlPreview},
		RequiredPreviews:   []string{"squirrel-girl"},
		URLPath:            fmt.Sprintf("/teams/%v/discussions/%v/reactions", r.TeamId, r.DiscussionNumber),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ListForTeamDiscussionLegacyReq) Rel(link string, resp *ListForTeamDiscussionLegacyResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ListForTeamDiscussionLegacyResponse is a response for ListForTeamDiscussionLegacy

https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy
*/
type ListForTeamDiscussionLegacyResponse struct {
	httpResponse *http.Response
	Data         []components.Reaction
}

func (r *ListForTeamDiscussionLegacyResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}
