// Code generated by octo-go; DO NOT EDIT.

package codesofconduct

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	internal "github.com/willabides/octo-go/internal"
	requests "github.com/willabides/octo-go/requests"
	"net/http"
	"net/url"
)

func strPtr(s string) *string { return &s }

// Client is a set of options to apply to requests
type Client []requests.Option

// NewClient returns a new Client
func NewClient(opt ...requests.Option) Client {
	return opt
}

/*
GetAllCodesOfConduct performs requests for "codes-of-conduct/get-all-codes-of-conduct"

Get all codes of conduct.

  GET /codes_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
func GetAllCodesOfConduct(ctx context.Context, req *GetAllCodesOfConductReq, opt ...requests.Option) (*GetAllCodesOfConductResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetAllCodesOfConductReq)
	}
	resp := &GetAllCodesOfConductResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetAllCodesOfConductResponse(r, opts.PreserveResponseBody())
}

// NewGetAllCodesOfConductResponse builds a new *GetAllCodesOfConductResponse from an *http.Response
func NewGetAllCodesOfConductResponse(resp *http.Response, preserveBody bool) (*GetAllCodesOfConductResponse, error) {
	var result GetAllCodesOfConductResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200, 304})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetAllCodesOfConduct performs requests for "codes-of-conduct/get-all-codes-of-conduct"

Get all codes of conduct.

  GET /codes_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
func (c Client) GetAllCodesOfConduct(ctx context.Context, req *GetAllCodesOfConductReq, opt ...requests.Option) (*GetAllCodesOfConductResponse, error) {
	return GetAllCodesOfConduct(ctx, req, append(c, opt...)...)
}

/*
GetAllCodesOfConductReq is request data for Client.GetAllCodesOfConduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
type GetAllCodesOfConductReq struct {
	_url string

	/*
	The Codes of Conduct API is currently available for developers to preview.

	To access the API during the preview period, you must set this to true.
	*/
	ScarletWitchPreview bool
}

// HTTPRequest builds an *http.Request
func (r *GetAllCodesOfConductReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetAllCodesOfConductReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"scarlet-witch"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "codes-of-conduct/get-all-codes-of-conduct",
		Previews:           map[string]bool{"scarlet-witch": r.ScarletWitchPreview},
		RequiredPreviews:   []string{"scarlet-witch"},
		URLPath:            fmt.Sprintf("/codes_of_conduct"),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetAllCodesOfConductReq) Rel(link string, resp *GetAllCodesOfConductResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetAllCodesOfConductResponse is a response for GetAllCodesOfConduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
type GetAllCodesOfConductResponse struct {
	httpResponse *http.Response
	Data         []components.CodeOfConduct
}

func (r *GetAllCodesOfConductResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetConductCode performs requests for "codes-of-conduct/get-conduct-code"

Get a code of conduct.

  GET /codes_of_conduct/{key}

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
func GetConductCode(ctx context.Context, req *GetConductCodeReq, opt ...requests.Option) (*GetConductCodeResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetConductCodeReq)
	}
	resp := &GetConductCodeResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetConductCodeResponse(r, opts.PreserveResponseBody())
}

// NewGetConductCodeResponse builds a new *GetConductCodeResponse from an *http.Response
func NewGetConductCodeResponse(resp *http.Response, preserveBody bool) (*GetConductCodeResponse, error) {
	var result GetConductCodeResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200, 304})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetConductCode performs requests for "codes-of-conduct/get-conduct-code"

Get a code of conduct.

  GET /codes_of_conduct/{key}

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
func (c Client) GetConductCode(ctx context.Context, req *GetConductCodeReq, opt ...requests.Option) (*GetConductCodeResponse, error) {
	return GetConductCode(ctx, req, append(c, opt...)...)
}

/*
GetConductCodeReq is request data for Client.GetConductCode

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
type GetConductCodeReq struct {
	_url string

	// key parameter
	Key string

	/*
	The Codes of Conduct API is currently available for developers to preview.

	To access the API during the preview period, you must set this to true.
	*/
	ScarletWitchPreview bool
}

// HTTPRequest builds an *http.Request
func (r *GetConductCodeReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetConductCodeReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"scarlet-witch"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "codes-of-conduct/get-conduct-code",
		Previews:           map[string]bool{"scarlet-witch": r.ScarletWitchPreview},
		RequiredPreviews:   []string{"scarlet-witch"},
		URLPath:            fmt.Sprintf("/codes_of_conduct/%v", r.Key),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetConductCodeReq) Rel(link string, resp *GetConductCodeResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetConductCodeResponse is a response for GetConductCode

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
type GetConductCodeResponse struct {
	httpResponse *http.Response
	Data         components.CodeOfConduct
}

func (r *GetConductCodeResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetForRepo performs requests for "codes-of-conduct/get-for-repo"

Get the code of conduct for a repository.

  GET /repos/{owner}/{repo}/community/code_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
func GetForRepo(ctx context.Context, req *GetForRepoReq, opt ...requests.Option) (*GetForRepoResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetForRepoReq)
	}
	resp := &GetForRepoResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetForRepoResponse(r, opts.PreserveResponseBody())
}

// NewGetForRepoResponse builds a new *GetForRepoResponse from an *http.Response
func NewGetForRepoResponse(resp *http.Response, preserveBody bool) (*GetForRepoResponse, error) {
	var result GetForRepoResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetForRepo performs requests for "codes-of-conduct/get-for-repo"

Get the code of conduct for a repository.

  GET /repos/{owner}/{repo}/community/code_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
func (c Client) GetForRepo(ctx context.Context, req *GetForRepoReq, opt ...requests.Option) (*GetForRepoResponse, error) {
	return GetForRepo(ctx, req, append(c, opt...)...)
}

/*
GetForRepoReq is request data for Client.GetForRepo

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
type GetForRepoReq struct {
	_url  string
	Owner string
	Repo  string

	/*
	The Codes of Conduct API is currently available for developers to preview.

	To access the API during the preview period, you must set this to true.
	*/
	ScarletWitchPreview bool
}

// HTTPRequest builds an *http.Request
func (r *GetForRepoReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetForRepoReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{"scarlet-witch"},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "codes-of-conduct/get-for-repo",
		Previews:           map[string]bool{"scarlet-witch": r.ScarletWitchPreview},
		RequiredPreviews:   []string{"scarlet-witch"},
		URLPath:            fmt.Sprintf("/repos/%v/%v/community/code_of_conduct", r.Owner, r.Repo),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetForRepoReq) Rel(link string, resp *GetForRepoResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetForRepoResponse is a response for GetForRepo

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
type GetForRepoResponse struct {
	httpResponse *http.Response
	Data         components.CodeOfConduct
}

func (r *GetForRepoResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}
