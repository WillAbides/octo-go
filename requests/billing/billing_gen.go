// Code generated by octo-go; DO NOT EDIT.

package billing

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	internal "github.com/willabides/octo-go/internal"
	requests "github.com/willabides/octo-go/requests"
	"net/http"
	"net/url"
)

func strPtr(s string) *string { return &s }

// Client is a set of options to apply to requests
type Client []requests.Option

// NewClient returns a new Client
func NewClient(opt ...requests.Option) Client {
	return opt
}

/*
GetGithubActionsBillingGhe performs requests for "billing/get-github-actions-billing-ghe"

Get GitHub Actions billing for an enterprise.

  GET /enterprises/{enterprise_id}/settings/billing/actions

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise
*/
func GetGithubActionsBillingGhe(ctx context.Context, req *GetGithubActionsBillingGheReq, opt ...requests.Option) (*GetGithubActionsBillingGheResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetGithubActionsBillingGheReq)
	}
	resp := &GetGithubActionsBillingGheResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetGithubActionsBillingGheResponse(r, opts.PreserveResponseBody())
}

// NewGetGithubActionsBillingGheResponse builds a new *GetGithubActionsBillingGheResponse from an *http.Response
func NewGetGithubActionsBillingGheResponse(resp *http.Response, preserveBody bool) (*GetGithubActionsBillingGheResponse, error) {
	var result GetGithubActionsBillingGheResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetGithubActionsBillingGhe performs requests for "billing/get-github-actions-billing-ghe"

Get GitHub Actions billing for an enterprise.

  GET /enterprises/{enterprise_id}/settings/billing/actions

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise
*/
func (c Client) GetGithubActionsBillingGhe(ctx context.Context, req *GetGithubActionsBillingGheReq, opt ...requests.Option) (*GetGithubActionsBillingGheResponse, error) {
	return GetGithubActionsBillingGhe(ctx, req, append(c, opt...)...)
}

/*
GetGithubActionsBillingGheReq is request data for Client.GetGithubActionsBillingGhe

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise
*/
type GetGithubActionsBillingGheReq struct {
	_url string

	// Unique identifier of the GitHub Enterprise Cloud instance.
	EnterpriseId string
}

// HTTPRequest builds an *http.Request
func (r *GetGithubActionsBillingGheReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetGithubActionsBillingGheReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-github-actions-billing-ghe",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/enterprises/%v/settings/billing/actions", r.EnterpriseId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetGithubActionsBillingGheReq) Rel(link string, resp *GetGithubActionsBillingGheResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetGithubActionsBillingGheResponse is a response for GetGithubActionsBillingGhe

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-enterprise
*/
type GetGithubActionsBillingGheResponse struct {
	httpResponse *http.Response
	Data         components.ActionsBillingUsage
}

func (r *GetGithubActionsBillingGheResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetGithubActionsBillingOrg performs requests for "billing/get-github-actions-billing-org"

Get GitHub Actions billing for an organization.

  GET /orgs/{org}/settings/billing/actions

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization
*/
func GetGithubActionsBillingOrg(ctx context.Context, req *GetGithubActionsBillingOrgReq, opt ...requests.Option) (*GetGithubActionsBillingOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetGithubActionsBillingOrgReq)
	}
	resp := &GetGithubActionsBillingOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetGithubActionsBillingOrgResponse(r, opts.PreserveResponseBody())
}

// NewGetGithubActionsBillingOrgResponse builds a new *GetGithubActionsBillingOrgResponse from an *http.Response
func NewGetGithubActionsBillingOrgResponse(resp *http.Response, preserveBody bool) (*GetGithubActionsBillingOrgResponse, error) {
	var result GetGithubActionsBillingOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetGithubActionsBillingOrg performs requests for "billing/get-github-actions-billing-org"

Get GitHub Actions billing for an organization.

  GET /orgs/{org}/settings/billing/actions

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization
*/
func (c Client) GetGithubActionsBillingOrg(ctx context.Context, req *GetGithubActionsBillingOrgReq, opt ...requests.Option) (*GetGithubActionsBillingOrgResponse, error) {
	return GetGithubActionsBillingOrg(ctx, req, append(c, opt...)...)
}

/*
GetGithubActionsBillingOrgReq is request data for Client.GetGithubActionsBillingOrg

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization
*/
type GetGithubActionsBillingOrgReq struct {
	_url string
	Org  string
}

// HTTPRequest builds an *http.Request
func (r *GetGithubActionsBillingOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetGithubActionsBillingOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-github-actions-billing-org",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/orgs/%v/settings/billing/actions", r.Org),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetGithubActionsBillingOrgReq) Rel(link string, resp *GetGithubActionsBillingOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetGithubActionsBillingOrgResponse is a response for GetGithubActionsBillingOrg

https://developer.github.com/v3/billing/#get-github-actions-billing-for-an-organization
*/
type GetGithubActionsBillingOrgResponse struct {
	httpResponse *http.Response
	Data         components.ActionsBillingUsage
}

func (r *GetGithubActionsBillingOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetGithubActionsBillingUser performs requests for "billing/get-github-actions-billing-user"

Get GitHub Actions billing for a user.

  GET /users/{username}/settings/billing/actions

https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user
*/
func GetGithubActionsBillingUser(ctx context.Context, req *GetGithubActionsBillingUserReq, opt ...requests.Option) (*GetGithubActionsBillingUserResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetGithubActionsBillingUserReq)
	}
	resp := &GetGithubActionsBillingUserResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetGithubActionsBillingUserResponse(r, opts.PreserveResponseBody())
}

// NewGetGithubActionsBillingUserResponse builds a new *GetGithubActionsBillingUserResponse from an *http.Response
func NewGetGithubActionsBillingUserResponse(resp *http.Response, preserveBody bool) (*GetGithubActionsBillingUserResponse, error) {
	var result GetGithubActionsBillingUserResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetGithubActionsBillingUser performs requests for "billing/get-github-actions-billing-user"

Get GitHub Actions billing for a user.

  GET /users/{username}/settings/billing/actions

https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user
*/
func (c Client) GetGithubActionsBillingUser(ctx context.Context, req *GetGithubActionsBillingUserReq, opt ...requests.Option) (*GetGithubActionsBillingUserResponse, error) {
	return GetGithubActionsBillingUser(ctx, req, append(c, opt...)...)
}

/*
GetGithubActionsBillingUserReq is request data for Client.GetGithubActionsBillingUser

https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user
*/
type GetGithubActionsBillingUserReq struct {
	_url     string
	Username string
}

// HTTPRequest builds an *http.Request
func (r *GetGithubActionsBillingUserReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetGithubActionsBillingUserReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-github-actions-billing-user",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/users/%v/settings/billing/actions", r.Username),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetGithubActionsBillingUserReq) Rel(link string, resp *GetGithubActionsBillingUserResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetGithubActionsBillingUserResponse is a response for GetGithubActionsBillingUser

https://developer.github.com/v3/billing/#get-github-actions-billing-for-a-user
*/
type GetGithubActionsBillingUserResponse struct {
	httpResponse *http.Response
	Data         components.ActionsBillingUsage
}

func (r *GetGithubActionsBillingUserResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetGithubPackagesBillingGhe performs requests for "billing/get-github-packages-billing-ghe"

Get GitHub Packages billing for an enterprise.

  GET /enterprises/{enterprise_id}/settings/billing/packages

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise
*/
func GetGithubPackagesBillingGhe(ctx context.Context, req *GetGithubPackagesBillingGheReq, opt ...requests.Option) (*GetGithubPackagesBillingGheResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetGithubPackagesBillingGheReq)
	}
	resp := &GetGithubPackagesBillingGheResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetGithubPackagesBillingGheResponse(r, opts.PreserveResponseBody())
}

// NewGetGithubPackagesBillingGheResponse builds a new *GetGithubPackagesBillingGheResponse from an *http.Response
func NewGetGithubPackagesBillingGheResponse(resp *http.Response, preserveBody bool) (*GetGithubPackagesBillingGheResponse, error) {
	var result GetGithubPackagesBillingGheResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetGithubPackagesBillingGhe performs requests for "billing/get-github-packages-billing-ghe"

Get GitHub Packages billing for an enterprise.

  GET /enterprises/{enterprise_id}/settings/billing/packages

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise
*/
func (c Client) GetGithubPackagesBillingGhe(ctx context.Context, req *GetGithubPackagesBillingGheReq, opt ...requests.Option) (*GetGithubPackagesBillingGheResponse, error) {
	return GetGithubPackagesBillingGhe(ctx, req, append(c, opt...)...)
}

/*
GetGithubPackagesBillingGheReq is request data for Client.GetGithubPackagesBillingGhe

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise
*/
type GetGithubPackagesBillingGheReq struct {
	_url string

	// Unique identifier of the GitHub Enterprise Cloud instance.
	EnterpriseId string
}

// HTTPRequest builds an *http.Request
func (r *GetGithubPackagesBillingGheReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetGithubPackagesBillingGheReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-github-packages-billing-ghe",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/enterprises/%v/settings/billing/packages", r.EnterpriseId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetGithubPackagesBillingGheReq) Rel(link string, resp *GetGithubPackagesBillingGheResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetGithubPackagesBillingGheResponse is a response for GetGithubPackagesBillingGhe

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-enterprise
*/
type GetGithubPackagesBillingGheResponse struct {
	httpResponse *http.Response
	Data         components.PackagesBillingUsage
}

func (r *GetGithubPackagesBillingGheResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetGithubPackagesBillingOrg performs requests for "billing/get-github-packages-billing-org"

Get GitHub Packages billing for an organization.

  GET /orgs/{org}/settings/billing/packages

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization
*/
func GetGithubPackagesBillingOrg(ctx context.Context, req *GetGithubPackagesBillingOrgReq, opt ...requests.Option) (*GetGithubPackagesBillingOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetGithubPackagesBillingOrgReq)
	}
	resp := &GetGithubPackagesBillingOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetGithubPackagesBillingOrgResponse(r, opts.PreserveResponseBody())
}

// NewGetGithubPackagesBillingOrgResponse builds a new *GetGithubPackagesBillingOrgResponse from an *http.Response
func NewGetGithubPackagesBillingOrgResponse(resp *http.Response, preserveBody bool) (*GetGithubPackagesBillingOrgResponse, error) {
	var result GetGithubPackagesBillingOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetGithubPackagesBillingOrg performs requests for "billing/get-github-packages-billing-org"

Get GitHub Packages billing for an organization.

  GET /orgs/{org}/settings/billing/packages

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization
*/
func (c Client) GetGithubPackagesBillingOrg(ctx context.Context, req *GetGithubPackagesBillingOrgReq, opt ...requests.Option) (*GetGithubPackagesBillingOrgResponse, error) {
	return GetGithubPackagesBillingOrg(ctx, req, append(c, opt...)...)
}

/*
GetGithubPackagesBillingOrgReq is request data for Client.GetGithubPackagesBillingOrg

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization
*/
type GetGithubPackagesBillingOrgReq struct {
	_url string
	Org  string
}

// HTTPRequest builds an *http.Request
func (r *GetGithubPackagesBillingOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetGithubPackagesBillingOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-github-packages-billing-org",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/orgs/%v/settings/billing/packages", r.Org),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetGithubPackagesBillingOrgReq) Rel(link string, resp *GetGithubPackagesBillingOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetGithubPackagesBillingOrgResponse is a response for GetGithubPackagesBillingOrg

https://developer.github.com/v3/billing/#get-github-packages-billing-for-an-organization
*/
type GetGithubPackagesBillingOrgResponse struct {
	httpResponse *http.Response
	Data         components.PackagesBillingUsage
}

func (r *GetGithubPackagesBillingOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetGithubPackagesBillingUser performs requests for "billing/get-github-packages-billing-user"

Get GitHub Packages billing for a user.

  GET /users/{username}/settings/billing/packages

https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user
*/
func GetGithubPackagesBillingUser(ctx context.Context, req *GetGithubPackagesBillingUserReq, opt ...requests.Option) (*GetGithubPackagesBillingUserResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetGithubPackagesBillingUserReq)
	}
	resp := &GetGithubPackagesBillingUserResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetGithubPackagesBillingUserResponse(r, opts.PreserveResponseBody())
}

// NewGetGithubPackagesBillingUserResponse builds a new *GetGithubPackagesBillingUserResponse from an *http.Response
func NewGetGithubPackagesBillingUserResponse(resp *http.Response, preserveBody bool) (*GetGithubPackagesBillingUserResponse, error) {
	var result GetGithubPackagesBillingUserResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetGithubPackagesBillingUser performs requests for "billing/get-github-packages-billing-user"

Get GitHub Packages billing for a user.

  GET /users/{username}/settings/billing/packages

https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user
*/
func (c Client) GetGithubPackagesBillingUser(ctx context.Context, req *GetGithubPackagesBillingUserReq, opt ...requests.Option) (*GetGithubPackagesBillingUserResponse, error) {
	return GetGithubPackagesBillingUser(ctx, req, append(c, opt...)...)
}

/*
GetGithubPackagesBillingUserReq is request data for Client.GetGithubPackagesBillingUser

https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user
*/
type GetGithubPackagesBillingUserReq struct {
	_url     string
	Username string
}

// HTTPRequest builds an *http.Request
func (r *GetGithubPackagesBillingUserReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetGithubPackagesBillingUserReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-github-packages-billing-user",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/users/%v/settings/billing/packages", r.Username),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetGithubPackagesBillingUserReq) Rel(link string, resp *GetGithubPackagesBillingUserResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetGithubPackagesBillingUserResponse is a response for GetGithubPackagesBillingUser

https://developer.github.com/v3/billing/#get-github-packages-billing-for-a-user
*/
type GetGithubPackagesBillingUserResponse struct {
	httpResponse *http.Response
	Data         components.PackagesBillingUsage
}

func (r *GetGithubPackagesBillingUserResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetSharedStorageBillingGhe performs requests for "billing/get-shared-storage-billing-ghe"

Get shared storage billing for an enterprise.

  GET /enterprises/{enterprise_id}/settings/billing/shared-storage

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise
*/
func GetSharedStorageBillingGhe(ctx context.Context, req *GetSharedStorageBillingGheReq, opt ...requests.Option) (*GetSharedStorageBillingGheResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetSharedStorageBillingGheReq)
	}
	resp := &GetSharedStorageBillingGheResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetSharedStorageBillingGheResponse(r, opts.PreserveResponseBody())
}

// NewGetSharedStorageBillingGheResponse builds a new *GetSharedStorageBillingGheResponse from an *http.Response
func NewGetSharedStorageBillingGheResponse(resp *http.Response, preserveBody bool) (*GetSharedStorageBillingGheResponse, error) {
	var result GetSharedStorageBillingGheResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetSharedStorageBillingGhe performs requests for "billing/get-shared-storage-billing-ghe"

Get shared storage billing for an enterprise.

  GET /enterprises/{enterprise_id}/settings/billing/shared-storage

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise
*/
func (c Client) GetSharedStorageBillingGhe(ctx context.Context, req *GetSharedStorageBillingGheReq, opt ...requests.Option) (*GetSharedStorageBillingGheResponse, error) {
	return GetSharedStorageBillingGhe(ctx, req, append(c, opt...)...)
}

/*
GetSharedStorageBillingGheReq is request data for Client.GetSharedStorageBillingGhe

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise
*/
type GetSharedStorageBillingGheReq struct {
	_url string

	// Unique identifier of the GitHub Enterprise Cloud instance.
	EnterpriseId string
}

// HTTPRequest builds an *http.Request
func (r *GetSharedStorageBillingGheReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetSharedStorageBillingGheReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-shared-storage-billing-ghe",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/enterprises/%v/settings/billing/shared-storage", r.EnterpriseId),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetSharedStorageBillingGheReq) Rel(link string, resp *GetSharedStorageBillingGheResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetSharedStorageBillingGheResponse is a response for GetSharedStorageBillingGhe

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-enterprise
*/
type GetSharedStorageBillingGheResponse struct {
	httpResponse *http.Response
	Data         components.CombinedBillingUsage
}

func (r *GetSharedStorageBillingGheResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetSharedStorageBillingOrg performs requests for "billing/get-shared-storage-billing-org"

Get shared storage billing for an organization.

  GET /orgs/{org}/settings/billing/shared-storage

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization
*/
func GetSharedStorageBillingOrg(ctx context.Context, req *GetSharedStorageBillingOrgReq, opt ...requests.Option) (*GetSharedStorageBillingOrgResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetSharedStorageBillingOrgReq)
	}
	resp := &GetSharedStorageBillingOrgResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetSharedStorageBillingOrgResponse(r, opts.PreserveResponseBody())
}

// NewGetSharedStorageBillingOrgResponse builds a new *GetSharedStorageBillingOrgResponse from an *http.Response
func NewGetSharedStorageBillingOrgResponse(resp *http.Response, preserveBody bool) (*GetSharedStorageBillingOrgResponse, error) {
	var result GetSharedStorageBillingOrgResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetSharedStorageBillingOrg performs requests for "billing/get-shared-storage-billing-org"

Get shared storage billing for an organization.

  GET /orgs/{org}/settings/billing/shared-storage

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization
*/
func (c Client) GetSharedStorageBillingOrg(ctx context.Context, req *GetSharedStorageBillingOrgReq, opt ...requests.Option) (*GetSharedStorageBillingOrgResponse, error) {
	return GetSharedStorageBillingOrg(ctx, req, append(c, opt...)...)
}

/*
GetSharedStorageBillingOrgReq is request data for Client.GetSharedStorageBillingOrg

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization
*/
type GetSharedStorageBillingOrgReq struct {
	_url string
	Org  string
}

// HTTPRequest builds an *http.Request
func (r *GetSharedStorageBillingOrgReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetSharedStorageBillingOrgReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-shared-storage-billing-org",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/orgs/%v/settings/billing/shared-storage", r.Org),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetSharedStorageBillingOrgReq) Rel(link string, resp *GetSharedStorageBillingOrgResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetSharedStorageBillingOrgResponse is a response for GetSharedStorageBillingOrg

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-an-organization
*/
type GetSharedStorageBillingOrgResponse struct {
	httpResponse *http.Response
	Data         components.CombinedBillingUsage
}

func (r *GetSharedStorageBillingOrgResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}

/*
GetSharedStorageBillingUser performs requests for "billing/get-shared-storage-billing-user"

Get shared storage billing for a user.

  GET /users/{username}/settings/billing/shared-storage

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user
*/
func GetSharedStorageBillingUser(ctx context.Context, req *GetSharedStorageBillingUserReq, opt ...requests.Option) (*GetSharedStorageBillingUserResponse, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(GetSharedStorageBillingUserReq)
	}
	resp := &GetSharedStorageBillingUserResponse{}
	builder := req.requestBuilder()

	httpReq, err := builder.HTTPRequest(ctx, opts)
	if err != nil {
		return resp, err
	}

	r, err := opts.HttpClient().Do(httpReq)
	if err != nil {
		return resp, err
	}
	resp.httpResponse = r

	return NewGetSharedStorageBillingUserResponse(r, opts.PreserveResponseBody())
}

// NewGetSharedStorageBillingUserResponse builds a new *GetSharedStorageBillingUserResponse from an *http.Response
func NewGetSharedStorageBillingUserResponse(resp *http.Response, preserveBody bool) (*GetSharedStorageBillingUserResponse, error) {
	var result GetSharedStorageBillingUserResponse
	result.httpResponse = resp
	err := internal.ErrorCheck(resp, []int{200})
	if err != nil {
		return &result, err
	}
	if internal.IntInSlice(resp.StatusCode, []int{200}) {
		err = internal.DecodeResponseBody(resp, &result.Data, preserveBody)
		if err != nil {
			return &result, err
		}
	}
	return &result, nil
}

/*
GetSharedStorageBillingUser performs requests for "billing/get-shared-storage-billing-user"

Get shared storage billing for a user.

  GET /users/{username}/settings/billing/shared-storage

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user
*/
func (c Client) GetSharedStorageBillingUser(ctx context.Context, req *GetSharedStorageBillingUserReq, opt ...requests.Option) (*GetSharedStorageBillingUserResponse, error) {
	return GetSharedStorageBillingUser(ctx, req, append(c, opt...)...)
}

/*
GetSharedStorageBillingUserReq is request data for Client.GetSharedStorageBillingUser

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user
*/
type GetSharedStorageBillingUserReq struct {
	_url     string
	Username string
}

// HTTPRequest builds an *http.Request
func (r *GetSharedStorageBillingUserReq) HTTPRequest(ctx context.Context, opt ...requests.Option) (*http.Request, error) {
	opts, err := requests.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *GetSharedStorageBillingUserReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:        []string{},
		Body:               nil,
		EndpointAttributes: []internal.EndpointAttribute{},
		ExplicitURL:        r._url,
		HeaderVals:         map[string]*string{"accept": internal.String("application/json")},
		Method:             "GET",
		OperationID:        "billing/get-shared-storage-billing-user",
		Previews:           map[string]bool{},
		RequiredPreviews:   []string{},
		URLPath:            fmt.Sprintf("/users/%v/settings/billing/shared-storage", r.Username),
		URLQuery:           query,
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GetSharedStorageBillingUserReq) Rel(link string, resp *GetSharedStorageBillingUserResponse) bool {
	u := internal.RelLink(resp.HTTPResponse(), link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GetSharedStorageBillingUserResponse is a response for GetSharedStorageBillingUser

https://developer.github.com/v3/billing/#get-shared-storage-billing-for-a-user
*/
type GetSharedStorageBillingUserResponse struct {
	httpResponse *http.Response
	Data         components.CombinedBillingUsage
}

func (r *GetSharedStorageBillingUserResponse) HTTPResponse() *http.Response {
	return r.httpResponse
}
