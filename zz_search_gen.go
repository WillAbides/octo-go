// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
SearchCodeReq builds requests for "search/code"

Search code.

  GET /search/code

https://developer.github.com/v3/search/#search-code
*/
type SearchCodeReq struct {

	/*
	The query contains one or more search keywords and qualifiers. Qualifiers allow
	you to limit your search to specific areas of GitHub. The REST API supports the
	same qualifiers as GitHub.com. To learn more about the format of the query, see
	[Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query). See
	"[Searching code](https://help.github.com/articles/searching-code/)" for a
	detailed list of qualifiers.
	*/
	Q *string

	/*
	Sorts the results of your query. Can only be `indexed`, which indicates how
	recently a file has been indexed by the GitHub search infrastructure. Default:
	[best match](https://developer.github.com/v3/search/#ranking-search-results)
	*/
	Sort *string

	/*
	Determines whether the first search result returned is the highest number of
	matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored
	unless you provide `sort`.
	*/
	Order *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *SearchCodeReq) urlPath() string {
	return fmt.Sprintf("/search/code")
}

func (r *SearchCodeReq) method() string {
	return "GET"
}

func (r *SearchCodeReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Order != nil {
		query.Set("order", *r.Order)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *SearchCodeReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchCodeReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchCodeReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchCodeResponseBody200 is a response body for search/code

API documentation: https://developer.github.com/v3/search/#search-code
*/
type SearchCodeResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.CodeSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
SearchCommitsReq builds requests for "search/commits"

Search commits.

  GET /search/commits

https://developer.github.com/v3/search/#search-commits
*/
type SearchCommitsReq struct {

	/*
	The query contains one or more search keywords and qualifiers. Qualifiers allow
	you to limit your search to specific areas of GitHub. The REST API supports the
	same qualifiers as GitHub.com. To learn more about the format of the query, see
	[Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query). See
	"[Searching commits](https://help.github.com/articles/searching-commits/)" for a
	detailed list of qualifiers.
	*/
	Q *string

	/*
	Sorts the results of your query by `author-date` or `committer-date`. Default:
	[best match](https://developer.github.com/v3/search/#ranking-search-results)
	*/
	Sort *string

	/*
	Determines whether the first search result returned is the highest number of
	matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored
	unless you provide `sort`.
	*/
	Order *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	The Commit Search API is currently available for developers to preview. During
	the preview period, the APIs may change without advance notice. Please see the
	[blog post](https://developer.github.com/changes/2017-01-05-commit-search-api/)
	for full details.

	To access the API you must set this to true.
	*/
	CloakPreview bool
}

func (r *SearchCommitsReq) urlPath() string {
	return fmt.Sprintf("/search/commits")
}

func (r *SearchCommitsReq) method() string {
	return "GET"
}

func (r *SearchCommitsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Order != nil {
		query.Set("order", *r.Order)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *SearchCommitsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"cloak": r.CloakPreview}
	if requiredPreviews {
		previewVals["cloak"] = true
	}
	if allPreviews {
		previewVals["cloak"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchCommitsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchCommitsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchCommitsResponseBody200 is a response body for search/commits

API documentation: https://developer.github.com/v3/search/#search-commits
*/
type SearchCommitsResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.CommitSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
SearchIssuesAndPullRequestsReq builds requests for "search/issues-and-pull-requests"

Search issues and pull requests.

  GET /search/issues

https://developer.github.com/v3/search/#search-issues-and-pull-requests
*/
type SearchIssuesAndPullRequestsReq struct {

	/*
	The query contains one or more search keywords and qualifiers. Qualifiers allow
	you to limit your search to specific areas of GitHub. The REST API supports the
	same qualifiers as GitHub.com. To learn more about the format of the query, see
	[Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query). See
	"[Searching issues and pull
	requests](https://help.github.com/articles/searching-issues-and-pull-requests/)"
	for a detailed list of qualifiers.
	*/
	Q *string

	/*
	Sorts the results of your query by the number of `comments`, `reactions`,
	`reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`,
	`reactions-heart`, `reactions-tada`, or `interactions`. You can also sort
	results by how recently the items were `created` or `updated`, Default: [best
	match](https://developer.github.com/v3/search/#ranking-search-results)
	*/
	Sort *string

	/*
	Determines whether the first search result returned is the highest number of
	matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored
	unless you provide `sort`.
	*/
	Order *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *SearchIssuesAndPullRequestsReq) urlPath() string {
	return fmt.Sprintf("/search/issues")
}

func (r *SearchIssuesAndPullRequestsReq) method() string {
	return "GET"
}

func (r *SearchIssuesAndPullRequestsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Order != nil {
		query.Set("order", *r.Order)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *SearchIssuesAndPullRequestsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchIssuesAndPullRequestsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchIssuesAndPullRequestsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchIssuesAndPullRequestsResponseBody200 is a response body for search/issues-and-pull-requests

API documentation: https://developer.github.com/v3/search/#search-issues-and-pull-requests
*/
type SearchIssuesAndPullRequestsResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.IssueSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
SearchLabelsReq builds requests for "search/labels"

Search labels.

  GET /search/labels

https://developer.github.com/v3/search/#search-labels
*/
type SearchLabelsReq struct {

	// The id of the repository.
	RepositoryId *int64

	/*
	The search keywords. This endpoint does not accept qualifiers in the query. To
	learn more about the format of the query, see [Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query).
	*/
	Q *string

	/*
	Sorts the results of your query by when the label was `created` or `updated`.
	Default: [best
	match](https://developer.github.com/v3/search/#ranking-search-results)
	*/
	Sort *string

	/*
	Determines whether the first search result returned is the highest number of
	matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored
	unless you provide `sort`.
	*/
	Order *string
}

func (r *SearchLabelsReq) urlPath() string {
	return fmt.Sprintf("/search/labels")
}

func (r *SearchLabelsReq) method() string {
	return "GET"
}

func (r *SearchLabelsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.RepositoryId != nil {
		query.Set("repository_id", strconv.FormatInt(*r.RepositoryId, 10))
	}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Order != nil {
		query.Set("order", *r.Order)
	}
	return query
}

func (r *SearchLabelsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchLabelsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchLabelsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchLabelsResponseBody200 is a response body for search/labels

API documentation: https://developer.github.com/v3/search/#search-labels
*/
type SearchLabelsResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.LabelSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
SearchReposReq builds requests for "search/repos"

Search repositories.

  GET /search/repositories

https://developer.github.com/v3/search/#search-repositories
*/
type SearchReposReq struct {

	/*
	The query contains one or more search keywords and qualifiers. Qualifiers allow
	you to limit your search to specific areas of GitHub. The REST API supports the
	same qualifiers as GitHub.com. To learn more about the format of the query, see
	[Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query). See
	"[Searching for
	repositories](https://help.github.com/articles/searching-for-repositories/)" for
	a detailed list of qualifiers.
	*/
	Q *string

	/*
	Sorts the results of your query by number of `stars`, `forks`, or
	`help-wanted-issues` or how recently the items were `updated`. Default: [best
	match](https://developer.github.com/v3/search/#ranking-search-results)
	*/
	Sort *string

	/*
	Determines whether the first search result returned is the highest number of
	matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored
	unless you provide `sort`.
	*/
	Order *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	The `topics` property for repositories on GitHub is currently available for
	developers to preview. To view the `topics` property in calls that return
	repository results, you must set this to true.
	*/
	MercyPreview bool
}

func (r *SearchReposReq) urlPath() string {
	return fmt.Sprintf("/search/repositories")
}

func (r *SearchReposReq) method() string {
	return "GET"
}

func (r *SearchReposReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Order != nil {
		query.Set("order", *r.Order)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *SearchReposReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"mercy": r.MercyPreview}
	if allPreviews {
		previewVals["mercy"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchReposReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchReposReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchReposResponseBody200 is a response body for search/repos

API documentation: https://developer.github.com/v3/search/#search-repositories
*/
type SearchReposResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.RepoSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
SearchTopicsReq builds requests for "search/topics"

Search topics.

  GET /search/topics

https://developer.github.com/v3/search/#search-topics
*/
type SearchTopicsReq struct {

	/*
	The query contains one or more search keywords and qualifiers. Qualifiers allow
	you to limit your search to specific areas of GitHub. The REST API supports the
	same qualifiers as GitHub.com. To learn more about the format of the query, see
	[Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query).
	*/
	Q *string

	/*
	The `topics` property for repositories on GitHub is currently available for
	developers to preview. To view the `topics` property in calls that return
	repository results, you must set this to true.
	*/
	MercyPreview bool
}

func (r *SearchTopicsReq) urlPath() string {
	return fmt.Sprintf("/search/topics")
}

func (r *SearchTopicsReq) method() string {
	return "GET"
}

func (r *SearchTopicsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	return query
}

func (r *SearchTopicsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"mercy": r.MercyPreview}
	if allPreviews {
		previewVals["mercy"] = true
	}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchTopicsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchTopicsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchTopicsResponseBody200 is a response body for search/topics

API documentation: https://developer.github.com/v3/search/#search-topics
*/
type SearchTopicsResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.TopicSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
SearchUsersReq builds requests for "search/users"

Search users.

  GET /search/users

https://developer.github.com/v3/search/#search-users
*/
type SearchUsersReq struct {

	/*
	The query contains one or more search keywords and qualifiers. Qualifiers allow
	you to limit your search to specific areas of GitHub. The REST API supports the
	same qualifiers as GitHub.com. To learn more about the format of the query, see
	[Constructing a search
	query](https://developer.github.com/v3/search/#constructing-a-search-query). See
	"[Searching users](https://help.github.com/articles/searching-users/)" for a
	detailed list of qualifiers.
	*/
	Q *string

	/*
	Sorts the results of your query by number of `followers` or `repositories`, or
	when the person `joined` GitHub. Default: [best
	match](https://developer.github.com/v3/search/#ranking-search-results)
	*/
	Sort *string

	/*
	Determines whether the first search result returned is the highest number of
	matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored
	unless you provide `sort`.
	*/
	Order *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *SearchUsersReq) urlPath() string {
	return fmt.Sprintf("/search/users")
}

func (r *SearchUsersReq) method() string {
	return "GET"
}

func (r *SearchUsersReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Q != nil {
		query.Set("q", *r.Q)
	}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Order != nil {
		query.Set("order", *r.Order)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *SearchUsersReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *SearchUsersReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *SearchUsersReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
SearchUsersResponseBody200 is a response body for search/users

API documentation: https://developer.github.com/v3/search/#search-users
*/
type SearchUsersResponseBody200 struct {
	IncompleteResults bool `json:"incomplete_results,omitempty"`
	Items             []struct {
		components.UserSearchResultItem
	} `json:"items,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}
