package main

import (
	"os"
	"path/filepath"

	"github.com/dave/jennifer/jen"
	"github.com/willabides/octo-go/generator/internal/model"
)

func generateUnmarshalTests(outputPath string, endpoints []model.Endpoint) error {
	f, err := os.Create(filepath.Join(outputPath, "zz_unmarshal_gen_test.go"))
	if err != nil {
		return err
	}
	file := jen.NewFilePathName("github.com/willabides/octo-go_test", "octo_test")
	file.ImportName("github.com/willabides/octo-go", "octo")
	file.HeaderComment("Code generated by octo-go; DO NOT EDIT.")
	file.Func().Id("init").Params().Block(
		jen.Id("unmarshalResponseBodyTests").Op("=").Append(jen.Id("unmarshalResponseBodyTests"), jen.Id("generatedUnmarshalResponseBodyTests...")),
	)
	file.Id("var generatedUnmarshalResponseBodyTests = []unmarshalResponseBodyTest").ValuesFunc(func(tests *jen.Group) {
		for _, endpoint := range endpoints {
			endpointUnmarshalTests(tests, endpoint)
		}
	})
	return file.Render(f)
}

func endpointUnmarshalTests(grp *jen.Group, endpoint model.Endpoint) {
	if endpoint.Legacy {
		return
	}
	bodyCodes := responseCodesWithBodies(endpoint)
	for _, code := range bodyCodes {
		response := endpoint.Responses[code]
		if !response.HasExample {
			continue
		}
		grp.Values(jen.DictFunc(func(dict jen.Dict) {
			dict[jen.Id("operationID")] = jen.Lit(endpoint.ID)
			dict[jen.Id("name")] = jen.Lit(respBodyStructName(endpoint))
			dict[jen.Id("endpointPath")] = jen.Lit(endpoint.Path)
			dict[jen.Id("httpMethod")] = jen.Lit(endpoint.Method)
			dict[jen.Id("httpStatusCode")] = jen.Lit(code)
			dict[jen.Id("decode")] = jen.Func().Params(
				jen.Id("decoder").Op("*").Qual("encoding/json", "Decoder"),
			).Error().Block(
				jen.Id("target").Op(":=").Qual("github.com/willabides/octo-go", respBodyStructName(endpoint)).Values(),
				jen.Return(jen.Id("decoder.Decode(&target)")),
			)
		}))
	}
}
