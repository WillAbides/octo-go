package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/willabides/octo-go/generator/internal/model/openapi"
)

func main() {
	var schemaPath string
	var outputPath string
	var pkgPath string
	var pkgName string
	flag.StringVar(&schemaPath, "schema", "", "path to openapi schema")
	flag.StringVar(&outputPath, "out", "", "directory to write all these files")
	flag.StringVar(&pkgPath, "pkgpath", "", "path for output package")
	flag.StringVar(&pkgName, "pkg", "", "name for output package")
	flag.Parse()
	err := run(schemaPath, outputPath, pkgPath, pkgName)
	if err != nil {
		log.Fatal(err)
	}
}

func run(schemaPath, outputPath, pkgPath, pkgName string) error {
	schemaFile, err := os.Open(schemaPath)
	if err != nil {
		return err
	}
	mdl, err := openapi.Openapi2Model(schemaFile)
	if err != nil {
		return err
	}
	endpoints := mdl.Endpoints

	sort.Slice(endpoints, func(i, j int) bool {
		return endpoints[i].ID < endpoints[j].ID
	})

	concernFiles := map[string]*jen.File{}

	for _, endpoint := range endpoints {
		if concernFiles[endpoint.Concern] == nil {
			cf := jen.NewFilePathName(pkgPath, pkgName)
			cf.HeaderComment("Code generated by octo-go; DO NOT EDIT.")
			concernFiles[endpoint.Concern] = cf
		}
		file := concernFiles[endpoint.Concern]
		addRequestStruct(file, endpoint)
		addRequestBody(file, endpoint)
		addResponseBodies(file, endpoint)
	}

	for concern, concernFile := range concernFiles {
		name := fmt.Sprintf("zz_%s_gen.go", strings.ReplaceAll(concern, "-", "_"))
		f, err := os.Create(filepath.Join(outputPath, name))
		if err != nil {
			return err
		}
		err = concernFile.Render(f)
		if err != nil {
			return err
		}
	}
	return nil
}
