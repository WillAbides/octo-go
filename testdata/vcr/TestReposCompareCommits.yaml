---
version: 1
interactions:
- request:
    body: ""
    form: {}
    headers:
      Accept:
      - application/vnd.github.v3+json
      User-Agent:
      - octo-go
    url: https://api.github.com/repos/WillAbides/octo-go/compare/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a...ceac7c6d9a134326a0871174423bea19acbb122a
    method: GET
  response:
    body: '{"url":"https://api.github.com/repos/WillAbides/octo-go/compare/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a...ceac7c6d9a134326a0871174423bea19acbb122a","html_url":"https://github.com/WillAbides/octo-go/compare/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a...ceac7c6d9a134326a0871174423bea19acbb122a","permalink_url":"https://github.com/WillAbides/octo-go/compare/WillAbides:2c80673...WillAbides:ceac7c6","diff_url":"https://github.com/WillAbides/octo-go/compare/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a...ceac7c6d9a134326a0871174423bea19acbb122a.diff","patch_url":"https://github.com/WillAbides/octo-go/compare/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a...ceac7c6d9a134326a0871174423bea19acbb122a.patch","base_commit":{"sha":"2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","node_id":"MDY6Q29tbWl0MjY0MzA5MDk1OjJjODA2NzNmMTViMjc1Y2JiMjJmYzE2N2NiMWI5YWE0M2JhN2EyN2E=","commit":{"author":{"name":"WillAbides","email":"willabides@github.com","date":"2020-05-15T22:10:26Z"},"committer":{"name":"WillAbides","email":"willabides@github.com","date":"2020-05-15T22:10:26Z"},"message":"Initial
      commit","tree":{"sha":"221dc3bf00e7e4ee8b2068a1644d2737bc4e0005","url":"https://api.github.com/repos/WillAbides/octo-go/git/trees/221dc3bf00e7e4ee8b2068a1644d2737bc4e0005"},"url":"https://api.github.com/repos/WillAbides/octo-go/git/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/WillAbides/octo-go/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","html_url":"https://github.com/WillAbides/octo-go/commit/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","comments_url":"https://api.github.com/repos/WillAbides/octo-go/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/comments","author":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"committer":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"parents":[]},"merge_base_commit":{"sha":"2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","node_id":"MDY6Q29tbWl0MjY0MzA5MDk1OjJjODA2NzNmMTViMjc1Y2JiMjJmYzE2N2NiMWI5YWE0M2JhN2EyN2E=","commit":{"author":{"name":"WillAbides","email":"willabides@github.com","date":"2020-05-15T22:10:26Z"},"committer":{"name":"WillAbides","email":"willabides@github.com","date":"2020-05-15T22:10:26Z"},"message":"Initial
      commit","tree":{"sha":"221dc3bf00e7e4ee8b2068a1644d2737bc4e0005","url":"https://api.github.com/repos/WillAbides/octo-go/git/trees/221dc3bf00e7e4ee8b2068a1644d2737bc4e0005"},"url":"https://api.github.com/repos/WillAbides/octo-go/git/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/WillAbides/octo-go/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","html_url":"https://github.com/WillAbides/octo-go/commit/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","comments_url":"https://api.github.com/repos/WillAbides/octo-go/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/comments","author":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"committer":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"parents":[]},"status":"ahead","ahead_by":4,"behind_by":0,"total_commits":4,"commits":[{"sha":"41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","node_id":"MDY6Q29tbWl0MjY0MzA5MDk1OjQxNzQ5YzFiNTdhNDNmZTI0YzBmYjdlZmE2YzAwY2I0NDJjMWU1NWU=","commit":{"author":{"name":"Will
      Roden","email":"willabides@github.com","date":"2020-05-15T22:11:19Z"},"committer":{"name":"Will
      Roden","email":"willabides@github.com","date":"2020-05-15T22:11:19Z"},"message":"template
      time","tree":{"sha":"60d6a38970b5cfc50aa5a47d9fdb6ade03aa5c93","url":"https://api.github.com/repos/WillAbides/octo-go/git/trees/60d6a38970b5cfc50aa5a47d9fdb6ade03aa5c93"},"url":"https://api.github.com/repos/WillAbides/octo-go/git/commits/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/WillAbides/octo-go/commits/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","html_url":"https://github.com/WillAbides/octo-go/commit/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","comments_url":"https://api.github.com/repos/WillAbides/octo-go/commits/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e/comments","author":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"committer":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"parents":[{"sha":"2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","url":"https://api.github.com/repos/WillAbides/octo-go/commits/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","html_url":"https://github.com/WillAbides/octo-go/commit/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a"}]},{"sha":"4907cfe40550cc7796378348e00c7e1a73036c49","node_id":"MDY6Q29tbWl0MjY0MzA5MDk1OjQ5MDdjZmU0MDU1MGNjNzc5NjM3ODM0OGUwMGM3ZTFhNzMwMzZjNDk=","commit":{"author":{"name":"Will
      Roden","email":"willabides@github.com","date":"2020-05-22T13:55:39Z"},"committer":{"name":"Will
      Roden","email":"willabides@github.com","date":"2020-05-22T15:31:05Z"},"message":"add
      initial code","tree":{"sha":"bbb1a3755a87030bdea3bd686585bfd76ea21c26","url":"https://api.github.com/repos/WillAbides/octo-go/git/trees/bbb1a3755a87030bdea3bd686585bfd76ea21c26"},"url":"https://api.github.com/repos/WillAbides/octo-go/git/commits/4907cfe40550cc7796378348e00c7e1a73036c49","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/WillAbides/octo-go/commits/4907cfe40550cc7796378348e00c7e1a73036c49","html_url":"https://github.com/WillAbides/octo-go/commit/4907cfe40550cc7796378348e00c7e1a73036c49","comments_url":"https://api.github.com/repos/WillAbides/octo-go/commits/4907cfe40550cc7796378348e00c7e1a73036c49/comments","author":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"committer":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"parents":[{"sha":"41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","url":"https://api.github.com/repos/WillAbides/octo-go/commits/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","html_url":"https://github.com/WillAbides/octo-go/commit/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e"}]},{"sha":"b459b3bf5927ee0ec29981b422bf7837fb3f4430","node_id":"MDY6Q29tbWl0MjY0MzA5MDk1OmI0NTliM2JmNTkyN2VlMGVjMjk5ODFiNDIyYmY3ODM3ZmIzZjQ0MzA=","commit":{"author":{"name":"Will
      Roden","email":"willabides@github.com","date":"2020-05-22T15:32:50Z"},"committer":{"name":"Will
      Roden","email":"willabides@github.com","date":"2020-05-22T15:32:50Z"},"message":"regenerate","tree":{"sha":"580cbe4e6b1328a380c618984ae53429b28a8081","url":"https://api.github.com/repos/WillAbides/octo-go/git/trees/580cbe4e6b1328a380c618984ae53429b28a8081"},"url":"https://api.github.com/repos/WillAbides/octo-go/git/commits/b459b3bf5927ee0ec29981b422bf7837fb3f4430","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/WillAbides/octo-go/commits/b459b3bf5927ee0ec29981b422bf7837fb3f4430","html_url":"https://github.com/WillAbides/octo-go/commit/b459b3bf5927ee0ec29981b422bf7837fb3f4430","comments_url":"https://api.github.com/repos/WillAbides/octo-go/commits/b459b3bf5927ee0ec29981b422bf7837fb3f4430/comments","author":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"committer":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"parents":[{"sha":"4907cfe40550cc7796378348e00c7e1a73036c49","url":"https://api.github.com/repos/WillAbides/octo-go/commits/4907cfe40550cc7796378348e00c7e1a73036c49","html_url":"https://github.com/WillAbides/octo-go/commit/4907cfe40550cc7796378348e00c7e1a73036c49"}]},{"sha":"ceac7c6d9a134326a0871174423bea19acbb122a","node_id":"MDY6Q29tbWl0MjY0MzA5MDk1OmNlYWM3YzZkOWExMzQzMjZhMDg3MTE3NDQyM2JlYTE5YWNiYjEyMmE=","commit":{"author":{"name":"WillAbides","email":"willabides@github.com","date":"2020-05-22T15:34:27Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-05-22T15:34:27Z"},"message":"Merge
      pull request #2 from WillAbides/dev\n\nadd initial code","tree":{"sha":"580cbe4e6b1328a380c618984ae53429b28a8081","url":"https://api.github.com/repos/WillAbides/octo-go/git/trees/580cbe4e6b1328a380c618984ae53429b28a8081"},"url":"https://api.github.com/repos/WillAbides/octo-go/git/commits/ceac7c6d9a134326a0871174423bea19acbb122a","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN
      PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex/EDCRBK7hj4Ov3rIwAAdHIIAB5K0sJNS1D6NJ5V670yUlKn\n+WHfHz7vPjBnLiuvVhu6jF9fh1pClUSSpyOBJDXBF/oGA2cfEtclTQhp/2pUujml\nOTJnBjej5q2TwakvNSAe7iRL8j9Hdiy+qav/dWPvVPq1yLOrulGZFqbjumA9Iy0l\nUA6ee4i0iRRHtjTE5KEmRqKmOSwp+f7wYBdNjTwdSULTLAF+NwARnOhjetjEiUJD\nQ1qSuMVqPb7GLPo83/PLI2AFvtxtqbbvTXLAWJXEMuGRZ1X/xMtfRhUAxCS6hVTk\n0nHBPXnh6dCxal7f6y5TPGQL7tFj2lIZVVyk2pyIeHzBfYPzbAJjczdPpd7uba0=\n=NA05\n-----END
      PGP SIGNATURE-----\n","payload":"tree 580cbe4e6b1328a380c618984ae53429b28a8081\nparent
      41749c1b57a43fe24c0fb7efa6c00cb442c1e55e\nparent b459b3bf5927ee0ec29981b422bf7837fb3f4430\nauthor
      WillAbides <willabides@github.com> 1590161667 -0500\ncommitter GitHub <noreply@github.com>
      1590161667 -0500\n\nMerge pull request #2 from WillAbides/dev\n\nadd initial
      code"}},"url":"https://api.github.com/repos/WillAbides/octo-go/commits/ceac7c6d9a134326a0871174423bea19acbb122a","html_url":"https://github.com/WillAbides/octo-go/commit/ceac7c6d9a134326a0871174423bea19acbb122a","comments_url":"https://api.github.com/repos/WillAbides/octo-go/commits/ceac7c6d9a134326a0871174423bea19acbb122a/comments","author":{"login":"WillAbides","id":233500,"node_id":"MDQ6VXNlcjIzMzUwMA==","avatar_url":"https://avatars3.githubusercontent.com/u/233500?v=4","gravatar_id":"","url":"https://api.github.com/users/WillAbides","html_url":"https://github.com/WillAbides","followers_url":"https://api.github.com/users/WillAbides/followers","following_url":"https://api.github.com/users/WillAbides/following{/other_user}","gists_url":"https://api.github.com/users/WillAbides/gists{/gist_id}","starred_url":"https://api.github.com/users/WillAbides/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/WillAbides/subscriptions","organizations_url":"https://api.github.com/users/WillAbides/orgs","repos_url":"https://api.github.com/users/WillAbides/repos","events_url":"https://api.github.com/users/WillAbides/events{/privacy}","received_events_url":"https://api.github.com/users/WillAbides/received_events","type":"User","site_admin":true},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars3.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","url":"https://api.github.com/repos/WillAbides/octo-go/commits/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e","html_url":"https://github.com/WillAbides/octo-go/commit/41749c1b57a43fe24c0fb7efa6c00cb442c1e55e"},{"sha":"b459b3bf5927ee0ec29981b422bf7837fb3f4430","url":"https://api.github.com/repos/WillAbides/octo-go/commits/b459b3bf5927ee0ec29981b422bf7837fb3f4430","html_url":"https://github.com/WillAbides/octo-go/commit/b459b3bf5927ee0ec29981b422bf7837fb3f4430"}]}],"files":[{"sha":"aa75acc553fa1dacff14ef41ad8b2fc5ac29a48c","filename":".github/workflows/applytemplate.yml","status":"removed","additions":0,"deletions":15,"changes":15,"blob_url":"https://github.com/WillAbides/octo-go/blob/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/.github/workflows/applytemplate.yml","raw_url":"https://github.com/WillAbides/octo-go/raw/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/.github/workflows/applytemplate.yml","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/.github/workflows/applytemplate.yml?ref=2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","patch":"@@
      -1,15 +0,0 @@\n-name: applytemplate\n-on: [push]\n-jobs:\n-  applytemplate:\n-    runs-on:
      ubuntu-18.04\n-    if: github.repository != ''WillAbides/goproject-tmpl'' &&
      github.ref == ''refs/heads/master''\n-    steps:\n-      - uses: actions/checkout@v2\n-      -
      run: script/apply-template\n-      - uses: peter-evans/create-pull-request@v2\n-        with:\n-          branch:
      applytemplate/patch\n-          title: update repository template\n-          commit-message:
      update repository template with new name\n-          body: This updates various
      bits of this repository with its name instead of the placeholders from the template."},{"sha":"a3c35835d74ebbe7336e79c26df97ae69477bc2e","filename":"LICENSE","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/LICENSE","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/LICENSE","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/LICENSE?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2020 octo-go authors\n+\n+Permission
      is hereby granted, free of charge, to any person obtaining a copy\n+of this
      software and associated documentation files (the \"Software\"), to deal\n+in
      the Software without restriction, including without limitation the rights\n+to
      use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies
      of the Software, and to permit persons to whom the Software is\n+furnished to
      do so, subject to the following conditions:\n+\n+The above copyright notice
      and this permission notice shall be included in all\n+copies or substantial
      portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY
      OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
      OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
      IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
      ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
      DEALINGS IN THE\n+SOFTWARE."},{"sha":"14a39a4f56522edc0358eb5f66f98eda6f2aa0f0","filename":"README.md","status":"modified","additions":61,"deletions":3,"changes":64,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/README.md","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/README.md","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/README.md?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -1,4 +1,62 @@\n-# goproject-tmpl\n+# octo-go\n \n-[![godoc](https://godoc.org/github.com/WillAbides/goproject-tmpl?status.svg)](https://godoc.org/github.com/WillAbides/goproject-tmpl)\n-[![ci](https://github.com/WillAbides/goproject-tmpl/workflows/ci/badge.svg?branch=master&event=push)](https://github.com/WillAbides/goproject-tmpl/actions?query=workflow%3Aci+branch%3Amaster+event%3Apush)\n+[![godoc](https://godoc.org/github.com/WillAbides/octo-go?status.svg)](https://godoc.org/github.com/WillAbides/octo-go)\n+[![ci](https://github.com/WillAbides/octo-go/workflows/ci/badge.svg?branch=master&event=push)](https://github.com/WillAbides/octo-go/actions?query=workflow%3Aci+branch%3Amaster+event%3Apush)\n+\n+octo-go
      is an experimental client for GitHub''s v3 API. It is generated from the opanapi
      schema that GitHub covertly\n+ publishes at https://unpkg.com/browse/@github/openapi@latest/.
      \n+ \n+This is WIP. Don''t depend on it.\n+\n+Until I write more about it, you
      can get an idea of how it works in \"./examples\".\n+\n+Here is the simple example:\n+\n+```go\n+package
      main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n+\n+\t\"github.com/willabides/octo-go\"\n+\t\"golang.org/x/oauth2\"\n+)\n+\n+func
      main() {\n+\tctx := context.Background()\n+\n+\thttpClient := oauth2.NewClient(ctx,
      oauth2.StaticTokenSource(\n+\t\t&oauth2.Token{AccessToken: os.Getenv(\"GITHUB_TOKEN\")},\n+\t))\n+\n+\treq,
      err := octo.IssuesGetReq{\n+\t\tOwner:               \"golang\",\n+\t\tRepo:                \"go\",\n+\t\tIssueNumber:         1,\n+\t}.HTTPRequest(ctx)\n+\n+\tif
      err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tresp, err := httpClient.Do(req)\n+\tif
      err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tif resp.StatusCode != 200 {\n+\t\tlog.Fatal(\"unexpected
      status code\")\n+\t}\n+\n+\tvar issue octo.IssuesGetResponseBody200\n+\terr
      = octo.UnmarshalResponseBody(resp, &issue)\n+\tif err != nil {\n+\t\tlog.Fatal(\"unexpected
      status code\")\n+\t}\n+\n+\tfmt.Printf(\"golang/go''s first issue is titled
      %q and has %d comments\\n\", issue.Title, issue.Comments)\n+}\n+```"},{"sha":"620d7b796a56fdabebcde81298d22306744676c4","filename":"api.github.com.json","status":"added","additions":102399,"deletions":0,"changes":102399,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/api.github.com.json","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/api.github.com.json","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/api.github.com.json?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"7728c0762213d89c431e24534ee4dab34ebebfd7","filename":"examples/create_gist/create_gist.go","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/examples/create_gist/create_gist.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/examples/create_gist/create_gist.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/examples/create_gist/create_gist.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,73 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\n+\t\"github.com/willabides/octo-go\"\n+\t\"golang.org/x/oauth2\"\n+)\n+\n+func
      main() {\n+\tctx := context.Background()\n+\n+\thttpClient := oauth2.NewClient(ctx,
      oauth2.StaticTokenSource(\n+\t\t&oauth2.Token{AccessToken: os.Getenv(\"GITHUB_TOKEN\")},\n+\t))\n+\n+\treq,
      err := octo.GistsCreateReq{\n+\t\tRequestBody: octo.GistsCreateReqBody{\n+\t\t\tDescription:
      octo.String(\"test gist, pls delete\"),\n+\t\t\tPublic:      octo.Bool(false),\n+\t\t\tFiles:
      map[string]*struct {\n+\t\t\t\tContent *string `json:\"content,omitempty\"`\n+\t\t\t}{\n+\t\t\t\t\"foo.md\":
      {\n+\t\t\t\t\tContent: octo.String(`# my header\n+\n+my body\n+`),\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}.HTTPRequest(ctx)\n+\n+\tif
      err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tresp, err := httpClient.Do(req)\n+\tif
      err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tvar gistInfo octo.GistsCreateResponseBody201\n+\terr
      = octo.UnmarshalResponseBody(resp, &gistInfo)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tfmt.Printf(\"don''t
      forget to delete your new gist at %s\\n\", gistInfo.HtmlUrl)\n+\tfmt.Println(\"on
      second thought...I''ll just delete it for you\")\n+\n+\treq, err = octo.GistsDeleteReq{\n+\t\tGistId:
      gistInfo.Id,\n+\t}.HTTPRequest(ctx)\n+\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tresp,
      err = httpClient.Do(req)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tif
      resp.StatusCode != http.StatusNoContent {\n+\t\tfmt.Println(\"something went
      wrong...you better delete it yourself.\")\n+\t}\n+\n+}"},{"sha":"ebe5f2bb65e19bdb5185ad77996732933d3c321c","filename":"examples/paging/paging.go","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/examples/paging/paging.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/examples/paging/paging.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/examples/paging/paging.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,61 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"time\"\n+\n+\t\"github.com/willabides/octo-go\"\n+\t\"golang.org/x/oauth2\"\n+)\n+\n+func
      main() {\n+\tctx := context.Background()\n+\n+\thttpClient := oauth2.NewClient(ctx,
      oauth2.StaticTokenSource(\n+\t\t&oauth2.Token{AccessToken: os.Getenv(\"GITHUB_TOKEN\")},\n+\t))\n+\n+\tcommentsReq
      := octo.IssuesListCommentsReq{\n+\t\tOwner:       \"golang\",\n+\t\tRepo:        \"go\",\n+\t\tIssueNumber:
      1,\n+\t\tSince:       octo.ISOTimeString(time.Now().AddDate(-20, 0, 0)),\n+\t\tPerPage:     octo.Int64(4),\n+\t}\n+\n+\treq,
      err := commentsReq.HTTPRequest(ctx)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tfmt.Println(\"these
      accounts commented on golang/go''s first issue:\")\n+\tfor {\n+\t\tvar resp
      *http.Response\n+\t\tresp, err = httpClient.Do(req)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\tif
      resp.StatusCode == 200 {\n+\t\t\tvar result octo.IssuesListCommentsResponseBody200\n+\t\t\terr
      = json.NewDecoder(resp.Body).Decode(&result)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Fatal(err)\n+\t\t\t}\n+\t\t\tfor
      _, r := range result {\n+\t\t\t\tfmt.Println(r.User.Login)\n+\t\t\t}\n+\t\t}\n+\t\treq,
      err = octo.ResponseNextPageReq(ctx, req, resp)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\tif
      req == nil {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}"},{"sha":"0764acf68b1b8e658add8663b07d9fec175f53be","filename":"examples/simple/simple.go","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/examples/simple/simple.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/examples/simple/simple.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/examples/simple/simple.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,46 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n+\n+\t\"github.com/willabides/octo-go\"\n+\t\"golang.org/x/oauth2\"\n+)\n+\n+func
      main() {\n+\tctx := context.Background()\n+\n+\thttpClient := oauth2.NewClient(ctx,
      oauth2.StaticTokenSource(\n+\t\t&oauth2.Token{AccessToken: os.Getenv(\"GITHUB_TOKEN\")},\n+\t))\n+\n+\treq,
      err := octo.IssuesGetReq{\n+\t\tOwner:               \"golang\",\n+\t\tRepo:                \"go\",\n+\t\tIssueNumber:         1,\n+\t}.HTTPRequest(ctx)\n+\n+\tif
      err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tresp, err := httpClient.Do(req)\n+\tif
      err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tif resp.StatusCode != 200 {\n+\t\tlog.Fatal(\"unexpected
      status code\")\n+\t}\n+\n+\tvar issue octo.IssuesGetResponseBody200\n+\terr
      = octo.UnmarshalResponseBody(resp, &issue)\n+\tif err != nil {\n+\t\tlog.Fatal(\"unexpected
      status code\")\n+\t}\n+\n+\tfmt.Printf(\"golang/go''s first issue is titled
      %q and has %d comments\\n\", issue.Title, issue.Comments)\n+}"},{"sha":"807053b0e59bc374478580d9429e5ef17da4e616","filename":"generator/gen.go","status":"added","additions":503,"deletions":0,"changes":503,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/generator/gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/generator/gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/generator/gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,503 @@\n+package main\n+\n+import (\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n+\t\"regexp\"\n+\t\"sort\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\t\"github.com/dave/jennifer/jen\"\n+\t\"github.com/mitchellh/go-wordwrap\"\n+\t\"github.com/willabides/octo-go/generator/internal/model\"\n+\t\"github.com/willabides/octo-go/generator/internal/model/openapi\"\n+)\n+\n+func
      main() {\n+\tvar schemaPath string\n+\tvar outputPath string\n+\tvar pkgPath
      string\n+\tvar pkgName string\n+\tflag.StringVar(&schemaPath, \"schema\", \"\",
      \"path to openapi schema\")\n+\tflag.StringVar(&outputPath, \"out\", \"\", \"directory
      to write all these files\")\n+\tflag.StringVar(&pkgPath, \"pkgpath\", \"\",
      \"path for output package\")\n+\tflag.StringVar(&pkgName, \"pkg\", \"\", \"name
      for output package\")\n+\tflag.Parse()\n+\tschemaFile, err := os.Open(schemaPath)
      //nolint:gosec\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tendpoints,
      err := openapi.EndpointsFromSchema(schemaFile)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\n+\tconcernFiles
      := map[string]*jen.File{}\n+\n+\tfor _, endpoint := range endpoints {\n+\t\tif
      concernFiles[endpoint.Concern] == nil {\n+\t\t\tcf := jen.NewFilePathName(pkgPath,
      pkgName)\n+\t\t\tcf.HeaderComment(\"Code generated by octo-go; DO NOT EDIT.\")\n+\t\t\tconcernFiles[endpoint.Concern]
      = cf\n+\t\t}\n+\t\tfile := concernFiles[endpoint.Concern]\n+\t\taddRequestStruct(file,
      endpoint)\n+\t\taddRequestBody(file, endpoint)\n+\t\taddResponseBodies(file,
      endpoint)\n+\t}\n+\n+\tfor concern, concernFile := range concernFiles {\n+\t\tname
      := fmt.Sprintf(\"zz_%s_gen.go\", strings.ReplaceAll(concern, \"-\", \"_\"))\n+\t\tf,
      err := os.Create(name)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\terr
      = concernFile.Render(f)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t}\n+}\n+\n+func
      reqBodyStructName(endpoint model.Endpoint) string {\n+\treturn toArgName(fmt.Sprintf(\"%s-%s-req-body\",
      endpoint.Concern, endpoint.Name))\n+}\n+\n+func reqStructName(endpoint model.Endpoint)
      string {\n+\treturn toArgName(fmt.Sprintf(\"%s-%s-req\", endpoint.Concern, endpoint.Name))\n+}\n+\n+func
      respStructName(endpoint model.Endpoint, code int) string {\n+\treturn toArgName(fmt.Sprintf(\"%s-%s-response-body%d\",
      endpoint.Concern, endpoint.Name, code))\n+}\n+\n+func toArgName(in string) string
      {\n+\tout := in\n+\tfor _, separator := range []string{\"_\", \"-\", \".\"}
      {\n+\t\twords := strings.Split(out, separator)\n+\t\tfor i, word := range words
      {\n+\t\t\twords[i] = strings.Title(word)\n+\t\t}\n+\t\tout = strings.Join(words,
      \"\")\n+\t}\n+\treturn out\n+}\n+\n+func addRequestStruct(file *jen.File, endpoint
      model.Endpoint) {\n+\tstructName := reqStructName(endpoint)\n+\tfile.Commentf(\"%s
      builds requests for \\\"%s\\\"\\n\\n%s.\\n\\n  %s %s\\n\\n%s\",\n+\t\tstructName,\n+\t\tendpoint.ID,\n+\t\tendpoint.Summary,\n+\t\tendpoint.Method,\n+\t\tendpoint.Path,\n+\t\tendpoint.DocsURL,\n+\t)\n+\tfile.Type().Id(structName).StructFunc(func(group
      *jen.Group) {\n+\t\tfor _, param := range endpoint.PathParams {\n+\t\t\tif param.HelpText
      != \"\" {\n+\t\t\t\tgroup.Line().Comment(wordwrap.WrapString(param.HelpText,
      80))\n+\t\t\t}\n+\t\t\tgroup.Id(toArgName(param.Name)).Add(paramSchemaFieldType(param.Schema,
      []string{endpoint.ID, \"PATH_PARAMS\"}, false))\n+\t\t}\n+\t\tfor _, param :=
      range endpoint.QueryParams {\n+\t\t\tif param.HelpText != \"\" {\n+\t\t\t\tgroup.Line().Comment(wordwrap.WrapString(param.HelpText,
      80))\n+\t\t\t}\n+\t\t\tgroup.Id(toArgName(param.Name)).Op(\"*\").Add(paramSchemaFieldType(param.Schema,
      []string{endpoint.ID, \"QUERY_PARAMS\"}, true))\n+\t\t}\n+\t\tif endpoint.JSONBodySchema
      != nil {\n+\t\t\tgroup.Id(\"RequestBody\").Id(reqBodyStructName(endpoint))\n+\t\t}\n+\t\tfor
      _, param := range endpoint.Headers {\n+\t\t\tif param.Name == \"accept\" {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tif
      param.HelpText != \"\" {\n+\t\t\t\tgroup.Line().Comment(wordwrap.WrapString(param.HelpText,
      80))\n+\t\t\t}\n+\t\t\tgroup.Id(toArgName(param.Name + \"-header\")).Op(\"*\").Add(paramSchemaFieldType(param.Schema,
      []string{endpoint.ID, \"QUERY_PARAMS\"}, true))\n+\t\t}\n+\t\tfor _, preview
      := range endpoint.Previews {\n+\t\t\tif preview.Note != \"\" {\n+\t\t\t\tgroup.Line().Comment(wordwrap.WrapString(fixPreviewNote(preview.Note),
      80))\n+\t\t\t}\n+\t\t\tgroup.Id(toArgName(preview.Name + \"-preview\")).Bool()\n+\t\t}\n+\t})\n+\n+\tfile.Add(endpointURLPathFunc(endpoint))\n+\tfile.Line()\n+\tfile.Func().Params(jen.Id(\"r\").Id(structName)).Id(\"method\").Params().String().Block(\n+\t\tjen.Return(jen.Lit(endpoint.Method)),\n+\t)\n+\tfile.Line()\n+\tqueryFunc
      := endpointURLQueryFunc(endpoint)\n+\tif queryFunc != nil {\n+\t\tfile.Add(queryFunc)\n+\t\tfile.Line()\n+\t}\n+\theaderFunc
      := endpointHeadersFunc(endpoint)\n+\tif headerFunc != nil {\n+\t\tfile.Add(headerFunc)\n+\t\tfile.Line()\n+\t}\n+\tfile.Add(endpointHTTPRequestFunc(endpoint))\n+}\n+\n+func
      endpointHTTPRequestFunc(endpoint model.Endpoint) *jen.Statement {\n+\tstructName
      := reqStructName(endpoint)\n+\tstmt := jen.Func().Params(jen.Id(\"r\").Id(structName)).Id(\"HTTPRequest\").Params(\n+\t\tjen.Id(\"ctx\").Qual(\"context\",
      \"Context\"),\n+\t\tjen.Id(\"opt ...RequestOption\"),\n+\t)\n+\tstmt.Params(jen.Op(\"*\").Qual(\"net/http\",
      \"Request\"), jen.Error())\n+\tstmt.BlockFunc(func(funcBlock *jen.Group) {\n+\t\tif
      endpoint.JSONBodySchema == nil {\n+\t\t\tfuncBlock.Return(jen.Id(`httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)`))\n+\t\t} else
      {\n+\t\t\tfuncBlock.Return(jen.Id(`httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)`))\n+\t\t}\n+\t})\n+\treturn stmt\n+}\n+\n+func
      endpointHeadersFunc(endpoint model.Endpoint) *jen.Statement {\n+\tif len(endpoint.Headers)+len(endpoint.Previews)
      == 0 {\n+\t\treturn nil\n+\t}\n+\tstructName := reqStructName(endpoint)\n+\tstmt
      := jen.Func().Params(jen.Id(\"r\").Id(structName)).Id(\"header\").Params().Qual(\"net/http\",
      \"Header\")\n+\tstmt.BlockFunc(func(fnBlock *jen.Group) {\n+\t\tfnBlock.Id(\"headerVals\").Op(\":=\").Map(jen.String()).Op(\"*\").String().Values(\n+\t\t\tjen.DictFunc(func(dict
      jen.Dict) {\n+\t\t\t\tfor _, header := range endpoint.Headers {\n+\t\t\t\t\tif
      header.Name == \"accept\" {\n+\t\t\t\t\t\tcontinue\n+\t\t\t\t\t}\n+\t\t\t\t\tdict[jen.Lit(header.Name)]
      = jen.Id(\"r\").Dot(toArgName(header.Name + \"-header\"))\n+\t\t\t\t}\n+\t\t\t}),\n+\t\t)\n+\t\tfnBlock.Id(\"previewVals\").Op(\":=\").Map(jen.String()).Bool().Values(\n+\t\t\tjen.DictFunc(func(dict
      jen.Dict) {\n+\t\t\t\tfor _, preview := range endpoint.Previews {\n+\t\t\t\t\tdict[jen.Lit(preview.Name)]
      = jen.Id(\"r\").Dot(toArgName(preview.Name + \"-preview\"))\n+\t\t\t\t}\n+\t\t\t}),\n+\t\t)\n+\t\tfnBlock.Return(jen.Id(\"requestHeaders\")).Params(\n+\t\t\tjen.Id(\"headerVals\"),\n+\t\t\tjen.Id(\"previewVals\"),\n+\t\t)\n+\t})\n+\treturn
      stmt\n+}\n+\n+func endpointURLPathFunc(endpoint model.Endpoint) *jen.Statement
      {\n+\tstructName := reqStructName(endpoint)\n+\treturn jen.Func().Params(jen.Id(\"r\").Id(structName)).Id(\"urlPath\").Params().String().\n+\t\tBlockFunc(func(group
      *jen.Group) {\n+\t\t\tpth := bracesExp.ReplaceAllString(endpoint.Path, \"%v\")\n+\t\t\tgroup.Return(jen.Qual(\"fmt\",
      \"Sprintf\").ParamsFunc(func(group *jen.Group) {\n+\t\t\t\tgroup.Lit(pth)\n+\t\t\t\tfor
      _, param := range endpoint.PathParams {\n+\t\t\t\t\tgroup.Id(\"r\").Dot(toArgName(param.Name))\n+\t\t\t\t}\n+\t\t\t}))\n+\t\t})\n+}\n+\n+func
      endpointURLQueryFunc(endpoint model.Endpoint) *jen.Statement {\n+\tstructName
      := reqStructName(endpoint)\n+\tstmt := jen.Func().Params(jen.Id(\"r\").Id(structName)).Id(\"urlQuery\").Params()\n+\tstmt.Qual(\"net/url\",
      \"Values\")\n+\tstmt.BlockFunc(func(group *jen.Group) {\n+\t\tgroup.Id(\"query\").Op(\":=\").Qual(\"net/url\",
      \"Values\").Block()\n+\n+\t\tfor _, param := range endpoint.QueryParams {\n+\t\t\tparamArg
      := jen.Id(\"r\").Dot(toArgName(param.Name))\n+\t\t\tgroup.If(paramArg.Clone().Op(\"!=\").Nil()).BlockFunc(func(ifGroup
      *jen.Group) {\n+\t\t\t\tvar valStmt *jen.Statement\n+\t\t\t\tswitch param.Schema.Type
      {\n+\t\t\t\tcase model.ParamTypeString:\n+\t\t\t\t\tvalStmt = jen.Op(\"*\").Add(paramArg)\n+\t\t\t\tcase
      model.ParamTypeInt:\n+\t\t\t\t\tvalStmt = jen.Qual(\"strconv\", \"FormatInt\").Params(jen.Op(\"*\").Add(paramArg),
      jen.Lit(10))\n+\t\t\t\tcase model.ParamTypeBool:\n+\t\t\t\t\tvalStmt = jen.Qual(\"strconv\",
      \"FormatBool\").Params(jen.Op(\"*\").Add(paramArg))\n+\t\t\t\tdefault:\n+\t\t\t\t\tfmt.Printf(\"UNEXPECTED
      %v\\n\", param)\n+\t\t\t\t}\n+\t\t\t\tifGroup.Id(\"query\").Dot(\"Set\").Params(jen.Lit(param.Name),
      valStmt)\n+\t\t\t})\n+\t\t}\n+\t\tgroup.Return(jen.Id(\"query\"))\n+\t})\n+\treturn
      stmt\n+}\n+\n+var bracesExp = regexp.MustCompile(`{[^}]+}`)\n+\n+func addResponseBodies(file
      *jen.File, endpoint model.Endpoint) int {\n+\tif len(endpoint.Responses) ==
      0 {\n+\t\treturn 0\n+\t}\n+\tsortedCodes := make([]int, 0, len(endpoint.Responses))\n+\tfor
      code := range endpoint.Responses {\n+\t\tsortedCodes = append(sortedCodes, code)\n+\t}\n+\tsort.Ints(sortedCodes)\n+\tfor
      _, respCode := range sortedCodes {\n+\t\tschema := endpoint.Responses[respCode]\n+\t\ttp
      := paramSchemaFieldType(schema, []string{endpoint.ID, \"responseBody\", strconv.Itoa(respCode)},
      false)\n+\t\tif tp == nil {\n+\t\t\tcontinue\n+\t\t}\n+\t\tstructName := respStructName(endpoint,
      respCode)\n+\t\tfile.Commentf(\"%s is a response body for %s\\n\\nAPI documentation:
      %s\",\n+\t\t\tstructName,\n+\t\t\tendpoint.ID,\n+\t\t\tendpoint.DocsURL,\n+\t\t)\n+\t\tfile.Type().Id(respStructName(endpoint,
      respCode)).Add(tp)\n+\t}\n+\treturn len(sortedCodes)\n+}\n+\n+func addRequestBody(file
      *jen.File, endpoint model.Endpoint) int {\n+\tif endpoint.JSONBodySchema ==
      nil {\n+\t\treturn 0\n+\t}\n+\ttp := paramSchemaFieldType(endpoint.JSONBodySchema,
      []string{endpoint.ID, \"requestBody\"}, true)\n+\tif tp == nil {\n+\t\treturn
      0\n+\t}\n+\n+\tstructName := reqBodyStructName(endpoint)\n+\tfile.Commentf(\"%s
      is a request body for %s\\n\\nAPI documentation: %s\",\n+\t\tstructName,\n+\t\tendpoint.ID,\n+\t\tendpoint.DocsURL,\n+\t)\n+\tfile.Type().Id(structName).Add(tp)\n+\treturn
      1\n+}\n+\n+func massageName(name string) string {\n+\tname = strings.ReplaceAll(name,
      \"+\", \"Plus\")\n+\tname = strings.ReplaceAll(name, \"1\", \"One\")\n+\tif
      strings.HasPrefix(name, \"-\") {\n+\t\tname = strings.Replace(name, \"-\", \"Minus\",
      1)\n+\t}\n+\treturn name\n+}\n+\n+func schemaPathString(schemaPath []string)
      string {\n+\treturn strings.Join(schemaPath, \"/\")\n+}\n+\n+var schemaOverrides
      = []func(schemaPath []string, schema *model.ParamSchema){\n+\t// list-languages
      returns a map\n+\tfunc(schemaPath []string, schema *model.ParamSchema) {\n+\t\tif
      schemaPathString(schemaPath) != \"repos/list-languages/responseBody/200\" {\n+\t\t\treturn\n+\t\t}\n+\t\tschema.Type
      = model.ParamTypeObject\n+\t\tschema.ObjectParams = nil\n+\t\tschema.ItemSchema
      = &model.ParamSchema{\n+\t\t\tType: model.ParamTypeInt,\n+\t\t}\n+\t},\n+\n+\t//
      reactions are maps\n+\tfunc(schemaPath []string, schema *model.ParamSchema)
      {\n+\t\tif !strings.HasSuffix(schemaPathString(schemaPath), \"/reactions\")
      || schema.Type != model.ParamTypeObject {\n+\t\t\treturn\n+\t\t}\n+\t\tvar found
      bool\n+\t\tfor _, objectParam := range schema.ObjectParams {\n+\t\t\tif objectParam.Name
      == \"+1\" {\n+\t\t\t\tfound = true\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\tif
      !found {\n+\t\t\treturn\n+\t\t}\n+\t\tschema.ObjectParams = nil\n+\t\tschema.ItemSchema
      = &model.ParamSchema{\n+\t\t\tType: model.ParamTypeInt,\n+\t\t}\n+\t},\n+\t//
      a lot of numbers should be integers\n+\tfunc(schemaPath []string, schema *model.ParamSchema)
      {\n+\t\tif schema.Type != model.ParamTypeNumber {\n+\t\t\treturn\n+\t\t}\n+\t\tsuffixes
      := []string{\n+\t\t\t\"_count\",\n+\t\t\t\"/count\",\n+\t\t\t\"/id\",\n+\t\t\t\"_id\",\n+\t\t\t\"price_in_cents\",\n+\t\t\t\"/comments\",\n+\t\t\t\"/commits\",\n+\t\t\t\"/total_private_repos\",\n+\t\t\t\"/total_commits\",\n+\t\t\t\"/total_ms\",\n+\t\t\t\"/total\",\n+\t\t\t\"/totalResults\",\n+\t\t\t\"/additions\",\n+\t\t\t\"/deletions\",\n+\t\t\t\"_issues\",\n+\t\t\t\"/line\",\n+\t\t\t\"_line\",\n+\t\t\t\"/number\",\n+\t\t\t\"_number\",\n+\t\t\t\"_repos\",\n+\t\t\t\"/startIndex\",\n+\t\t\t\"_position\",\n+\t\t\t\"/position\",\n+\t\t\t\"/jobs\",\n+\t\t\t\"/ahead_by\",\n+\t\t\t\"/behind_by\",\n+\t\t\t\"/changed_files\",\n+\t\t\t\"/changes\",\n+\t\t\t\"/collaborators\",\n+\t\t\t\"/contributions\",\n+\t\t\t\"/duration\",\n+\t\t\t\"/uniques\",\n+\t\t\t\"/week\",\n+\t\t\t\"/limit\",\n+\t\t\t\"/itemsPerPage\",\n+\t\t\t\"_gists\",\n+\t\t\t\"/followers\",\n+\t\t\t\"/remaining\",\n+\t\t\t\"/following\",\n+\t\t\t\"_column\",\n+\t\t\t\"/reset\",\n+\t\t\t\"/size_in_bytes\",\n+\t\t\t\"_comments\",\n+\t\t\t\"/run_duration_ms\",\n+\t\t\t\"weeks/ITEM_SCHEMA/a\",\n+\t\t\t\"weeks/ITEM_SCHEMA/c\",\n+\t\t\t\"weeks/ITEM_SCHEMA/d\",\n+\t\t\t\"repos/get-punch-card-stats/responseBody/200/ITEM_SCHEMA/ITEM_SCHEMA\",\n+\t\t\t\"repos/get-code-frequency-stats/responseBody/200/ITEM_SCHEMA/ITEM_SCHEMA\",\n+\t\t\t\"repos/get-participation-stats/responseBody/200/all/ITEM_SCHEMA\",\n+\t\t\t\"repos/get-participation-stats/responseBody/200/owner/ITEM_SCHEMA\",\n+\t\t\t\"repos/get-commit-activity-stats/responseBody/200/ITEM_SCHEMA/days/ITEM_SCHEMA\",\n+\t\t}\n+\t\tsPath
      := schemaPathString(schemaPath)\n+\t\tfor _, suffix := range suffixes {\n+\t\t\tif
      strings.HasSuffix(sPath, suffix) {\n+\t\t\t\tschema.Type = model.ParamTypeInt\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t},\n+}\n+\n+func
      overrideParamSchema(schemaPath []string, schema *model.ParamSchema) {\n+\tif
      schema == nil {\n+\t\treturn\n+\t}\n+\tfor _, override := range schemaOverrides
      {\n+\t\toverride(schemaPath, schema)\n+\t}\n+}\n+\n+func paramSchemaFieldType(schema
      *model.ParamSchema, schemaPath []string, usePointers bool) *jen.Statement {\n+\toverrideParamSchema(schemaPath,
      schema)\n+\tif schema == nil {\n+\t\treturn nil\n+\t}\n+\tswitch schema.Type
      {\n+\tcase model.ParamTypeString:\n+\t\treturn jen.String()\n+\tcase model.ParamTypeInt:\n+\t\treturn
      jen.Int64()\n+\tcase model.ParamTypeBool:\n+\t\treturn jen.Bool()\n+\tcase model.ParamTypeNumber:\n+\t\treturn
      jen.Qual(\"encoding/json\", \"Number\")\n+\tcase model.ParamTypeInterface:\n+\t\treturn
      jen.Interface()\n+\tcase model.ParamTypeArray:\n+\t\treturn jen.Id(\"[]\").Add(paramSchemaFieldType(schema.ItemSchema,
      append(schemaPath, \"ITEM_SCHEMA\"), usePointers))\n+\tcase model.ParamTypeObject:\n+\t\treturn
      paramSchemaObjectFieldType(schema, schemaPath, usePointers)\n+\t}\n+\treturn
      nil\n+}\n+\n+func paramSchemaObjectFieldType(schema *model.ParamSchema, schemaPath
      []string, usePointers bool) *jen.Statement {\n+\tif len(schema.ObjectParams)
      > 0 {\n+\t\treturn jen.StructFunc(func(group *jen.Group) {\n+\t\t\tfor _, param
      := range schema.ObjectParams {\n+\t\t\t\tif param.HelpText != \"\" {\n+\t\t\t\t\tgroup.Line()\n+\t\t\t\t}\n+\t\t\t\tgStmt
      := jen.Id(toArgName(massageName(param.Name)))\n+\t\t\t\tpType := paramSchemaFieldType(param.Schema,
      append(schemaPath, param.Name), usePointers)\n+\t\t\t\tif usePointers && needsPointer(param.Schema)
      {\n+\t\t\t\t\tgStmt.Op(\"*\")\n+\t\t\t\t}\n+\t\t\t\tjsonTag := param.Name\n+\t\t\t\tif
      !param.Required {\n+\t\t\t\t\tjsonTag += \",omitempty\"\n+\t\t\t\t}\n+\t\t\t\tif
      param.HelpText != \"\" {\n+\t\t\t\t\tgroup.Comment(wordwrap.WrapString(param.HelpText,
      80))\n+\t\t\t\t}\n+\t\t\t\tgroup.Add(gStmt.Add(pType).Tag(map[string]string{\n+\t\t\t\t\t\"json\":
      jsonTag,\n+\t\t\t\t}))\n+\t\t\t}\n+\t\t})\n+\t}\n+\tif schema.ItemSchema !=
      nil {\n+\t\tstmt := jen.Map(jen.String())\n+\t\tif usePointers && needsPointer(schema.ItemSchema)
      {\n+\t\t\tstmt.Op(\"*\")\n+\t\t}\n+\t\treturn stmt.Add(paramSchemaFieldType(schema.ItemSchema,
      append(schemaPath, \"ITEM_SCHEMA\"), usePointers))\n+\t}\n+\treturn jen.Interface()\n+}\n+\n+func
      needsPointer(schema *model.ParamSchema) bool {\n+\tif schema.Type == model.ParamTypeInterface
      {\n+\t\treturn false\n+\t}\n+\tif schema.Type == model.ParamTypeArray {\n+\t\treturn
      false\n+\t}\n+\tif schema.Type == model.ParamTypeObject && len(schema.ObjectParams)
      == 0 {\n+\t\treturn false\n+\t}\n+\treturn true\n+}\n+\n+func fixPreviewNote(note
      string) string {\n+\tnote = strings.TrimSpace(note)\n+\tnote = strings.Split(note,
      \"```\")[0]\n+\tnote = strings.TrimSpace(note)\n+\tsetThisFlagPhrases := []string{\n+\t\t\"provide
      a custom [media type](https://developer.github.com/v3/media) in the `Accept`
      header\",\n+\t\t\"provide a custom [media type](https://developer.github.com/v3/media)
      in the `Accept` Header\",\n+\t\t\"provide the following custom [media type](https://developer.github.com/v3/media)
      in the `Accept` header\",\n+\t}\n+\tfor _, phrase := range setThisFlagPhrases
      {\n+\t\tnote = strings.ReplaceAll(note, phrase, \"set this to true\")\n+\t}\n+\tnote
      = strings.TrimSpace(note)\n+\tnote = strings.TrimSuffix(note, \":\")\n+\tnote
      = strings.TrimSpace(note)\n+\tnote = strings.TrimSuffix(note, \".\") + \".\"\n+\treturn
      note\n+}"},{"sha":"04de8ca85ea7a2d5e83e83fbb0fec93754b4ec12","filename":"generator/internal/model/model.go","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/generator/internal/model/model.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/generator/internal/model/model.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/generator/internal/model/model.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,89 @@\n+package model\n+\n+type Endpoint struct {\n+\tGithubCloudOnly
      bool\n+\tEnabledForApps  bool\n+\tLegacy          bool\n+\tDeprecated      bool\n+\tJSONBodySchema  *ParamSchema\n+\tID              string\n+\tPath            string\n+\tMethod          string\n+\tName            string\n+\tConcern         string\n+\tDocsURL         string\n+\tSummary         string\n+\tHelpText        string\n+\tPathParams      Params\n+\tQueryParams     Params\n+\tHeaders         Params\n+\tPreviews        []Preview\n+\tResponses       map[int]*ParamSchema\n+}\n+\n+type
      Preview struct {\n+\tRequired bool\n+\tName     string\n+\tNote     string\n+}\n+\n+type
      ParamType int\n+\n+const (\n+\tParamTypeInvalid ParamType = iota\n+\tParamTypeString\n+\tParamTypeInt\n+\tParamTypeBool\n+\tParamTypeNumber\n+\tParamTypeInterface\n+\tParamTypeObject\n+\tParamTypeArray\n+)\n+\n+type
      ParamSchema struct {\n+\tType         ParamType\n+\tItemSchema   *ParamSchema\n+\tObjectParams
      []Param\n+}\n+\n+func (p *ParamSchema) Clone() *ParamSchema {\n+\tresult :=
      ParamSchema{\n+\t\tType: p.Type,\n+\t}\n+\tif p.ObjectParams != nil {\n+\t\tresult.ObjectParams
      = make([]Param, len(p.ObjectParams))\n+\t\tfor i, objectParam := range p.ObjectParams
      {\n+\t\t\tresult.ObjectParams[i] = objectParam.Clone()\n+\t\t}\n+\t}\n+\tif
      p.ItemSchema != nil {\n+\t\tresult.ItemSchema = p.ItemSchema.Clone()\n+\t}\n+\treturn
      &result\n+}\n+\n+type Param struct {\n+\tRequired bool\n+\tName     string\n+\tHelpText
      string\n+\tSchema   *ParamSchema\n+}\n+\n+func (p Param) Clone() Param {\n+\tq
      := p\n+\tq.Schema = q.Schema.Clone()\n+\treturn q\n+}\n+\n+type Params []Param\n+\n+func
      (p Params) Clone() Params {\n+\tif p == nil {\n+\t\treturn nil\n+\t}\n+\tresult
      := make(Params, len(p))\n+\tfor i, param := range p {\n+\t\tresult[i] = param.Clone()\n+\t}\n+\treturn
      result\n+}"},{"sha":"66242bd4f43dfe02cf052ddae659591048c7c114","filename":"generator/internal/model/openapi/openapi.go","status":"added","additions":251,"deletions":0,"changes":251,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/generator/internal/model/openapi/openapi.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/generator/internal/model/openapi/openapi.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/generator/internal/model/openapi/openapi.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,251 @@\n+package openapi\n+\n+import (\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"path\"\n+\t\"sort\"\n+\t\"strconv\"\n+\t\"strings\"\n+\n+\t\"github.com/getkin/kin-openapi/openapi3\"\n+\t\"github.com/pkg/errors\"\n+\t\"github.com/willabides/octo-go/generator/internal/model\"\n+)\n+\n+func
      EndpointsFromSchema(schemaSrc io.Reader) ([]model.Endpoint, error) {\n+\tdata,
      err := ioutil.ReadAll(schemaSrc)\n+\tif err != nil {\n+\t\treturn nil, fmt.Errorf(\"could
      not read from schemaSrc\")\n+\t}\n+\tswagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(data)\n+\tif
      err != nil {\n+\t\treturn nil, fmt.Errorf(\"could not load openapiDef\")\n+\t}\n+\treturn
      buildEndpoints(swagger)\n+}\n+\n+func buildEndpoints(swagger *openapi3.Swagger)
      ([]model.Endpoint, error) {\n+\tvar endpoints []model.Endpoint\n+\tfor opPath,
      pathItem := range swagger.Paths {\n+\t\tfor method, op := range pathItem.Operations()
      {\n+\t\t\tendpoint, err := buildEndpoint(opPath, method, op)\n+\t\t\tif err
      != nil {\n+\t\t\t\treturn nil, err\n+\t\t\t}\n+\t\t\tendpoints = append(endpoints,
      *endpoint)\n+\t\t}\n+\t}\n+\treturn endpoints, nil\n+}\n+\n+func buildEndpoint(opPath,
      httpMethod string, op *openapi3.Operation) (*model.Endpoint, error) {\n+\tendpoint
      := model.Endpoint{\n+\t\tPath:       opPath,\n+\t\tMethod:     httpMethod,\n+\t\tName:       path.Base(op.OperationID),\n+\t\tConcern:    path.Dir(op.OperationID),\n+\t\tSummary:    op.Summary,\n+\t\tHelpText:   op.Description,\n+\t\tDeprecated:
      op.Deprecated,\n+\t\tID:         op.OperationID,\n+\t}\n+\text, err := opExtGithub(op)\n+\tif
      err != nil {\n+\t\treturn nil, errors.WithStack(err)\n+\t}\n+\tif ext != nil
      {\n+\t\tendpoint.EnabledForApps = ext.EnabledForApps\n+\t\tendpoint.GithubCloudOnly
      = ext.GithubCloudOnly\n+\t\tendpoint.Legacy = ext.Legacy\n+\t\tfor _, preview
      := range ext.Previews {\n+\t\t\tendpoint.Previews = append(endpoint.Previews,
      model.Preview{\n+\t\t\t\tRequired: preview.Required,\n+\t\t\t\tName:     preview.Name,\n+\t\t\t\tNote:     preview.Note,\n+\t\t\t})\n+\t\t}\n+\t}\n+\tif
      op.ExternalDocs != nil {\n+\t\tendpoint.DocsURL = op.ExternalDocs.URL\n+\t}\n+\tfor
      _, pRef := range op.Parameters {\n+\t\tvar param *model.Param\n+\t\tparam, err
      = buildParam(pRef.Value)\n+\t\tif err != nil {\n+\t\t\treturn nil, errors.WithStack(err)\n+\t\t}\n+\t\tswitch
      pRef.Value.In {\n+\t\tcase openapi3.ParameterInQuery:\n+\t\t\tendpoint.QueryParams
      = append(endpoint.QueryParams, *param)\n+\t\tcase openapi3.ParameterInHeader:\n+\t\t\tendpoint.Headers
      = append(endpoint.Headers, *param)\n+\t\tcase openapi3.ParameterInPath:\n+\t\t\tendpoint.PathParams
      = append(endpoint.PathParams, *param)\n+\t\t}\n+\t}\n+\tendpoint.Responses,
      err = responseSchemas(op)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err,
      fmt.Sprintf(\"error processing responses from operation %q\", op.OperationID))\n+\t}\n+\tendpoint.JSONBodySchema,
      err = jsonBodySchema(op)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err,
      fmt.Sprintf(\"error processing operation %q\", op.OperationID))\n+\t}\n+\treturn
      &endpoint, nil\n+}\n+\n+var op2modelTypes = map[string]model.ParamType{\n+\t\"string\":  model.ParamTypeString,\n+\t\"integer\":
      model.ParamTypeInt,\n+\t\"boolean\": model.ParamTypeBool,\n+\t\"object\":  model.ParamTypeObject,\n+\t\"\":        model.ParamTypeInterface,\n+\t\"array\":   model.ParamTypeArray,\n+\t\"number\":  model.ParamTypeNumber,\n+}\n+\n+func
      opSchemaType(opSchema *openapi3.Schema) model.ParamType {\n+\tif strings.HasPrefix(opSchema.Type,
      \"[]\") {\n+\t\treturn model.ParamTypeArray\n+\t}\n+\treturn op2modelTypes[opSchema.Type]\n+}\n+\n+func
      opParamSchema(opSchema *openapi3.Schema) (*model.ParamSchema, error) {\n+\tschema
      := model.ParamSchema{\n+\t\tType: opSchemaType(opSchema),\n+\t}\n+\tvar err
      error\n+\tswitch schema.Type {\n+\tcase model.ParamTypeInvalid:\n+\t\treturn
      nil, errors.Errorf(\"unknown schema type %s\", opSchema.Type)\n+\tcase model.ParamTypeArray:\n+\t\tschema.ItemSchema,
      err = opParamSchema(opSchema.Items.Value)\n+\t\tif err != nil {\n+\t\t\treturn
      nil, errors.WithStack(err)\n+\t\t}\n+\tcase model.ParamTypeObject:\n+\t\tif
      opSchema.AdditionalProperties != nil {\n+\t\t\tschema.ItemSchema, err = opParamSchema(opSchema.AdditionalProperties.Value)\n+\t\t\tif
      err != nil {\n+\t\t\t\treturn nil, errors.WithStack(err)\n+\t\t\t}\n+\t\t}\n+\t\tpropNames
      := make([]string, 0, len(opSchema.Properties))\n+\t\tfor name := range opSchema.Properties
      {\n+\t\t\tpropNames = append(propNames, name)\n+\t\t}\n+\t\tsort.Strings(propNames)\n+\t\tfor
      _, name := range propNames {\n+\t\t\tref := opSchema.Properties[name]\n+\t\t\tvar
      objParam *model.Param\n+\t\t\tobjParam, err = opObjectParam(opSchema, ref.Value,
      name)\n+\t\t\tif err != nil {\n+\t\t\t\treturn nil, errors.WithStack(err)\n+\t\t\t}\n+\t\t\tschema.ObjectParams
      = append(schema.ObjectParams, *objParam)\n+\t\t}\n+\t}\n+\treturn &schema, nil\n+}\n+\n+func
      opObjectParam(opSchema, propSchema *openapi3.Schema, name string) (*model.Param,
      error) {\n+\tparam := model.Param{\n+\t\tName:     name,\n+\t\tHelpText: propSchema.Description,\n+\t}\n+\tfor
      _, reqName := range opSchema.Required {\n+\t\tif name == reqName {\n+\t\t\tparam.Required
      = true\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tvar err error\n+\tparam.Schema, err =
      opParamSchema(propSchema)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err,
      \"error runing opParamSchema on param named %s\", name)\n+\t}\n+\treturn &param,
      nil\n+}\n+\n+func buildParam(opParam *openapi3.Parameter) (*model.Param, error)
      {\n+\tschema, err := opParamSchema(opParam.Schema.Value)\n+\tif err != nil {\n+\t\treturn
      nil, err\n+\t}\n+\tparam := model.Param{\n+\t\tRequired: opParam.Required,\n+\t\tName:     opParam.Name,\n+\t\tHelpText:
      opParam.Description,\n+\t\tSchema:   schema,\n+\t}\n+\treturn &param, nil\n+}\n+\n+func
      opExtGithub(op *openapi3.Operation) (*extGithub, error) {\n+\txMsg, ok := op.Extensions[\"x-github\"].(json.RawMessage)\n+\tif
      !ok {\n+\t\treturn nil, nil\n+\t}\n+\tvar ext extGithub\n+\terr := json.Unmarshal(xMsg,
      &ext)\n+\tif err != nil {\n+\t\treturn nil, errors.WithStack(err)\n+\t}\n+\treturn
      &ext, nil\n+}\n+\n+type extGithub struct {\n+\tLegacy          bool\n+\tEnabledForApps  bool\n+\tGithubCloudOnly
      bool\n+\tPreviews        []struct {\n+\t\tName     string\n+\t\tRequired bool\n+\t\tNote     string\n+\t}\n+}\n+\n+func
      responseSchemas(op *openapi3.Operation) (map[int]*model.ParamSchema, error)
      {\n+\tresult := make(map[int]*model.ParamSchema, len(op.Responses))\n+\tif len(op.Responses)
      == 0 {\n+\t\treturn result, nil\n+\t}\n+\tfor responseCode, responseRef := range
      op.Responses {\n+\t\tresponseCode := responseCode\n+\t\tresponseRef := responseRef\n+\t\tjsonResponse
      := responseRef.Value.Content.Get(\"application/json\")\n+\t\tif jsonResponse
      == nil {\n+\t\t\tcontinue\n+\t\t}\n+\t\tschema, err := opParamSchema(jsonResponse.Schema.Value)\n+\t\tif
      err != nil {\n+\t\t\treturn nil, errors.WithStack(err)\n+\t\t}\n+\t\tcode, err
      := strconv.Atoi(responseCode)\n+\t\tif err != nil {\n+\t\t\treturn nil, errors.WithStack(err)\n+\t\t}\n+\t\tresult[code]
      = schema\n+\t}\n+\n+\treturn result, nil\n+}\n+\n+func jsonBodySchema(op *openapi3.Operation)
      (*model.ParamSchema, error) {\n+\tif op.RequestBody == nil || op.RequestBody.Value
      == nil {\n+\t\treturn nil, nil\n+\t}\n+\tmt := op.RequestBody.Value.GetMediaType(\"application/json\")\n+\tif
      mt == nil {\n+\t\treturn nil, nil\n+\t}\n+\tschema, err := opParamSchema(mt.Schema.Value)\n+\tif
      err != nil {\n+\t\treturn nil, errors.WithStack(err)\n+\t}\n+\treturn schema,
      nil\n+}"},{"sha":"1009ee8108b201d911118883ff47b75af8a2d8c7","filename":"go.mod","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/go.mod","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/go.mod","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/go.mod?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -1,5 +1,11 @@\n-module github.com/willabides/goproject-tmpl\n+module github.com/willabides/octo-go\n
      \n go 1.14\n \n-require github.com/stretchr/testify v1.5.1\n+require (\n+\tgithub.com/dave/jennifer
      v1.4.0\n+\tgithub.com/getkin/kin-openapi v0.8.0\n+\tgithub.com/mitchellh/go-wordwrap
      v1.0.0\n+\tgithub.com/pkg/errors v0.9.1\n+\tgolang.org/x/oauth2 v0.0.0-20200107190931-bf48bf16ab8d\n+)"},{"sha":"c010cccccfea32f3fd60187c92d9ca2e6789220d","filename":"go.sum","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/go.sum","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/go.sum","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/go.sum?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -1,11 +1,35 @@\n+cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\n+github.com/dave/jennifer
      v1.4.0 h1:tNJFJmLDVTLu+v05mVZ88RINa3vQqnyyWkTKWYz0CwE=\n+github.com/dave/jennifer
      v1.4.0/go.mod h1:fIb+770HOpJ2fmN9EPPKOqm1vMGhB+TwXKMZhrIygKg=\n github.com/davecgh/go-spew
      v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\n github.com/davecgh/go-spew
      v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\n+github.com/getkin/kin-openapi
      v0.8.0 h1:a6TQjTqwkyscC4/hShJX7WhCVE+4bi9lzw61XHQW5hE=\n+github.com/getkin/kin-openapi
      v0.8.0/go.mod h1:zZQMFkVgRHCdhgb6ihCTIo9dyDZFvX0k/xAKqw1FhPw=\n+github.com/ghodss/yaml
      v1.0.0 h1:wQHKEahhL6wmXdzwWG11gIVCkOv05bNOh+Rxn0yngAk=\n+github.com/ghodss/yaml
      v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\n+github.com/golang/protobuf
      v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=\n+github.com/golang/protobuf
      v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\n+github.com/mitchellh/go-wordwrap
      v1.0.0 h1:6GlHJ/LTGMrIJbwgdqdl2eEH8o+Exx/0m8ir9Gns0u4=\n+github.com/mitchellh/go-wordwrap
      v1.0.0/go.mod h1:ZXFpozHsX6DPmq2I0TCekCxypsnAUbP2oI0UX1GXzOo=\n+github.com/pkg/errors
      v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\n+github.com/pkg/errors
      v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\n github.com/pmezard/go-difflib
      v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\n github.com/pmezard/go-difflib
      v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\n github.com/stretchr/objx
      v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\n github.com/stretchr/testify
      v1.5.1 h1:nOGnQDM7FYENwehXlg/kFVnos3rEvtKTjRvOWSzb6H4=\n github.com/stretchr/testify
      v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\n+golang.org/x/net
      v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n+golang.org/x/net
      v0.0.0-20190108225652-1e06a53dbb7e h1:bRhVy7zSSasaqNksaRZiA5EEI+Ei4I1nO5Jh72wfHlg=\n+golang.org/x/net
      v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n+golang.org/x/oauth2
      v0.0.0-20200107190931-bf48bf16ab8d h1:TzXSXBo42m9gQenoE3b9BGiEpg5IG2JkU5FkPIawgtw=\n+golang.org/x/oauth2
      v0.0.0-20200107190931-bf48bf16ab8d/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\n+golang.org/x/sync
      v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\n+golang.org/x/text
      v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n+google.golang.org/appengine
      v1.4.0 h1:/wp5JvzpHIxhs/dumFmF7BXTf3Z+dd4uXta4kVyO508=\n+google.golang.org/appengine
      v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\n gopkg.in/check.v1
      v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\n
      gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\n
      gopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=\n gopkg.in/yaml.v2
      v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n+gopkg.in/yaml.v2
      v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\n+gopkg.in/yaml.v2 v2.2.8/go.mod
      h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI="},{"sha":"92a40bc60bfcb7e00ba4a5c0555fada8b8e6d581","filename":"goproject-tmpl.go","status":"removed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/WillAbides/octo-go/blob/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/goproject-tmpl.go","raw_url":"https://github.com/WillAbides/octo-go/raw/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/goproject-tmpl.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/goproject-tmpl.go?ref=2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","patch":"@@
      -1 +0,0 @@\n-package goprojecttmpl"},{"sha":"575531120f5c40c62d96150a88d721ab12863186","filename":"goproject-tmpl_test.go","status":"removed","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/WillAbides/octo-go/blob/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/goproject-tmpl_test.go","raw_url":"https://github.com/WillAbides/octo-go/raw/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/goproject-tmpl_test.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/goproject-tmpl_test.go?ref=2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","patch":"@@
      -1,11 +0,0 @@\n-package goprojecttmpl\n-\n-import (\n-\t\"testing\"\n-\n-\t\"github.com/stretchr/testify/require\"\n-)\n-\n-func
      TestNothing(t *testing.T) {\n-\trequire.True(t, true)\n-}"},{"sha":"70a8835647c0c28e7db7b62b9406b1e3f9c8d992","filename":"octo-go.go","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/octo-go.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/octo-go.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/octo-go.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,147 @@\n+package octo\n+\n+import (\n+\t\"bytes\"\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"path\"\n+\t\"regexp\"\n+\t\"time\"\n+)\n+\n+//go:generate
      go run ./generator -schema \"api.github.com.json\" -pkgpath \"github.com/willabides/octo-go\"
      -pkg octo\n+\n+var relLinkExp = regexp.MustCompile(`<(.+?)>\\s*;\\s*rel=\"([^\"]*)\"`)\n+\n+//ResponseRelLink
      returns a rel link from resp''s Link header\n+func ResponseRelLink(resp *http.Response,
      linkName string) string {\n+\tif resp == nil {\n+\t\treturn \"\"\n+\t}\n+\tfor
      _, link := range resp.Header.Values(\"Link\") {\n+\t\tfor _, match := range
      relLinkExp.FindAllStringSubmatch(link, -1) {\n+\t\t\tif match[2] == linkName
      {\n+\t\t\t\treturn match[1]\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn \"\"\n+}\n+\n+//ResponseNextPageURL
      returns the next page url or \"\"\n+func ResponseNextPageURL(resp *http.Response)
      string {\n+\treturn ResponseRelLink(resp, \"next\")\n+}\n+\n+//ResponsePrevPageURL
      returns the previous page url or \"\"\n+func ResponsePrevPageURL(resp *http.Response)
      string {\n+\treturn ResponseRelLink(resp, \"prev\")\n+}\n+\n+//ResponseFirstPageURL
      returns the first page url or \"\"\n+func ResponseFirstPageURL(resp *http.Response)
      string {\n+\treturn ResponseRelLink(resp, \"first\")\n+}\n+\n+//ResponseLastPageURL
      returns the last page url or \"\"\n+func ResponseLastPageURL(resp *http.Response)
      string {\n+\treturn ResponseRelLink(resp, \"last\")\n+}\n+\n+//UnmarshalResponseBody
      unmarshals resp''s body to target and closes the body\n+func UnmarshalResponseBody(resp
      *http.Response, target interface{}) (err error) {\n+\tdefer func() {\n+\t\terr
      = resp.Body.Close()\n+\t}()\n+\treturn json.NewDecoder(resp.Body).Decode(target)\n+}\n+\n+//ResponseNextPageReq
      returns an http request to get the next page or nil if there is no next page\n+func
      ResponseNextPageReq(ctx context.Context, req *http.Request, resp *http.Response)
      (*http.Request, error) {\n+\treturn responseRelReq(ctx, req, resp, \"next\")\n+}\n+\n+func
      responseRelReq(ctx context.Context, req *http.Request, resp *http.Response,
      link string) (*http.Request, error) {\n+\tnp := ResponseRelLink(resp, link)\n+\tif
      np == \"\" {\n+\t\treturn nil, nil\n+\t}\n+\tu, err := url.Parse(np)\n+\tif
      err != nil {\n+\t\treturn nil, fmt.Errorf(\"could not parse url\")\n+\t}\n+\tresult
      := req.Clone(ctx)\n+\tresult.URL = u\n+\treturn result, nil\n+}\n+\n+func requestHeaders(headers
      map[string]*string, previews map[string]bool) http.Header {\n+\theader := make(http.Header,
      len(headers)+len(previews)+1)\n+\theader.Set(\"Accept\", \"application/vnd.github.v3+json\")\n+\tfor
      k, v := range headers {\n+\t\tif v == nil {\n+\t\t\tcontinue\n+\t\t}\n+\t\theader.Add(k,
      *v)\n+\t}\n+\tfor previewName, ok := range previews {\n+\t\tif !ok {\n+\t\t\tcontinue\n+\t\t}\n+\t\theader.Add(\"Accept\",
      fmt.Sprintf(\"application/vnd.github.%s-preview+json\", previewName))\n+\t}\n+\treturn
      header\n+}\n+\n+func httpRequest(ctx context.Context, urlPath, method string,
      urlQuery url.Values, header http.Header, body interface{}, opts []RequestOption)
      (*http.Request, error) {\n+\toptions := buildRequestOptions(opts)\n+\tvar bodyReader
      io.ReadCloser\n+\tif body != nil {\n+\t\tvar buf bytes.Buffer\n+\t\terr := json.NewEncoder(&buf).Encode(&body)\n+\t\tif
      err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tbodyReader = ioutil.NopCloser(&buf)\n+\t}\n+\tu
      := options.BaseURL\n+\tu.Path = path.Join(u.Path, urlPath)\n+\tu.RawQuery =
      urlQuery.Encode()\n+\treq, err := http.NewRequestWithContext(ctx, method, u.String(),
      bodyReader)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treq.Header =
      header\n+\treq.Header.Set(\"User-Agent\", options.UserAgent)\n+\treturn req,
      nil\n+}\n+\n+//ISOTimeString returns a pointer to tm formated as an iso8601/rfc3339
      string\n+func ISOTimeString(tm time.Time) *string {\n+\treturn String(tm.Format(time.RFC3339))\n+}\n+\n+//String
      returns a pointer to s\n+func String(s string) *string {\n+\treturn &s\n+}\n+\n+//Bool
      returns a pointer to b\n+func Bool(b bool) *bool {\n+\treturn &b\n+}\n+\n+//Int64
      returns a pointer to i\n+func Int64(i int64) *int64 {\n+\treturn &i\n+}\n+\n+//Int
      returns a pointer to i\n+func Int(i int) *int {\n+\treturn &i\n+}"},{"sha":"b86764e732ea0a3c9b34c6f42e6a5281d48e90e3","filename":"options.go","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/options.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/options.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/options.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,49 @@\n+package octo\n+\n+import (\n+\t\"net/url\"\n+)\n+\n+type RequestOption
      func(opts *requestOpts)\n+\n+func RequestHTTPScheme(scheme string) RequestOption
      {\n+\treturn func(opts *requestOpts) {\n+\t\topts.BaseURL.Scheme = scheme\n+\t}\n+}\n+\n+func
      RequestBaseURL(baseURL url.URL) RequestOption {\n+\treturn func(opts *requestOpts)
      {\n+\t\topts.BaseURL = baseURL\n+\t}\n+}\n+\n+//RequestOptions is a convenience
      function for when you want to send the same set of options to multiple requests\n+func
      RequestOptions(option ...RequestOption) RequestOption {\n+\treturn func(opts
      *requestOpts) {\n+\t\tfor _, requestOption := range option {\n+\t\t\trequestOption(opts)\n+\t\t}\n+\t}\n+}\n+\n+type
      requestOpts struct {\n+\tBaseURL   url.URL\n+\tUserAgent string\n+}\n+\n+var
      defaultRequestOpts = requestOpts{\n+\tBaseURL: url.URL{\n+\t\tHost:   \"api.github.com\",\n+\t\tScheme:
      \"https\",\n+\t},\n+\tUserAgent: \"octo-go\",\n+}\n+\n+func buildRequestOptions(opts
      []RequestOption) requestOpts {\n+\tresult := defaultRequestOpts\n+\tfor _, opt
      := range opts {\n+\t\topt(&result)\n+\t}\n+\treturn result\n+}"},{"sha":"d301a30eb6854f9b481f351c10c9a68b4109563c","filename":"script/apply-template","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/WillAbides/octo-go/blob/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/script/apply-template","raw_url":"https://github.com/WillAbides/octo-go/raw/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/script/apply-template","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/script/apply-template?ref=2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","patch":"@@
      -1,47 +0,0 @@\n-#!/bin/sh\n-\n-set -e\n-\n-CDPATH=\"\" cd -- \"$(dirname --
      \"$(dirname -- \"$0\")\")\"\n-\n-nwo=\"$GITHUB_REPOSITORY\"\n-if [ -z \"$nwo\"
      ]; then\n-  nwo=$(git remote get-url origin)\n-  nwo=${nwo#\"git@github.com:\"}\n-  nwo=${nwo#\"https://github.com/\"}\n-  nwo=${nwo%\".git\"}\n-fi\n-\n-sedi()
      {\n-  if [ \"Darwin\" = \"$(uname)\" ]; then\n-    sed -i '''' \"$1\" \"$2\"\n-  else\n-    sed
      -i \"$1\" \"$2\"\n-  fi\n-}\n-\n-reponame=$(echo \"$nwo\" | cut -d \"/\" -f2)\n-downcased_reponame=\"$(echo
      \"$reponame\" | tr ''[:upper:]'' ''[:lower:]'')\"\n-\n-sedi \"s|WillAbides/goproject-tmpl|$nwo|g\"
      README.md\n-sedi \"s|goproject-tmpl|$reponame|g\" README.md\n-\n-template_modulename=\"github.com/willabides/goproject-tmpl\"\n-modulename=\"$(echo
      \"github.com/$nwo\" | tr ''[:upper:]'' ''[:lower:]'')\"\n-sedi \"s|$template_modulename|$modulename|g\"
      go.mod\n-\n-template_pkgname=\"goprojecttmpl\"\n-pkgname=\"$(echo \"$reponame\"
      | tr ''[:upper:]'' ''[:lower:]'' | sed ''s/-//g'')\"\n-sedi \"s|$template_pkgname|$pkgname|g\"
      goproject-tmpl.go\n-sedi \"s|$template_pkgname|$pkgname|g\" goproject-tmpl_test.go\n-\n-mv
      goproject-tmpl.go \"$downcased_reponame.go\"\n-mv goproject-tmpl_test.go \"${downcased_reponame}_test.go\"\n-rm
      .github/workflows/applytemplate.yml\n-\n-if [ -z \"$CI\" ]; then\n-  script/update-repo-settings\n-  rm
      script/update-repo-settings\n-fi\n-\n-rm script/apply-template"},{"sha":"6f48acce580bde0c89459cb416441cb3a0b53c72","filename":"script/test","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/script/test","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/script/test","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/script/test?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -4,4 +4,4 @@ set -e\n \n CDPATH=\"\" cd -- \"$(dirname -- \"$(dirname -- \"$0\")\")\"\n
      \n-go test -race -covermode=atomic ./...\n+go test ./..."},{"sha":"9737f17413105fb06a2079ee654d9645de320b75","filename":"script/update-repo-settings","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/WillAbides/octo-go/blob/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/script/update-repo-settings","raw_url":"https://github.com/WillAbides/octo-go/raw/2c80673f15b275cbb22fc167cb1b9aa43ba7a27a/script/update-repo-settings","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/script/update-repo-settings?ref=2c80673f15b275cbb22fc167cb1b9aa43ba7a27a","patch":"@@
      -1,45 +0,0 @@\n-#!/bin/sh\n-\n-# update-repo-settings updates protected branches
      and a couple of other things\n-# the way I like them. This can''t currently
      be done through an action, so I need\n-# to run it from home.\n-\n-set -e\n-\n-CDPATH=\"\"
      cd -- \"$(dirname -- \"$(dirname -- \"$0\")\")\"\n-\n-nwo=\"$GITHUB_REPOSITORY\"\n-if
      [ -z \"$nwo\" ]; then\n-  nwo=$(git remote get-url origin)\n-  nwo=${nwo#\"git@github.com:\"}\n-  nwo=${nwo#\"https://github.com/\"}\n-  nwo=${nwo%\".git\"}\n-fi\n-\n-curl
      -s -f \\\n-  -X PUT \\\n-  --header \"authorization: Bearer $GITHUB_TOKEN\"
      \\\n-  --header ''content-type: application/json'' \\\n-  --data ''{\n-    \"required_status_checks\":
      {\n-      \"strict\": true,\n-      \"contexts\": [\"cibuild\"]\n-    },\n-     \"restrictions\":
      null,\n-     \"enforce_admins\": false,\n-     \"required_pull_request_reviews\":
      null\n-  }'' \\\n-  \"https://api.github.com/repos/$nwo/branches/master/protection\"
      > /dev/null\n-\n-curl -f -s \\\n-  -X PATCH \\\n-  --header \"authorization:
      Bearer $GITHUB_TOKEN\" \\\n-  --header ''content-type: application/json'' \\\n-  --data
      ''{\n-  \"delete_branch_on_merge\": true,\n-  \"has_wiki\": false,\n-  \"allow_squash_merge\":
      false,\n-  \"allow_rebase_merge\": false,\n-  \"has_projects\": false\n-  }''
      \\\n-  \"https://api.github.com/repos/$nwo\" > /dev/null"},{"sha":"cae8d5b055e8b0d0e1d2c0630a5f31017e957ae5","filename":"zz_actions_gen.go","status":"added","additions":2998,"deletions":0,"changes":2998,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_actions_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_actions_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_actions_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"220a21b2e714e93de55cf3dae2a1ed32ec7a7807","filename":"zz_activity_gen.go","status":"added","additions":2378,"deletions":0,"changes":2378,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_activity_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_activity_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_activity_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,2378 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+ActivityGetThreadReq
      builds requests for \"activity/get-thread\"\n+\n+Get a thread.\n+\n+  GET /notifications/threads/{thread_id}\n+\n+https://developer.github.com/v3/activity/notifications/#get-a-thread\n+*/\n+type
      ActivityGetThreadReq struct {\n+\tThreadId int64\n+}\n+\n+func (r ActivityGetThreadReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/notifications/threads/%v\", r.ThreadId)\n+}\n+\n+func
      (r ActivityGetThreadReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityGetThreadReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ActivityGetThreadReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityGetThreadReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityGetThreadResponseBody200
      is a response body for activity/get-thread\n+\n+API documentation: https://developer.github.com/v3/activity/notifications/#get-a-thread\n+*/\n+type
      ActivityGetThreadResponseBody200 struct {\n+\tId         string `json:\"id,omitempty\"`\n+\tLastReadAt
      string `json:\"last_read_at,omitempty\"`\n+\tReason     string `json:\"reason,omitempty\"`\n+\tRepository
      struct {\n+\t\tArchiveUrl       string `json:\"archive_url,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCollaboratorsUrl string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDownloadsUrl     string `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguagesUrl     string `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl
      string `json:\"notifications_url,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPrivate         bool   `json:\"private,omitempty\"`\n+\t\tPullsUrl        string
      `json:\"pulls_url,omitempty\"`\n+\t\tReleasesUrl     string `json:\"releases_url,omitempty\"`\n+\t\tSshUrl          string
      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersUrl   string `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl     string
      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersUrl  string `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl
      string `json:\"subscription_url,omitempty\"`\n+\t\tTagsUrl         string `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl        string
      `json:\"teams_url,omitempty\"`\n+\t\tTreesUrl        string `json:\"trees_url,omitempty\"`\n+\t\tUrl             string
      `json:\"url,omitempty\"`\n+\t} `json:\"repository,omitempty\"`\n+\tSubject struct
      {\n+\t\tLatestCommentUrl string `json:\"latest_comment_url,omitempty\"`\n+\t\tTitle            string
      `json:\"title,omitempty\"`\n+\t\tType             string `json:\"type,omitempty\"`\n+\t\tUrl              string
      `json:\"url,omitempty\"`\n+\t} `json:\"subject,omitempty\"`\n+\tUnread    bool   `json:\"unread,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityMarkThreadAsReadReq
      builds requests for \"activity/mark-thread-as-read\"\n+\n+Mark a thread as read.\n+\n+  PATCH
      /notifications/threads/{thread_id}\n+\n+https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read\n+*/\n+type
      ActivityMarkThreadAsReadReq struct {\n+\tThreadId int64\n+}\n+\n+func (r ActivityMarkThreadAsReadReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/notifications/threads/%v\", r.ThreadId)\n+}\n+\n+func
      (r ActivityMarkThreadAsReadReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r ActivityMarkThreadAsReadReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ActivityMarkThreadAsReadReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityMarkThreadAsReadReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListStargazersForRepoReq
      builds requests for \"activity/list-stargazers-for-repo\"\n+\n+List stargazers.\n+\n+  GET
      /repos/{owner}/{repo}/stargazers\n+\n+https://developer.github.com/v3/activity/starring/#list-stargazers\n+*/\n+type
      ActivityListStargazersForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListStargazersForRepoReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/stargazers\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ActivityListStargazersForRepoReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r ActivityListStargazersForRepoReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListStargazersForRepoReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListStargazersForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListStargazersForRepoResponseBody200
      is a response body for activity/list-stargazers-for-repo\n+\n+API documentation:
      https://developer.github.com/v3/activity/starring/#list-stargazers\n+*/\n+type
      ActivityListStargazersForRepoResponseBody200 []struct {\n+\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityListReposWatchedByUserReq
      builds requests for \"activity/list-repos-watched-by-user\"\n+\n+List repositories
      watched by a user.\n+\n+  GET /users/{username}/subscriptions\n+\n+https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user\n+*/\n+type
      ActivityListReposWatchedByUserReq struct {\n+\tUsername string\n+\n+\t// Results
      per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to
      fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListReposWatchedByUserReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/users/%v/subscriptions\", r.Username)\n+}\n+\n+func
      (r ActivityListReposWatchedByUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListReposWatchedByUserReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListReposWatchedByUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListReposWatchedByUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListReposWatchedByUserResponseBody200
      is a response body for activity/list-repos-watched-by-user\n+\n+API documentation:
      https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user\n+*/\n+type
      ActivityListReposWatchedByUserResponseBody200 []struct {\n+\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\tArchived         bool   `json:\"archived,omitempty\"`\n+\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\tCommentsUrl      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl       string
      `json:\"commits_url,omitempty\"`\n+\tCompareUrl       string `json:\"compare_url,omitempty\"`\n+\tContentsUrl      string
      `json:\"contents_url,omitempty\"`\n+\tContributorsUrl  string `json:\"contributors_url,omitempty\"`\n+\tCreatedAt        string
      `json:\"created_at,omitempty\"`\n+\tDefaultBranch    string `json:\"default_branch,omitempty\"`\n+\tDeploymentsUrl   string
      `json:\"deployments_url,omitempty\"`\n+\tDescription      string `json:\"description,omitempty\"`\n+\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tFork             bool   `json:\"fork,omitempty\"`\n+\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\tFullName         string `json:\"full_name,omitempty\"`\n+\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\tGitUrl           string `json:\"git_url,omitempty\"`\n+\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\tLanguage         string `json:\"language,omitempty\"`\n+\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\tLicense          struct {\n+\t\tKey    string
      `json:\"key,omitempty\"`\n+\t\tName   string `json:\"name,omitempty\"`\n+\t\tNodeId
      string `json:\"node_id,omitempty\"`\n+\t\tSpdxId string `json:\"spdx_id,omitempty\"`\n+\t\tUrl    string
      `json:\"url,omitempty\"`\n+\t} `json:\"license,omitempty\"`\n+\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\tMirrorUrl        string
      `json:\"mirror_url,omitempty\"`\n+\tName             string `json:\"name,omitempty\"`\n+\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\tOwner            struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPermissions struct {\n+\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\tPush  bool `json:\"push,omitempty\"`\n+\t} `json:\"permissions,omitempty\"`\n+\tPrivate            bool        `json:\"private,omitempty\"`\n+\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\tSize               json.Number
      `json:\"size,omitempty\"`\n+\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\tTopics             []string    `json:\"topics,omitempty\"`\n+\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\tUrl                string      `json:\"url,omitempty\"`\n+\tVisibility         string      `json:\"visibility,omitempty\"`\n+\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+}\n+\n+/*\n+ActivityMarkRepoNotificationsAsReadReq
      builds requests for \"activity/mark-repo-notifications-as-read\"\n+\n+Mark repository
      notifications as read.\n+\n+  PUT /repos/{owner}/{repo}/notifications\n+\n+https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read\n+*/\n+type
      ActivityMarkRepoNotificationsAsReadReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      ActivityMarkRepoNotificationsAsReadReqBody\n+}\n+\n+func (r ActivityMarkRepoNotificationsAsReadReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/notifications\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ActivityMarkRepoNotificationsAsReadReq) method() string
      {\n+\treturn \"PUT\"\n+}\n+\n+func (r ActivityMarkRepoNotificationsAsReadReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityMarkRepoNotificationsAsReadReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityMarkRepoNotificationsAsReadReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ActivityMarkRepoNotificationsAsReadReqBody
      is a request body for activity/mark-repo-notifications-as-read\n+\n+API documentation:
      https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read\n+*/\n+type
      ActivityMarkRepoNotificationsAsReadReqBody struct {\n+\n+\t/*\n+\t   Describes
      the last point that notifications were checked. Anything updated since\n+\t   this
      time will not be marked as read. If you omit this parameter, all\n+\t   notifications
      are marked as read. This is a timestamp in [ISO\n+\t   8601](https://en.wikipedia.org/wiki/ISO_8601)
      format: `YYYY-MM-DDTHH:MM:SSZ`.\n+\t   Default: The current timestamp.\n+\t*/\n+\tLastReadAt
      *string `json:\"last_read_at,omitempty\"`\n+}\n+\n+/*\n+ActivityListRepoNotificationsForAuthenticatedUserReq
      builds requests for \"activity/list-repo-notifications-for-authenticated-user\"\n+\n+List
      repository notifications for the authenticated user.\n+\n+  GET /repos/{owner}/{repo}/notifications\n+\n+https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user\n+*/\n+type
      ActivityListRepoNotificationsForAuthenticatedUserReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t//
      If `true`, show notifications marked as read.\n+\tAll *bool\n+\n+\t/*\n+\tIf
      `true`, only shows notifications in which the user is directly participating\n+\tor
      mentioned.\n+\t*/\n+\tParticipating *bool\n+\n+\t/*\n+\tOnly show notifications
      updated after the given time. This is a timestamp in\n+\t[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
      format:\n+\t`YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tSince *string\n+\n+\t/*\n+\tOnly
      show notifications updated before the given time. This is a timestamp in\n+\t[ISO
      8601](https://en.wikipedia.org/wiki/ISO_8601) format:\n+\t`YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tBefore
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListRepoNotificationsForAuthenticatedUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/notifications\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ActivityListRepoNotificationsForAuthenticatedUserReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListRepoNotificationsForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.All != nil {\n+\t\tquery.Set(\"all\",
      strconv.FormatBool(*r.All))\n+\t}\n+\tif r.Participating != nil {\n+\t\tquery.Set(\"participating\",
      strconv.FormatBool(*r.Participating))\n+\t}\n+\tif r.Since != nil {\n+\t\tquery.Set(\"since\",
      *r.Since)\n+\t}\n+\tif r.Before != nil {\n+\t\tquery.Set(\"before\", *r.Before)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListRepoNotificationsForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListRepoNotificationsForAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListRepoNotificationsForAuthenticatedUserResponseBody200
      is a response body for activity/list-repo-notifications-for-authenticated-user\n+\n+API
      documentation: https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user\n+*/\n+type
      ActivityListRepoNotificationsForAuthenticatedUserResponseBody200 []struct {\n+\tId         string
      `json:\"id,omitempty\"`\n+\tLastReadAt string `json:\"last_read_at,omitempty\"`\n+\tReason     string
      `json:\"reason,omitempty\"`\n+\tRepository struct {\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tAssigneesUrl     string `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string
      `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string `json:\"branches_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDownloadsUrl     string `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguagesUrl     string `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl
      string `json:\"notifications_url,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPrivate         bool   `json:\"private,omitempty\"`\n+\t\tPullsUrl        string
      `json:\"pulls_url,omitempty\"`\n+\t\tReleasesUrl     string `json:\"releases_url,omitempty\"`\n+\t\tSshUrl          string
      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersUrl   string `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl     string
      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersUrl  string `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl
      string `json:\"subscription_url,omitempty\"`\n+\t\tTagsUrl         string `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl        string
      `json:\"teams_url,omitempty\"`\n+\t\tTreesUrl        string `json:\"trees_url,omitempty\"`\n+\t\tUrl             string
      `json:\"url,omitempty\"`\n+\t} `json:\"repository,omitempty\"`\n+\tSubject struct
      {\n+\t\tLatestCommentUrl string `json:\"latest_comment_url,omitempty\"`\n+\t\tTitle            string
      `json:\"title,omitempty\"`\n+\t\tType             string `json:\"type,omitempty\"`\n+\t\tUrl              string
      `json:\"url,omitempty\"`\n+\t} `json:\"subject,omitempty\"`\n+\tUnread    bool   `json:\"unread,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityListWatchersForRepoReq
      builds requests for \"activity/list-watchers-for-repo\"\n+\n+List watchers.\n+\n+  GET
      /repos/{owner}/{repo}/subscribers\n+\n+https://developer.github.com/v3/activity/watching/#list-watchers\n+*/\n+type
      ActivityListWatchersForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListWatchersForRepoReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/subscribers\", r.Owner, r.Repo)\n+}\n+\n+func
      (r ActivityListWatchersForRepoReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListWatchersForRepoReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListWatchersForRepoReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListWatchersForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListWatchersForRepoResponseBody200
      is a response body for activity/list-watchers-for-repo\n+\n+API documentation:
      https://developer.github.com/v3/activity/watching/#list-watchers\n+*/\n+type
      ActivityListWatchersForRepoResponseBody200 []struct {\n+\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityListWatchedReposForAuthenticatedUserReq
      builds requests for \"activity/list-watched-repos-for-authenticated-user\"\n+\n+List
      repositories watched by the authenticated user.\n+\n+  GET /user/subscriptions\n+\n+https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user\n+*/\n+type
      ActivityListWatchedReposForAuthenticatedUserReq struct {\n+\n+\t// Results per
      page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r ActivityListWatchedReposForAuthenticatedUserReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/user/subscriptions\")\n+}\n+\n+func (r ActivityListWatchedReposForAuthenticatedUserReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListWatchedReposForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListWatchedReposForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListWatchedReposForAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListWatchedReposForAuthenticatedUserResponseBody200
      is a response body for activity/list-watched-repos-for-authenticated-user\n+\n+API
      documentation: https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user\n+*/\n+type
      ActivityListWatchedReposForAuthenticatedUserResponseBody200 []struct {\n+\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\tArchived         bool   `json:\"archived,omitempty\"`\n+\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\tCommentsUrl      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl       string
      `json:\"commits_url,omitempty\"`\n+\tCompareUrl       string `json:\"compare_url,omitempty\"`\n+\tContentsUrl      string
      `json:\"contents_url,omitempty\"`\n+\tContributorsUrl  string `json:\"contributors_url,omitempty\"`\n+\tCreatedAt        string
      `json:\"created_at,omitempty\"`\n+\tDefaultBranch    string `json:\"default_branch,omitempty\"`\n+\tDeploymentsUrl   string
      `json:\"deployments_url,omitempty\"`\n+\tDescription      string `json:\"description,omitempty\"`\n+\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tFork             bool   `json:\"fork,omitempty\"`\n+\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\tFullName         string `json:\"full_name,omitempty\"`\n+\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\tGitUrl           string `json:\"git_url,omitempty\"`\n+\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\tLanguage         string `json:\"language,omitempty\"`\n+\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\tLicense          struct {\n+\t\tKey    string
      `json:\"key,omitempty\"`\n+\t\tName   string `json:\"name,omitempty\"`\n+\t\tNodeId
      string `json:\"node_id,omitempty\"`\n+\t\tSpdxId string `json:\"spdx_id,omitempty\"`\n+\t\tUrl    string
      `json:\"url,omitempty\"`\n+\t} `json:\"license,omitempty\"`\n+\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\tMirrorUrl        string
      `json:\"mirror_url,omitempty\"`\n+\tName             string `json:\"name,omitempty\"`\n+\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\tOwner            struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPermissions struct {\n+\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\tPush  bool `json:\"push,omitempty\"`\n+\t} `json:\"permissions,omitempty\"`\n+\tPrivate            bool        `json:\"private,omitempty\"`\n+\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\tSize               json.Number
      `json:\"size,omitempty\"`\n+\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\tTopics             []string    `json:\"topics,omitempty\"`\n+\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\tUrl                string      `json:\"url,omitempty\"`\n+\tVisibility         string      `json:\"visibility,omitempty\"`\n+\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+}\n+\n+/*\n+ActivityListPublicOrgEventsReq
      builds requests for \"activity/list-public-org-events\"\n+\n+List public organization
      events.\n+\n+  GET /orgs/{org}/events\n+\n+https://developer.github.com/v3/activity/events/#list-public-organization-events\n+*/\n+type
      ActivityListPublicOrgEventsReq struct {\n+\tOrg string\n+\n+\t// Results per
      page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r ActivityListPublicOrgEventsReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/events\", r.Org)\n+}\n+\n+func (r ActivityListPublicOrgEventsReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListPublicOrgEventsReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListPublicOrgEventsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListPublicOrgEventsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListEventsForAuthenticatedUserReq
      builds requests for \"activity/list-events-for-authenticated-user\"\n+\n+List
      events for the authenticated user.\n+\n+  GET /users/{username}/events\n+\n+https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user\n+*/\n+type
      ActivityListEventsForAuthenticatedUserReq struct {\n+\tUsername string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListEventsForAuthenticatedUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/events\", r.Username)\n+}\n+\n+func
      (r ActivityListEventsForAuthenticatedUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListEventsForAuthenticatedUserReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListEventsForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListEventsForAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListNotificationsForAuthenticatedUserReq
      builds requests for \"activity/list-notifications-for-authenticated-user\"\n+\n+List
      notifications for the authenticated user.\n+\n+  GET /notifications\n+\n+https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user\n+*/\n+type
      ActivityListNotificationsForAuthenticatedUserReq struct {\n+\n+\t// If `true`,
      show notifications marked as read.\n+\tAll *bool\n+\n+\t/*\n+\tIf `true`, only
      shows notifications in which the user is directly participating\n+\tor mentioned.\n+\t*/\n+\tParticipating
      *bool\n+\n+\t/*\n+\tOnly show notifications updated after the given time. This
      is a timestamp in\n+\t[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:\n+\t`YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tSince
      *string\n+\n+\t/*\n+\tOnly show notifications updated before the given time.
      This is a timestamp in\n+\t[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
      format:\n+\t`YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tBefore *string\n+\n+\t// Results
      per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to
      fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListNotificationsForAuthenticatedUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/notifications\")\n+}\n+\n+func
      (r ActivityListNotificationsForAuthenticatedUserReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r ActivityListNotificationsForAuthenticatedUserReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.All != nil {\n+\t\tquery.Set(\"all\",
      strconv.FormatBool(*r.All))\n+\t}\n+\tif r.Participating != nil {\n+\t\tquery.Set(\"participating\",
      strconv.FormatBool(*r.Participating))\n+\t}\n+\tif r.Since != nil {\n+\t\tquery.Set(\"since\",
      *r.Since)\n+\t}\n+\tif r.Before != nil {\n+\t\tquery.Set(\"before\", *r.Before)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListNotificationsForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListNotificationsForAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListNotificationsForAuthenticatedUserResponseBody200
      is a response body for activity/list-notifications-for-authenticated-user\n+\n+API
      documentation: https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user\n+*/\n+type
      ActivityListNotificationsForAuthenticatedUserResponseBody200 []struct {\n+\tId         string
      `json:\"id,omitempty\"`\n+\tLastReadAt string `json:\"last_read_at,omitempty\"`\n+\tReason     string
      `json:\"reason,omitempty\"`\n+\tRepository struct {\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tAssigneesUrl     string `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string
      `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string `json:\"branches_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDownloadsUrl     string `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguagesUrl     string `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl
      string `json:\"notifications_url,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPrivate         bool   `json:\"private,omitempty\"`\n+\t\tPullsUrl        string
      `json:\"pulls_url,omitempty\"`\n+\t\tReleasesUrl     string `json:\"releases_url,omitempty\"`\n+\t\tSshUrl          string
      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersUrl   string `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl     string
      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersUrl  string `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl
      string `json:\"subscription_url,omitempty\"`\n+\t\tTagsUrl         string `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl        string
      `json:\"teams_url,omitempty\"`\n+\t\tTreesUrl        string `json:\"trees_url,omitempty\"`\n+\t\tUrl             string
      `json:\"url,omitempty\"`\n+\t} `json:\"repository,omitempty\"`\n+\tSubject struct
      {\n+\t\tLatestCommentUrl string `json:\"latest_comment_url,omitempty\"`\n+\t\tTitle            string
      `json:\"title,omitempty\"`\n+\t\tType             string `json:\"type,omitempty\"`\n+\t\tUrl              string
      `json:\"url,omitempty\"`\n+\t} `json:\"subject,omitempty\"`\n+\tUnread    bool   `json:\"unread,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityMarkNotificationsAsReadReq
      builds requests for \"activity/mark-notifications-as-read\"\n+\n+Mark notifications
      as read.\n+\n+  PUT /notifications\n+\n+https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read\n+*/\n+type
      ActivityMarkNotificationsAsReadReq struct {\n+\tRequestBody ActivityMarkNotificationsAsReadReqBody\n+}\n+\n+func
      (r ActivityMarkNotificationsAsReadReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/notifications\")\n+}\n+\n+func
      (r ActivityMarkNotificationsAsReadReq) method() string {\n+\treturn \"PUT\"\n+}\n+\n+func
      (r ActivityMarkNotificationsAsReadReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r ActivityMarkNotificationsAsReadReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityMarkNotificationsAsReadReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ActivityMarkNotificationsAsReadReqBody
      is a request body for activity/mark-notifications-as-read\n+\n+API documentation:
      https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read\n+*/\n+type
      ActivityMarkNotificationsAsReadReqBody struct {\n+\n+\t/*\n+\t   Describes the
      last point that notifications were checked. Anything updated since\n+\t   this
      time will not be marked as read. If you omit this parameter, all\n+\t   notifications
      are marked as read. This is a timestamp in [ISO\n+\t   8601](https://en.wikipedia.org/wiki/ISO_8601)
      format: `YYYY-MM-DDTHH:MM:SSZ`.\n+\t   Default: The current timestamp.\n+\t*/\n+\tLastReadAt
      *string `json:\"last_read_at,omitempty\"`\n+}\n+\n+/*\n+ActivityListReceivedEventsForUserReq
      builds requests for \"activity/list-received-events-for-user\"\n+\n+List events
      received by the authenticated user.\n+\n+  GET /users/{username}/received_events\n+\n+https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user\n+*/\n+type
      ActivityListReceivedEventsForUserReq struct {\n+\tUsername string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListReceivedEventsForUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/received_events\", r.Username)\n+}\n+\n+func
      (r ActivityListReceivedEventsForUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListReceivedEventsForUserReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListReceivedEventsForUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListReceivedEventsForUserReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityDeleteThreadSubscriptionReq
      builds requests for \"activity/delete-thread-subscription\"\n+\n+Delete a thread
      subscription.\n+\n+  DELETE /notifications/threads/{thread_id}/subscription\n+\n+https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription\n+*/\n+type
      ActivityDeleteThreadSubscriptionReq struct {\n+\tThreadId int64\n+}\n+\n+func
      (r ActivityDeleteThreadSubscriptionReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/notifications/threads/%v/subscription\",
      r.ThreadId)\n+}\n+\n+func (r ActivityDeleteThreadSubscriptionReq) method() string
      {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ActivityDeleteThreadSubscriptionReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityDeleteThreadSubscriptionReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityDeleteThreadSubscriptionReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityGetThreadSubscriptionForAuthenticatedUserReq
      builds requests for \"activity/get-thread-subscription-for-authenticated-user\"\n+\n+Get
      a thread subscription for the authenticated user.\n+\n+  GET /notifications/threads/{thread_id}/subscription\n+\n+https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user\n+*/\n+type
      ActivityGetThreadSubscriptionForAuthenticatedUserReq struct {\n+\tThreadId int64\n+}\n+\n+func
      (r ActivityGetThreadSubscriptionForAuthenticatedUserReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/notifications/threads/%v/subscription\", r.ThreadId)\n+}\n+\n+func
      (r ActivityGetThreadSubscriptionForAuthenticatedUserReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r ActivityGetThreadSubscriptionForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityGetThreadSubscriptionForAuthenticatedUserReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ActivityGetThreadSubscriptionForAuthenticatedUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody200
      is a response body for activity/get-thread-subscription-for-authenticated-user\n+\n+API
      documentation: https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user\n+*/\n+type
      ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody200 struct {\n+\tCreatedAt  string
      `json:\"created_at,omitempty\"`\n+\tIgnored    bool   `json:\"ignored,omitempty\"`\n+\tReason     string
      `json:\"reason,omitempty\"`\n+\tSubscribed bool   `json:\"subscribed,omitempty\"`\n+\tThreadUrl  string
      `json:\"thread_url,omitempty\"`\n+\tUrl        string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivitySetThreadSubscriptionReq
      builds requests for \"activity/set-thread-subscription\"\n+\n+Set a thread subscription.\n+\n+  PUT
      /notifications/threads/{thread_id}/subscription\n+\n+https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription\n+*/\n+type
      ActivitySetThreadSubscriptionReq struct {\n+\tThreadId    int64\n+\tRequestBody
      ActivitySetThreadSubscriptionReqBody\n+}\n+\n+func (r ActivitySetThreadSubscriptionReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/notifications/threads/%v/subscription\",
      r.ThreadId)\n+}\n+\n+func (r ActivitySetThreadSubscriptionReq) method() string
      {\n+\treturn \"PUT\"\n+}\n+\n+func (r ActivitySetThreadSubscriptionReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ActivitySetThreadSubscriptionReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivitySetThreadSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ActivitySetThreadSubscriptionReqBody
      is a request body for activity/set-thread-subscription\n+\n+API documentation:
      https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription\n+*/\n+type
      ActivitySetThreadSubscriptionReqBody struct {\n+\n+\t/*\n+\t   Unsubscribes
      and subscribes you to a conversation. Set `ignored` to `true` to\n+\t   block
      all notifications from this thread.\n+\t*/\n+\tIgnored *bool `json:\"ignored,omitempty\"`\n+}\n+\n+/*\n+ActivitySetThreadSubscriptionResponseBody200
      is a response body for activity/set-thread-subscription\n+\n+API documentation:
      https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription\n+*/\n+type
      ActivitySetThreadSubscriptionResponseBody200 struct {\n+\tCreatedAt  string
      `json:\"created_at,omitempty\"`\n+\tIgnored    bool   `json:\"ignored,omitempty\"`\n+\tReason     string
      `json:\"reason,omitempty\"`\n+\tSubscribed bool   `json:\"subscribed,omitempty\"`\n+\tThreadUrl  string
      `json:\"thread_url,omitempty\"`\n+\tUrl        string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityListOrgEventsForAuthenticatedUserReq
      builds requests for \"activity/list-org-events-for-authenticated-user\"\n+\n+List
      organization events for the authenticated user.\n+\n+  GET /users/{username}/events/orgs/{org}\n+\n+https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user\n+*/\n+type
      ActivityListOrgEventsForAuthenticatedUserReq struct {\n+\tUsername string\n+\tOrg      string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListOrgEventsForAuthenticatedUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/events/orgs/%v\", r.Username,
      r.Org)\n+}\n+\n+func (r ActivityListOrgEventsForAuthenticatedUserReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListOrgEventsForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListOrgEventsForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListOrgEventsForAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListPublicEventsForRepoNetworkReq
      builds requests for \"activity/list-public-events-for-repo-network\"\n+\n+List
      public events for a network of repositories.\n+\n+  GET /networks/{owner}/{repo}/events\n+\n+https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories\n+*/\n+type
      ActivityListPublicEventsForRepoNetworkReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListPublicEventsForRepoNetworkReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/networks/%v/%v/events\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ActivityListPublicEventsForRepoNetworkReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListPublicEventsForRepoNetworkReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListPublicEventsForRepoNetworkReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListPublicEventsForRepoNetworkReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListRepoEventsReq
      builds requests for \"activity/list-repo-events\"\n+\n+List repository events.\n+\n+  GET
      /repos/{owner}/{repo}/events\n+\n+https://developer.github.com/v3/activity/events/#list-repository-events\n+*/\n+type
      ActivityListRepoEventsReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListRepoEventsReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/events\", r.Owner, r.Repo)\n+}\n+\n+func
      (r ActivityListRepoEventsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListRepoEventsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListRepoEventsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ActivityListRepoEventsReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ActivityListPublicEventsForUserReq builds requests for
      \"activity/list-public-events-for-user\"\n+\n+List public events for a user.\n+\n+  GET
      /users/{username}/events/public\n+\n+https://developer.github.com/v3/activity/events/#list-public-events-for-a-user\n+*/\n+type
      ActivityListPublicEventsForUserReq struct {\n+\tUsername string\n+\n+\t// Results
      per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to
      fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListPublicEventsForUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/events/public\", r.Username)\n+}\n+\n+func
      (r ActivityListPublicEventsForUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListPublicEventsForUserReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListPublicEventsForUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListPublicEventsForUserReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListReposStarredByAuthenticatedUserReq
      builds requests for \"activity/list-repos-starred-by-authenticated-user\"\n+\n+List
      repositories starred by the authenticated user.\n+\n+  GET /user/starred\n+\n+https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user\n+*/\n+type
      ActivityListReposStarredByAuthenticatedUserReq struct {\n+\n+\t/*\n+\tOne of
      `created` (when the repository was starred) or `updated` (when it was\n+\tlast
      pushed to).\n+\t*/\n+\tSort *string\n+\n+\t// One of `asc` (ascending) or `desc`
      (descending).\n+\tDirection *string\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func
      (r ActivityListReposStarredByAuthenticatedUserReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/user/starred\")\n+}\n+\n+func (r ActivityListReposStarredByAuthenticatedUserReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListReposStarredByAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Sort != nil {\n+\t\tquery.Set(\"sort\",
      *r.Sort)\n+\t}\n+\tif r.Direction != nil {\n+\t\tquery.Set(\"direction\", *r.Direction)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListReposStarredByAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListReposStarredByAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListReposStarredByAuthenticatedUserResponseBody200
      is a response body for activity/list-repos-starred-by-authenticated-user\n+\n+API
      documentation: https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user\n+*/\n+type
      ActivityListReposStarredByAuthenticatedUserResponseBody200 []struct {\n+\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\tArchiveUrl       string `json:\"archive_url,omitempty\"`\n+\tArchived         bool   `json:\"archived,omitempty\"`\n+\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\tCommentsUrl      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl       string
      `json:\"commits_url,omitempty\"`\n+\tCompareUrl       string `json:\"compare_url,omitempty\"`\n+\tContentsUrl      string
      `json:\"contents_url,omitempty\"`\n+\tContributorsUrl  string `json:\"contributors_url,omitempty\"`\n+\tCreatedAt        string
      `json:\"created_at,omitempty\"`\n+\tDefaultBranch    string `json:\"default_branch,omitempty\"`\n+\tDeploymentsUrl   string
      `json:\"deployments_url,omitempty\"`\n+\tDescription      string `json:\"description,omitempty\"`\n+\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tFork             bool   `json:\"fork,omitempty\"`\n+\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\tFullName         string `json:\"full_name,omitempty\"`\n+\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\tGitUrl           string `json:\"git_url,omitempty\"`\n+\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\tLanguage         string `json:\"language,omitempty\"`\n+\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\tName             string
      `json:\"name,omitempty\"`\n+\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\tOwner            struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPermissions struct {\n+\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\tPush  bool `json:\"push,omitempty\"`\n+\t} `json:\"permissions,omitempty\"`\n+\tPrivate            bool        `json:\"private,omitempty\"`\n+\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\tSize               json.Number
      `json:\"size,omitempty\"`\n+\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\tTopics             []string    `json:\"topics,omitempty\"`\n+\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\tUrl                string      `json:\"url,omitempty\"`\n+\tVisibility         string      `json:\"visibility,omitempty\"`\n+\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+}\n+\n+/*\n+ActivityListPublicEventsReq
      builds requests for \"activity/list-public-events\"\n+\n+List public events.\n+\n+  GET
      /events\n+\n+https://developer.github.com/v3/activity/events/#list-public-events\n+*/\n+type
      ActivityListPublicEventsReq struct {\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func
      (r ActivityListPublicEventsReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/events\")\n+}\n+\n+func
      (r ActivityListPublicEventsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ActivityListPublicEventsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListPublicEventsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ActivityListPublicEventsReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ActivityListReceivedPublicEventsForUserReq builds requests
      for \"activity/list-received-public-events-for-user\"\n+\n+List public events
      received by a user.\n+\n+  GET /users/{username}/received_events/public\n+\n+https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user\n+*/\n+type
      ActivityListReceivedPublicEventsForUserReq struct {\n+\tUsername string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r ActivityListReceivedPublicEventsForUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/received_events/public\",
      r.Username)\n+}\n+\n+func (r ActivityListReceivedPublicEventsForUserReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListReceivedPublicEventsForUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListReceivedPublicEventsForUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListReceivedPublicEventsForUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityGetFeedsReq
      builds requests for \"activity/get-feeds\"\n+\n+Get feeds.\n+\n+  GET /feeds\n+\n+https://developer.github.com/v3/activity/feeds/#get-feeds\n+*/\n+type
      ActivityGetFeedsReq struct{}\n+\n+func (r ActivityGetFeedsReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/feeds\")\n+}\n+\n+func (r ActivityGetFeedsReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityGetFeedsReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ActivityGetFeedsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityGetFeedsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityGetFeedsResponseBody200
      is a response body for activity/get-feeds\n+\n+API documentation: https://developer.github.com/v3/activity/feeds/#get-feeds\n+*/\n+type
      ActivityGetFeedsResponseBody200 struct {\n+\tLinks struct {\n+\t\tCurrentUser
      struct {\n+\t\t\tHref string `json:\"href,omitempty\"`\n+\t\t\tType string `json:\"type,omitempty\"`\n+\t\t}
      `json:\"current_user,omitempty\"`\n+\t\tCurrentUserActor struct {\n+\t\t\tHref
      string `json:\"href,omitempty\"`\n+\t\t\tType string `json:\"type,omitempty\"`\n+\t\t}
      `json:\"current_user_actor,omitempty\"`\n+\t\tCurrentUserOrganization struct
      {\n+\t\t\tHref string `json:\"href,omitempty\"`\n+\t\t\tType string `json:\"type,omitempty\"`\n+\t\t}
      `json:\"current_user_organization,omitempty\"`\n+\t\tCurrentUserOrganizations
      []struct {\n+\t\t\tHref string `json:\"href,omitempty\"`\n+\t\t\tType string
      `json:\"type,omitempty\"`\n+\t\t} `json:\"current_user_organizations,omitempty\"`\n+\t\tCurrentUserPublic
      struct {\n+\t\t\tHref string `json:\"href,omitempty\"`\n+\t\t\tType string `json:\"type,omitempty\"`\n+\t\t}
      `json:\"current_user_public,omitempty\"`\n+\t\tSecurityAdvisories struct {\n+\t\t\tHref
      string `json:\"href,omitempty\"`\n+\t\t\tType string `json:\"type,omitempty\"`\n+\t\t}
      `json:\"security_advisories,omitempty\"`\n+\t\tTimeline struct {\n+\t\t\tHref
      string `json:\"href,omitempty\"`\n+\t\t\tType string `json:\"type,omitempty\"`\n+\t\t}
      `json:\"timeline,omitempty\"`\n+\t\tUser struct {\n+\t\t\tHref string `json:\"href,omitempty\"`\n+\t\t\tType
      string `json:\"type,omitempty\"`\n+\t\t} `json:\"user,omitempty\"`\n+\t} `json:\"_links,omitempty\"`\n+\tCurrentUserActorUrl         string   `json:\"current_user_actor_url,omitempty\"`\n+\tCurrentUserOrganizationUrl  string   `json:\"current_user_organization_url,omitempty\"`\n+\tCurrentUserOrganizationUrls
      []string `json:\"current_user_organization_urls,omitempty\"`\n+\tCurrentUserPublicUrl        string   `json:\"current_user_public_url,omitempty\"`\n+\tCurrentUserUrl              string   `json:\"current_user_url,omitempty\"`\n+\tSecurityAdvisoriesUrl       string   `json:\"security_advisories_url,omitempty\"`\n+\tTimelineUrl                 string   `json:\"timeline_url,omitempty\"`\n+\tUserUrl                     string   `json:\"user_url,omitempty\"`\n+}\n+\n+/*\n+ActivityDeleteRepoSubscriptionReq
      builds requests for \"activity/delete-repo-subscription\"\n+\n+Delete a repository
      subscription.\n+\n+  DELETE /repos/{owner}/{repo}/subscription\n+\n+https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription\n+*/\n+type
      ActivityDeleteRepoSubscriptionReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r ActivityDeleteRepoSubscriptionReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/subscription\",
      r.Owner, r.Repo)\n+}\n+\n+func (r ActivityDeleteRepoSubscriptionReq) method()
      string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ActivityDeleteRepoSubscriptionReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityDeleteRepoSubscriptionReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityDeleteRepoSubscriptionReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityGetRepoSubscriptionReq
      builds requests for \"activity/get-repo-subscription\"\n+\n+Get a repository
      subscription.\n+\n+  GET /repos/{owner}/{repo}/subscription\n+\n+https://developer.github.com/v3/activity/watching/#get-a-repository-subscription\n+*/\n+type
      ActivityGetRepoSubscriptionReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r ActivityGetRepoSubscriptionReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/subscription\",
      r.Owner, r.Repo)\n+}\n+\n+func (r ActivityGetRepoSubscriptionReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityGetRepoSubscriptionReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ActivityGetRepoSubscriptionReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityGetRepoSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityGetRepoSubscriptionResponseBody200
      is a response body for activity/get-repo-subscription\n+\n+API documentation:
      https://developer.github.com/v3/activity/watching/#get-a-repository-subscription\n+*/\n+type
      ActivityGetRepoSubscriptionResponseBody200 struct {\n+\tCreatedAt     string
      `json:\"created_at,omitempty\"`\n+\tIgnored       bool   `json:\"ignored,omitempty\"`\n+\tReason        string
      `json:\"reason,omitempty\"`\n+\tRepositoryUrl string `json:\"repository_url,omitempty\"`\n+\tSubscribed    bool   `json:\"subscribed,omitempty\"`\n+\tUrl           string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivitySetRepoSubscriptionReq builds
      requests for \"activity/set-repo-subscription\"\n+\n+Set a repository subscription.\n+\n+  PUT
      /repos/{owner}/{repo}/subscription\n+\n+https://developer.github.com/v3/activity/watching/#set-a-repository-subscription\n+*/\n+type
      ActivitySetRepoSubscriptionReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      ActivitySetRepoSubscriptionReqBody\n+}\n+\n+func (r ActivitySetRepoSubscriptionReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/subscription\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ActivitySetRepoSubscriptionReq) method() string {\n+\treturn
      \"PUT\"\n+}\n+\n+func (r ActivitySetRepoSubscriptionReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ActivitySetRepoSubscriptionReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivitySetRepoSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ActivitySetRepoSubscriptionReqBody
      is a request body for activity/set-repo-subscription\n+\n+API documentation:
      https://developer.github.com/v3/activity/watching/#set-a-repository-subscription\n+*/\n+type
      ActivitySetRepoSubscriptionReqBody struct {\n+\n+\t// Determines if all notifications
      should be blocked from this repository.\n+\tIgnored *bool `json:\"ignored,omitempty\"`\n+\n+\t//
      Determines if notifications should be received from this repository.\n+\tSubscribed
      *bool `json:\"subscribed,omitempty\"`\n+}\n+\n+/*\n+ActivitySetRepoSubscriptionResponseBody200
      is a response body for activity/set-repo-subscription\n+\n+API documentation:
      https://developer.github.com/v3/activity/watching/#set-a-repository-subscription\n+*/\n+type
      ActivitySetRepoSubscriptionResponseBody200 struct {\n+\tCreatedAt     string
      `json:\"created_at,omitempty\"`\n+\tIgnored       bool   `json:\"ignored,omitempty\"`\n+\tReason        string
      `json:\"reason,omitempty\"`\n+\tRepositoryUrl string `json:\"repository_url,omitempty\"`\n+\tSubscribed    bool   `json:\"subscribed,omitempty\"`\n+\tUrl           string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ActivityUnstarRepoForAuthenticatedUserReq
      builds requests for \"activity/unstar-repo-for-authenticated-user\"\n+\n+Unstar
      a repository for the authenticated user.\n+\n+  DELETE /user/starred/{owner}/{repo}\n+\n+https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user\n+*/\n+type
      ActivityUnstarRepoForAuthenticatedUserReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r ActivityUnstarRepoForAuthenticatedUserReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/user/starred/%v/%v\", r.Owner, r.Repo)\n+}\n+\n+func (r ActivityUnstarRepoForAuthenticatedUserReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ActivityUnstarRepoForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityUnstarRepoForAuthenticatedUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityUnstarRepoForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityCheckRepoIsStarredByAuthenticatedUserReq
      builds requests for \"activity/check-repo-is-starred-by-authenticated-user\"\n+\n+Check
      if a repository is starred by the authenticated user.\n+\n+  GET /user/starred/{owner}/{repo}\n+\n+https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user\n+*/\n+type
      ActivityCheckRepoIsStarredByAuthenticatedUserReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r ActivityCheckRepoIsStarredByAuthenticatedUserReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/user/starred/%v/%v\", r.Owner, r.Repo)\n+}\n+\n+func (r ActivityCheckRepoIsStarredByAuthenticatedUserReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityCheckRepoIsStarredByAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityCheckRepoIsStarredByAuthenticatedUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityCheckRepoIsStarredByAuthenticatedUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ActivityStarRepoForAuthenticatedUserReq builds requests
      for \"activity/star-repo-for-authenticated-user\"\n+\n+Star a repository for
      the authenticated user.\n+\n+  PUT /user/starred/{owner}/{repo}\n+\n+https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user\n+*/\n+type
      ActivityStarRepoForAuthenticatedUserReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r ActivityStarRepoForAuthenticatedUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/user/starred/%v/%v\",
      r.Owner, r.Repo)\n+}\n+\n+func (r ActivityStarRepoForAuthenticatedUserReq) method()
      string {\n+\treturn \"PUT\"\n+}\n+\n+func (r ActivityStarRepoForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ActivityStarRepoForAuthenticatedUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ActivityStarRepoForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListReposStarredByUserReq
      builds requests for \"activity/list-repos-starred-by-user\"\n+\n+List repositories
      starred by a user.\n+\n+  GET /users/{username}/starred\n+\n+https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user\n+*/\n+type
      ActivityListReposStarredByUserReq struct {\n+\tUsername string\n+\n+\t/*\n+\tOne
      of `created` (when the repository was starred) or `updated` (when it was\n+\tlast
      pushed to).\n+\t*/\n+\tSort *string\n+\n+\t// One of `asc` (ascending) or `desc`
      (descending).\n+\tDirection *string\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func
      (r ActivityListReposStarredByUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/starred\",
      r.Username)\n+}\n+\n+func (r ActivityListReposStarredByUserReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r ActivityListReposStarredByUserReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.Sort != nil {\n+\t\tquery.Set(\"sort\",
      *r.Sort)\n+\t}\n+\tif r.Direction != nil {\n+\t\tquery.Set(\"direction\", *r.Direction)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ActivityListReposStarredByUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ActivityListReposStarredByUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ActivityListReposStarredByUserResponseBody200
      is a response body for activity/list-repos-starred-by-user\n+\n+API documentation:
      https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user\n+*/\n+type
      ActivityListReposStarredByUserResponseBody200 []struct {\n+\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\tArchiveUrl       string `json:\"archive_url,omitempty\"`\n+\tArchived         bool   `json:\"archived,omitempty\"`\n+\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\tCommentsUrl      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl       string
      `json:\"commits_url,omitempty\"`\n+\tCompareUrl       string `json:\"compare_url,omitempty\"`\n+\tContentsUrl      string
      `json:\"contents_url,omitempty\"`\n+\tContributorsUrl  string `json:\"contributors_url,omitempty\"`\n+\tCreatedAt        string
      `json:\"created_at,omitempty\"`\n+\tDefaultBranch    string `json:\"default_branch,omitempty\"`\n+\tDeploymentsUrl   string
      `json:\"deployments_url,omitempty\"`\n+\tDescription      string `json:\"description,omitempty\"`\n+\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tFork             bool   `json:\"fork,omitempty\"`\n+\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\tFullName         string `json:\"full_name,omitempty\"`\n+\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\tGitUrl           string `json:\"git_url,omitempty\"`\n+\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\tLanguage         string `json:\"language,omitempty\"`\n+\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\tName             string
      `json:\"name,omitempty\"`\n+\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\tOwner            struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPermissions struct {\n+\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\tPush  bool `json:\"push,omitempty\"`\n+\t} `json:\"permissions,omitempty\"`\n+\tPrivate            bool        `json:\"private,omitempty\"`\n+\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\tSize               json.Number
      `json:\"size,omitempty\"`\n+\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\tTopics             []string    `json:\"topics,omitempty\"`\n+\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\tUrl                string      `json:\"url,omitempty\"`\n+\tVisibility         string      `json:\"visibility,omitempty\"`\n+\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+}"},{"sha":"33cae325a31cb5ca2545e5fe67a9fe553d5c43d5","filename":"zz_apps_gen.go","status":"added","additions":2882,"deletions":0,"changes":2882,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_apps_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_apps_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_apps_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"a17772420ddb043d4cbd0aa18e4c9d26084e5279","filename":"zz_checks_gen.go","status":"added","additions":2059,"deletions":0,"changes":2059,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_checks_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_checks_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_checks_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,2059 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+ChecksListForRefReq
      builds requests for \"checks/list-for-ref\"\n+\n+List check runs for a Git reference.\n+\n+  GET
      /repos/{owner}/{repo}/commits/{ref}/check-runs\n+\n+https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference\n+*/\n+type
      ChecksListForRefReq struct {\n+\tOwner string\n+\tRepo  string\n+\tRef   string\n+\n+\t//
      Returns check runs with the specified `name`.\n+\tCheckName *string\n+\n+\t/*\n+\tReturns
      check runs with the specified `status`. Can be one of `queued`,\n+\t`in_progress`,
      or `completed`.\n+\t*/\n+\tStatus *string\n+\n+\t/*\n+\tFilters check runs by
      their `completed_at` timestamp. Can be one of `latest`\n+\t(returning the most
      recent check runs) or `all`.\n+\t*/\n+\tFilter *string\n+\n+\t// Results per
      page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+\n+\t/*\n+\tThe Checks API is currently available for developers to
      preview. During the\n+\tpreview period, the API may change without advance notice.
      Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksListForRefReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/commits/%v/check-runs\", r.Owner,
      r.Repo, r.Ref)\n+}\n+\n+func (r ChecksListForRefReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r ChecksListForRefReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.CheckName != nil {\n+\t\tquery.Set(\"check_name\",
      *r.CheckName)\n+\t}\n+\tif r.Status != nil {\n+\t\tquery.Set(\"status\", *r.Status)\n+\t}\n+\tif
      r.Filter != nil {\n+\t\tquery.Set(\"filter\", *r.Filter)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r ChecksListForRefReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ChecksListForRefReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ChecksListForRefResponseBody200 is a response body for
      checks/list-for-ref\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference\n+*/\n+type
      ChecksListForRefResponseBody200 struct {\n+\tCheckRuns []struct {\n+\t\tApp
      struct {\n+\t\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\t\tId          int64    `json:\"id,omitempty\"`\n+\t\t\tName        string   `json:\"name,omitempty\"`\n+\t\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\t\tOwner       struct
      {\n+\t\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"owner,omitempty\"`\n+\t\t\tPermissions struct {\n+\t\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t\t}
      `json:\"permissions,omitempty\"`\n+\t\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t\t} `json:\"app,omitempty\"`\n+\t\tCheckSuite
      struct {\n+\t\t\tId int64 `json:\"id,omitempty\"`\n+\t\t} `json:\"check_suite,omitempty\"`\n+\t\tCompletedAt
      string `json:\"completed_at,omitempty\"`\n+\t\tConclusion  string `json:\"conclusion,omitempty\"`\n+\t\tDetailsUrl  string
      `json:\"details_url,omitempty\"`\n+\t\tExternalId  string `json:\"external_id,omitempty\"`\n+\t\tHeadSha     string
      `json:\"head_sha,omitempty\"`\n+\t\tHtmlUrl     string `json:\"html_url,omitempty\"`\n+\t\tId          int64  `json:\"id,omitempty\"`\n+\t\tName        string
      `json:\"name,omitempty\"`\n+\t\tNodeId      string `json:\"node_id,omitempty\"`\n+\t\tOutput      struct
      {\n+\t\t\tAnnotationsCount int64  `json:\"annotations_count,omitempty\"`\n+\t\t\tAnnotationsUrl   string
      `json:\"annotations_url,omitempty\"`\n+\t\t\tSummary          string `json:\"summary,omitempty\"`\n+\t\t\tText             string
      `json:\"text,omitempty\"`\n+\t\t\tTitle            string `json:\"title,omitempty\"`\n+\t\t}
      `json:\"output,omitempty\"`\n+\t\tPullRequests []struct {\n+\t\t\tBase struct
      {\n+\t\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\t\tRepo struct {\n+\t\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\t\tName
      string `json:\"name,omitempty\"`\n+\t\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t\t}
      `json:\"base,omitempty\"`\n+\t\t\tHead struct {\n+\t\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\t\tRepo
      struct {\n+\t\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\t\tName string
      `json:\"name,omitempty\"`\n+\t\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t\t}
      `json:\"head,omitempty\"`\n+\t\t\tId     int64  `json:\"id,omitempty\"`\n+\t\t\tNumber
      int64  `json:\"number,omitempty\"`\n+\t\t\tUrl    string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"pull_requests,omitempty\"`\n+\t\tStartedAt string `json:\"started_at,omitempty\"`\n+\t\tStatus    string
      `json:\"status,omitempty\"`\n+\t\tUrl       string `json:\"url,omitempty\"`\n+\t}
      `json:\"check_runs,omitempty\"`\n+\tTotalCount int64 `json:\"total_count,omitempty\"`\n+}\n+\n+/*\n+ChecksListAnnotationsReq
      builds requests for \"checks/list-annotations\"\n+\n+List check run annotations.\n+\n+  GET
      /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\n+\n+https://developer.github.com/v3/checks/runs/#list-check-run-annotations\n+*/\n+type
      ChecksListAnnotationsReq struct {\n+\tOwner      string\n+\tRepo       string\n+\tCheckRunId
      int64\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe Checks API
      is currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksListAnnotationsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-runs/%v/annotations\",
      r.Owner, r.Repo, r.CheckRunId)\n+}\n+\n+func (r ChecksListAnnotationsReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ChecksListAnnotationsReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ChecksListAnnotationsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ChecksListAnnotationsReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ChecksListAnnotationsResponseBody200
      is a response body for checks/list-annotations\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#list-check-run-annotations\n+*/\n+type
      ChecksListAnnotationsResponseBody200 []struct {\n+\tAnnotationLevel string `json:\"annotation_level,omitempty\"`\n+\tEndColumn       int64  `json:\"end_column,omitempty\"`\n+\tEndLine         int64  `json:\"end_line,omitempty\"`\n+\tMessage         string
      `json:\"message,omitempty\"`\n+\tPath            string `json:\"path,omitempty\"`\n+\tRawDetails      string
      `json:\"raw_details,omitempty\"`\n+\tStartColumn     int64  `json:\"start_column,omitempty\"`\n+\tStartLine       int64  `json:\"start_line,omitempty\"`\n+\tTitle           string
      `json:\"title,omitempty\"`\n+}\n+\n+/*\n+ChecksGetSuiteReq builds requests for
      \"checks/get-suite\"\n+\n+Get a check suite.\n+\n+  GET /repos/{owner}/{repo}/check-suites/{check_suite_id}\n+\n+https://developer.github.com/v3/checks/suites/#get-a-check-suite\n+*/\n+type
      ChecksGetSuiteReq struct {\n+\tOwner        string\n+\tRepo         string\n+\tCheckSuiteId
      int64\n+\n+\t/*\n+\tThe Checks API is currently available for developers to
      preview. During the\n+\tpreview period, the API may change without advance notice.
      Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksGetSuiteReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-suites/%v\", r.Owner, r.Repo,
      r.CheckSuiteId)\n+}\n+\n+func (r ChecksGetSuiteReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r ChecksGetSuiteReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r ChecksGetSuiteReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"antiope\":
      r.AntiopePreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ChecksGetSuiteReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ChecksGetSuiteResponseBody200
      is a response body for checks/get-suite\n+\n+API documentation: https://developer.github.com/v3/checks/suites/#get-a-check-suite\n+*/\n+type
      ChecksGetSuiteResponseBody200 struct {\n+\tAfter string `json:\"after,omitempty\"`\n+\tApp   struct
      {\n+\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\tId          int64    `json:\"id,omitempty\"`\n+\t\tName        string   `json:\"name,omitempty\"`\n+\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\tOwner       struct
      {\n+\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tBefore       string        `json:\"before,omitempty\"`\n+\tConclusion   string        `json:\"conclusion,omitempty\"`\n+\tHeadBranch   string        `json:\"head_branch,omitempty\"`\n+\tHeadSha      string        `json:\"head_sha,omitempty\"`\n+\tId           int64         `json:\"id,omitempty\"`\n+\tNodeId       string        `json:\"node_id,omitempty\"`\n+\tPullRequests
      []interface{} `json:\"pull_requests,omitempty\"`\n+\tRepository   struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repository,omitempty\"`\n+\tStatus string `json:\"status,omitempty\"`\n+\tUrl    string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ChecksCreateReq builds requests for \"checks/create\"\n+\n+Create
      a check run.\n+\n+  POST /repos/{owner}/{repo}/check-runs\n+\n+https://developer.github.com/v3/checks/runs/#create-a-check-run\n+*/\n+type
      ChecksCreateReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      ChecksCreateReqBody\n+\n+\t/*\n+\tThe Checks API is currently available for
      developers to preview. During the\n+\tpreview period, the API may change without
      advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksCreateReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-runs\", r.Owner, r.Repo)\n+}\n+\n+func
      (r ChecksCreateReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ChecksCreateReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ChecksCreateReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ChecksCreateReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ChecksCreateReqBody
      is a request body for checks/create\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#create-a-check-run\n+*/\n+type
      ChecksCreateReqBody struct {\n+\n+\t/*\n+\t   Displays a button on GitHub that
      can be clicked to alert your app to do\n+\t   additional tasks. For example,
      a code linting app can display a button that\n+\t   automatically fixes detected
      errors. The button created in this object is\n+\t   displayed after the check
      run completes. When a user clicks the button, GitHub\n+\t   sends the [`check_run.requested_action`\n+\t   webhook](https://developer.github.com/webhooks/event-payloads/#check_run)
      to\n+\t   your app. Each action includes a `label`, `identifier` and `description`.
      A\n+\t   maximum of three actions are accepted. See the [`actions`\n+\t   object](https://developer.github.com/v3/checks/runs/#actions-object)\n+\t   description.
      To learn more about check runs and requested actions, see \"[Check\n+\t   runs
      and requested\n+\t   actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"\n+\t   To
      learn more about check runs and requested actions, see \"[Check runs and\n+\t   requested\n+\t   actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"\n+\t*/\n+\tActions
      []struct {\n+\n+\t\t/*\n+\t\t   A short explanation of what this action would
      do. The maximum size is 40\n+\t\t   characters.\n+\t\t*/\n+\t\tDescription *string
      `json:\"description\"`\n+\n+\t\t/*\n+\t\t   A reference for the action on the
      integrator''s system. The maximum size is 20\n+\t\t   characters.\n+\t\t*/\n+\t\tIdentifier
      *string `json:\"identifier\"`\n+\n+\t\t/*\n+\t\t   The text to be displayed
      on a button in the web UI. The maximum size is 20\n+\t\t   characters.\n+\t\t*/\n+\t\tLabel
      *string `json:\"label\"`\n+\t} `json:\"actions,omitempty\"`\n+\n+\t/*\n+\t   The
      time the check completed. This is a timestamp in [ISO\n+\t   8601](https://en.wikipedia.org/wiki/ISO_8601)
      format: `YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tCompletedAt *string `json:\"completed_at,omitempty\"`\n+\n+\t/*\n+\t   **Required
      if you provide `completed_at` or a `status` of `completed`**. The\n+\t   final
      conclusion of the check. Can be one of `success`, `failure`, `neutral`,\n+\t   `cancelled`,
      `skipped`, `timed_out`, or `action_required`. When the conclusion\n+\t   is
      `action_required`, additional details should be provided on the site\n+\t   specified
      by `details_url`.\n+\t   **Note:** Providing `conclusion` will automatically
      set the `status` parameter\n+\t   to `completed`. Only GitHub can change a check
      run conclusion to `stale`.\n+\t*/\n+\tConclusion *string `json:\"conclusion,omitempty\"`\n+\n+\t/*\n+\t   The
      URL of the integrator''s site that has the full details of the check. If the\n+\t   integrator
      does not provide this, then the homepage of the GitHub app is used.\n+\t*/\n+\tDetailsUrl
      *string `json:\"details_url,omitempty\"`\n+\n+\t// A reference for the run on
      the integrator''s system.\n+\tExternalId *string `json:\"external_id,omitempty\"`\n+\n+\t//
      The SHA of the commit.\n+\tHeadSha *string `json:\"head_sha\"`\n+\n+\t// The
      name of the check. For example, \"code-coverage\".\n+\tName *string `json:\"name\"`\n+\n+\t/*\n+\t   Check
      runs can accept a variety of data in the `output` object, including a\n+\t   `title`
      and `summary` and can optionally provide descriptive details about the\n+\t   run.
      See the [`output`\n+\t   object](https://developer.github.com/v3/checks/runs/#output-object)
      description.\n+\t*/\n+\tOutput *struct {\n+\n+\t\t/*\n+\t\t   Adds information
      from your analysis to specific lines of code. Annotations are\n+\t\t   visible
      on GitHub in the **Checks** and **Files changed** tab of the pull\n+\t\t   request.
      The Checks API limits the number of annotations to a maximum of 50 per\n+\t\t   API
      request. To create more than 50 annotations, you have to make multiple\n+\t\t   requests
      to the [Update a check\n+\t\t   run](https://developer.github.com/v3/checks/runs/#update-a-check-run)
      endpoint.\n+\t\t   Each time you update the check run, annotations are appended
      to the list of\n+\t\t   annotations that already exist for the check run. For
      details about how you can\n+\t\t   view annotations on GitHub, see \"[About
      status\n+\t\t   checks](https://help.github.com/articles/about-status-checks#checks)\".
      See the\n+\t\t   [`annotations`\n+\t\t   object](https://developer.github.com/v3/checks/runs/#annotations-object)\n+\t\t   description
      for details about how to use this parameter.\n+\t\t*/\n+\t\tAnnotations []struct
      {\n+\n+\t\t\t// The level of the annotation. Can be one of `notice`, `warning`,
      or `failure`.\n+\t\t\tAnnotationLevel *string `json:\"annotation_level\"`\n+\n+\t\t\t/*\n+\t\t\t   The
      end column of the annotation. Annotations only support `start_column` and\n+\t\t\t   `end_column`
      on the same line. Omit this parameter if `start_line` and\n+\t\t\t   `end_line`
      have different values.\n+\t\t\t*/\n+\t\t\tEndColumn *int64 `json:\"end_column,omitempty\"`\n+\n+\t\t\t//
      The end line of the annotation.\n+\t\t\tEndLine *int64 `json:\"end_line\"`\n+\n+\t\t\t/*\n+\t\t\t   A
      short description of the feedback for these lines of code. The maximum size
      is\n+\t\t\t   64 KB.\n+\t\t\t*/\n+\t\t\tMessage *string `json:\"message\"`\n+\n+\t\t\t/*\n+\t\t\t   The
      path of the file to add an annotation to. For example,\n+\t\t\t   `assets/css/main.css`.\n+\t\t\t*/\n+\t\t\tPath
      *string `json:\"path\"`\n+\n+\t\t\t// Details about this annotation. The maximum
      size is 64 KB.\n+\t\t\tRawDetails *string `json:\"raw_details,omitempty\"`\n+\n+\t\t\t/*\n+\t\t\t   The
      start column of the annotation. Annotations only support `start_column` and\n+\t\t\t   `end_column`
      on the same line. Omit this parameter if `start_line` and\n+\t\t\t   `end_line`
      have different values.\n+\t\t\t*/\n+\t\t\tStartColumn *int64 `json:\"start_column,omitempty\"`\n+\n+\t\t\t//
      The start line of the annotation.\n+\t\t\tStartLine *int64 `json:\"start_line\"`\n+\n+\t\t\t//
      The title that represents the annotation. The maximum size is 255 characters.\n+\t\t\tTitle
      *string `json:\"title,omitempty\"`\n+\t\t} `json:\"annotations,omitempty\"`\n+\n+\t\t/*\n+\t\t   Adds
      images to the output displayed in the GitHub pull request UI. See the\n+\t\t   [`images`
      object](https://developer.github.com/v3/checks/runs/#images-object)\n+\t\t   description
      for details.\n+\t\t*/\n+\t\tImages []struct {\n+\n+\t\t\t// The alternative
      text for the image.\n+\t\t\tAlt *string `json:\"alt\"`\n+\n+\t\t\t// A short
      image description.\n+\t\t\tCaption *string `json:\"caption,omitempty\"`\n+\n+\t\t\t//
      The full URL of the image.\n+\t\t\tImageUrl *string `json:\"image_url\"`\n+\t\t}
      `json:\"images,omitempty\"`\n+\n+\t\t// The summary of the check run. This parameter
      supports Markdown.\n+\t\tSummary *string `json:\"summary\"`\n+\n+\t\t// The
      details of the check run. This parameter supports Markdown.\n+\t\tText *string
      `json:\"text,omitempty\"`\n+\n+\t\t// The title of the check run.\n+\t\tTitle
      *string `json:\"title\"`\n+\t} `json:\"output,omitempty\"`\n+\n+\t/*\n+\t   The
      time that the check run began. This is a timestamp in [ISO\n+\t   8601](https://en.wikipedia.org/wiki/ISO_8601)
      format: `YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tStartedAt *string `json:\"started_at,omitempty\"`\n+\n+\t//
      The current status. Can be one of `queued`, `in_progress`, or `completed`.\n+\tStatus
      *string `json:\"status,omitempty\"`\n+}\n+\n+/*\n+ChecksCreateResponseBody201
      is a response body for checks/create\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#create-a-check-run\n+*/\n+type
      ChecksCreateResponseBody201 struct {\n+\tApp struct {\n+\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\tId          int64    `json:\"id,omitempty\"`\n+\t\tName        string   `json:\"name,omitempty\"`\n+\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\tOwner       struct
      {\n+\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tCheckSuite
      struct {\n+\t\tId int64 `json:\"id,omitempty\"`\n+\t} `json:\"check_suite,omitempty\"`\n+\tCompletedAt
      string `json:\"completed_at,omitempty\"`\n+\tConclusion  string `json:\"conclusion,omitempty\"`\n+\tDetailsUrl  string
      `json:\"details_url,omitempty\"`\n+\tExternalId  string `json:\"external_id,omitempty\"`\n+\tHeadSha     string
      `json:\"head_sha,omitempty\"`\n+\tHtmlUrl     string `json:\"html_url,omitempty\"`\n+\tId          int64  `json:\"id,omitempty\"`\n+\tName        string
      `json:\"name,omitempty\"`\n+\tNodeId      string `json:\"node_id,omitempty\"`\n+\tOutput      struct
      {\n+\t\tSummary string `json:\"summary,omitempty\"`\n+\t\tText    string `json:\"text,omitempty\"`\n+\t\tTitle   string
      `json:\"title,omitempty\"`\n+\t} `json:\"output,omitempty\"`\n+\tPullRequests
      []struct {\n+\t\tBase struct {\n+\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\tRepo
      struct {\n+\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\tName string
      `json:\"name,omitempty\"`\n+\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t}
      `json:\"base,omitempty\"`\n+\t\tHead struct {\n+\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\tRepo
      struct {\n+\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\tName string
      `json:\"name,omitempty\"`\n+\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t}
      `json:\"head,omitempty\"`\n+\t\tId     int64  `json:\"id,omitempty\"`\n+\t\tNumber
      int64  `json:\"number,omitempty\"`\n+\t\tUrl    string `json:\"url,omitempty\"`\n+\t}
      `json:\"pull_requests,omitempty\"`\n+\tStartedAt string `json:\"started_at,omitempty\"`\n+\tStatus    string
      `json:\"status,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ChecksListForSuiteReq
      builds requests for \"checks/list-for-suite\"\n+\n+List check runs in a check
      suite.\n+\n+  GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\n+\n+https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite\n+*/\n+type
      ChecksListForSuiteReq struct {\n+\tOwner        string\n+\tRepo         string\n+\tCheckSuiteId
      int64\n+\n+\t// Returns check runs with the specified `name`.\n+\tCheckName
      *string\n+\n+\t/*\n+\tReturns check runs with the specified `status`. Can be
      one of `queued`,\n+\t`in_progress`, or `completed`.\n+\t*/\n+\tStatus *string\n+\n+\t/*\n+\tFilters
      check runs by their `completed_at` timestamp. Can be one of `latest`\n+\t(returning
      the most recent check runs) or `all`.\n+\t*/\n+\tFilter *string\n+\n+\t// Results
      per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to
      fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe Checks API is currently available for
      developers to preview. During the\n+\tpreview period, the API may change without
      advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksListForSuiteReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-suites/%v/check-runs\",
      r.Owner, r.Repo, r.CheckSuiteId)\n+}\n+\n+func (r ChecksListForSuiteReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ChecksListForSuiteReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.CheckName != nil {\n+\t\tquery.Set(\"check_name\",
      *r.CheckName)\n+\t}\n+\tif r.Status != nil {\n+\t\tquery.Set(\"status\", *r.Status)\n+\t}\n+\tif
      r.Filter != nil {\n+\t\tquery.Set(\"filter\", *r.Filter)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r ChecksListForSuiteReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ChecksListForSuiteReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ChecksListForSuiteResponseBody200 is a response body
      for checks/list-for-suite\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite\n+*/\n+type
      ChecksListForSuiteResponseBody200 struct {\n+\tCheckRuns []struct {\n+\t\tApp
      struct {\n+\t\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\t\tId          int64    `json:\"id,omitempty\"`\n+\t\t\tName        string   `json:\"name,omitempty\"`\n+\t\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\t\tOwner       struct
      {\n+\t\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"owner,omitempty\"`\n+\t\t\tPermissions struct {\n+\t\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t\t}
      `json:\"permissions,omitempty\"`\n+\t\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t\t} `json:\"app,omitempty\"`\n+\t\tCheckSuite
      struct {\n+\t\t\tId int64 `json:\"id,omitempty\"`\n+\t\t} `json:\"check_suite,omitempty\"`\n+\t\tCompletedAt
      string `json:\"completed_at,omitempty\"`\n+\t\tConclusion  string `json:\"conclusion,omitempty\"`\n+\t\tDetailsUrl  string
      `json:\"details_url,omitempty\"`\n+\t\tExternalId  string `json:\"external_id,omitempty\"`\n+\t\tHeadSha     string
      `json:\"head_sha,omitempty\"`\n+\t\tHtmlUrl     string `json:\"html_url,omitempty\"`\n+\t\tId          int64  `json:\"id,omitempty\"`\n+\t\tName        string
      `json:\"name,omitempty\"`\n+\t\tNodeId      string `json:\"node_id,omitempty\"`\n+\t\tOutput      struct
      {\n+\t\t\tAnnotationsCount int64  `json:\"annotations_count,omitempty\"`\n+\t\t\tAnnotationsUrl   string
      `json:\"annotations_url,omitempty\"`\n+\t\t\tSummary          string `json:\"summary,omitempty\"`\n+\t\t\tText             string
      `json:\"text,omitempty\"`\n+\t\t\tTitle            string `json:\"title,omitempty\"`\n+\t\t}
      `json:\"output,omitempty\"`\n+\t\tPullRequests []struct {\n+\t\t\tBase struct
      {\n+\t\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\t\tRepo struct {\n+\t\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\t\tName
      string `json:\"name,omitempty\"`\n+\t\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t\t}
      `json:\"base,omitempty\"`\n+\t\t\tHead struct {\n+\t\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\t\tRepo
      struct {\n+\t\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\t\tName string
      `json:\"name,omitempty\"`\n+\t\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t\t}
      `json:\"head,omitempty\"`\n+\t\t\tId     int64  `json:\"id,omitempty\"`\n+\t\t\tNumber
      int64  `json:\"number,omitempty\"`\n+\t\t\tUrl    string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"pull_requests,omitempty\"`\n+\t\tStartedAt string `json:\"started_at,omitempty\"`\n+\t\tStatus    string
      `json:\"status,omitempty\"`\n+\t\tUrl       string `json:\"url,omitempty\"`\n+\t}
      `json:\"check_runs,omitempty\"`\n+\tTotalCount int64 `json:\"total_count,omitempty\"`\n+}\n+\n+/*\n+ChecksGetReq
      builds requests for \"checks/get\"\n+\n+Get a check run.\n+\n+  GET /repos/{owner}/{repo}/check-runs/{check_run_id}\n+\n+https://developer.github.com/v3/checks/runs/#get-a-check-run\n+*/\n+type
      ChecksGetReq struct {\n+\tOwner      string\n+\tRepo       string\n+\tCheckRunId
      int64\n+\n+\t/*\n+\tThe Checks API is currently available for developers to
      preview. During the\n+\tpreview period, the API may change without advance notice.
      Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksGetReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-runs/%v\", r.Owner, r.Repo,
      r.CheckRunId)\n+}\n+\n+func (r ChecksGetReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ChecksGetReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ChecksGetReq) header() http.Header {\n+\theaderVals :=
      map[string]*string{}\n+\tpreviewVals := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ChecksGetReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ChecksGetResponseBody200
      is a response body for checks/get\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#get-a-check-run\n+*/\n+type
      ChecksGetResponseBody200 struct {\n+\tApp struct {\n+\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\tId          int64    `json:\"id,omitempty\"`\n+\t\tName        string   `json:\"name,omitempty\"`\n+\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\tOwner       struct
      {\n+\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tCheckSuite
      struct {\n+\t\tId int64 `json:\"id,omitempty\"`\n+\t} `json:\"check_suite,omitempty\"`\n+\tCompletedAt
      string `json:\"completed_at,omitempty\"`\n+\tConclusion  string `json:\"conclusion,omitempty\"`\n+\tDetailsUrl  string
      `json:\"details_url,omitempty\"`\n+\tExternalId  string `json:\"external_id,omitempty\"`\n+\tHeadSha     string
      `json:\"head_sha,omitempty\"`\n+\tHtmlUrl     string `json:\"html_url,omitempty\"`\n+\tId          int64  `json:\"id,omitempty\"`\n+\tName        string
      `json:\"name,omitempty\"`\n+\tNodeId      string `json:\"node_id,omitempty\"`\n+\tOutput      struct
      {\n+\t\tAnnotationsCount int64  `json:\"annotations_count,omitempty\"`\n+\t\tAnnotationsUrl   string
      `json:\"annotations_url,omitempty\"`\n+\t\tSummary          string `json:\"summary,omitempty\"`\n+\t\tText             string
      `json:\"text,omitempty\"`\n+\t\tTitle            string `json:\"title,omitempty\"`\n+\t}
      `json:\"output,omitempty\"`\n+\tPullRequests []struct {\n+\t\tBase struct {\n+\t\t\tRef  string
      `json:\"ref,omitempty\"`\n+\t\t\tRepo struct {\n+\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\tName
      string `json:\"name,omitempty\"`\n+\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t}
      `json:\"base,omitempty\"`\n+\t\tHead struct {\n+\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\tRepo
      struct {\n+\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\tName string
      `json:\"name,omitempty\"`\n+\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t}
      `json:\"head,omitempty\"`\n+\t\tId     int64  `json:\"id,omitempty\"`\n+\t\tNumber
      int64  `json:\"number,omitempty\"`\n+\t\tUrl    string `json:\"url,omitempty\"`\n+\t}
      `json:\"pull_requests,omitempty\"`\n+\tStartedAt string `json:\"started_at,omitempty\"`\n+\tStatus    string
      `json:\"status,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ChecksUpdateReq
      builds requests for \"checks/update\"\n+\n+Update a check run.\n+\n+  PATCH
      /repos/{owner}/{repo}/check-runs/{check_run_id}\n+\n+https://developer.github.com/v3/checks/runs/#update-a-check-run\n+*/\n+type
      ChecksUpdateReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tCheckRunId  int64\n+\tRequestBody
      ChecksUpdateReqBody\n+\n+\t/*\n+\tThe Checks API is currently available for
      developers to preview. During the\n+\tpreview period, the API may change without
      advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksUpdateReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-runs/%v\", r.Owner, r.Repo,
      r.CheckRunId)\n+}\n+\n+func (r ChecksUpdateReq) method() string {\n+\treturn
      \"PATCH\"\n+}\n+\n+func (r ChecksUpdateReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r ChecksUpdateReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"antiope\":
      r.AntiopePreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ChecksUpdateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ChecksUpdateReqBody is a request
      body for checks/update\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#update-a-check-run\n+*/\n+type
      ChecksUpdateReqBody struct {\n+\n+\t/*\n+\t   Possible further actions the integrator
      can perform, which a user may trigger.\n+\t   Each action includes a `label`,
      `identifier` and `description`. A maximum of\n+\t   three actions are accepted.
      See the [`actions`\n+\t   object](https://developer.github.com/v3/checks/runs/#actions-object)\n+\t   description.
      To learn more about check runs and requested actions, see \"[Check\n+\t   runs
      and requested\n+\t   actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions).\"\n+\t*/\n+\tActions
      []struct {\n+\n+\t\t/*\n+\t\t   A short explanation of what this action would
      do. The maximum size is 40\n+\t\t   characters.\n+\t\t*/\n+\t\tDescription *string
      `json:\"description\"`\n+\n+\t\t/*\n+\t\t   A reference for the action on the
      integrator''s system. The maximum size is 20\n+\t\t   characters.\n+\t\t*/\n+\t\tIdentifier
      *string `json:\"identifier\"`\n+\n+\t\t/*\n+\t\t   The text to be displayed
      on a button in the web UI. The maximum size is 20\n+\t\t   characters.\n+\t\t*/\n+\t\tLabel
      *string `json:\"label\"`\n+\t} `json:\"actions,omitempty\"`\n+\n+\t/*\n+\t   The
      time the check completed. This is a timestamp in [ISO\n+\t   8601](https://en.wikipedia.org/wiki/ISO_8601)
      format: `YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tCompletedAt *string `json:\"completed_at,omitempty\"`\n+\n+\t/*\n+\t   **Required
      if you provide `completed_at` or a `status` of `completed`**. The\n+\t   final
      conclusion of the check. Can be one of `success`, `failure`, `neutral`,\n+\t   `cancelled`,
      `skipped`, `timed_out`, or `action_required`.\n+\t   **Note:** Providing `conclusion`
      will automatically set the `status` parameter\n+\t   to `completed`. Only GitHub
      can change a check run conclusion to `stale`.\n+\t*/\n+\tConclusion *string
      `json:\"conclusion,omitempty\"`\n+\n+\t// The URL of the integrator''s site
      that has the full details of the check.\n+\tDetailsUrl *string `json:\"details_url,omitempty\"`\n+\n+\t//
      A reference for the run on the integrator''s system.\n+\tExternalId *string
      `json:\"external_id,omitempty\"`\n+\n+\t// The name of the check. For example,
      \"code-coverage\".\n+\tName *string `json:\"name,omitempty\"`\n+\n+\t/*\n+\t   Check
      runs can accept a variety of data in the `output` object, including a\n+\t   `title`
      and `summary` and can optionally provide descriptive details about the\n+\t   run.
      See the [`output`\n+\t   object](https://developer.github.com/v3/checks/runs/#output-object-1)\n+\t   description.\n+\t*/\n+\tOutput
      *struct {\n+\n+\t\t/*\n+\t\t   Adds information from your analysis to specific
      lines of code. Annotations are\n+\t\t   visible in GitHub''s pull request UI.
      Annotations are visible in GitHub''s pull\n+\t\t   request UI. The Checks API
      limits the number of annotations to a maximum of 50\n+\t\t   per API request.
      To create more than 50 annotations, you have to make multiple\n+\t\t   requests
      to the [Update a check\n+\t\t   run](https://developer.github.com/v3/checks/runs/#update-a-check-run)
      endpoint.\n+\t\t   Each time you update the check run, annotations are appended
      to the list of\n+\t\t   annotations that already exist for the check run. For
      details about annotations\n+\t\t   in the UI, see \"[About status\n+\t\t   checks](https://help.github.com/articles/about-status-checks#checks)\".
      See the\n+\t\t   [`annotations`\n+\t\t   object](https://developer.github.com/v3/checks/runs/#annotations-object-1)\n+\t\t   description
      for details.\n+\t\t*/\n+\t\tAnnotations []struct {\n+\n+\t\t\t// The level of
      the annotation. Can be one of `notice`, `warning`, or `failure`.\n+\t\t\tAnnotationLevel
      *string `json:\"annotation_level\"`\n+\n+\t\t\t/*\n+\t\t\t   The end column
      of the annotation. Annotations only support `start_column` and\n+\t\t\t   `end_column`
      on the same line. Omit this parameter if `start_line` and\n+\t\t\t   `end_line`
      have different values.\n+\t\t\t*/\n+\t\t\tEndColumn *int64 `json:\"end_column,omitempty\"`\n+\n+\t\t\t//
      The end line of the annotation.\n+\t\t\tEndLine *int64 `json:\"end_line\"`\n+\n+\t\t\t/*\n+\t\t\t   A
      short description of the feedback for these lines of code. The maximum size
      is\n+\t\t\t   64 KB.\n+\t\t\t*/\n+\t\t\tMessage *string `json:\"message\"`\n+\n+\t\t\t/*\n+\t\t\t   The
      path of the file to add an annotation to. For example,\n+\t\t\t   `assets/css/main.css`.\n+\t\t\t*/\n+\t\t\tPath
      *string `json:\"path\"`\n+\n+\t\t\t// Details about this annotation. The maximum
      size is 64 KB.\n+\t\t\tRawDetails *string `json:\"raw_details,omitempty\"`\n+\n+\t\t\t/*\n+\t\t\t   The
      start column of the annotation. Annotations only support `start_column` and\n+\t\t\t   `end_column`
      on the same line. Omit this parameter if `start_line` and\n+\t\t\t   `end_line`
      have different values.\n+\t\t\t*/\n+\t\t\tStartColumn *int64 `json:\"start_column,omitempty\"`\n+\n+\t\t\t//
      The start line of the annotation.\n+\t\t\tStartLine *int64 `json:\"start_line\"`\n+\n+\t\t\t//
      The title that represents the annotation. The maximum size is 255 characters.\n+\t\t\tTitle
      *string `json:\"title,omitempty\"`\n+\t\t} `json:\"annotations,omitempty\"`\n+\n+\t\t/*\n+\t\t   Adds
      images to the output displayed in the GitHub pull request UI. See the\n+\t\t   [`images`\n+\t\t   object](https://developer.github.com/v3/checks/runs/#annotations-object-1)\n+\t\t   description
      for details.\n+\t\t*/\n+\t\tImages []struct {\n+\n+\t\t\t// The alternative
      text for the image.\n+\t\t\tAlt *string `json:\"alt\"`\n+\n+\t\t\t// A short
      image description.\n+\t\t\tCaption *string `json:\"caption,omitempty\"`\n+\n+\t\t\t//
      The full URL of the image.\n+\t\t\tImageUrl *string `json:\"image_url\"`\n+\t\t}
      `json:\"images,omitempty\"`\n+\n+\t\t// Can contain Markdown.\n+\t\tSummary
      *string `json:\"summary\"`\n+\n+\t\t// Can contain Markdown.\n+\t\tText *string
      `json:\"text,omitempty\"`\n+\n+\t\t// **Required**.\n+\t\tTitle *string `json:\"title,omitempty\"`\n+\t}
      `json:\"output,omitempty\"`\n+\n+\t/*\n+\t   This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\n+\t   format:
      `YYYY-MM-DDTHH:MM:SSZ`.\n+\t*/\n+\tStartedAt *string `json:\"started_at,omitempty\"`\n+\n+\t//
      The current status. Can be one of `queued`, `in_progress`, or `completed`.\n+\tStatus
      *string `json:\"status,omitempty\"`\n+}\n+\n+/*\n+ChecksUpdateResponseBody200
      is a response body for checks/update\n+\n+API documentation: https://developer.github.com/v3/checks/runs/#update-a-check-run\n+*/\n+type
      ChecksUpdateResponseBody200 struct {\n+\tApp struct {\n+\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\tId          int64    `json:\"id,omitempty\"`\n+\t\tName        string   `json:\"name,omitempty\"`\n+\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\tOwner       struct
      {\n+\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tCheckSuite
      struct {\n+\t\tId int64 `json:\"id,omitempty\"`\n+\t} `json:\"check_suite,omitempty\"`\n+\tCompletedAt
      string `json:\"completed_at,omitempty\"`\n+\tConclusion  string `json:\"conclusion,omitempty\"`\n+\tDetailsUrl  string
      `json:\"details_url,omitempty\"`\n+\tExternalId  string `json:\"external_id,omitempty\"`\n+\tHeadSha     string
      `json:\"head_sha,omitempty\"`\n+\tHtmlUrl     string `json:\"html_url,omitempty\"`\n+\tId          int64  `json:\"id,omitempty\"`\n+\tName        string
      `json:\"name,omitempty\"`\n+\tNodeId      string `json:\"node_id,omitempty\"`\n+\tOutput      struct
      {\n+\t\tAnnotationsCount int64  `json:\"annotations_count,omitempty\"`\n+\t\tAnnotationsUrl   string
      `json:\"annotations_url,omitempty\"`\n+\t\tSummary          string `json:\"summary,omitempty\"`\n+\t\tText             string
      `json:\"text,omitempty\"`\n+\t\tTitle            string `json:\"title,omitempty\"`\n+\t}
      `json:\"output,omitempty\"`\n+\tPullRequests []struct {\n+\t\tBase struct {\n+\t\t\tRef  string
      `json:\"ref,omitempty\"`\n+\t\t\tRepo struct {\n+\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\tName
      string `json:\"name,omitempty\"`\n+\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t}
      `json:\"base,omitempty\"`\n+\t\tHead struct {\n+\t\t\tRef  string `json:\"ref,omitempty\"`\n+\t\t\tRepo
      struct {\n+\t\t\t\tId   int64  `json:\"id,omitempty\"`\n+\t\t\t\tName string
      `json:\"name,omitempty\"`\n+\t\t\t\tUrl  string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"repo,omitempty\"`\n+\t\t\tSha string `json:\"sha,omitempty\"`\n+\t\t}
      `json:\"head,omitempty\"`\n+\t\tId     int64  `json:\"id,omitempty\"`\n+\t\tNumber
      int64  `json:\"number,omitempty\"`\n+\t\tUrl    string `json:\"url,omitempty\"`\n+\t}
      `json:\"pull_requests,omitempty\"`\n+\tStartedAt string `json:\"started_at,omitempty\"`\n+\tStatus    string
      `json:\"status,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ChecksListSuitesForRefReq
      builds requests for \"checks/list-suites-for-ref\"\n+\n+List check suites for
      a Git reference.\n+\n+  GET /repos/{owner}/{repo}/commits/{ref}/check-suites\n+\n+https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference\n+*/\n+type
      ChecksListSuitesForRefReq struct {\n+\tOwner string\n+\tRepo  string\n+\tRef   string\n+\n+\t//
      Filters check suites by GitHub App `id`.\n+\tAppId *int64\n+\n+\t/*\n+\tFilters
      checks suites by the name of the [check\n+\trun](https://developer.github.com/v3/checks/runs/).\n+\t*/\n+\tCheckName
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe Checks API
      is currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksListSuitesForRefReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/commits/%v/check-suites\",
      r.Owner, r.Repo, r.Ref)\n+}\n+\n+func (r ChecksListSuitesForRefReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ChecksListSuitesForRefReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.AppId != nil {\n+\t\tquery.Set(\"app_id\",
      strconv.FormatInt(*r.AppId, 10))\n+\t}\n+\tif r.CheckName != nil {\n+\t\tquery.Set(\"check_name\",
      *r.CheckName)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ChecksListSuitesForRefReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ChecksListSuitesForRefReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ChecksListSuitesForRefResponseBody200
      is a response body for checks/list-suites-for-ref\n+\n+API documentation: https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference\n+*/\n+type
      ChecksListSuitesForRefResponseBody200 struct {\n+\tCheckSuites []struct {\n+\t\tAfter
      string `json:\"after,omitempty\"`\n+\t\tApp   struct {\n+\t\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\t\tId          int64    `json:\"id,omitempty\"`\n+\t\t\tName        string   `json:\"name,omitempty\"`\n+\t\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\t\tOwner       struct
      {\n+\t\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"owner,omitempty\"`\n+\t\t\tPermissions struct {\n+\t\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t\t}
      `json:\"permissions,omitempty\"`\n+\t\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t\t} `json:\"app,omitempty\"`\n+\t\tBefore       string        `json:\"before,omitempty\"`\n+\t\tConclusion   string        `json:\"conclusion,omitempty\"`\n+\t\tHeadBranch   string        `json:\"head_branch,omitempty\"`\n+\t\tHeadSha      string        `json:\"head_sha,omitempty\"`\n+\t\tId           int64         `json:\"id,omitempty\"`\n+\t\tNodeId       string        `json:\"node_id,omitempty\"`\n+\t\tPullRequests
      []interface{} `json:\"pull_requests,omitempty\"`\n+\t\tRepository   struct {\n+\t\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\t\tName             string
      `json:\"name,omitempty\"`\n+\t\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\t\tOwner            struct
      {\n+\t\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t\t}
      `json:\"owner,omitempty\"`\n+\t\t\tPermissions struct {\n+\t\t\t\tAdmin bool
      `json:\"admin,omitempty\"`\n+\t\t\t\tPull  bool `json:\"pull,omitempty\"`\n+\t\t\t\tPush  bool
      `json:\"push,omitempty\"`\n+\t\t\t} `json:\"permissions,omitempty\"`\n+\t\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t\t}
      `json:\"repository,omitempty\"`\n+\t\tStatus string `json:\"status,omitempty\"`\n+\t\tUrl    string
      `json:\"url,omitempty\"`\n+\t} `json:\"check_suites,omitempty\"`\n+\tTotalCount
      int64 `json:\"total_count,omitempty\"`\n+}\n+\n+/*\n+ChecksSetSuitesPreferencesReq
      builds requests for \"checks/set-suites-preferences\"\n+\n+Update repository
      preferences for check suites.\n+\n+  PATCH /repos/{owner}/{repo}/check-suites/preferences\n+\n+https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites\n+*/\n+type
      ChecksSetSuitesPreferencesReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      ChecksSetSuitesPreferencesReqBody\n+\n+\t/*\n+\tThe Checks API is currently
      available for developers to preview. During the\n+\tpreview period, the API
      may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksSetSuitesPreferencesReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-suites/preferences\",
      r.Owner, r.Repo)\n+}\n+\n+func (r ChecksSetSuitesPreferencesReq) method() string
      {\n+\treturn \"PATCH\"\n+}\n+\n+func (r ChecksSetSuitesPreferencesReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ChecksSetSuitesPreferencesReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ChecksSetSuitesPreferencesReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ChecksSetSuitesPreferencesReqBody
      is a request body for checks/set-suites-preferences\n+\n+API documentation:
      https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites\n+*/\n+type
      ChecksSetSuitesPreferencesReqBody struct {\n+\n+\t/*\n+\t   Enables or disables
      automatic creation of CheckSuite events upon pushes to the\n+\t   repository.
      Enabled by default. See the [`auto_trigger_checks`\n+\t   object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object)\n+\t   description
      for details.\n+\t*/\n+\tAutoTriggerChecks []struct {\n+\n+\t\t// The `id` of
      the GitHub App.\n+\t\tAppId *int64 `json:\"app_id\"`\n+\n+\t\t/*\n+\t\t   Set
      to `true` to enable automatic creation of CheckSuite events upon pushes to\n+\t\t   the
      repository, or `false` to disable them.\n+\t\t*/\n+\t\tSetting *bool `json:\"setting\"`\n+\t}
      `json:\"auto_trigger_checks,omitempty\"`\n+}\n+\n+/*\n+ChecksSetSuitesPreferencesResponseBody200
      is a response body for checks/set-suites-preferences\n+\n+API documentation:
      https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites\n+*/\n+type
      ChecksSetSuitesPreferencesResponseBody200 struct {\n+\tPreferences struct {\n+\t\tAutoTriggerChecks
      []struct {\n+\t\t\tAppId   int64 `json:\"app_id\"`\n+\t\t\tSetting bool  `json:\"setting\"`\n+\t\t}
      `json:\"auto_trigger_checks,omitempty\"`\n+\t} `json:\"preferences,omitempty\"`\n+\tRepository
      struct {\n+\t\tAllowMergeCommit bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge
      bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repository,omitempty\"`\n+}\n+\n+/*\n+ChecksRerequestSuiteReq builds
      requests for \"checks/rerequest-suite\"\n+\n+Rerequest a check suite.\n+\n+  POST
      /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest\n+\n+https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite\n+*/\n+type
      ChecksRerequestSuiteReq struct {\n+\tOwner        string\n+\tRepo         string\n+\tCheckSuiteId
      int64\n+\n+\t/*\n+\tThe Checks API is currently available for developers to
      preview. During the\n+\tpreview period, the API may change without advance notice.
      Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksRerequestSuiteReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-suites/%v/rerequest\",
      r.Owner, r.Repo, r.CheckSuiteId)\n+}\n+\n+func (r ChecksRerequestSuiteReq) method()
      string {\n+\treturn \"POST\"\n+}\n+\n+func (r ChecksRerequestSuiteReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ChecksRerequestSuiteReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"antiope\": r.AntiopePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ChecksRerequestSuiteReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ChecksCreateSuiteReq
      builds requests for \"checks/create-suite\"\n+\n+Create a check suite.\n+\n+  POST
      /repos/{owner}/{repo}/check-suites\n+\n+https://developer.github.com/v3/checks/suites/#create-a-check-suite\n+*/\n+type
      ChecksCreateSuiteReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      ChecksCreateSuiteReqBody\n+\n+\t/*\n+\tThe Checks API is currently available
      for developers to preview. During the\n+\tpreview period, the API may change
      without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tAntiopePreview bool\n+}\n+\n+func (r ChecksCreateSuiteReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/check-suites\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ChecksCreateSuiteReq) method() string {\n+\treturn
      \"POST\"\n+}\n+\n+func (r ChecksCreateSuiteReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r ChecksCreateSuiteReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"antiope\":
      r.AntiopePreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ChecksCreateSuiteReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ChecksCreateSuiteReqBody
      is a request body for checks/create-suite\n+\n+API documentation: https://developer.github.com/v3/checks/suites/#create-a-check-suite\n+*/\n+type
      ChecksCreateSuiteReqBody struct {\n+\n+\t// The sha of the head commit.\n+\tHeadSha
      *string `json:\"head_sha\"`\n+}\n+\n+/*\n+ChecksCreateSuiteResponseBody201 is
      a response body for checks/create-suite\n+\n+API documentation: https://developer.github.com/v3/checks/suites/#create-a-check-suite\n+*/\n+type
      ChecksCreateSuiteResponseBody201 struct {\n+\tAfter string `json:\"after,omitempty\"`\n+\tApp   struct
      {\n+\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\tDescription
      string   `json:\"description,omitempty\"`\n+\t\tEvents      []string `json:\"events,omitempty\"`\n+\t\tExternalUrl
      string   `json:\"external_url,omitempty\"`\n+\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\tId          int64    `json:\"id,omitempty\"`\n+\t\tName        string   `json:\"name,omitempty\"`\n+\t\tNodeId      string   `json:\"node_id,omitempty\"`\n+\t\tOwner       struct
      {\n+\t\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\t\tId               int64  `json:\"id,omitempty\"`\n+\t\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\t\tLogin            string `json:\"login,omitempty\"`\n+\t\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\t\tUrl              string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tContents   string
      `json:\"contents,omitempty\"`\n+\t\t\tIssues     string `json:\"issues,omitempty\"`\n+\t\t\tMetadata   string
      `json:\"metadata,omitempty\"`\n+\t\t\tSingleFile string `json:\"single_file,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tSlug      string `json:\"slug,omitempty\"`\n+\t\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tBefore       string        `json:\"before,omitempty\"`\n+\tConclusion   string        `json:\"conclusion,omitempty\"`\n+\tHeadBranch   string        `json:\"head_branch,omitempty\"`\n+\tHeadSha      string        `json:\"head_sha,omitempty\"`\n+\tId           int64         `json:\"id,omitempty\"`\n+\tNodeId       string        `json:\"node_id,omitempty\"`\n+\tPullRequests
      []interface{} `json:\"pull_requests,omitempty\"`\n+\tRepository   struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repository,omitempty\"`\n+\tStatus string `json:\"status,omitempty\"`\n+\tUrl    string
      `json:\"url,omitempty\"`\n+}"},{"sha":"025be89fb818179f07ed077ccb2083a1354ab7e9","filename":"zz_code_scanning_gen.go","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_code_scanning_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_code_scanning_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_code_scanning_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,136 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+CodeScanningGetAlertReq
      builds requests for \"code-scanning/get-alert\"\n+\n+Get a code scanning alert.\n+\n+  GET
      /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}\n+\n+https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert\n+*/\n+type
      CodeScanningGetAlertReq struct {\n+\tOwner   string\n+\tRepo    string\n+\tAlertId
      int64\n+}\n+\n+func (r CodeScanningGetAlertReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/code-scanning/alerts/%v\", r.Owner, r.Repo, r.AlertId)\n+}\n+\n+func
      (r CodeScanningGetAlertReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r CodeScanningGetAlertReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r CodeScanningGetAlertReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r CodeScanningGetAlertReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+CodeScanningGetAlertResponseBody200
      is a response body for code-scanning/get-alert\n+\n+API documentation: https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert\n+*/\n+type
      CodeScanningGetAlertResponseBody200 struct {\n+\tClosedAt        string `json:\"closed_at,omitempty\"`\n+\tClosedBy        string
      `json:\"closed_by,omitempty\"`\n+\tCreatedAt       string `json:\"created_at,omitempty\"`\n+\tHtmlUrl         string
      `json:\"html_url,omitempty\"`\n+\tOpen            bool   `json:\"open,omitempty\"`\n+\tRuleDescription
      string `json:\"rule_description,omitempty\"`\n+\tRuleId          string `json:\"rule_id,omitempty\"`\n+\tRuleSeverity    string
      `json:\"rule_severity,omitempty\"`\n+\tTool            string `json:\"tool,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+CodeScanningListAlertsForRepoReq builds
      requests for \"code-scanning/list-alerts-for-repo\"\n+\n+List code scanning
      alerts for a repository.\n+\n+  GET /repos/{owner}/{repo}/code-scanning/alerts\n+\n+https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository\n+*/\n+type
      CodeScanningListAlertsForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t//
      Set to `closed` to list only closed code scanning alerts.\n+\tState *string\n+\n+\t/*\n+\tReturns
      a list of code scanning alerts for a specific brach reference. The `ref`\n+\tmust
      be formatted as `heads/<branch name>`.\n+\t*/\n+\tRef *string\n+}\n+\n+func
      (r CodeScanningListAlertsForRepoReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/code-scanning/alerts\",
      r.Owner, r.Repo)\n+}\n+\n+func (r CodeScanningListAlertsForRepoReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r CodeScanningListAlertsForRepoReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.State != nil {\n+\t\tquery.Set(\"state\",
      *r.State)\n+\t}\n+\tif r.Ref != nil {\n+\t\tquery.Set(\"ref\", *r.Ref)\n+\t}\n+\treturn
      query\n+}\n+\n+func (r CodeScanningListAlertsForRepoReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r CodeScanningListAlertsForRepoReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+CodeScanningListAlertsForRepoResponseBody200 is a response
      body for code-scanning/list-alerts-for-repo\n+\n+API documentation: https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository\n+*/\n+type
      CodeScanningListAlertsForRepoResponseBody200 []struct {\n+\tClosedAt        string
      `json:\"closed_at,omitempty\"`\n+\tClosedBy        string `json:\"closed_by,omitempty\"`\n+\tCreatedAt       string
      `json:\"created_at,omitempty\"`\n+\tHtmlUrl         string `json:\"html_url,omitempty\"`\n+\tOpen            bool   `json:\"open,omitempty\"`\n+\tRuleDescription
      string `json:\"rule_description,omitempty\"`\n+\tRuleId          string `json:\"rule_id,omitempty\"`\n+\tRuleSeverity    string
      `json:\"rule_severity,omitempty\"`\n+\tTool            string `json:\"tool,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+}"},{"sha":"6e69bae90a75cf4a9f66f7a73cf55865e5e26a8b","filename":"zz_codes_of_conduct_gen.go","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_codes_of_conduct_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_codes_of_conduct_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_codes_of_conduct_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,174 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+CodesOfConductGetAllCodesOfConductReq
      builds requests for \"codes-of-conduct/get-all-codes-of-conduct\"\n+\n+List
      all codes of conduct.\n+\n+  GET /codes_of_conduct\n+\n+https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct\n+*/\n+type
      CodesOfConductGetAllCodesOfConductReq struct {\n+\n+\t/*\n+\tThe Codes of Conduct
      API is currently available for developers to preview.\n+\n+\tTo access the API
      during the preview period, you must set this to true.\n+\t*/\n+\tScarletWitchPreview
      bool\n+}\n+\n+func (r CodesOfConductGetAllCodesOfConductReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/codes_of_conduct\")\n+}\n+\n+func (r CodesOfConductGetAllCodesOfConductReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r CodesOfConductGetAllCodesOfConductReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r CodesOfConductGetAllCodesOfConductReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"scarlet-witch\":
      r.ScarletWitchPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r CodesOfConductGetAllCodesOfConductReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+CodesOfConductGetAllCodesOfConductResponseBody200
      is a response body for codes-of-conduct/get-all-codes-of-conduct\n+\n+API documentation:
      https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct\n+*/\n+type
      CodesOfConductGetAllCodesOfConductResponseBody200 []struct {\n+\tKey  string
      `json:\"key,omitempty\"`\n+\tName string `json:\"name,omitempty\"`\n+\tUrl  string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+CodesOfConductGetForRepoReq builds requests
      for \"codes-of-conduct/get-for-repo\"\n+\n+Get the contents of a repository''s
      code of conduct.\n+\n+  GET /repos/{owner}/{repo}/community/code_of_conduct\n+\n+https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct\n+*/\n+type
      CodesOfConductGetForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t/*\n+\tThe
      Codes of Conduct API is currently available for developers to preview.\n+\n+\tTo
      access the API during the preview period, you must set this to true.\n+\t*/\n+\tScarletWitchPreview
      bool\n+}\n+\n+func (r CodesOfConductGetForRepoReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/community/code_of_conduct\", r.Owner, r.Repo)\n+}\n+\n+func
      (r CodesOfConductGetForRepoReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r CodesOfConductGetForRepoReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r CodesOfConductGetForRepoReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"scarlet-witch\":
      r.ScarletWitchPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r CodesOfConductGetForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+CodesOfConductGetForRepoResponseBody200
      is a response body for codes-of-conduct/get-for-repo\n+\n+API documentation:
      https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct\n+*/\n+type
      CodesOfConductGetForRepoResponseBody200 struct {\n+\tBody string `json:\"body,omitempty\"`\n+\tKey  string
      `json:\"key,omitempty\"`\n+\tName string `json:\"name,omitempty\"`\n+\tUrl  string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+CodesOfConductGetConductCodeReq builds
      requests for \"codes-of-conduct/get-conduct-code\"\n+\n+Get an individual code
      of conduct.\n+\n+  GET /codes_of_conduct/{key}\n+\n+https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct\n+*/\n+type
      CodesOfConductGetConductCodeReq struct {\n+\tKey string\n+\n+\t/*\n+\tThe Codes
      of Conduct API is currently available for developers to preview.\n+\n+\tTo access
      the API during the preview period, you must set this to true.\n+\t*/\n+\tScarletWitchPreview
      bool\n+}\n+\n+func (r CodesOfConductGetConductCodeReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/codes_of_conduct/%v\", r.Key)\n+}\n+\n+func (r CodesOfConductGetConductCodeReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r CodesOfConductGetConductCodeReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r CodesOfConductGetConductCodeReq) header() http.Header {\n+\theaderVals :=
      map[string]*string{}\n+\tpreviewVals := map[string]bool{\"scarlet-witch\": r.ScarletWitchPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r CodesOfConductGetConductCodeReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+CodesOfConductGetConductCodeResponseBody200 is a response
      body for codes-of-conduct/get-conduct-code\n+\n+API documentation: https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct\n+*/\n+type
      CodesOfConductGetConductCodeResponseBody200 struct {\n+\tBody string `json:\"body,omitempty\"`\n+\tKey  string
      `json:\"key,omitempty\"`\n+\tName string `json:\"name,omitempty\"`\n+\tUrl  string
      `json:\"url,omitempty\"`\n+}"},{"sha":"8a058453ccf649e8e2789ebaca26798df7556ceb","filename":"zz_emojis_gen.go","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_emojis_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_emojis_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_emojis_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,44 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+EmojisGetReq
      builds requests for \"emojis/get\"\n+\n+Get.\n+\n+  GET /emojis\n+\n+https://developer.github.com/v3/emojis/#emojis\n+*/\n+type
      EmojisGetReq struct{}\n+\n+func (r EmojisGetReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/emojis\")\n+}\n+\n+func (r EmojisGetReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r EmojisGetReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r EmojisGetReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r EmojisGetReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}"},{"sha":"6b1037bf8600193d2b1a4fba7cdf9e07498ba66c","filename":"zz_gists_gen.go","status":"added","additions":1825,"deletions":0,"changes":1825,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_gists_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_gists_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_gists_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,1825 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+GistsListStarredReq
      builds requests for \"gists/list-starred\"\n+\n+List starred gists.\n+\n+  GET
      /gists/starred\n+\n+https://developer.github.com/v3/gists/#list-starred-gists\n+*/\n+type
      GistsListStarredReq struct {\n+\n+\t/*\n+\tThis is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\n+\tformat:
      `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are\n+\treturned.\n+\t*/\n+\tSince
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func (r GistsListStarredReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/starred\")\n+}\n+\n+func
      (r GistsListStarredReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r
      GistsListStarredReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.Since != nil {\n+\t\tquery.Set(\"since\", *r.Since)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r GistsListStarredReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GistsListStarredReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsListStarredResponseBody200
      is a response body for gists/list-starred\n+\n+API documentation: https://developer.github.com/v3/gists/#list-starred-gists\n+*/\n+type
      GistsListStarredResponseBody200 []struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tFilename string      `json:\"filename,omitempty\"`\n+\t\tLanguage string      `json:\"language,omitempty\"`\n+\t\tRawUrl   string      `json:\"raw_url,omitempty\"`\n+\t\tSize     json.Number
      `json:\"size,omitempty\"`\n+\t\tType     string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForksUrl   string `json:\"forks_url,omitempty\"`\n+\tGitPullUrl
      string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl string `json:\"git_push_url,omitempty\"`\n+\tHtmlUrl    string
      `json:\"html_url,omitempty\"`\n+\tId         string `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tOwner      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsDeleteCommentReq
      builds requests for \"gists/delete-comment\"\n+\n+Delete a comment.\n+\n+  DELETE
      /gists/{gist_id}/comments/{comment_id}\n+\n+https://developer.github.com/v3/gists/comments/#delete-a-comment\n+*/\n+type
      GistsDeleteCommentReq struct {\n+\tGistId    string\n+\tCommentId int64\n+}\n+\n+func
      (r GistsDeleteCommentReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/comments/%v\",
      r.GistId, r.CommentId)\n+}\n+\n+func (r GistsDeleteCommentReq) method() string
      {\n+\treturn \"DELETE\"\n+}\n+\n+func (r GistsDeleteCommentReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GistsDeleteCommentReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsDeleteCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsGetCommentReq builds
      requests for \"gists/get-comment\"\n+\n+Get a single comment.\n+\n+  GET /gists/{gist_id}/comments/{comment_id}\n+\n+https://developer.github.com/v3/gists/comments/#get-a-single-comment\n+*/\n+type
      GistsGetCommentReq struct {\n+\tGistId    string\n+\tCommentId int64\n+}\n+\n+func
      (r GistsGetCommentReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/comments/%v\",
      r.GistId, r.CommentId)\n+}\n+\n+func (r GistsGetCommentReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r GistsGetCommentReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GistsGetCommentReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsGetCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsGetCommentResponseBody200
      is a response body for gists/get-comment\n+\n+API documentation: https://developer.github.com/v3/gists/comments/#get-a-single-comment\n+*/\n+type
      GistsGetCommentResponseBody200 struct {\n+\tBody      string `json:\"body,omitempty\"`\n+\tCreatedAt
      string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsUpdateCommentReq builds requests
      for \"gists/update-comment\"\n+\n+Edit a comment.\n+\n+  PATCH /gists/{gist_id}/comments/{comment_id}\n+\n+https://developer.github.com/v3/gists/comments/#edit-a-comment\n+*/\n+type
      GistsUpdateCommentReq struct {\n+\tGistId      string\n+\tCommentId   int64\n+\tRequestBody
      GistsUpdateCommentReqBody\n+}\n+\n+func (r GistsUpdateCommentReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gists/%v/comments/%v\", r.GistId, r.CommentId)\n+}\n+\n+func
      (r GistsUpdateCommentReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r GistsUpdateCommentReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GistsUpdateCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GistsUpdateCommentReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GistsUpdateCommentReqBody
      is a request body for gists/update-comment\n+\n+API documentation: https://developer.github.com/v3/gists/comments/#edit-a-comment\n+*/\n+type
      GistsUpdateCommentReqBody struct {\n+\n+\t// The comment text.\n+\tBody *string
      `json:\"body\"`\n+}\n+\n+/*\n+GistsUpdateCommentResponseBody200 is a response
      body for gists/update-comment\n+\n+API documentation: https://developer.github.com/v3/gists/comments/#edit-a-comment\n+*/\n+type
      GistsUpdateCommentResponseBody200 struct {\n+\tBody      string `json:\"body,omitempty\"`\n+\tCreatedAt
      string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsListForUserReq builds requests
      for \"gists/list-for-user\"\n+\n+List gists for a user.\n+\n+  GET /users/{username}/gists\n+\n+https://developer.github.com/v3/gists/#list-gists-for-a-user\n+*/\n+type
      GistsListForUserReq struct {\n+\tUsername string\n+\n+\t/*\n+\tThis is a timestamp
      in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\n+\tformat: `YYYY-MM-DDTHH:MM:SSZ`.
      Only gists updated at or after this time are\n+\treturned.\n+\t*/\n+\tSince
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func (r GistsListForUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/gists\", r.Username)\n+}\n+\n+func
      (r GistsListForUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r
      GistsListForUserReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.Since != nil {\n+\t\tquery.Set(\"since\", *r.Since)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r GistsListForUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GistsListForUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsListForUserResponseBody200
      is a response body for gists/list-for-user\n+\n+API documentation: https://developer.github.com/v3/gists/#list-gists-for-a-user\n+*/\n+type
      GistsListForUserResponseBody200 []struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tFilename string      `json:\"filename,omitempty\"`\n+\t\tLanguage string      `json:\"language,omitempty\"`\n+\t\tRawUrl   string      `json:\"raw_url,omitempty\"`\n+\t\tSize     json.Number
      `json:\"size,omitempty\"`\n+\t\tType     string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForksUrl   string `json:\"forks_url,omitempty\"`\n+\tGitPullUrl
      string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl string `json:\"git_push_url,omitempty\"`\n+\tHtmlUrl    string
      `json:\"html_url,omitempty\"`\n+\tId         string `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tOwner      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsListCommitsReq
      builds requests for \"gists/list-commits\"\n+\n+List gist commits.\n+\n+  GET
      /gists/{gist_id}/commits\n+\n+https://developer.github.com/v3/gists/#list-gist-commits\n+*/\n+type
      GistsListCommitsReq struct {\n+\tGistId string\n+\n+\t// Results per page (max
      100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r GistsListCommitsReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/commits\",
      r.GistId)\n+}\n+\n+func (r GistsListCommitsReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r GistsListCommitsReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r GistsListCommitsReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GistsListCommitsReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+GistsListCommitsResponseBody200 is a response body for
      gists/list-commits\n+\n+API documentation: https://developer.github.com/v3/gists/#list-gist-commits\n+*/\n+type
      GistsListCommitsResponseBody200 []struct {\n+\tChangeStatus struct {\n+\t\tAdditions
      int64 `json:\"additions,omitempty\"`\n+\t\tDeletions int64 `json:\"deletions,omitempty\"`\n+\t\tTotal     int64
      `json:\"total,omitempty\"`\n+\t} `json:\"change_status,omitempty\"`\n+\tCommittedAt
      string `json:\"committed_at,omitempty\"`\n+\tUrl         string `json:\"url,omitempty\"`\n+\tUser        struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+\tVersion string `json:\"version,omitempty\"`\n+}\n+\n+/*\n+GistsListPublicReq
      builds requests for \"gists/list-public\"\n+\n+List public gists.\n+\n+  GET
      /gists/public\n+\n+https://developer.github.com/v3/gists/#list-public-gists\n+*/\n+type
      GistsListPublicReq struct {\n+\n+\t/*\n+\tThis is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\n+\tformat:
      `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are\n+\treturned.\n+\t*/\n+\tSince
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func (r GistsListPublicReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/public\")\n+}\n+\n+func (r
      GistsListPublicReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r GistsListPublicReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Since != nil {\n+\t\tquery.Set(\"since\",
      *r.Since)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r GistsListPublicReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GistsListPublicReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+GistsListPublicResponseBody200 is a response body for
      gists/list-public\n+\n+API documentation: https://developer.github.com/v3/gists/#list-public-gists\n+*/\n+type
      GistsListPublicResponseBody200 []struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tFilename string      `json:\"filename,omitempty\"`\n+\t\tLanguage string      `json:\"language,omitempty\"`\n+\t\tRawUrl   string      `json:\"raw_url,omitempty\"`\n+\t\tSize     json.Number
      `json:\"size,omitempty\"`\n+\t\tType     string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForksUrl   string `json:\"forks_url,omitempty\"`\n+\tGitPullUrl
      string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl string `json:\"git_push_url,omitempty\"`\n+\tHtmlUrl    string
      `json:\"html_url,omitempty\"`\n+\tId         string `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tOwner      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsDeleteReq
      builds requests for \"gists/delete\"\n+\n+Delete a gist.\n+\n+  DELETE /gists/{gist_id}\n+\n+https://developer.github.com/v3/gists/#delete-a-gist\n+*/\n+type
      GistsDeleteReq struct {\n+\tGistId string\n+}\n+\n+func (r GistsDeleteReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gists/%v\", r.GistId)\n+}\n+\n+func (r GistsDeleteReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r GistsDeleteReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GistsDeleteReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsDeleteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+GistsGetReq builds requests for \"gists/get\"\n+\n+Get
      a gist.\n+\n+  GET /gists/{gist_id}\n+\n+https://developer.github.com/v3/gists/#get-a-gist\n+*/\n+type
      GistsGetReq struct {\n+\tGistId string\n+}\n+\n+func (r GistsGetReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gists/%v\", r.GistId)\n+}\n+\n+func (r GistsGetReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r GistsGetReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GistsGetReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+GistsGetResponseBody200 is a response body
      for gists/get\n+\n+API documentation: https://developer.github.com/v3/gists/#get-a-gist\n+*/\n+type
      GistsGetResponseBody200 struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tContent   string      `json:\"content,omitempty\"`\n+\t\tFilename  string      `json:\"filename,omitempty\"`\n+\t\tLanguage  string      `json:\"language,omitempty\"`\n+\t\tRawUrl    string      `json:\"raw_url,omitempty\"`\n+\t\tSize      json.Number
      `json:\"size,omitempty\"`\n+\t\tTruncated bool        `json:\"truncated,omitempty\"`\n+\t\tType      string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForks []struct {\n+\t\tCreatedAt string `json:\"created_at,omitempty\"`\n+\t\tId        string
      `json:\"id,omitempty\"`\n+\t\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\t\tUrl       string
      `json:\"url,omitempty\"`\n+\t\tUser      struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t} `json:\"forks,omitempty\"`\n+\tForksUrl   string
      `json:\"forks_url,omitempty\"`\n+\tGitPullUrl string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl
      string `json:\"git_push_url,omitempty\"`\n+\tHistory    []struct {\n+\t\tChangeStatus
      struct {\n+\t\t\tAdditions int64 `json:\"additions,omitempty\"`\n+\t\t\tDeletions
      int64 `json:\"deletions,omitempty\"`\n+\t\t\tTotal     int64 `json:\"total,omitempty\"`\n+\t\t}
      `json:\"change_status,omitempty\"`\n+\t\tCommittedAt string `json:\"committed_at,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t\tUser        struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t\tVersion string `json:\"version,omitempty\"`\n+\t}
      `json:\"history,omitempty\"`\n+\tHtmlUrl string `json:\"html_url,omitempty\"`\n+\tId      string
      `json:\"id,omitempty\"`\n+\tNodeId  string `json:\"node_id,omitempty\"`\n+\tOwner   struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsUpdateReq
      builds requests for \"gists/update\"\n+\n+Update a gist.\n+\n+  PATCH /gists/{gist_id}\n+\n+https://developer.github.com/v3/gists/#update-a-gist\n+*/\n+type
      GistsUpdateReq struct {\n+\tGistId      string\n+\tRequestBody GistsUpdateReqBody\n+}\n+\n+func
      (r GistsUpdateReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v\",
      r.GistId)\n+}\n+\n+func (r GistsUpdateReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r GistsUpdateReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GistsUpdateReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GistsUpdateReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GistsUpdateReqBody
      is a request body for gists/update\n+\n+API documentation: https://developer.github.com/v3/gists/#update-a-gist\n+*/\n+type
      GistsUpdateReqBody struct {\n+\n+\t// A descriptive name for this gist.\n+\tDescription
      *string `json:\"description,omitempty\"`\n+\n+\t// The filenames and content
      that make up this gist.\n+\tFiles map[string]*struct {\n+\n+\t\t// The updated
      content of the file.\n+\t\tContent *string `json:\"content,omitempty\"`\n+\n+\t\t/*\n+\t\t   The
      new name for this file. To delete a file, set the value of the filename to\n+\t\t   `null`.\n+\t\t*/\n+\t\tFilename
      *string `json:\"filename,omitempty\"`\n+\t} `json:\"files,omitempty\"`\n+}\n+\n+/*\n+GistsUpdateResponseBody200
      is a response body for gists/update\n+\n+API documentation: https://developer.github.com/v3/gists/#update-a-gist\n+*/\n+type
      GistsUpdateResponseBody200 struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tContent   string      `json:\"content,omitempty\"`\n+\t\tFilename  string      `json:\"filename,omitempty\"`\n+\t\tLanguage  string      `json:\"language,omitempty\"`\n+\t\tRawUrl    string      `json:\"raw_url,omitempty\"`\n+\t\tSize      json.Number
      `json:\"size,omitempty\"`\n+\t\tTruncated bool        `json:\"truncated,omitempty\"`\n+\t\tType      string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForks []struct {\n+\t\tCreatedAt string `json:\"created_at,omitempty\"`\n+\t\tId        string
      `json:\"id,omitempty\"`\n+\t\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\t\tUrl       string
      `json:\"url,omitempty\"`\n+\t\tUser      struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t} `json:\"forks,omitempty\"`\n+\tForksUrl   string
      `json:\"forks_url,omitempty\"`\n+\tGitPullUrl string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl
      string `json:\"git_push_url,omitempty\"`\n+\tHistory    []struct {\n+\t\tChangeStatus
      struct {\n+\t\t\tAdditions int64 `json:\"additions,omitempty\"`\n+\t\t\tDeletions
      int64 `json:\"deletions,omitempty\"`\n+\t\t\tTotal     int64 `json:\"total,omitempty\"`\n+\t\t}
      `json:\"change_status,omitempty\"`\n+\t\tCommittedAt string `json:\"committed_at,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t\tUser        struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t\tVersion string `json:\"version,omitempty\"`\n+\t}
      `json:\"history,omitempty\"`\n+\tHtmlUrl string `json:\"html_url,omitempty\"`\n+\tId      string
      `json:\"id,omitempty\"`\n+\tNodeId  string `json:\"node_id,omitempty\"`\n+\tOwner   struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsGetRevisionReq
      builds requests for \"gists/get-revision\"\n+\n+Get a specific revision of a
      gist.\n+\n+  GET /gists/{gist_id}/{sha}\n+\n+https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\n+*/\n+type
      GistsGetRevisionReq struct {\n+\tGistId string\n+\tSha    string\n+}\n+\n+func
      (r GistsGetRevisionReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/%v\",
      r.GistId, r.Sha)\n+}\n+\n+func (r GistsGetRevisionReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r GistsGetRevisionReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r GistsGetRevisionReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GistsGetRevisionReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+GistsGetRevisionResponseBody200 is a response body for
      gists/get-revision\n+\n+API documentation: https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\n+*/\n+type
      GistsGetRevisionResponseBody200 struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tContent   string      `json:\"content,omitempty\"`\n+\t\tFilename  string      `json:\"filename,omitempty\"`\n+\t\tLanguage  string      `json:\"language,omitempty\"`\n+\t\tRawUrl    string      `json:\"raw_url,omitempty\"`\n+\t\tSize      json.Number
      `json:\"size,omitempty\"`\n+\t\tTruncated bool        `json:\"truncated,omitempty\"`\n+\t\tType      string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForks []struct {\n+\t\tCreatedAt string `json:\"created_at,omitempty\"`\n+\t\tId        string
      `json:\"id,omitempty\"`\n+\t\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\t\tUrl       string
      `json:\"url,omitempty\"`\n+\t\tUser      struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t} `json:\"forks,omitempty\"`\n+\tForksUrl   string
      `json:\"forks_url,omitempty\"`\n+\tGitPullUrl string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl
      string `json:\"git_push_url,omitempty\"`\n+\tHistory    []struct {\n+\t\tChangeStatus
      struct {\n+\t\t\tAdditions int64 `json:\"additions,omitempty\"`\n+\t\t\tDeletions
      int64 `json:\"deletions,omitempty\"`\n+\t\t\tTotal     int64 `json:\"total,omitempty\"`\n+\t\t}
      `json:\"change_status,omitempty\"`\n+\t\tCommittedAt string `json:\"committed_at,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t\tUser        struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t\tVersion string `json:\"version,omitempty\"`\n+\t}
      `json:\"history,omitempty\"`\n+\tHtmlUrl string `json:\"html_url,omitempty\"`\n+\tId      string
      `json:\"id,omitempty\"`\n+\tNodeId  string `json:\"node_id,omitempty\"`\n+\tOwner   struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsUnstarReq
      builds requests for \"gists/unstar\"\n+\n+Unstar a gist.\n+\n+  DELETE /gists/{gist_id}/star\n+\n+https://developer.github.com/v3/gists/#unstar-a-gist\n+*/\n+type
      GistsUnstarReq struct {\n+\tGistId string\n+}\n+\n+func (r GistsUnstarReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gists/%v/star\", r.GistId)\n+}\n+\n+func
      (r GistsUnstarReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r
      GistsUnstarReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GistsUnstarReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GistsUnstarReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsCheckIsStarredReq
      builds requests for \"gists/check-is-starred\"\n+\n+Check if a gist is starred.\n+\n+  GET
      /gists/{gist_id}/star\n+\n+https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\n+*/\n+type
      GistsCheckIsStarredReq struct {\n+\tGistId string\n+}\n+\n+func (r GistsCheckIsStarredReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/star\", r.GistId)\n+}\n+\n+func
      (r GistsCheckIsStarredReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r GistsCheckIsStarredReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GistsCheckIsStarredReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GistsCheckIsStarredReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsStarReq builds
      requests for \"gists/star\"\n+\n+Star a gist.\n+\n+  PUT /gists/{gist_id}/star\n+\n+https://developer.github.com/v3/gists/#star-a-gist\n+*/\n+type
      GistsStarReq struct {\n+\tGistId string\n+}\n+\n+func (r GistsStarReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gists/%v/star\", r.GistId)\n+}\n+\n+func
      (r GistsStarReq) method() string {\n+\treturn \"PUT\"\n+}\n+\n+func (r GistsStarReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r GistsStarReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsStarReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+GistsListForksReq builds requests for \"gists/list-forks\"\n+\n+List
      gist forks.\n+\n+  GET /gists/{gist_id}/forks\n+\n+https://developer.github.com/v3/gists/#list-gist-forks\n+*/\n+type
      GistsListForksReq struct {\n+\tGistId string\n+\n+\t// Results per page (max
      100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r GistsListForksReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/forks\",
      r.GistId)\n+}\n+\n+func (r GistsListForksReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r GistsListForksReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r GistsListForksReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GistsListForksReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+GistsListForksResponseBody200 is a response body for
      gists/list-forks\n+\n+API documentation: https://developer.github.com/v3/gists/#list-gist-forks\n+*/\n+type
      GistsListForksResponseBody200 []struct {\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        string
      `json:\"id,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsForkReq builds requests for \"gists/fork\"\n+\n+Fork
      a gist.\n+\n+  POST /gists/{gist_id}/forks\n+\n+https://developer.github.com/v3/gists/#fork-a-gist\n+*/\n+type
      GistsForkReq struct {\n+\tGistId string\n+}\n+\n+func (r GistsForkReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gists/%v/forks\", r.GistId)\n+}\n+\n+func
      (r GistsForkReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r GistsForkReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r GistsForkReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsForkReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+GistsForkResponseBody201 is a response body
      for gists/fork\n+\n+API documentation: https://developer.github.com/v3/gists/#fork-a-gist\n+*/\n+type
      GistsForkResponseBody201 struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tFilename string      `json:\"filename,omitempty\"`\n+\t\tLanguage string      `json:\"language,omitempty\"`\n+\t\tRawUrl   string      `json:\"raw_url,omitempty\"`\n+\t\tSize     json.Number
      `json:\"size,omitempty\"`\n+\t\tType     string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForksUrl   string `json:\"forks_url,omitempty\"`\n+\tGitPullUrl
      string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl string `json:\"git_push_url,omitempty\"`\n+\tHtmlUrl    string
      `json:\"html_url,omitempty\"`\n+\tId         string `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tOwner      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsCreateReq
      builds requests for \"gists/create\"\n+\n+Create a gist.\n+\n+  POST /gists\n+\n+https://developer.github.com/v3/gists/#create-a-gist\n+*/\n+type
      GistsCreateReq struct {\n+\tRequestBody GistsCreateReqBody\n+}\n+\n+func (r
      GistsCreateReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists\")\n+}\n+\n+func
      (r GistsCreateReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r GistsCreateReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r GistsCreateReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsCreateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GistsCreateReqBody is a request
      body for gists/create\n+\n+API documentation: https://developer.github.com/v3/gists/#create-a-gist\n+*/\n+type
      GistsCreateReqBody struct {\n+\n+\t// A descriptive name for this gist.\n+\tDescription
      *string `json:\"description,omitempty\"`\n+\n+\t/*\n+\t   The filenames and
      content of each file in the gist. The keys in the `files`\n+\t   object represent
      the filename and have the type `string`.\n+\t*/\n+\tFiles map[string]*struct
      {\n+\n+\t\t// The content of the file.\n+\t\tContent *string `json:\"content,omitempty\"`\n+\t}
      `json:\"files\"`\n+\n+\t// When `true`, the gist will be public and available
      for anyone to see.\n+\tPublic *bool `json:\"public,omitempty\"`\n+}\n+\n+/*\n+GistsCreateResponseBody201
      is a response body for gists/create\n+\n+API documentation: https://developer.github.com/v3/gists/#create-a-gist\n+*/\n+type
      GistsCreateResponseBody201 struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tContent   string      `json:\"content,omitempty\"`\n+\t\tFilename  string      `json:\"filename,omitempty\"`\n+\t\tLanguage  string      `json:\"language,omitempty\"`\n+\t\tRawUrl    string      `json:\"raw_url,omitempty\"`\n+\t\tSize      json.Number
      `json:\"size,omitempty\"`\n+\t\tTruncated bool        `json:\"truncated,omitempty\"`\n+\t\tType      string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForks []struct {\n+\t\tCreatedAt string `json:\"created_at,omitempty\"`\n+\t\tId        string
      `json:\"id,omitempty\"`\n+\t\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\t\tUrl       string
      `json:\"url,omitempty\"`\n+\t\tUser      struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t} `json:\"forks,omitempty\"`\n+\tForksUrl   string
      `json:\"forks_url,omitempty\"`\n+\tGitPullUrl string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl
      string `json:\"git_push_url,omitempty\"`\n+\tHistory    []struct {\n+\t\tChangeStatus
      struct {\n+\t\t\tAdditions int64 `json:\"additions,omitempty\"`\n+\t\t\tDeletions
      int64 `json:\"deletions,omitempty\"`\n+\t\t\tTotal     int64 `json:\"total,omitempty\"`\n+\t\t}
      `json:\"change_status,omitempty\"`\n+\t\tCommittedAt string `json:\"committed_at,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t\tUser        struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"user,omitempty\"`\n+\t\tVersion string `json:\"version,omitempty\"`\n+\t}
      `json:\"history,omitempty\"`\n+\tHtmlUrl string `json:\"html_url,omitempty\"`\n+\tId      string
      `json:\"id,omitempty\"`\n+\tNodeId  string `json:\"node_id,omitempty\"`\n+\tOwner   struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsListReq
      builds requests for \"gists/list\"\n+\n+List gists for the authenticated user.\n+\n+  GET
      /gists\n+\n+https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user\n+*/\n+type
      GistsListReq struct {\n+\n+\t/*\n+\tThis is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\n+\tformat:
      `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are\n+\treturned.\n+\t*/\n+\tSince
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func (r GistsListReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/gists\")\n+}\n+\n+func (r GistsListReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r GistsListReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.Since != nil {\n+\t\tquery.Set(\"since\",
      *r.Since)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r GistsListReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GistsListReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsListResponseBody200
      is a response body for gists/list\n+\n+API documentation: https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user\n+*/\n+type
      GistsListResponseBody200 []struct {\n+\tComments    int64  `json:\"comments,omitempty\"`\n+\tCommentsUrl
      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl  string `json:\"commits_url,omitempty\"`\n+\tCreatedAt   string
      `json:\"created_at,omitempty\"`\n+\tDescription string `json:\"description,omitempty\"`\n+\tFiles       map[string]struct
      {\n+\t\tFilename string      `json:\"filename,omitempty\"`\n+\t\tLanguage string      `json:\"language,omitempty\"`\n+\t\tRawUrl   string      `json:\"raw_url,omitempty\"`\n+\t\tSize     json.Number
      `json:\"size,omitempty\"`\n+\t\tType     string      `json:\"type,omitempty\"`\n+\t}
      `json:\"files,omitempty\"`\n+\tForksUrl   string `json:\"forks_url,omitempty\"`\n+\tGitPullUrl
      string `json:\"git_pull_url,omitempty\"`\n+\tGitPushUrl string `json:\"git_push_url,omitempty\"`\n+\tHtmlUrl    string
      `json:\"html_url,omitempty\"`\n+\tId         string `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tOwner      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPublic    bool   `json:\"public,omitempty\"`\n+\tTruncated
      bool   `json:\"truncated,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      string `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsListCommentsReq
      builds requests for \"gists/list-comments\"\n+\n+List comments on a gist.\n+\n+  GET
      /gists/{gist_id}/comments\n+\n+https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\n+*/\n+type
      GistsListCommentsReq struct {\n+\tGistId string\n+\n+\t// Results per page (max
      100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r GistsListCommentsReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/gists/%v/comments\", r.GistId)\n+}\n+\n+func (r GistsListCommentsReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r GistsListCommentsReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r GistsListCommentsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GistsListCommentsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GistsListCommentsResponseBody200
      is a response body for gists/list-comments\n+\n+API documentation: https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\n+*/\n+type
      GistsListCommentsResponseBody200 []struct {\n+\tBody      string `json:\"body,omitempty\"`\n+\tCreatedAt
      string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+GistsCreateCommentReq builds requests
      for \"gists/create-comment\"\n+\n+Create a comment.\n+\n+  POST /gists/{gist_id}/comments\n+\n+https://developer.github.com/v3/gists/comments/#create-a-comment\n+*/\n+type
      GistsCreateCommentReq struct {\n+\tGistId      string\n+\tRequestBody GistsCreateCommentReqBody\n+}\n+\n+func
      (r GistsCreateCommentReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/gists/%v/comments\",
      r.GistId)\n+}\n+\n+func (r GistsCreateCommentReq) method() string {\n+\treturn
      \"POST\"\n+}\n+\n+func (r GistsCreateCommentReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r GistsCreateCommentReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GistsCreateCommentReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+GistsCreateCommentReqBody is a request body
      for gists/create-comment\n+\n+API documentation: https://developer.github.com/v3/gists/comments/#create-a-comment\n+*/\n+type
      GistsCreateCommentReqBody struct {\n+\n+\t// The comment text.\n+\tBody *string
      `json:\"body\"`\n+}\n+\n+/*\n+GistsCreateCommentResponseBody201 is a response
      body for gists/create-comment\n+\n+API documentation: https://developer.github.com/v3/gists/comments/#create-a-comment\n+*/\n+type
      GistsCreateCommentResponseBody201 struct {\n+\tBody      string `json:\"body,omitempty\"`\n+\tCreatedAt
      string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUpdatedAt string `json:\"updated_at,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}"},{"sha":"158e1cb9e2917c9c6564f56d5317bf0d531f61ab","filename":"zz_git_gen.go","status":"added","additions":1002,"deletions":0,"changes":1002,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_git_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_git_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_git_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,1002 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+GitCreateRefReq
      builds requests for \"git/create-ref\"\n+\n+Create a reference.\n+\n+  POST
      /repos/{owner}/{repo}/git/refs\n+\n+https://developer.github.com/v3/git/refs/#create-a-reference\n+*/\n+type
      GitCreateRefReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      GitCreateRefReqBody\n+}\n+\n+func (r GitCreateRefReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/git/refs\", r.Owner, r.Repo)\n+}\n+\n+func (r GitCreateRefReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r GitCreateRefReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitCreateRefReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GitCreateRefReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GitCreateRefReqBody is a request
      body for git/create-ref\n+\n+API documentation: https://developer.github.com/v3/git/refs/#create-a-reference\n+*/\n+type
      GitCreateRefReqBody struct {\n+\n+\t/*\n+\t   The name of the fully qualified
      reference (ie: `refs/heads/master`). If it\n+\t   doesn''t start with ''refs''
      and have at least two slashes, it will be rejected.\n+\t*/\n+\tRef *string `json:\"ref\"`\n+\n+\t//
      The SHA1 value for this reference.\n+\tSha *string `json:\"sha\"`\n+}\n+\n+/*\n+GitCreateRefResponseBody201
      is a response body for git/create-ref\n+\n+API documentation: https://developer.github.com/v3/git/refs/#create-a-reference\n+*/\n+type
      GitCreateRefResponseBody201 struct {\n+\tNodeId string `json:\"node_id,omitempty\"`\n+\tObject
      struct {\n+\t\tSha  string `json:\"sha,omitempty\"`\n+\t\tType string `json:\"type,omitempty\"`\n+\t\tUrl  string
      `json:\"url,omitempty\"`\n+\t} `json:\"object,omitempty\"`\n+\tRef string `json:\"ref,omitempty\"`\n+\tUrl
      string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitCreateTagReq builds requests
      for \"git/create-tag\"\n+\n+Create a tag object.\n+\n+  POST /repos/{owner}/{repo}/git/tags\n+\n+https://developer.github.com/v3/git/tags/#create-a-tag-object\n+*/\n+type
      GitCreateTagReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      GitCreateTagReqBody\n+}\n+\n+func (r GitCreateTagReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/git/tags\", r.Owner, r.Repo)\n+}\n+\n+func (r GitCreateTagReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r GitCreateTagReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitCreateTagReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GitCreateTagReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GitCreateTagReqBody is a request
      body for git/create-tag\n+\n+API documentation: https://developer.github.com/v3/git/tags/#create-a-tag-object\n+*/\n+type
      GitCreateTagReqBody struct {\n+\n+\t// The tag message.\n+\tMessage *string
      `json:\"message\"`\n+\n+\t// The SHA of the git object this is tagging.\n+\tObject
      *string `json:\"object\"`\n+\n+\t// The tag''s name. This is typically a version
      (e.g., \"v0.0.1\").\n+\tTag *string `json:\"tag\"`\n+\n+\t// An object with
      information about the individual creating the tag.\n+\tTagger *struct {\n+\n+\t\t/*\n+\t\t   When
      this object was tagged. This is a timestamp in [ISO\n+\t\t   8601](https://en.wikipedia.org/wiki/ISO_8601)
      format: `YYYY-MM-DDTHH:MM:SSZ`.\n+\t\t*/\n+\t\tDate *string `json:\"date,omitempty\"`\n+\n+\t\t//
      The email of the author of the tag\n+\t\tEmail *string `json:\"email,omitempty\"`\n+\n+\t\t//
      The name of the author of the tag\n+\t\tName *string `json:\"name,omitempty\"`\n+\t}
      `json:\"tagger,omitempty\"`\n+\n+\t/*\n+\t   The type of the object we''re tagging.
      Normally this is a `commit` but it can\n+\t   also be a `tree` or a `blob`.\n+\t*/\n+\tType
      *string `json:\"type\"`\n+}\n+\n+/*\n+GitCreateTagResponseBody201 is a response
      body for git/create-tag\n+\n+API documentation: https://developer.github.com/v3/git/tags/#create-a-tag-object\n+*/\n+type
      GitCreateTagResponseBody201 struct {\n+\tMessage string `json:\"message,omitempty\"`\n+\tNodeId  string
      `json:\"node_id,omitempty\"`\n+\tObject  struct {\n+\t\tSha  string `json:\"sha,omitempty\"`\n+\t\tType
      string `json:\"type,omitempty\"`\n+\t\tUrl  string `json:\"url,omitempty\"`\n+\t}
      `json:\"object,omitempty\"`\n+\tSha    string `json:\"sha,omitempty\"`\n+\tTag    string
      `json:\"tag,omitempty\"`\n+\tTagger struct {\n+\t\tDate  string `json:\"date,omitempty\"`\n+\t\tEmail
      string `json:\"email,omitempty\"`\n+\t\tName  string `json:\"name,omitempty\"`\n+\t}
      `json:\"tagger,omitempty\"`\n+\tUrl          string `json:\"url,omitempty\"`\n+\tVerification
      struct {\n+\t\tPayload   string `json:\"payload,omitempty\"`\n+\t\tReason    string
      `json:\"reason,omitempty\"`\n+\t\tSignature string `json:\"signature,omitempty\"`\n+\t\tVerified  bool   `json:\"verified,omitempty\"`\n+\t}
      `json:\"verification,omitempty\"`\n+}\n+\n+/*\n+GitGetBlobReq builds requests
      for \"git/get-blob\"\n+\n+Get a blob.\n+\n+  GET /repos/{owner}/{repo}/git/blobs/{file_sha}\n+\n+https://developer.github.com/v3/git/blobs/#get-a-blob\n+*/\n+type
      GitGetBlobReq struct {\n+\tOwner   string\n+\tRepo    string\n+\tFileSha string\n+}\n+\n+func
      (r GitGetBlobReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/blobs/%v\",
      r.Owner, r.Repo, r.FileSha)\n+}\n+\n+func (r GitGetBlobReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r GitGetBlobReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitGetBlobReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GitGetBlobReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitGetBlobResponseBody200
      is a response body for git/get-blob\n+\n+API documentation: https://developer.github.com/v3/git/blobs/#get-a-blob\n+*/\n+type
      GitGetBlobResponseBody200 struct {\n+\tContent  string      `json:\"content,omitempty\"`\n+\tEncoding
      string      `json:\"encoding,omitempty\"`\n+\tSha      string      `json:\"sha,omitempty\"`\n+\tSize     json.Number
      `json:\"size,omitempty\"`\n+\tUrl      string      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitListMatchingRefsReq
      builds requests for \"git/list-matching-refs\"\n+\n+List matching references.\n+\n+  GET
      /repos/{owner}/{repo}/git/matching-refs/{ref}\n+\n+https://developer.github.com/v3/git/refs/#list-matching-references\n+*/\n+type
      GitListMatchingRefsReq struct {\n+\tOwner string\n+\tRepo  string\n+\tRef   string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r GitListMatchingRefsReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/matching-refs/%v\", r.Owner,
      r.Repo, r.Ref)\n+}\n+\n+func (r GitListMatchingRefsReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r GitListMatchingRefsReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r GitListMatchingRefsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GitListMatchingRefsReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+GitListMatchingRefsResponseBody200 is a response body
      for git/list-matching-refs\n+\n+API documentation: https://developer.github.com/v3/git/refs/#list-matching-references\n+*/\n+type
      GitListMatchingRefsResponseBody200 []struct {\n+\tNodeId string `json:\"node_id,omitempty\"`\n+\tObject
      struct {\n+\t\tSha  string `json:\"sha,omitempty\"`\n+\t\tType string `json:\"type,omitempty\"`\n+\t\tUrl  string
      `json:\"url,omitempty\"`\n+\t} `json:\"object,omitempty\"`\n+\tRef string `json:\"ref,omitempty\"`\n+\tUrl
      string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitDeleteRefReq builds requests
      for \"git/delete-ref\"\n+\n+Delete a reference.\n+\n+  DELETE /repos/{owner}/{repo}/git/refs/{ref}\n+\n+https://developer.github.com/v3/git/refs/#delete-a-reference\n+*/\n+type
      GitDeleteRefReq struct {\n+\tOwner string\n+\tRepo  string\n+\tRef   string\n+}\n+\n+func
      (r GitDeleteRefReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/refs/%v\",
      r.Owner, r.Repo, r.Ref)\n+}\n+\n+func (r GitDeleteRefReq) method() string {\n+\treturn
      \"DELETE\"\n+}\n+\n+func (r GitDeleteRefReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitDeleteRefReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GitDeleteRefReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitUpdateRefReq
      builds requests for \"git/update-ref\"\n+\n+Update a reference.\n+\n+  PATCH
      /repos/{owner}/{repo}/git/refs/{ref}\n+\n+https://developer.github.com/v3/git/refs/#update-a-reference\n+*/\n+type
      GitUpdateRefReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRef         string\n+\tRequestBody
      GitUpdateRefReqBody\n+}\n+\n+func (r GitUpdateRefReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/git/refs/%v\", r.Owner, r.Repo, r.Ref)\n+}\n+\n+func
      (r GitUpdateRefReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func (r
      GitUpdateRefReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GitUpdateRefReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GitUpdateRefReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GitUpdateRefReqBody
      is a request body for git/update-ref\n+\n+API documentation: https://developer.github.com/v3/git/refs/#update-a-reference\n+*/\n+type
      GitUpdateRefReqBody struct {\n+\n+\t/*\n+\t   Indicates whether to force the
      update or to make sure the update is a\n+\t   fast-forward update. Leaving this
      out or setting it to `false` will make sure\n+\t   you''re not overwriting work.\n+\t*/\n+\tForce
      *bool `json:\"force,omitempty\"`\n+\n+\t// The SHA1 value to set this reference
      to\n+\tSha *string `json:\"sha\"`\n+}\n+\n+/*\n+GitUpdateRefResponseBody200
      is a response body for git/update-ref\n+\n+API documentation: https://developer.github.com/v3/git/refs/#update-a-reference\n+*/\n+type
      GitUpdateRefResponseBody200 struct {\n+\tNodeId string `json:\"node_id,omitempty\"`\n+\tObject
      struct {\n+\t\tSha  string `json:\"sha,omitempty\"`\n+\t\tType string `json:\"type,omitempty\"`\n+\t\tUrl  string
      `json:\"url,omitempty\"`\n+\t} `json:\"object,omitempty\"`\n+\tRef string `json:\"ref,omitempty\"`\n+\tUrl
      string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitCreateTreeReq builds requests
      for \"git/create-tree\"\n+\n+Create a tree.\n+\n+  POST /repos/{owner}/{repo}/git/trees\n+\n+https://developer.github.com/v3/git/trees/#create-a-tree\n+*/\n+type
      GitCreateTreeReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      GitCreateTreeReqBody\n+}\n+\n+func (r GitCreateTreeReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/git/trees\", r.Owner, r.Repo)\n+}\n+\n+func (r GitCreateTreeReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r GitCreateTreeReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitCreateTreeReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GitCreateTreeReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GitCreateTreeReqBody
      is a request body for git/create-tree\n+\n+API documentation: https://developer.github.com/v3/git/trees/#create-a-tree\n+*/\n+type
      GitCreateTreeReqBody struct {\n+\n+\t/*\n+\t   The SHA1 of the tree you want
      to update with new data. If you don''t set this,\n+\t   the commit will be created
      on top of everything; however, it will only contain\n+\t   your change, the
      rest of your files will show up as deleted.\n+\t*/\n+\tBaseTree *string `json:\"base_tree,omitempty\"`\n+\n+\t//
      Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.\n+\tTree
      []struct {\n+\n+\t\t/*\n+\t\t   The content you want this file to have. GitHub
      will write this blob out and use\n+\t\t   that SHA for this entry. Use either
      this, or `tree.sha`.\n+\n+\t\t   **Note:** Use either `tree.sha` or `content`
      to specify the contents of the\n+\t\t   entry. Using both `tree.sha` and `content`
      will return an error.\n+\t\t*/\n+\t\tContent *string `json:\"content,omitempty\"`\n+\n+\t\t/*\n+\t\t   The
      file mode; one of `100644` for file (blob), `100755` for executable (blob),\n+\t\t   `040000`
      for subdirectory (tree), `160000` for submodule (commit), or `120000`\n+\t\t   for
      a blob that specifies the path of a symlink.\n+\t\t*/\n+\t\tMode *string `json:\"mode,omitempty\"`\n+\n+\t\t//
      The file referenced in the tree.\n+\t\tPath *string `json:\"path,omitempty\"`\n+\n+\t\t/*\n+\t\t   The
      SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the\n+\t\t   value
      is `null` then the file will be deleted.\n+\n+\t\t   **Note:** Use either `tree.sha`
      or `content` to specify the contents of the\n+\t\t   entry. Using both `tree.sha`
      and `content` will return an error.\n+\t\t*/\n+\t\tSha *string `json:\"sha,omitempty\"`\n+\n+\t\t//
      Either `blob`, `tree`, or `commit`.\n+\t\tType *string `json:\"type,omitempty\"`\n+\t}
      `json:\"tree\"`\n+}\n+\n+/*\n+GitCreateTreeResponseBody201 is a response body
      for git/create-tree\n+\n+API documentation: https://developer.github.com/v3/git/trees/#create-a-tree\n+*/\n+type
      GitCreateTreeResponseBody201 struct {\n+\tSha  string `json:\"sha,omitempty\"`\n+\tTree
      []struct {\n+\t\tMode string      `json:\"mode,omitempty\"`\n+\t\tPath string      `json:\"path,omitempty\"`\n+\t\tSha  string      `json:\"sha,omitempty\"`\n+\t\tSize
      json.Number `json:\"size,omitempty\"`\n+\t\tType string      `json:\"type,omitempty\"`\n+\t\tUrl  string      `json:\"url,omitempty\"`\n+\t}
      `json:\"tree,omitempty\"`\n+\tUrl string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitCreateBlobReq
      builds requests for \"git/create-blob\"\n+\n+Create a blob.\n+\n+  POST /repos/{owner}/{repo}/git/blobs\n+\n+https://developer.github.com/v3/git/blobs/#create-a-blob\n+*/\n+type
      GitCreateBlobReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      GitCreateBlobReqBody\n+}\n+\n+func (r GitCreateBlobReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/repos/%v/%v/git/blobs\", r.Owner, r.Repo)\n+}\n+\n+func (r GitCreateBlobReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r GitCreateBlobReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitCreateBlobReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GitCreateBlobReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GitCreateBlobReqBody
      is a request body for git/create-blob\n+\n+API documentation: https://developer.github.com/v3/git/blobs/#create-a-blob\n+*/\n+type
      GitCreateBlobReqBody struct {\n+\n+\t// The new blob''s content.\n+\tContent
      *string `json:\"content\"`\n+\n+\t/*\n+\t   The encoding used for `content`.
      Currently, `\"utf-8\"` and `\"base64\"` are\n+\t   supported.\n+\t*/\n+\tEncoding
      *string `json:\"encoding,omitempty\"`\n+}\n+\n+/*\n+GitCreateBlobResponseBody201
      is a response body for git/create-blob\n+\n+API documentation: https://developer.github.com/v3/git/blobs/#create-a-blob\n+*/\n+type
      GitCreateBlobResponseBody201 struct {\n+\tSha string `json:\"sha,omitempty\"`\n+\tUrl
      string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitGetTreeReq builds requests
      for \"git/get-tree\"\n+\n+Get a tree.\n+\n+  GET /repos/{owner}/{repo}/git/trees/{tree_sha}\n+\n+https://developer.github.com/v3/git/trees/#get-a-tree\n+*/\n+type
      GitGetTreeReq struct {\n+\n+\t// owner parameter\n+\tOwner string\n+\n+\t//
      repo parameter\n+\tRepo string\n+\n+\t// tree_sha parameter\n+\tTreeSha string\n+\n+\t//
      recursive parameter\n+\tRecursive *int64\n+}\n+\n+func (r GitGetTreeReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/trees/%v\", r.Owner, r.Repo,
      r.TreeSha)\n+}\n+\n+func (r GitGetTreeReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r GitGetTreeReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Recursive
      != nil {\n+\t\tquery.Set(\"recursive\", strconv.FormatInt(*r.Recursive, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r GitGetTreeReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GitGetTreeReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitGetTreeResponseBody200
      is a response body for git/get-tree\n+\n+API documentation: https://developer.github.com/v3/git/trees/#get-a-tree\n+*/\n+type
      GitGetTreeResponseBody200 struct {\n+\tSha  string `json:\"sha,omitempty\"`\n+\tTree
      []struct {\n+\t\tMode string      `json:\"mode\"`\n+\t\tPath string      `json:\"path\"`\n+\t\tSha  string      `json:\"sha\"`\n+\t\tSize
      json.Number `json:\"size\"`\n+\t\tType string      `json:\"type\"`\n+\t\tUrl  string      `json:\"url\"`\n+\t}
      `json:\"tree,omitempty\"`\n+\tTruncated bool   `json:\"truncated,omitempty\"`\n+\tUrl       string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitGetTagReq builds requests for \"git/get-tag\"\n+\n+Get
      a tag.\n+\n+  GET /repos/{owner}/{repo}/git/tags/{tag_sha}\n+\n+https://developer.github.com/v3/git/tags/#get-a-tag\n+*/\n+type
      GitGetTagReq struct {\n+\tOwner  string\n+\tRepo   string\n+\tTagSha string\n+}\n+\n+func
      (r GitGetTagReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/tags/%v\",
      r.Owner, r.Repo, r.TagSha)\n+}\n+\n+func (r GitGetTagReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r GitGetTagReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r GitGetTagReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GitGetTagReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitGetTagResponseBody200
      is a response body for git/get-tag\n+\n+API documentation: https://developer.github.com/v3/git/tags/#get-a-tag\n+*/\n+type
      GitGetTagResponseBody200 struct {\n+\tMessage string `json:\"message,omitempty\"`\n+\tNodeId  string
      `json:\"node_id,omitempty\"`\n+\tObject  struct {\n+\t\tSha  string `json:\"sha,omitempty\"`\n+\t\tType
      string `json:\"type,omitempty\"`\n+\t\tUrl  string `json:\"url,omitempty\"`\n+\t}
      `json:\"object,omitempty\"`\n+\tSha    string `json:\"sha,omitempty\"`\n+\tTag    string
      `json:\"tag,omitempty\"`\n+\tTagger struct {\n+\t\tDate  string `json:\"date,omitempty\"`\n+\t\tEmail
      string `json:\"email,omitempty\"`\n+\t\tName  string `json:\"name,omitempty\"`\n+\t}
      `json:\"tagger,omitempty\"`\n+\tUrl          string `json:\"url,omitempty\"`\n+\tVerification
      struct {\n+\t\tPayload   string `json:\"payload,omitempty\"`\n+\t\tReason    string
      `json:\"reason,omitempty\"`\n+\t\tSignature string `json:\"signature,omitempty\"`\n+\t\tVerified  bool   `json:\"verified,omitempty\"`\n+\t}
      `json:\"verification,omitempty\"`\n+}\n+\n+/*\n+GitGetRefReq builds requests
      for \"git/get-ref\"\n+\n+Get a single reference.\n+\n+  GET /repos/{owner}/{repo}/git/ref/{ref}\n+\n+https://developer.github.com/v3/git/refs/#get-a-single-reference\n+*/\n+type
      GitGetRefReq struct {\n+\tOwner string\n+\tRepo  string\n+\tRef   string\n+}\n+\n+func
      (r GitGetRefReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/ref/%v\",
      r.Owner, r.Repo, r.Ref)\n+}\n+\n+func (r GitGetRefReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r GitGetRefReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r GitGetRefReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r GitGetRefReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitGetRefResponseBody200
      is a response body for git/get-ref\n+\n+API documentation: https://developer.github.com/v3/git/refs/#get-a-single-reference\n+*/\n+type
      GitGetRefResponseBody200 struct {\n+\tNodeId string `json:\"node_id,omitempty\"`\n+\tObject
      struct {\n+\t\tSha  string `json:\"sha,omitempty\"`\n+\t\tType string `json:\"type,omitempty\"`\n+\t\tUrl  string
      `json:\"url,omitempty\"`\n+\t} `json:\"object,omitempty\"`\n+\tRef string `json:\"ref,omitempty\"`\n+\tUrl
      string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+GitCreateCommitReq builds requests
      for \"git/create-commit\"\n+\n+Create a commit.\n+\n+  POST /repos/{owner}/{repo}/git/commits\n+\n+https://developer.github.com/v3/git/commits/#create-a-commit\n+*/\n+type
      GitCreateCommitReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      GitCreateCommitReqBody\n+}\n+\n+func (r GitCreateCommitReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/commits\", r.Owner, r.Repo)\n+}\n+\n+func
      (r GitCreateCommitReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r
      GitCreateCommitReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GitCreateCommitReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GitCreateCommitReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+GitCreateCommitReqBody
      is a request body for git/create-commit\n+\n+API documentation: https://developer.github.com/v3/git/commits/#create-a-commit\n+*/\n+type
      GitCreateCommitReqBody struct {\n+\n+\t/*\n+\t   Information about the author
      of the commit. By default, the `author` will be the\n+\t   authenticated user
      and the current date. See the `author` and `committer` object\n+\t   below for
      details.\n+\t*/\n+\tAuthor *struct {\n+\n+\t\t/*\n+\t\t   Indicates when this
      commit was authored (or committed). This is a timestamp in\n+\t\t   [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
      format:\n+\t\t   `YYYY-MM-DDTHH:MM:SSZ`.\n+\t\t*/\n+\t\tDate *string `json:\"date,omitempty\"`\n+\n+\t\t//
      The email of the author (or committer) of the commit\n+\t\tEmail *string `json:\"email,omitempty\"`\n+\n+\t\t//
      The name of the author (or committer) of the commit\n+\t\tName *string `json:\"name,omitempty\"`\n+\t}
      `json:\"author,omitempty\"`\n+\n+\t/*\n+\t   Information about the person who
      is making the commit. By default, `committer`\n+\t   will use the information
      set in `author`. See the `author` and `committer`\n+\t   object below for details.\n+\t*/\n+\tCommitter
      *struct {\n+\n+\t\t/*\n+\t\t   Indicates when this commit was authored (or committed).
      This is a timestamp in\n+\t\t   [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
      format:\n+\t\t   `YYYY-MM-DDTHH:MM:SSZ`.\n+\t\t*/\n+\t\tDate *string `json:\"date,omitempty\"`\n+\n+\t\t//
      The email of the author (or committer) of the commit\n+\t\tEmail *string `json:\"email,omitempty\"`\n+\n+\t\t//
      The name of the author (or committer) of the commit\n+\t\tName *string `json:\"name,omitempty\"`\n+\t}
      `json:\"committer,omitempty\"`\n+\n+\t// The commit message\n+\tMessage *string
      `json:\"message\"`\n+\n+\t/*\n+\t   The SHAs of the commits that were the parents
      of this commit. If omitted or\n+\t   empty, the commit will be written as a
      root commit. For a single parent, an\n+\t   array of one SHA should be provided;
      for a merge commit, an array of more than\n+\t   one should be provided.\n+\t*/\n+\tParents
      []string `json:\"parents\"`\n+\n+\t/*\n+\t   The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy)
      of the\n+\t   commit. GitHub adds the signature to the `gpgsig` header of the
      created commit.\n+\t   For a commit signature to be verifiable by Git or GitHub,
      it must be an\n+\t   ASCII-armored detached PGP signature over the string commit
      as it would be\n+\t   written to the object database. To pass a `signature`
      parameter, you need to\n+\t   first manually create a valid PGP signature, which
      can be complicated. You may\n+\t   find it easier to [use the command\n+\t   line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work)
      to create\n+\t   signed commits.\n+\t*/\n+\tSignature *string `json:\"signature,omitempty\"`\n+\n+\t//
      The SHA of the tree object this commit points to\n+\tTree *string `json:\"tree\"`\n+}\n+\n+/*\n+GitCreateCommitResponseBody201
      is a response body for git/create-commit\n+\n+API documentation: https://developer.github.com/v3/git/commits/#create-a-commit\n+*/\n+type
      GitCreateCommitResponseBody201 struct {\n+\tAuthor struct {\n+\t\tDate  string
      `json:\"date,omitempty\"`\n+\t\tEmail string `json:\"email,omitempty\"`\n+\t\tName  string
      `json:\"name,omitempty\"`\n+\t} `json:\"author,omitempty\"`\n+\tCommitter struct
      {\n+\t\tDate  string `json:\"date,omitempty\"`\n+\t\tEmail string `json:\"email,omitempty\"`\n+\t\tName  string
      `json:\"name,omitempty\"`\n+\t} `json:\"committer,omitempty\"`\n+\tMessage string
      `json:\"message,omitempty\"`\n+\tNodeId  string `json:\"node_id,omitempty\"`\n+\tParents
      []struct {\n+\t\tSha string `json:\"sha,omitempty\"`\n+\t\tUrl string `json:\"url,omitempty\"`\n+\t}
      `json:\"parents,omitempty\"`\n+\tSha  string `json:\"sha,omitempty\"`\n+\tTree
      struct {\n+\t\tSha string `json:\"sha,omitempty\"`\n+\t\tUrl string `json:\"url,omitempty\"`\n+\t}
      `json:\"tree,omitempty\"`\n+\tUrl          string `json:\"url,omitempty\"`\n+\tVerification
      struct {\n+\t\tPayload   string `json:\"payload,omitempty\"`\n+\t\tReason    string
      `json:\"reason,omitempty\"`\n+\t\tSignature string `json:\"signature,omitempty\"`\n+\t\tVerified  bool   `json:\"verified,omitempty\"`\n+\t}
      `json:\"verification,omitempty\"`\n+}\n+\n+/*\n+GitGetCommitReq builds requests
      for \"git/get-commit\"\n+\n+Get a commit.\n+\n+  GET /repos/{owner}/{repo}/git/commits/{commit_sha}\n+\n+https://developer.github.com/v3/git/commits/#get-a-commit\n+*/\n+type
      GitGetCommitReq struct {\n+\tOwner     string\n+\tRepo      string\n+\tCommitSha
      string\n+}\n+\n+func (r GitGetCommitReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/git/commits/%v\",
      r.Owner, r.Repo, r.CommitSha)\n+}\n+\n+func (r GitGetCommitReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r GitGetCommitReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r GitGetCommitReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GitGetCommitReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+GitGetCommitResponseBody200 is a response
      body for git/get-commit\n+\n+API documentation: https://developer.github.com/v3/git/commits/#get-a-commit\n+*/\n+type
      GitGetCommitResponseBody200 struct {\n+\tAuthor struct {\n+\t\tDate  string
      `json:\"date,omitempty\"`\n+\t\tEmail string `json:\"email,omitempty\"`\n+\t\tName  string
      `json:\"name,omitempty\"`\n+\t} `json:\"author,omitempty\"`\n+\tCommitter struct
      {\n+\t\tDate  string `json:\"date,omitempty\"`\n+\t\tEmail string `json:\"email,omitempty\"`\n+\t\tName  string
      `json:\"name,omitempty\"`\n+\t} `json:\"committer,omitempty\"`\n+\tMessage string
      `json:\"message,omitempty\"`\n+\tParents []struct {\n+\t\tSha string `json:\"sha,omitempty\"`\n+\t\tUrl
      string `json:\"url,omitempty\"`\n+\t} `json:\"parents,omitempty\"`\n+\tSha  string
      `json:\"sha,omitempty\"`\n+\tTree struct {\n+\t\tSha string `json:\"sha,omitempty\"`\n+\t\tUrl
      string `json:\"url,omitempty\"`\n+\t} `json:\"tree,omitempty\"`\n+\tUrl          string
      `json:\"url,omitempty\"`\n+\tVerification struct {\n+\t\tPayload   string `json:\"payload,omitempty\"`\n+\t\tReason    string
      `json:\"reason,omitempty\"`\n+\t\tSignature string `json:\"signature,omitempty\"`\n+\t\tVerified  bool   `json:\"verified,omitempty\"`\n+\t}
      `json:\"verification,omitempty\"`\n+}"},{"sha":"65c1afc9a9ea31701bee312130d79aab74097264","filename":"zz_gitignore_gen.go","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_gitignore_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_gitignore_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_gitignore_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,97 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+GitignoreGetTemplateReq
      builds requests for \"gitignore/get-template\"\n+\n+Get a single template.\n+\n+  GET
      /gitignore/templates/{name}\n+\n+https://developer.github.com/v3/gitignore/#get-a-single-template\n+*/\n+type
      GitignoreGetTemplateReq struct {\n+\tName string\n+}\n+\n+func (r GitignoreGetTemplateReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/gitignore/templates/%v\", r.Name)\n+}\n+\n+func
      (r GitignoreGetTemplateReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r GitignoreGetTemplateReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r GitignoreGetTemplateReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r GitignoreGetTemplateReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitignoreGetTemplateResponseBody200
      is a response body for gitignore/get-template\n+\n+API documentation: https://developer.github.com/v3/gitignore/#get-a-single-template\n+*/\n+type
      GitignoreGetTemplateResponseBody200 struct {\n+\tName   string `json:\"name,omitempty\"`\n+\tSource
      string `json:\"source,omitempty\"`\n+}\n+\n+/*\n+GitignoreListTemplatesReq builds
      requests for \"gitignore/list-templates\"\n+\n+Listing available templates.\n+\n+  GET
      /gitignore/templates\n+\n+https://developer.github.com/v3/gitignore/#listing-available-templates\n+*/\n+type
      GitignoreListTemplatesReq struct{}\n+\n+func (r GitignoreListTemplatesReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/gitignore/templates\")\n+}\n+\n+func (r GitignoreListTemplatesReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r GitignoreListTemplatesReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r GitignoreListTemplatesReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r GitignoreListTemplatesReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+GitignoreListTemplatesResponseBody200
      is a response body for gitignore/list-templates\n+\n+API documentation: https://developer.github.com/v3/gitignore/#listing-available-templates\n+*/\n+type
      GitignoreListTemplatesResponseBody200 []string"},{"sha":"64c48a254f24240d58f1b70a589343d772e62ced","filename":"zz_interactions_gen.go","status":"added","additions":353,"deletions":0,"changes":353,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_interactions_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_interactions_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_interactions_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,353 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+InteractionsRemoveRestrictionsForRepoReq
      builds requests for \"interactions/remove-restrictions-for-repo\"\n+\n+Remove
      interaction restrictions for a repository.\n+\n+  DELETE /repos/{owner}/{repo}/interaction-limits\n+\n+https://developer.github.com/v3/interactions/repos/#remove-interaction-restrictions-for-a-repository\n+*/\n+type
      InteractionsRemoveRestrictionsForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t/*\n+\tThe
      Interactions API is currently in public preview. See the [blog\n+\tpost](https://developer.github.com/changes/2018-12-18-interactions-preview)\n+\tpreview
      for more details. To access the API during the preview period, you must\n+\tset
      this to true.\n+\t*/\n+\tSombraPreview bool\n+}\n+\n+func (r InteractionsRemoveRestrictionsForRepoReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/interaction-limits\",
      r.Owner, r.Repo)\n+}\n+\n+func (r InteractionsRemoveRestrictionsForRepoReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r InteractionsRemoveRestrictionsForRepoReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r InteractionsRemoveRestrictionsForRepoReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"sombra\": r.SombraPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r InteractionsRemoveRestrictionsForRepoReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+InteractionsGetRestrictionsForRepoReq builds requests
      for \"interactions/get-restrictions-for-repo\"\n+\n+Get interaction restrictions
      for a repository.\n+\n+  GET /repos/{owner}/{repo}/interaction-limits\n+\n+https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository\n+*/\n+type
      InteractionsGetRestrictionsForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t/*\n+\tThe
      Interactions API is currently in public preview. See the [blog\n+\tpost](https://developer.github.com/changes/2018-12-18-interactions-preview)\n+\tpreview
      for more details. To access the API during the preview period, you must\n+\tset
      this to true.\n+\t*/\n+\tSombraPreview bool\n+}\n+\n+func (r InteractionsGetRestrictionsForRepoReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/interaction-limits\",
      r.Owner, r.Repo)\n+}\n+\n+func (r InteractionsGetRestrictionsForRepoReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r InteractionsGetRestrictionsForRepoReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r InteractionsGetRestrictionsForRepoReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"sombra\": r.SombraPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r InteractionsGetRestrictionsForRepoReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+InteractionsGetRestrictionsForRepoResponseBody200 is
      a response body for interactions/get-restrictions-for-repo\n+\n+API documentation:
      https://developer.github.com/v3/interactions/repos/#get-interaction-restrictions-for-a-repository\n+*/\n+type
      InteractionsGetRestrictionsForRepoResponseBody200 struct {\n+\tExpiresAt string
      `json:\"expires_at,omitempty\"`\n+\tLimit     string `json:\"limit,omitempty\"`\n+\tOrigin    string
      `json:\"origin,omitempty\"`\n+}\n+\n+/*\n+InteractionsAddOrUpdateRestrictionsForRepoReq
      builds requests for \"interactions/add-or-update-restrictions-for-repo\"\n+\n+Add
      or update interaction restrictions for a repository.\n+\n+  PUT /repos/{owner}/{repo}/interaction-limits\n+\n+https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository\n+*/\n+type
      InteractionsAddOrUpdateRestrictionsForRepoReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      InteractionsAddOrUpdateRestrictionsForRepoReqBody\n+\n+\t/*\n+\tThe Interactions
      API is currently in public preview. See the [blog\n+\tpost](https://developer.github.com/changes/2018-12-18-interactions-preview)\n+\tpreview
      for more details. To access the API during the preview period, you must\n+\tset
      this to true.\n+\t*/\n+\tSombraPreview bool\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForRepoReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/interaction-limits\",
      r.Owner, r.Repo)\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForRepoReq)
      method() string {\n+\treturn \"PUT\"\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForRepoReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r InteractionsAddOrUpdateRestrictionsForRepoReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"sombra\": r.SombraPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForRepoReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+InteractionsAddOrUpdateRestrictionsForRepoReqBody
      is a request body for interactions/add-or-update-restrictions-for-repo\n+\n+API
      documentation: https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository\n+*/\n+type
      InteractionsAddOrUpdateRestrictionsForRepoReqBody struct {\n+\n+\t/*\n+\t   Specifies
      the group of GitHub users who can comment, open issues, or create pull\n+\t   requests
      for the given repository. Must be one of: `existing_users`,\n+\t   `contributors_only`,
      or `collaborators_only`.\n+\t*/\n+\tLimit *string `json:\"limit\"`\n+}\n+\n+/*\n+InteractionsAddOrUpdateRestrictionsForRepoResponseBody200
      is a response body for interactions/add-or-update-restrictions-for-repo\n+\n+API
      documentation: https://developer.github.com/v3/interactions/repos/#add-or-update-interaction-restrictions-for-a-repository\n+*/\n+type
      InteractionsAddOrUpdateRestrictionsForRepoResponseBody200 struct {\n+\tExpiresAt
      string `json:\"expires_at,omitempty\"`\n+\tLimit     string `json:\"limit,omitempty\"`\n+\tOrigin    string
      `json:\"origin,omitempty\"`\n+}\n+\n+/*\n+InteractionsGetRestrictionsForOrgReq
      builds requests for \"interactions/get-restrictions-for-org\"\n+\n+Get interaction
      restrictions for an organization.\n+\n+  GET /orgs/{org}/interaction-limits\n+\n+https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization\n+*/\n+type
      InteractionsGetRestrictionsForOrgReq struct {\n+\tOrg string\n+\n+\t/*\n+\tThe
      Interactions API is currently in public preview. See the [blog\n+\tpost](https://developer.github.com/changes/2018-12-18-interactions-preview)\n+\tpreview
      for more details. To access the API during the preview period, you must\n+\tset
      this to true.\n+\t*/\n+\tSombraPreview bool\n+}\n+\n+func (r InteractionsGetRestrictionsForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/interaction-limits\", r.Org)\n+}\n+\n+func
      (r InteractionsGetRestrictionsForOrgReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r InteractionsGetRestrictionsForOrgReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r InteractionsGetRestrictionsForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"sombra\": r.SombraPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r InteractionsGetRestrictionsForOrgReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+InteractionsGetRestrictionsForOrgResponseBody200
      is a response body for interactions/get-restrictions-for-org\n+\n+API documentation:
      https://developer.github.com/v3/interactions/orgs/#get-interaction-restrictions-for-an-organization\n+*/\n+type
      InteractionsGetRestrictionsForOrgResponseBody200 struct {\n+\tExpiresAt string
      `json:\"expires_at,omitempty\"`\n+\tLimit     string `json:\"limit,omitempty\"`\n+\tOrigin    string
      `json:\"origin,omitempty\"`\n+}\n+\n+/*\n+InteractionsAddOrUpdateRestrictionsForOrgReq
      builds requests for \"interactions/add-or-update-restrictions-for-org\"\n+\n+Add
      or update interaction restrictions for an organization.\n+\n+  PUT /orgs/{org}/interaction-limits\n+\n+https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization\n+*/\n+type
      InteractionsAddOrUpdateRestrictionsForOrgReq struct {\n+\tOrg         string\n+\tRequestBody
      InteractionsAddOrUpdateRestrictionsForOrgReqBody\n+\n+\t/*\n+\tThe Interactions
      API is currently in public preview. See the [blog\n+\tpost](https://developer.github.com/changes/2018-12-18-interactions-preview)\n+\tpreview
      for more details. To access the API during the preview period, you must\n+\tset
      this to true.\n+\t*/\n+\tSombraPreview bool\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/interaction-limits\", r.Org)\n+}\n+\n+func
      (r InteractionsAddOrUpdateRestrictionsForOrgReq) method() string {\n+\treturn
      \"PUT\"\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForOrgReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"sombra\": r.SombraPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r InteractionsAddOrUpdateRestrictionsForOrgReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+InteractionsAddOrUpdateRestrictionsForOrgReqBody
      is a request body for interactions/add-or-update-restrictions-for-org\n+\n+API
      documentation: https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization\n+*/\n+type
      InteractionsAddOrUpdateRestrictionsForOrgReqBody struct {\n+\n+\t/*\n+\t   Specifies
      the group of GitHub users who can comment, open issues, or create pull\n+\t   requests
      in public repositories for the given organization. Must be one of:\n+\t   `existing_users`,
      `contributors_only`, or `collaborators_only`.\n+\t*/\n+\tLimit *string `json:\"limit\"`\n+}\n+\n+/*\n+InteractionsAddOrUpdateRestrictionsForOrgResponseBody200
      is a response body for interactions/add-or-update-restrictions-for-org\n+\n+API
      documentation: https://developer.github.com/v3/interactions/orgs/#add-or-update-interaction-restrictions-for-an-organization\n+*/\n+type
      InteractionsAddOrUpdateRestrictionsForOrgResponseBody200 struct {\n+\tExpiresAt
      string `json:\"expires_at,omitempty\"`\n+\tLimit     string `json:\"limit,omitempty\"`\n+\tOrigin    string
      `json:\"origin,omitempty\"`\n+}\n+\n+/*\n+InteractionsRemoveRestrictionsForOrgReq
      builds requests for \"interactions/remove-restrictions-for-org\"\n+\n+Remove
      interaction restrictions for an organization.\n+\n+  DELETE /orgs/{org}/interaction-limits\n+\n+https://developer.github.com/v3/interactions/orgs/#remove-interaction-restrictions-for-an-organization\n+*/\n+type
      InteractionsRemoveRestrictionsForOrgReq struct {\n+\tOrg string\n+\n+\t/*\n+\tThe
      Interactions API is currently in public preview. See the [blog\n+\tpost](https://developer.github.com/changes/2018-12-18-interactions-preview)\n+\tpreview
      for more details. To access the API during the preview period, you must\n+\tset
      this to true.\n+\t*/\n+\tSombraPreview bool\n+}\n+\n+func (r InteractionsRemoveRestrictionsForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/interaction-limits\", r.Org)\n+}\n+\n+func
      (r InteractionsRemoveRestrictionsForOrgReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r InteractionsRemoveRestrictionsForOrgReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r InteractionsRemoveRestrictionsForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"sombra\": r.SombraPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r InteractionsRemoveRestrictionsForOrgReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}"},{"sha":"dbcc943444a5dfac261cb5efe624afaa9c150785","filename":"zz_issues_gen.go","status":"added","additions":5025,"deletions":0,"changes":5025,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_issues_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_issues_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_issues_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"e84069e738b6fd9b95212bf30d89cc02047b5492","filename":"zz_licenses_gen.go","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_licenses_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_licenses_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_licenses_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,183 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+LicensesGetForRepoReq
      builds requests for \"licenses/get-for-repo\"\n+\n+Get the contents of a repository''s
      license.\n+\n+  GET /repos/{owner}/{repo}/license\n+\n+https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license\n+*/\n+type
      LicensesGetForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r LicensesGetForRepoReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/license\",
      r.Owner, r.Repo)\n+}\n+\n+func (r LicensesGetForRepoReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r LicensesGetForRepoReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r LicensesGetForRepoReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r LicensesGetForRepoReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+LicensesGetForRepoResponseBody200 is a response body
      for licenses/get-for-repo\n+\n+API documentation: https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license\n+*/\n+type
      LicensesGetForRepoResponseBody200 struct {\n+\tLinks struct {\n+\t\tGit  string
      `json:\"git,omitempty\"`\n+\t\tHtml string `json:\"html,omitempty\"`\n+\t\tSelf
      string `json:\"self,omitempty\"`\n+\t} `json:\"_links,omitempty\"`\n+\tContent     string
      `json:\"content,omitempty\"`\n+\tDownloadUrl string `json:\"download_url,omitempty\"`\n+\tEncoding    string
      `json:\"encoding,omitempty\"`\n+\tGitUrl      string `json:\"git_url,omitempty\"`\n+\tHtmlUrl     string
      `json:\"html_url,omitempty\"`\n+\tLicense     struct {\n+\t\tKey    string `json:\"key,omitempty\"`\n+\t\tName   string
      `json:\"name,omitempty\"`\n+\t\tNodeId string `json:\"node_id,omitempty\"`\n+\t\tSpdxId
      string `json:\"spdx_id,omitempty\"`\n+\t\tUrl    string `json:\"url,omitempty\"`\n+\t}
      `json:\"license,omitempty\"`\n+\tName string      `json:\"name,omitempty\"`\n+\tPath
      string      `json:\"path,omitempty\"`\n+\tSha  string      `json:\"sha,omitempty\"`\n+\tSize
      json.Number `json:\"size,omitempty\"`\n+\tType string      `json:\"type,omitempty\"`\n+\tUrl  string      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+LicensesGetReq
      builds requests for \"licenses/get\"\n+\n+Get an individual license.\n+\n+  GET
      /licenses/{license}\n+\n+https://developer.github.com/v3/licenses/#get-an-individual-license\n+*/\n+type
      LicensesGetReq struct {\n+\tLicense string\n+}\n+\n+func (r LicensesGetReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/licenses/%v\", r.License)\n+}\n+\n+func
      (r LicensesGetReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r LicensesGetReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r LicensesGetReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r LicensesGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+LicensesGetResponseBody200 is a response
      body for licenses/get\n+\n+API documentation: https://developer.github.com/v3/licenses/#get-an-individual-license\n+*/\n+type
      LicensesGetResponseBody200 struct {\n+\tBody           string   `json:\"body,omitempty\"`\n+\tConditions     []string
      `json:\"conditions,omitempty\"`\n+\tDescription    string   `json:\"description,omitempty\"`\n+\tFeatured       bool     `json:\"featured,omitempty\"`\n+\tHtmlUrl        string   `json:\"html_url,omitempty\"`\n+\tImplementation
      string   `json:\"implementation,omitempty\"`\n+\tKey            string   `json:\"key,omitempty\"`\n+\tLimitations    []string
      `json:\"limitations,omitempty\"`\n+\tName           string   `json:\"name,omitempty\"`\n+\tNodeId         string   `json:\"node_id,omitempty\"`\n+\tPermissions    []string
      `json:\"permissions,omitempty\"`\n+\tSpdxId         string   `json:\"spdx_id,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+LicensesListCommonlyUsedReq
      builds requests for \"licenses/list-commonly-used\"\n+\n+List commonly used
      licenses.\n+\n+  GET /licenses\n+\n+https://developer.github.com/v3/licenses/#list-commonly-used-licenses\n+*/\n+type
      LicensesListCommonlyUsedReq struct{}\n+\n+func (r LicensesListCommonlyUsedReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/licenses\")\n+}\n+\n+func (r LicensesListCommonlyUsedReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r LicensesListCommonlyUsedReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r LicensesListCommonlyUsedReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r LicensesListCommonlyUsedReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+LicensesListCommonlyUsedResponseBody200
      is a response body for licenses/list-commonly-used\n+\n+API documentation: https://developer.github.com/v3/licenses/#list-commonly-used-licenses\n+*/\n+type
      LicensesListCommonlyUsedResponseBody200 []struct {\n+\tKey    string `json:\"key,omitempty\"`\n+\tName   string
      `json:\"name,omitempty\"`\n+\tNodeId string `json:\"node_id,omitempty\"`\n+\tSpdxId
      string `json:\"spdx_id,omitempty\"`\n+\tUrl    string `json:\"url,omitempty\"`\n+}"},{"sha":"242e09e2c24d61f4d0b5f3b71129dbb09ebc8621","filename":"zz_markdown_gen.go","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_markdown_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_markdown_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_markdown_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,119 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+MarkdownRenderReq
      builds requests for \"markdown/render\"\n+\n+Render an arbitrary Markdown document.\n+\n+  POST
      /markdown\n+\n+https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n+*/\n+type
      MarkdownRenderReq struct {\n+\tRequestBody MarkdownRenderReqBody\n+}\n+\n+func
      (r MarkdownRenderReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/markdown\")\n+}\n+\n+func
      (r MarkdownRenderReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r
      MarkdownRenderReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r MarkdownRenderReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MarkdownRenderReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MarkdownRenderReqBody
      is a request body for markdown/render\n+\n+API documentation: https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n+*/\n+type
      MarkdownRenderReqBody struct {\n+\n+\t/*\n+\t   The repository context to use
      when creating references in `gfm` mode. Omit this\n+\t   parameter when using
      `markdown` mode.\n+\t*/\n+\tContext *string `json:\"context,omitempty\"`\n+\n+\t/*\n+\t   The
      rendering mode. Can be either:\n+\t   \\* `markdown` to render a document in
      plain Markdown, just like README.md files\n+\t   are rendered.\n+\t   \\* `gfm`
      to render a document in [GitHub Flavored\n+\t   Markdown](https://github.github.com/gfm/),
      which creates links for user mentions\n+\t   as well as references to SHA-1
      hashes, issues, and pull requests.\n+\t*/\n+\tMode *string `json:\"mode,omitempty\"`\n+\n+\t//
      The Markdown text to render in HTML. Markdown content must be 400 KB or less.\n+\tText
      *string `json:\"text\"`\n+}\n+\n+/*\n+MarkdownRenderRawReq builds requests for
      \"markdown/render-raw\"\n+\n+Render a Markdown document in raw mode.\n+\n+  POST
      /markdown/raw\n+\n+https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode\n+*/\n+type
      MarkdownRenderRawReq struct {\n+\tRequestBody MarkdownRenderRawReqBody\n+\n+\t//
      Setting content-type header is required for this endpoint\n+\tContentTypeHeader
      *string\n+}\n+\n+func (r MarkdownRenderRawReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/markdown/raw\")\n+}\n+\n+func (r MarkdownRenderRawReq) method()
      string {\n+\treturn \"POST\"\n+}\n+\n+func (r MarkdownRenderRawReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MarkdownRenderRawReq)
      header() http.Header {\n+\theaderVals := map[string]*string{\"content-type\":
      r.ContentTypeHeader}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MarkdownRenderRawReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MarkdownRenderRawReqBody
      is a request body for markdown/render-raw\n+\n+API documentation: https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode\n+*/\n+type
      MarkdownRenderRawReqBody string"},{"sha":"f107f03d137202886192224f90c0aa9e9d66082e","filename":"zz_meta_gen.go","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_meta_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_meta_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_meta_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,65 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+MetaGetReq
      builds requests for \"meta/get\"\n+\n+Get.\n+\n+  GET /meta\n+\n+https://developer.github.com/v3/meta/#meta\n+*/\n+type
      MetaGetReq struct{}\n+\n+func (r MetaGetReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/meta\")\n+}\n+\n+func
      (r MetaGetReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r MetaGetReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r MetaGetReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MetaGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+MetaGetResponseBody200 is a response body
      for meta/get\n+\n+API documentation: https://developer.github.com/v3/meta/#meta\n+*/\n+type
      MetaGetResponseBody200 struct {\n+\tApi                []string `json:\"api,omitempty\"`\n+\tGit                []string
      `json:\"git,omitempty\"`\n+\tHooks              []string `json:\"hooks,omitempty\"`\n+\tImporter           []string
      `json:\"importer,omitempty\"`\n+\tPages              []string `json:\"pages,omitempty\"`\n+\tSshKeyFingerprints
      struct {\n+\t\tMD5DSA    string `json:\"MD5_DSA,omitempty\"`\n+\t\tMD5RSA    string
      `json:\"MD5_RSA,omitempty\"`\n+\t\tSHA256DSA string `json:\"SHA256_DSA,omitempty\"`\n+\t\tSHA256RSA
      string `json:\"SHA256_RSA,omitempty\"`\n+\t} `json:\"ssh_key_fingerprints,omitempty\"`\n+\tVerifiablePasswordAuthentication
      bool     `json:\"verifiable_password_authentication,omitempty\"`\n+\tWeb                              []string
      `json:\"web,omitempty\"`\n+}"},{"sha":"8e8f0574ec3fcf55ef7dc5bde40519bf43153bb2","filename":"zz_migrations_gen.go","status":"added","additions":2216,"deletions":0,"changes":2216,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_migrations_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_migrations_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_migrations_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,2216 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+MigrationsDeleteArchiveForAuthenticatedUserReq
      builds requests for \"migrations/delete-archive-for-authenticated-user\"\n+\n+Delete
      a user migration archive.\n+\n+  DELETE /user/migrations/{migration_id}/archive\n+\n+https://developer.github.com/v3/migrations/users/#delete-a-user-migration-archive\n+*/\n+type
      MigrationsDeleteArchiveForAuthenticatedUserReq struct {\n+\tMigrationId int64\n+\n+\t//
      To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsDeleteArchiveForAuthenticatedUserReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/user/migrations/%v/archive\", r.MigrationId)\n+}\n+\n+func
      (r MigrationsDeleteArchiveForAuthenticatedUserReq) method() string {\n+\treturn
      \"DELETE\"\n+}\n+\n+func (r MigrationsDeleteArchiveForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r MigrationsDeleteArchiveForAuthenticatedUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r MigrationsDeleteArchiveForAuthenticatedUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+MigrationsGetArchiveForAuthenticatedUserReq builds requests
      for \"migrations/get-archive-for-authenticated-user\"\n+\n+Download a user migration
      archive.\n+\n+  GET /user/migrations/{migration_id}/archive\n+\n+https://developer.github.com/v3/migrations/users/#download-a-user-migration-archive\n+*/\n+type
      MigrationsGetArchiveForAuthenticatedUserReq struct {\n+\tMigrationId int64\n+\n+\t//
      To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsGetArchiveForAuthenticatedUserReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/user/migrations/%v/archive\", r.MigrationId)\n+}\n+\n+func
      (r MigrationsGetArchiveForAuthenticatedUserReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r MigrationsGetArchiveForAuthenticatedUserReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsGetArchiveForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsGetArchiveForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsGetStatusForAuthenticatedUserReq
      builds requests for \"migrations/get-status-for-authenticated-user\"\n+\n+Get
      the status of a user migration.\n+\n+  GET /user/migrations/{migration_id}\n+\n+https://developer.github.com/v3/migrations/users/#get-the-status-of-a-user-migration\n+*/\n+type
      MigrationsGetStatusForAuthenticatedUserReq struct {\n+\tMigrationId int64\n+\n+\t//
      To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsGetStatusForAuthenticatedUserReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/user/migrations/%v\", r.MigrationId)\n+}\n+\n+func
      (r MigrationsGetStatusForAuthenticatedUserReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r MigrationsGetStatusForAuthenticatedUserReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsGetStatusForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsGetStatusForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsGetStatusForAuthenticatedUserResponseBody200
      is a response body for migrations/get-status-for-authenticated-user\n+\n+API
      documentation: https://developer.github.com/v3/migrations/users/#get-the-status-of-a-user-migration\n+*/\n+type
      MigrationsGetStatusForAuthenticatedUserResponseBody200 struct {\n+\tCreatedAt          string
      `json:\"created_at,omitempty\"`\n+\tExcludeAttachments bool   `json:\"exclude_attachments,omitempty\"`\n+\tGuid               string
      `json:\"guid,omitempty\"`\n+\tId                 int64  `json:\"id,omitempty\"`\n+\tLockRepositories   bool   `json:\"lock_repositories,omitempty\"`\n+\tOwner              struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tRepositories []struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repositories,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsSetLfsPreferenceReq
      builds requests for \"migrations/set-lfs-preference\"\n+\n+Set Git LFS preference.\n+\n+  PATCH
      /repos/{owner}/{repo}/import/lfs\n+\n+https://developer.github.com/v3/migrations/source_imports/#set-git-lfs-preference\n+*/\n+type
      MigrationsSetLfsPreferenceReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      MigrationsSetLfsPreferenceReqBody\n+}\n+\n+func (r MigrationsSetLfsPreferenceReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import/lfs\", r.Owner,
      r.Repo)\n+}\n+\n+func (r MigrationsSetLfsPreferenceReq) method() string {\n+\treturn
      \"PATCH\"\n+}\n+\n+func (r MigrationsSetLfsPreferenceReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsSetLfsPreferenceReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsSetLfsPreferenceReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MigrationsSetLfsPreferenceReqBody
      is a request body for migrations/set-lfs-preference\n+\n+API documentation:
      https://developer.github.com/v3/migrations/source_imports/#set-git-lfs-preference\n+*/\n+type
      MigrationsSetLfsPreferenceReqBody struct {\n+\n+\t/*\n+\t   Can be one of `opt_in`
      (large files will be stored using Git LFS) or `opt_out`\n+\t   (large files
      will be removed during the import).\n+\t*/\n+\tUseLfs *string `json:\"use_lfs\"`\n+}\n+\n+/*\n+MigrationsSetLfsPreferenceResponseBody200
      is a response body for migrations/set-lfs-preference\n+\n+API documentation:
      https://developer.github.com/v3/migrations/source_imports/#set-git-lfs-preference\n+*/\n+type
      MigrationsSetLfsPreferenceResponseBody200 struct {\n+\tAuthorsCount    int64       `json:\"authors_count,omitempty\"`\n+\tAuthorsUrl      string      `json:\"authors_url,omitempty\"`\n+\tHasLargeFiles   bool        `json:\"has_large_files,omitempty\"`\n+\tHtmlUrl         string      `json:\"html_url,omitempty\"`\n+\tLargeFilesCount
      int64       `json:\"large_files_count,omitempty\"`\n+\tLargeFilesSize  json.Number
      `json:\"large_files_size,omitempty\"`\n+\tRepositoryUrl   string      `json:\"repository_url,omitempty\"`\n+\tStatus          string      `json:\"status,omitempty\"`\n+\tStatusText      string      `json:\"status_text,omitempty\"`\n+\tUrl             string      `json:\"url,omitempty\"`\n+\tUseLfs          string      `json:\"use_lfs,omitempty\"`\n+\tVcs             string      `json:\"vcs,omitempty\"`\n+\tVcsUrl          string      `json:\"vcs_url,omitempty\"`\n+}\n+\n+/*\n+MigrationsCancelImportReq
      builds requests for \"migrations/cancel-import\"\n+\n+Cancel an import.\n+\n+  DELETE
      /repos/{owner}/{repo}/import\n+\n+https://developer.github.com/v3/migrations/source_imports/#cancel-an-import\n+*/\n+type
      MigrationsCancelImportReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r MigrationsCancelImportReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import\",
      r.Owner, r.Repo)\n+}\n+\n+func (r MigrationsCancelImportReq) method() string
      {\n+\treturn \"DELETE\"\n+}\n+\n+func (r MigrationsCancelImportReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsCancelImportReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsCancelImportReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsGetImportProgressReq
      builds requests for \"migrations/get-import-progress\"\n+\n+Get import progress.\n+\n+  GET
      /repos/{owner}/{repo}/import\n+\n+https://developer.github.com/v3/migrations/source_imports/#get-import-progress\n+*/\n+type
      MigrationsGetImportProgressReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r MigrationsGetImportProgressReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import\",
      r.Owner, r.Repo)\n+}\n+\n+func (r MigrationsGetImportProgressReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r MigrationsGetImportProgressReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsGetImportProgressReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsGetImportProgressReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsGetImportProgressResponseBody200
      is a response body for migrations/get-import-progress\n+\n+API documentation:
      https://developer.github.com/v3/migrations/source_imports/#get-import-progress\n+*/\n+type
      MigrationsGetImportProgressResponseBody200 struct {\n+\tAuthorsCount    int64       `json:\"authors_count,omitempty\"`\n+\tAuthorsUrl      string      `json:\"authors_url,omitempty\"`\n+\tHasLargeFiles   bool        `json:\"has_large_files,omitempty\"`\n+\tHtmlUrl         string      `json:\"html_url,omitempty\"`\n+\tLargeFilesCount
      int64       `json:\"large_files_count,omitempty\"`\n+\tLargeFilesSize  json.Number
      `json:\"large_files_size,omitempty\"`\n+\tRepositoryUrl   string      `json:\"repository_url,omitempty\"`\n+\tStatus          string      `json:\"status,omitempty\"`\n+\tStatusText      string      `json:\"status_text,omitempty\"`\n+\tUrl             string      `json:\"url,omitempty\"`\n+\tUseLfs          string      `json:\"use_lfs,omitempty\"`\n+\tVcs             string      `json:\"vcs,omitempty\"`\n+\tVcsUrl          string      `json:\"vcs_url,omitempty\"`\n+}\n+\n+/*\n+MigrationsUpdateImportReq
      builds requests for \"migrations/update-import\"\n+\n+Update existing import.\n+\n+  PATCH
      /repos/{owner}/{repo}/import\n+\n+https://developer.github.com/v3/migrations/source_imports/#update-existing-import\n+*/\n+type
      MigrationsUpdateImportReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      MigrationsUpdateImportReqBody\n+}\n+\n+func (r MigrationsUpdateImportReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import\", r.Owner, r.Repo)\n+}\n+\n+func
      (r MigrationsUpdateImportReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r MigrationsUpdateImportReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r MigrationsUpdateImportReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsUpdateImportReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MigrationsUpdateImportReqBody
      is a request body for migrations/update-import\n+\n+API documentation: https://developer.github.com/v3/migrations/source_imports/#update-existing-import\n+*/\n+type
      MigrationsUpdateImportReqBody struct {\n+\n+\t// The password to provide to
      the originating repository.\n+\tVcsPassword *string `json:\"vcs_password,omitempty\"`\n+\n+\t//
      The username to provide to the originating repository.\n+\tVcsUsername *string
      `json:\"vcs_username,omitempty\"`\n+}\n+\n+/*\n+MigrationsUpdateImportResponseBody200
      is a response body for migrations/update-import\n+\n+API documentation: https://developer.github.com/v3/migrations/source_imports/#update-existing-import\n+*/\n+type
      MigrationsUpdateImportResponseBody200 struct {\n+\tAuthorsUrl    string `json:\"authors_url,omitempty\"`\n+\tHtmlUrl       string
      `json:\"html_url,omitempty\"`\n+\tRepositoryUrl string `json:\"repository_url,omitempty\"`\n+\tStatus        string
      `json:\"status,omitempty\"`\n+\tUrl           string `json:\"url,omitempty\"`\n+\tUseLfs        string
      `json:\"use_lfs,omitempty\"`\n+\tVcs           string `json:\"vcs,omitempty\"`\n+\tVcsUrl        string
      `json:\"vcs_url,omitempty\"`\n+}\n+\n+/*\n+MigrationsStartImportReq builds requests
      for \"migrations/start-import\"\n+\n+Start an import.\n+\n+  PUT /repos/{owner}/{repo}/import\n+\n+https://developer.github.com/v3/migrations/source_imports/#start-an-import\n+*/\n+type
      MigrationsStartImportReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      MigrationsStartImportReqBody\n+}\n+\n+func (r MigrationsStartImportReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import\", r.Owner, r.Repo)\n+}\n+\n+func
      (r MigrationsStartImportReq) method() string {\n+\treturn \"PUT\"\n+}\n+\n+func
      (r MigrationsStartImportReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r MigrationsStartImportReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsStartImportReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MigrationsStartImportReqBody
      is a request body for migrations/start-import\n+\n+API documentation: https://developer.github.com/v3/migrations/source_imports/#start-an-import\n+*/\n+type
      MigrationsStartImportReqBody struct {\n+\n+\t// For a tfvc import, the name
      of the project that is being imported.\n+\tTfvcProject *string `json:\"tfvc_project,omitempty\"`\n+\n+\t/*\n+\t   The
      originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or\n+\t   `tfvc`.
      Please be aware that without this parameter, the import job will take\n+\t   additional
      time to detect the VCS type before beginning the import. This\n+\t   detection
      step will be reflected in the response.\n+\t*/\n+\tVcs *string `json:\"vcs,omitempty\"`\n+\n+\t//
      If authentication is required, the password to provide to `vcs_url`.\n+\tVcsPassword
      *string `json:\"vcs_password,omitempty\"`\n+\n+\t// The URL of the originating
      repository.\n+\tVcsUrl *string `json:\"vcs_url\"`\n+\n+\t// If authentication
      is required, the username to provide to `vcs_url`.\n+\tVcsUsername *string `json:\"vcs_username,omitempty\"`\n+}\n+\n+/*\n+MigrationsStartImportResponseBody201
      is a response body for migrations/start-import\n+\n+API documentation: https://developer.github.com/v3/migrations/source_imports/#start-an-import\n+*/\n+type
      MigrationsStartImportResponseBody201 struct {\n+\tAuthorsCount    int64       `json:\"authors_count,omitempty\"`\n+\tAuthorsUrl      string      `json:\"authors_url,omitempty\"`\n+\tCommitCount     int64       `json:\"commit_count,omitempty\"`\n+\tHasLargeFiles   bool        `json:\"has_large_files,omitempty\"`\n+\tHtmlUrl         string      `json:\"html_url,omitempty\"`\n+\tLargeFilesCount
      int64       `json:\"large_files_count,omitempty\"`\n+\tLargeFilesSize  json.Number
      `json:\"large_files_size,omitempty\"`\n+\tPercent         json.Number `json:\"percent,omitempty\"`\n+\tRepositoryUrl   string      `json:\"repository_url,omitempty\"`\n+\tStatus          string      `json:\"status,omitempty\"`\n+\tStatusText      string      `json:\"status_text,omitempty\"`\n+\tUrl             string      `json:\"url,omitempty\"`\n+\tUseLfs          string      `json:\"use_lfs,omitempty\"`\n+\tVcs             string      `json:\"vcs,omitempty\"`\n+\tVcsUrl          string      `json:\"vcs_url,omitempty\"`\n+}\n+\n+/*\n+MigrationsGetStatusForOrgReq
      builds requests for \"migrations/get-status-for-org\"\n+\n+Get the status of
      an organization migration.\n+\n+  GET /orgs/{org}/migrations/{migration_id}\n+\n+https://developer.github.com/v3/migrations/orgs/#get-the-status-of-an-organization-migration\n+*/\n+type
      MigrationsGetStatusForOrgReq struct {\n+\tOrg         string\n+\tMigrationId
      int64\n+\n+\t// To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsGetStatusForOrgReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/migrations/%v\", r.Org, r.MigrationId)\n+}\n+\n+func
      (r MigrationsGetStatusForOrgReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r MigrationsGetStatusForOrgReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r MigrationsGetStatusForOrgReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r MigrationsGetStatusForOrgReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+MigrationsGetStatusForOrgResponseBody200 is a response
      body for migrations/get-status-for-org\n+\n+API documentation: https://developer.github.com/v3/migrations/orgs/#get-the-status-of-an-organization-migration\n+*/\n+type
      MigrationsGetStatusForOrgResponseBody200 struct {\n+\tCreatedAt          string
      `json:\"created_at,omitempty\"`\n+\tExcludeAttachments bool   `json:\"exclude_attachments,omitempty\"`\n+\tGuid               string
      `json:\"guid,omitempty\"`\n+\tId                 int64  `json:\"id,omitempty\"`\n+\tLockRepositories   bool   `json:\"lock_repositories,omitempty\"`\n+\tOwner              struct
      {\n+\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tRepositories []struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repositories,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsListReposForUserReq
      builds requests for \"migrations/list-repos-for-user\"\n+\n+List repositories
      for a user migration.\n+\n+  GET /user/{migration_id}/repositories\n+\n+https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration\n+*/\n+type
      MigrationsListReposForUserReq struct {\n+\tMigrationId int64\n+\n+\t// Results
      per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to
      fetch.\n+\tPage *int64\n+\n+\t// To access the Migrations API, you must set
      this to true.\n+\tWyandottePreview bool\n+}\n+\n+func (r MigrationsListReposForUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/user/%v/repositories\", r.MigrationId)\n+}\n+\n+func
      (r MigrationsListReposForUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r MigrationsListReposForUserReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r MigrationsListReposForUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsListReposForUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsListReposForUserResponseBody200
      is a response body for migrations/list-repos-for-user\n+\n+API documentation:
      https://developer.github.com/v3/migrations/users/#list-repositories-for-a-user-migration\n+*/\n+type
      MigrationsListReposForUserResponseBody200 []struct {\n+\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\tArchived         bool   `json:\"archived,omitempty\"`\n+\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\tCommentsUrl      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl       string
      `json:\"commits_url,omitempty\"`\n+\tCompareUrl       string `json:\"compare_url,omitempty\"`\n+\tContentsUrl      string
      `json:\"contents_url,omitempty\"`\n+\tContributorsUrl  string `json:\"contributors_url,omitempty\"`\n+\tCreatedAt        string
      `json:\"created_at,omitempty\"`\n+\tDefaultBranch    string `json:\"default_branch,omitempty\"`\n+\tDeploymentsUrl   string
      `json:\"deployments_url,omitempty\"`\n+\tDescription      string `json:\"description,omitempty\"`\n+\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tFork             bool   `json:\"fork,omitempty\"`\n+\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\tFullName         string `json:\"full_name,omitempty\"`\n+\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\tGitUrl           string `json:\"git_url,omitempty\"`\n+\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\tLanguage         string `json:\"language,omitempty\"`\n+\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\tLicense          struct {\n+\t\tKey    string
      `json:\"key,omitempty\"`\n+\t\tName   string `json:\"name,omitempty\"`\n+\t\tNodeId
      string `json:\"node_id,omitempty\"`\n+\t\tSpdxId string `json:\"spdx_id,omitempty\"`\n+\t\tUrl    string
      `json:\"url,omitempty\"`\n+\t} `json:\"license,omitempty\"`\n+\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\tMirrorUrl        string
      `json:\"mirror_url,omitempty\"`\n+\tName             string `json:\"name,omitempty\"`\n+\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\tOwner            struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPermissions struct {\n+\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\tPush  bool `json:\"push,omitempty\"`\n+\t} `json:\"permissions,omitempty\"`\n+\tPrivate            bool        `json:\"private,omitempty\"`\n+\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\tSize               json.Number
      `json:\"size,omitempty\"`\n+\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\tTopics             []string    `json:\"topics,omitempty\"`\n+\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\tUrl                string      `json:\"url,omitempty\"`\n+\tVisibility         string      `json:\"visibility,omitempty\"`\n+\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+}\n+\n+/*\n+MigrationsListForOrgReq
      builds requests for \"migrations/list-for-org\"\n+\n+List organization migrations.\n+\n+  GET
      /orgs/{org}/migrations\n+\n+https://developer.github.com/v3/migrations/orgs/#list-organization-migrations\n+*/\n+type
      MigrationsListForOrgReq struct {\n+\tOrg string\n+\n+\t// Results per page (max
      100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+\n+\t// To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsListForOrgReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/migrations\", r.Org)\n+}\n+\n+func (r MigrationsListForOrgReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r MigrationsListForOrgReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r MigrationsListForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsListForOrgReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsListForOrgResponseBody200
      is a response body for migrations/list-for-org\n+\n+API documentation: https://developer.github.com/v3/migrations/orgs/#list-organization-migrations\n+*/\n+type
      MigrationsListForOrgResponseBody200 []struct {\n+\tCreatedAt          string
      `json:\"created_at,omitempty\"`\n+\tExcludeAttachments bool   `json:\"exclude_attachments,omitempty\"`\n+\tGuid               string
      `json:\"guid,omitempty\"`\n+\tId                 int64  `json:\"id,omitempty\"`\n+\tLockRepositories   bool   `json:\"lock_repositories,omitempty\"`\n+\tOwner              struct
      {\n+\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tRepositories []struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repositories,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsStartForOrgReq
      builds requests for \"migrations/start-for-org\"\n+\n+Start an organization
      migration.\n+\n+  POST /orgs/{org}/migrations\n+\n+https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration\n+*/\n+type
      MigrationsStartForOrgReq struct {\n+\tOrg         string\n+\tRequestBody MigrationsStartForOrgReqBody\n+}\n+\n+func
      (r MigrationsStartForOrgReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/migrations\",
      r.Org)\n+}\n+\n+func (r MigrationsStartForOrgReq) method() string {\n+\treturn
      \"POST\"\n+}\n+\n+func (r MigrationsStartForOrgReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsStartForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsStartForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MigrationsStartForOrgReqBody
      is a request body for migrations/start-for-org\n+\n+API documentation: https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration\n+*/\n+type
      MigrationsStartForOrgReqBody struct {\n+\n+\t/*\n+\t   Indicates whether attachments
      should be excluded from the migration (to reduce\n+\t   migration archive file
      size).\n+\t*/\n+\tExcludeAttachments *bool `json:\"exclude_attachments,omitempty\"`\n+\n+\t/*\n+\t   Indicates
      whether repositories should be locked (to prevent manipulation) while\n+\t   migrating
      data.\n+\t*/\n+\tLockRepositories *bool `json:\"lock_repositories,omitempty\"`\n+\n+\t//
      A list of arrays indicating which repositories should be migrated.\n+\tRepositories
      []string `json:\"repositories\"`\n+}\n+\n+/*\n+MigrationsStartForOrgResponseBody201
      is a response body for migrations/start-for-org\n+\n+API documentation: https://developer.github.com/v3/migrations/orgs/#start-an-organization-migration\n+*/\n+type
      MigrationsStartForOrgResponseBody201 struct {\n+\tCreatedAt          string
      `json:\"created_at,omitempty\"`\n+\tExcludeAttachments bool   `json:\"exclude_attachments,omitempty\"`\n+\tGuid               string
      `json:\"guid,omitempty\"`\n+\tId                 int64  `json:\"id,omitempty\"`\n+\tLockRepositories   bool   `json:\"lock_repositories,omitempty\"`\n+\tOwner              struct
      {\n+\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tRepositories []struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repositories,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsListReposForOrgReq
      builds requests for \"migrations/list-repos-for-org\"\n+\n+List repositories
      in an organization migration.\n+\n+  GET /orgs/{org}/migrations/{migration_id}/repositories\n+\n+https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration\n+*/\n+type
      MigrationsListReposForOrgReq struct {\n+\tOrg         string\n+\tMigrationId
      int64\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t// To access the Migrations
      API, you must set this to true.\n+\tWyandottePreview bool\n+}\n+\n+func (r MigrationsListReposForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/migrations/%v/repositories\",
      r.Org, r.MigrationId)\n+}\n+\n+func (r MigrationsListReposForOrgReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r MigrationsListReposForOrgReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r MigrationsListReposForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsListReposForOrgReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsListReposForOrgResponseBody200
      is a response body for migrations/list-repos-for-org\n+\n+API documentation:
      https://developer.github.com/v3/migrations/orgs/#list-repositories-in-an-organization-migration\n+*/\n+type
      MigrationsListReposForOrgResponseBody200 []struct {\n+\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\tArchived         bool   `json:\"archived,omitempty\"`\n+\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\tCommentsUrl      string `json:\"comments_url,omitempty\"`\n+\tCommitsUrl       string
      `json:\"commits_url,omitempty\"`\n+\tCompareUrl       string `json:\"compare_url,omitempty\"`\n+\tContentsUrl      string
      `json:\"contents_url,omitempty\"`\n+\tContributorsUrl  string `json:\"contributors_url,omitempty\"`\n+\tCreatedAt        string
      `json:\"created_at,omitempty\"`\n+\tDefaultBranch    string `json:\"default_branch,omitempty\"`\n+\tDeploymentsUrl   string
      `json:\"deployments_url,omitempty\"`\n+\tDescription      string `json:\"description,omitempty\"`\n+\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tFork             bool   `json:\"fork,omitempty\"`\n+\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\tFullName         string `json:\"full_name,omitempty\"`\n+\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\tGitUrl           string `json:\"git_url,omitempty\"`\n+\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\tLanguage         string `json:\"language,omitempty\"`\n+\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\tLicense          struct {\n+\t\tKey    string
      `json:\"key,omitempty\"`\n+\t\tName   string `json:\"name,omitempty\"`\n+\t\tNodeId
      string `json:\"node_id,omitempty\"`\n+\t\tSpdxId string `json:\"spdx_id,omitempty\"`\n+\t\tUrl    string
      `json:\"url,omitempty\"`\n+\t} `json:\"license,omitempty\"`\n+\tMergesUrl        string
      `json:\"merges_url,omitempty\"`\n+\tMilestonesUrl    string `json:\"milestones_url,omitempty\"`\n+\tMirrorUrl        string
      `json:\"mirror_url,omitempty\"`\n+\tName             string `json:\"name,omitempty\"`\n+\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\tOwner            struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tPermissions struct {\n+\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\tPush  bool `json:\"push,omitempty\"`\n+\t} `json:\"permissions,omitempty\"`\n+\tPrivate            bool        `json:\"private,omitempty\"`\n+\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\tSize               json.Number
      `json:\"size,omitempty\"`\n+\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\tTopics             []string    `json:\"topics,omitempty\"`\n+\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\tUrl                string      `json:\"url,omitempty\"`\n+\tVisibility         string      `json:\"visibility,omitempty\"`\n+\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+}\n+\n+/*\n+MigrationsMapCommitAuthorReq
      builds requests for \"migrations/map-commit-author\"\n+\n+Map a commit author.\n+\n+  PATCH
      /repos/{owner}/{repo}/import/authors/{author_id}\n+\n+https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author\n+*/\n+type
      MigrationsMapCommitAuthorReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tAuthorId    int64\n+\tRequestBody
      MigrationsMapCommitAuthorReqBody\n+}\n+\n+func (r MigrationsMapCommitAuthorReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import/authors/%v\",
      r.Owner, r.Repo, r.AuthorId)\n+}\n+\n+func (r MigrationsMapCommitAuthorReq)
      method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func (r MigrationsMapCommitAuthorReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r MigrationsMapCommitAuthorReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsMapCommitAuthorReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MigrationsMapCommitAuthorReqBody
      is a request body for migrations/map-commit-author\n+\n+API documentation: https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author\n+*/\n+type
      MigrationsMapCommitAuthorReqBody struct {\n+\n+\t// The new Git author email.\n+\tEmail
      *string `json:\"email,omitempty\"`\n+\n+\t// The new Git author name.\n+\tName
      *string `json:\"name,omitempty\"`\n+}\n+\n+/*\n+MigrationsMapCommitAuthorResponseBody200
      is a response body for migrations/map-commit-author\n+\n+API documentation:
      https://developer.github.com/v3/migrations/source_imports/#map-a-commit-author\n+*/\n+type
      MigrationsMapCommitAuthorResponseBody200 struct {\n+\tEmail      string `json:\"email,omitempty\"`\n+\tId         int64  `json:\"id,omitempty\"`\n+\tImportUrl  string
      `json:\"import_url,omitempty\"`\n+\tName       string `json:\"name,omitempty\"`\n+\tRemoteId   string
      `json:\"remote_id,omitempty\"`\n+\tRemoteName string `json:\"remote_name,omitempty\"`\n+\tUrl        string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsDeleteArchiveForOrgReq builds
      requests for \"migrations/delete-archive-for-org\"\n+\n+Delete an organization
      migration archive.\n+\n+  DELETE /orgs/{org}/migrations/{migration_id}/archive\n+\n+https://developer.github.com/v3/migrations/orgs/#delete-an-organization-migration-archive\n+*/\n+type
      MigrationsDeleteArchiveForOrgReq struct {\n+\tOrg         string\n+\tMigrationId
      int64\n+\n+\t// To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsDeleteArchiveForOrgReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/migrations/%v/archive\", r.Org, r.MigrationId)\n+}\n+\n+func
      (r MigrationsDeleteArchiveForOrgReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r MigrationsDeleteArchiveForOrgReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r MigrationsDeleteArchiveForOrgReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"wyandotte\":
      r.WyandottePreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsDeleteArchiveForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsDownloadArchiveForOrgReq
      builds requests for \"migrations/download-archive-for-org\"\n+\n+Download an
      organization migration archive.\n+\n+  GET /orgs/{org}/migrations/{migration_id}/archive\n+\n+https://developer.github.com/v3/migrations/orgs/#download-an-organization-migration-archive\n+*/\n+type
      MigrationsDownloadArchiveForOrgReq struct {\n+\tOrg         string\n+\tMigrationId
      int64\n+\n+\t// To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsDownloadArchiveForOrgReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/migrations/%v/archive\", r.Org, r.MigrationId)\n+}\n+\n+func
      (r MigrationsDownloadArchiveForOrgReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r MigrationsDownloadArchiveForOrgReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsDownloadArchiveForOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsDownloadArchiveForOrgReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsUnlockRepoForOrgReq
      builds requests for \"migrations/unlock-repo-for-org\"\n+\n+Unlock an organization
      repository.\n+\n+  DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock\n+\n+https://developer.github.com/v3/migrations/orgs/#unlock-an-organization-repository\n+*/\n+type
      MigrationsUnlockRepoForOrgReq struct {\n+\tOrg         string\n+\tMigrationId
      int64\n+\tRepoName    string\n+\n+\t// To access the Migrations API, you must
      set this to true.\n+\tWyandottePreview bool\n+}\n+\n+func (r MigrationsUnlockRepoForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/migrations/%v/repos/%v/lock\",
      r.Org, r.MigrationId, r.RepoName)\n+}\n+\n+func (r MigrationsUnlockRepoForOrgReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r MigrationsUnlockRepoForOrgReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r MigrationsUnlockRepoForOrgReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsUnlockRepoForOrgReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsUnlockRepoForAuthenticatedUserReq
      builds requests for \"migrations/unlock-repo-for-authenticated-user\"\n+\n+Unlock
      a user repository.\n+\n+  DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock\n+\n+https://developer.github.com/v3/migrations/users/#unlock-a-user-repository\n+*/\n+type
      MigrationsUnlockRepoForAuthenticatedUserReq struct {\n+\tMigrationId int64\n+\tRepoName    string\n+\n+\t//
      To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsUnlockRepoForAuthenticatedUserReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/user/migrations/%v/repos/%v/lock\", r.MigrationId,
      r.RepoName)\n+}\n+\n+func (r MigrationsUnlockRepoForAuthenticatedUserReq) method()
      string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r MigrationsUnlockRepoForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r MigrationsUnlockRepoForAuthenticatedUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r MigrationsUnlockRepoForAuthenticatedUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+MigrationsGetCommitAuthorsReq builds requests for \"migrations/get-commit-authors\"\n+\n+Get
      commit authors.\n+\n+  GET /repos/{owner}/{repo}/import/authors\n+\n+https://developer.github.com/v3/migrations/source_imports/#get-commit-authors\n+*/\n+type
      MigrationsGetCommitAuthorsReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t/*\n+\tOnly
      authors found after this id are returned. Provide the highest author ID\n+\tyou''ve
      seen so far. New authors may be added to the list at any point while the\n+\timporter
      is performing the `raw` step.\n+\t*/\n+\tSince *string\n+}\n+\n+func (r MigrationsGetCommitAuthorsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import/authors\", r.Owner,
      r.Repo)\n+}\n+\n+func (r MigrationsGetCommitAuthorsReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r MigrationsGetCommitAuthorsReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\tif r.Since != nil {\n+\t\tquery.Set(\"since\",
      *r.Since)\n+\t}\n+\treturn query\n+}\n+\n+func (r MigrationsGetCommitAuthorsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsGetCommitAuthorsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsGetCommitAuthorsResponseBody200
      is a response body for migrations/get-commit-authors\n+\n+API documentation:
      https://developer.github.com/v3/migrations/source_imports/#get-commit-authors\n+*/\n+type
      MigrationsGetCommitAuthorsResponseBody200 []struct {\n+\tEmail      string `json:\"email,omitempty\"`\n+\tId         int64  `json:\"id,omitempty\"`\n+\tImportUrl  string
      `json:\"import_url,omitempty\"`\n+\tName       string `json:\"name,omitempty\"`\n+\tRemoteId   string
      `json:\"remote_id,omitempty\"`\n+\tRemoteName string `json:\"remote_name,omitempty\"`\n+\tUrl        string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsGetLargeFilesReq builds requests
      for \"migrations/get-large-files\"\n+\n+Get large files.\n+\n+  GET /repos/{owner}/{repo}/import/large_files\n+\n+https://developer.github.com/v3/migrations/source_imports/#get-large-files\n+*/\n+type
      MigrationsGetLargeFilesReq struct {\n+\tOwner string\n+\tRepo  string\n+}\n+\n+func
      (r MigrationsGetLargeFilesReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/import/large_files\",
      r.Owner, r.Repo)\n+}\n+\n+func (r MigrationsGetLargeFilesReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r MigrationsGetLargeFilesReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsGetLargeFilesReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsGetLargeFilesReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsGetLargeFilesResponseBody200
      is a response body for migrations/get-large-files\n+\n+API documentation: https://developer.github.com/v3/migrations/source_imports/#get-large-files\n+*/\n+type
      MigrationsGetLargeFilesResponseBody200 []struct {\n+\tOid     string      `json:\"oid,omitempty\"`\n+\tPath    string      `json:\"path,omitempty\"`\n+\tRefName
      string      `json:\"ref_name,omitempty\"`\n+\tSize    json.Number `json:\"size,omitempty\"`\n+}\n+\n+/*\n+MigrationsListForAuthenticatedUserReq
      builds requests for \"migrations/list-for-authenticated-user\"\n+\n+List user
      migrations.\n+\n+  GET /user/migrations\n+\n+https://developer.github.com/v3/migrations/users/#list-user-migrations\n+*/\n+type
      MigrationsListForAuthenticatedUserReq struct {\n+\n+\t// Results per page (max
      100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+\n+\t// To access the Migrations API, you must set this to true.\n+\tWyandottePreview
      bool\n+}\n+\n+func (r MigrationsListForAuthenticatedUserReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/user/migrations\")\n+}\n+\n+func (r MigrationsListForAuthenticatedUserReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r MigrationsListForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r MigrationsListForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"wyandotte\": r.WyandottePreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r MigrationsListForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+MigrationsListForAuthenticatedUserResponseBody200
      is a response body for migrations/list-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/migrations/users/#list-user-migrations\n+*/\n+type
      MigrationsListForAuthenticatedUserResponseBody200 []struct {\n+\tCreatedAt          string
      `json:\"created_at,omitempty\"`\n+\tExcludeAttachments bool   `json:\"exclude_attachments,omitempty\"`\n+\tGuid               string
      `json:\"guid,omitempty\"`\n+\tId                 int64  `json:\"id,omitempty\"`\n+\tLockRepositories   bool   `json:\"lock_repositories,omitempty\"`\n+\tOwner              struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tRepositories []struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repositories,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+MigrationsStartForAuthenticatedUserReq
      builds requests for \"migrations/start-for-authenticated-user\"\n+\n+Start a
      user migration.\n+\n+  POST /user/migrations\n+\n+https://developer.github.com/v3/migrations/users/#start-a-user-migration\n+*/\n+type
      MigrationsStartForAuthenticatedUserReq struct {\n+\tRequestBody MigrationsStartForAuthenticatedUserReqBody\n+}\n+\n+func
      (r MigrationsStartForAuthenticatedUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/user/migrations\")\n+}\n+\n+func
      (r MigrationsStartForAuthenticatedUserReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r MigrationsStartForAuthenticatedUserReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r MigrationsStartForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r MigrationsStartForAuthenticatedUserReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+MigrationsStartForAuthenticatedUserReqBody
      is a request body for migrations/start-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/migrations/users/#start-a-user-migration\n+*/\n+type
      MigrationsStartForAuthenticatedUserReqBody struct {\n+\n+\t/*\n+\t   Does not
      include attachments uploaded to GitHub.com in the migration data when\n+\t   set
      to `true`. Excluding attachments will reduce the migration archive file\n+\t   size.\n+\t*/\n+\tExcludeAttachments
      *bool `json:\"exclude_attachments,omitempty\"`\n+\n+\t/*\n+\t   Locks the `repositories`
      to prevent changes during the migration when set to\n+\t   `true`.\n+\t*/\n+\tLockRepositories
      *bool `json:\"lock_repositories,omitempty\"`\n+\n+\t// An array of repositories
      to include in the migration.\n+\tRepositories []string `json:\"repositories\"`\n+}\n+\n+/*\n+MigrationsStartForAuthenticatedUserResponseBody201
      is a response body for migrations/start-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/migrations/users/#start-a-user-migration\n+*/\n+type
      MigrationsStartForAuthenticatedUserResponseBody201 struct {\n+\tCreatedAt          string
      `json:\"created_at,omitempty\"`\n+\tExcludeAttachments bool   `json:\"exclude_attachments,omitempty\"`\n+\tGuid               string
      `json:\"guid,omitempty\"`\n+\tId                 int64  `json:\"id,omitempty\"`\n+\tLockRepositories   bool   `json:\"lock_repositories,omitempty\"`\n+\tOwner              struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"owner,omitempty\"`\n+\tRepositories []struct {\n+\t\tAllowMergeCommit
      bool   `json:\"allow_merge_commit,omitempty\"`\n+\t\tAllowRebaseMerge bool   `json:\"allow_rebase_merge,omitempty\"`\n+\t\tAllowSquashMerge
      bool   `json:\"allow_squash_merge,omitempty\"`\n+\t\tArchiveUrl       string
      `json:\"archive_url,omitempty\"`\n+\t\tArchived         bool   `json:\"archived,omitempty\"`\n+\t\tAssigneesUrl     string
      `json:\"assignees_url,omitempty\"`\n+\t\tBlobsUrl         string `json:\"blobs_url,omitempty\"`\n+\t\tBranchesUrl      string
      `json:\"branches_url,omitempty\"`\n+\t\tCloneUrl         string `json:\"clone_url,omitempty\"`\n+\t\tCollaboratorsUrl
      string `json:\"collaborators_url,omitempty\"`\n+\t\tCommentsUrl      string
      `json:\"comments_url,omitempty\"`\n+\t\tCommitsUrl       string `json:\"commits_url,omitempty\"`\n+\t\tCompareUrl       string
      `json:\"compare_url,omitempty\"`\n+\t\tContentsUrl      string `json:\"contents_url,omitempty\"`\n+\t\tContributorsUrl  string
      `json:\"contributors_url,omitempty\"`\n+\t\tCreatedAt        string `json:\"created_at,omitempty\"`\n+\t\tDefaultBranch    string
      `json:\"default_branch,omitempty\"`\n+\t\tDeploymentsUrl   string `json:\"deployments_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tDisabled         bool   `json:\"disabled,omitempty\"`\n+\t\tDownloadsUrl     string
      `json:\"downloads_url,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tFork             bool   `json:\"fork,omitempty\"`\n+\t\tForksCount       int64  `json:\"forks_count,omitempty\"`\n+\t\tForksUrl         string
      `json:\"forks_url,omitempty\"`\n+\t\tFullName         string `json:\"full_name,omitempty\"`\n+\t\tGitCommitsUrl    string
      `json:\"git_commits_url,omitempty\"`\n+\t\tGitRefsUrl       string `json:\"git_refs_url,omitempty\"`\n+\t\tGitTagsUrl       string
      `json:\"git_tags_url,omitempty\"`\n+\t\tGitUrl           string `json:\"git_url,omitempty\"`\n+\t\tHasDownloads     bool   `json:\"has_downloads,omitempty\"`\n+\t\tHasIssues        bool   `json:\"has_issues,omitempty\"`\n+\t\tHasPages         bool   `json:\"has_pages,omitempty\"`\n+\t\tHasProjects      bool   `json:\"has_projects,omitempty\"`\n+\t\tHasWiki          bool   `json:\"has_wiki,omitempty\"`\n+\t\tHomepage         string
      `json:\"homepage,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tHtmlUrl          string
      `json:\"html_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIsTemplate       bool   `json:\"is_template,omitempty\"`\n+\t\tIssueCommentUrl  string
      `json:\"issue_comment_url,omitempty\"`\n+\t\tIssueEventsUrl   string `json:\"issue_events_url,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tKeysUrl          string `json:\"keys_url,omitempty\"`\n+\t\tLabelsUrl        string
      `json:\"labels_url,omitempty\"`\n+\t\tLanguage         string `json:\"language,omitempty\"`\n+\t\tLanguagesUrl     string
      `json:\"languages_url,omitempty\"`\n+\t\tMergesUrl        string `json:\"merges_url,omitempty\"`\n+\t\tMilestonesUrl    string
      `json:\"milestones_url,omitempty\"`\n+\t\tMirrorUrl        string `json:\"mirror_url,omitempty\"`\n+\t\tName             string
      `json:\"name,omitempty\"`\n+\t\tNetworkCount     int64  `json:\"network_count,omitempty\"`\n+\t\tNodeId           string
      `json:\"node_id,omitempty\"`\n+\t\tNotificationsUrl string `json:\"notifications_url,omitempty\"`\n+\t\tOpenIssuesCount  int64  `json:\"open_issues_count,omitempty\"`\n+\t\tOwner            struct
      {\n+\t\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"owner,omitempty\"`\n+\t\tPermissions struct {\n+\t\t\tAdmin bool `json:\"admin,omitempty\"`\n+\t\t\tPull  bool
      `json:\"pull,omitempty\"`\n+\t\t\tPush  bool `json:\"push,omitempty\"`\n+\t\t}
      `json:\"permissions,omitempty\"`\n+\t\tPrivate            bool        `json:\"private,omitempty\"`\n+\t\tPullsUrl           string      `json:\"pulls_url,omitempty\"`\n+\t\tPushedAt           string      `json:\"pushed_at,omitempty\"`\n+\t\tReleasesUrl        string      `json:\"releases_url,omitempty\"`\n+\t\tSize               json.Number
      `json:\"size,omitempty\"`\n+\t\tSshUrl             string      `json:\"ssh_url,omitempty\"`\n+\t\tStargazersCount    int64       `json:\"stargazers_count,omitempty\"`\n+\t\tStargazersUrl      string      `json:\"stargazers_url,omitempty\"`\n+\t\tStatusesUrl        string      `json:\"statuses_url,omitempty\"`\n+\t\tSubscribersCount   int64       `json:\"subscribers_count,omitempty\"`\n+\t\tSubscribersUrl     string      `json:\"subscribers_url,omitempty\"`\n+\t\tSubscriptionUrl    string      `json:\"subscription_url,omitempty\"`\n+\t\tSvnUrl             string      `json:\"svn_url,omitempty\"`\n+\t\tTagsUrl            string      `json:\"tags_url,omitempty\"`\n+\t\tTeamsUrl           string      `json:\"teams_url,omitempty\"`\n+\t\tTempCloneToken     string      `json:\"temp_clone_token,omitempty\"`\n+\t\tTemplateRepository
      string      `json:\"template_repository,omitempty\"`\n+\t\tTopics             []string    `json:\"topics,omitempty\"`\n+\t\tTreesUrl           string      `json:\"trees_url,omitempty\"`\n+\t\tUpdatedAt          string      `json:\"updated_at,omitempty\"`\n+\t\tUrl                string      `json:\"url,omitempty\"`\n+\t\tVisibility         string      `json:\"visibility,omitempty\"`\n+\t\tWatchersCount      int64       `json:\"watchers_count,omitempty\"`\n+\t}
      `json:\"repositories,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}"},{"sha":"94232bdf3d452adb32e4ca66f2e5533eb3e008d4","filename":"zz_oauth_authorizations_gen.go","status":"added","additions":745,"deletions":0,"changes":745,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_oauth_authorizations_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_oauth_authorizations_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_oauth_authorizations_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,745 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+OauthAuthorizationsDeleteGrantReq
      builds requests for \"oauth-authorizations/delete-grant\"\n+\n+Delete a grant.\n+\n+  DELETE
      /applications/grants/{grant_id}\n+\n+https://developer.github.com/v3/oauth_authorizations/#delete-a-grant\n+*/\n+type
      OauthAuthorizationsDeleteGrantReq struct {\n+\tGrantId int64\n+}\n+\n+func (r
      OauthAuthorizationsDeleteGrantReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/applications/grants/%v\",
      r.GrantId)\n+}\n+\n+func (r OauthAuthorizationsDeleteGrantReq) method() string
      {\n+\treturn \"DELETE\"\n+}\n+\n+func (r OauthAuthorizationsDeleteGrantReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsDeleteGrantReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OauthAuthorizationsDeleteGrantReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OauthAuthorizationsGetGrantReq
      builds requests for \"oauth-authorizations/get-grant\"\n+\n+Get a single grant.\n+\n+  GET
      /applications/grants/{grant_id}\n+\n+https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant\n+*/\n+type
      OauthAuthorizationsGetGrantReq struct {\n+\tGrantId int64\n+}\n+\n+func (r OauthAuthorizationsGetGrantReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/applications/grants/%v\", r.GrantId)\n+}\n+\n+func
      (r OauthAuthorizationsGetGrantReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r OauthAuthorizationsGetGrantReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r OauthAuthorizationsGetGrantReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OauthAuthorizationsGetGrantReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OauthAuthorizationsGetGrantResponseBody200 is a response
      body for oauth-authorizations/get-grant\n+\n+API documentation: https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant\n+*/\n+type
      OauthAuthorizationsGetGrantResponseBody200 struct {\n+\tApp struct {\n+\t\tClientId
      string `json:\"client_id,omitempty\"`\n+\t\tName     string `json:\"name,omitempty\"`\n+\t\tUrl      string
      `json:\"url,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tCreatedAt string   `json:\"created_at,omitempty\"`\n+\tId        int64    `json:\"id,omitempty\"`\n+\tScopes    []string
      `json:\"scopes,omitempty\"`\n+\tUpdatedAt string   `json:\"updated_at,omitempty\"`\n+\tUrl       string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsCreateAuthorizationReq
      builds requests for \"oauth-authorizations/create-authorization\"\n+\n+Create
      a new authorization.\n+\n+  POST /authorizations\n+\n+https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization\n+*/\n+type
      OauthAuthorizationsCreateAuthorizationReq struct {\n+\tRequestBody OauthAuthorizationsCreateAuthorizationReqBody\n+}\n+\n+func
      (r OauthAuthorizationsCreateAuthorizationReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/authorizations\")\n+}\n+\n+func (r OauthAuthorizationsCreateAuthorizationReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r OauthAuthorizationsCreateAuthorizationReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsCreateAuthorizationReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OauthAuthorizationsCreateAuthorizationReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+OauthAuthorizationsCreateAuthorizationReqBody
      is a request body for oauth-authorizations/create-authorization\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization\n+*/\n+type
      OauthAuthorizationsCreateAuthorizationReqBody struct {\n+\n+\t// The 20 character
      OAuth app client key for which to create the token.\n+\tClientId *string `json:\"client_id,omitempty\"`\n+\n+\t//
      The 40 character OAuth app client secret for which to create the token.\n+\tClientSecret
      *string `json:\"client_secret,omitempty\"`\n+\n+\t/*\n+\t   A unique string
      to distinguish an authorization from others created for the same\n+\t   client
      ID and user.\n+\t*/\n+\tFingerprint *string `json:\"fingerprint,omitempty\"`\n+\n+\t/*\n+\t   A
      note to remind you what the OAuth token is for. Tokens not associated with a\n+\t   specific
      OAuth application (i.e. personal access tokens) must have a unique\n+\t   note.\n+\t*/\n+\tNote
      *string `json:\"note\"`\n+\n+\t// A URL to remind you what app the OAuth token
      is for.\n+\tNoteUrl *string `json:\"note_url,omitempty\"`\n+\n+\t// A list of
      scopes that this authorization is in.\n+\tScopes []string `json:\"scopes,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsCreateAuthorizationResponseBody201
      is a response body for oauth-authorizations/create-authorization\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization\n+*/\n+type
      OauthAuthorizationsCreateAuthorizationResponseBody201 struct {\n+\tApp struct
      {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsListAuthorizationsReq
      builds requests for \"oauth-authorizations/list-authorizations\"\n+\n+List your
      authorizations.\n+\n+  GET /authorizations\n+\n+https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations\n+*/\n+type
      OauthAuthorizationsListAuthorizationsReq struct {\n+\n+\t// Results per page
      (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r OauthAuthorizationsListAuthorizationsReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/authorizations\")\n+}\n+\n+func (r OauthAuthorizationsListAuthorizationsReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r OauthAuthorizationsListAuthorizationsReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OauthAuthorizationsListAuthorizationsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OauthAuthorizationsListAuthorizationsReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OauthAuthorizationsListAuthorizationsResponseBody200
      is a response body for oauth-authorizations/list-authorizations\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations\n+*/\n+type
      OauthAuthorizationsListAuthorizationsResponseBody200 []struct {\n+\tApp struct
      {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsListGrantsReq
      builds requests for \"oauth-authorizations/list-grants\"\n+\n+List your grants.\n+\n+  GET
      /applications/grants\n+\n+https://developer.github.com/v3/oauth_authorizations/#list-your-grants\n+*/\n+type
      OauthAuthorizationsListGrantsReq struct {\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func
      (r OauthAuthorizationsListGrantsReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/applications/grants\")\n+}\n+\n+func
      (r OauthAuthorizationsListGrantsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r OauthAuthorizationsListGrantsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OauthAuthorizationsListGrantsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OauthAuthorizationsListGrantsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OauthAuthorizationsListGrantsResponseBody200
      is a response body for oauth-authorizations/list-grants\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#list-your-grants\n+*/\n+type
      OauthAuthorizationsListGrantsResponseBody200 []struct {\n+\tApp struct {\n+\t\tClientId
      string `json:\"client_id,omitempty\"`\n+\t\tName     string `json:\"name,omitempty\"`\n+\t\tUrl      string
      `json:\"url,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tCreatedAt string   `json:\"created_at,omitempty\"`\n+\tId        int64    `json:\"id,omitempty\"`\n+\tScopes    []string
      `json:\"scopes,omitempty\"`\n+\tUpdatedAt string   `json:\"updated_at,omitempty\"`\n+\tUrl       string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppReq
      builds requests for \"oauth-authorizations/get-or-create-authorization-for-app\"\n+\n+Get-or-create
      an authorization for a specific app.\n+\n+  PUT /authorizations/clients/{client_id}\n+\n+https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppReq struct {\n+\tClientId    string\n+\tRequestBody
      OauthAuthorizationsGetOrCreateAuthorizationForAppReqBody\n+}\n+\n+func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/authorizations/clients/%v\", r.ClientId)\n+}\n+\n+func
      (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) method() string {\n+\treturn
      \"PUT\"\n+}\n+\n+func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppReqBody
      is a request body for oauth-authorizations/get-or-create-authorization-for-app\n+\n+API
      documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppReqBody struct {\n+\n+\t/*\n+\t   The
      40 character OAuth app client secret associated with the client ID specified\n+\t   in
      the URL.\n+\t*/\n+\tClientSecret *string `json:\"client_secret\"`\n+\n+\t/*\n+\t   A
      unique string to distinguish an authorization from others created for the same\n+\t   client
      and user. If provided, this API is functionally equivalent to\n+\t   [Get-or-create
      an authorization for a specific app and\n+\t   fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint).\n+\t*/\n+\tFingerprint
      *string `json:\"fingerprint,omitempty\"`\n+\n+\t// A note to remind you what
      the OAuth token is for.\n+\tNote *string `json:\"note,omitempty\"`\n+\n+\t//
      A URL to remind you what app the OAuth token is for.\n+\tNoteUrl *string `json:\"note_url,omitempty\"`\n+\n+\t//
      A list of scopes that this authorization is in.\n+\tScopes []string `json:\"scopes,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody200
      is a response body for oauth-authorizations/get-or-create-authorization-for-app\n+\n+API
      documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody200 struct {\n+\tApp
      struct {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody201
      is a response body for oauth-authorizations/get-or-create-authorization-for-app\n+\n+API
      documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody201 struct {\n+\tApp
      struct {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsDeleteAuthorizationReq
      builds requests for \"oauth-authorizations/delete-authorization\"\n+\n+Delete
      an authorization.\n+\n+  DELETE /authorizations/{authorization_id}\n+\n+https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization\n+*/\n+type
      OauthAuthorizationsDeleteAuthorizationReq struct {\n+\tAuthorizationId int64\n+}\n+\n+func
      (r OauthAuthorizationsDeleteAuthorizationReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/authorizations/%v\", r.AuthorizationId)\n+}\n+\n+func (r OauthAuthorizationsDeleteAuthorizationReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r OauthAuthorizationsDeleteAuthorizationReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsDeleteAuthorizationReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OauthAuthorizationsDeleteAuthorizationReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OauthAuthorizationsGetAuthorizationReq
      builds requests for \"oauth-authorizations/get-authorization\"\n+\n+Get a single
      authorization.\n+\n+  GET /authorizations/{authorization_id}\n+\n+https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization\n+*/\n+type
      OauthAuthorizationsGetAuthorizationReq struct {\n+\tAuthorizationId int64\n+}\n+\n+func
      (r OauthAuthorizationsGetAuthorizationReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/authorizations/%v\",
      r.AuthorizationId)\n+}\n+\n+func (r OauthAuthorizationsGetAuthorizationReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r OauthAuthorizationsGetAuthorizationReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsGetAuthorizationReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OauthAuthorizationsGetAuthorizationReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OauthAuthorizationsGetAuthorizationResponseBody200
      is a response body for oauth-authorizations/get-authorization\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization\n+*/\n+type
      OauthAuthorizationsGetAuthorizationResponseBody200 struct {\n+\tApp struct {\n+\t\tClientId
      string `json:\"client_id,omitempty\"`\n+\t\tName     string `json:\"name,omitempty\"`\n+\t\tUrl      string
      `json:\"url,omitempty\"`\n+\t} `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsUpdateAuthorizationReq
      builds requests for \"oauth-authorizations/update-authorization\"\n+\n+Update
      an existing authorization.\n+\n+  PATCH /authorizations/{authorization_id}\n+\n+https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization\n+*/\n+type
      OauthAuthorizationsUpdateAuthorizationReq struct {\n+\tAuthorizationId int64\n+\tRequestBody     OauthAuthorizationsUpdateAuthorizationReqBody\n+}\n+\n+func
      (r OauthAuthorizationsUpdateAuthorizationReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/authorizations/%v\", r.AuthorizationId)\n+}\n+\n+func (r OauthAuthorizationsUpdateAuthorizationReq)
      method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func (r OauthAuthorizationsUpdateAuthorizationReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsUpdateAuthorizationReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OauthAuthorizationsUpdateAuthorizationReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+OauthAuthorizationsUpdateAuthorizationReqBody
      is a request body for oauth-authorizations/update-authorization\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization\n+*/\n+type
      OauthAuthorizationsUpdateAuthorizationReqBody struct {\n+\n+\t// A list of scopes
      to add to this authorization.\n+\tAddScopes []string `json:\"add_scopes,omitempty\"`\n+\n+\t/*\n+\t   A
      unique string to distinguish an authorization from others created for the same\n+\t   client
      ID and user.\n+\t*/\n+\tFingerprint *string `json:\"fingerprint,omitempty\"`\n+\n+\t/*\n+\t   A
      note to remind you what the OAuth token is for. Tokens not associated with a\n+\t   specific
      OAuth application (i.e. personal access tokens) must have a unique\n+\t   note.\n+\t*/\n+\tNote
      *string `json:\"note,omitempty\"`\n+\n+\t// A URL to remind you what app the
      OAuth token is for.\n+\tNoteUrl *string `json:\"note_url,omitempty\"`\n+\n+\t//
      A list of scopes to remove from this authorization.\n+\tRemoveScopes []string
      `json:\"remove_scopes,omitempty\"`\n+\n+\t// Replaces the authorization scopes
      with these.\n+\tScopes []string `json:\"scopes,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsUpdateAuthorizationResponseBody200
      is a response body for oauth-authorizations/update-authorization\n+\n+API documentation:
      https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization\n+*/\n+type
      OauthAuthorizationsUpdateAuthorizationResponseBody200 struct {\n+\tApp struct
      {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq
      builds requests for \"oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\"\n+\n+Get-or-create
      an authorization for a specific app and fingerprint.\n+\n+  PUT /authorizations/clients/{client_id}/{fingerprint}\n+\n+https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq struct {\n+\tClientId    string\n+\tFingerprint
      string\n+\tRequestBody OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReqBody\n+}\n+\n+func
      (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/authorizations/clients/%v/%v\", r.ClientId,
      r.Fingerprint)\n+}\n+\n+func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq)
      method() string {\n+\treturn \"PUT\"\n+}\n+\n+func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReqBody
      is a request body for oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\n+\n+API
      documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReqBody struct
      {\n+\n+\t/*\n+\t   The 40 character OAuth app client secret associated with
      the client ID specified\n+\t   in the URL.\n+\t*/\n+\tClientSecret *string `json:\"client_secret\"`\n+\n+\t//
      A note to remind you what the OAuth token is for.\n+\tNote *string `json:\"note,omitempty\"`\n+\n+\t//
      A URL to remind you what app the OAuth token is for.\n+\tNoteUrl *string `json:\"note_url,omitempty\"`\n+\n+\t//
      A list of scopes that this authorization is in.\n+\tScopes []string `json:\"scopes,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody200
      is a response body for oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\n+\n+API
      documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody200
      struct {\n+\tApp struct {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody201
      is a response body for oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint\n+\n+API
      documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint\n+*/\n+type
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody201
      struct {\n+\tApp struct {\n+\t\tClientId string `json:\"client_id,omitempty\"`\n+\t\tName     string
      `json:\"name,omitempty\"`\n+\t\tUrl      string `json:\"url,omitempty\"`\n+\t}
      `json:\"app,omitempty\"`\n+\tCreatedAt      string   `json:\"created_at,omitempty\"`\n+\tFingerprint    string   `json:\"fingerprint,omitempty\"`\n+\tHashedToken    string   `json:\"hashed_token,omitempty\"`\n+\tId             int64    `json:\"id,omitempty\"`\n+\tNote           string   `json:\"note,omitempty\"`\n+\tNoteUrl        string   `json:\"note_url,omitempty\"`\n+\tScopes         []string
      `json:\"scopes,omitempty\"`\n+\tToken          string   `json:\"token,omitempty\"`\n+\tTokenLastEight
      string   `json:\"token_last_eight,omitempty\"`\n+\tUpdatedAt      string   `json:\"updated_at,omitempty\"`\n+\tUrl            string   `json:\"url,omitempty\"`\n+}"},{"sha":"5f26317e1b7d02d5735279d7a49da872e738400e","filename":"zz_orgs_gen.go","status":"added","additions":2605,"deletions":0,"changes":2605,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_orgs_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_orgs_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_orgs_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,2605 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+OrgsListPublicMembersReq
      builds requests for \"orgs/list-public-members\"\n+\n+Public members list.\n+\n+  GET
      /orgs/{org}/public_members\n+\n+https://developer.github.com/v3/orgs/members/#public-members-list\n+*/\n+type
      OrgsListPublicMembersReq struct {\n+\tOrg string\n+\n+\t// Results per page
      (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r OrgsListPublicMembersReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/public_members\", r.Org)\n+}\n+\n+func (r OrgsListPublicMembersReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsListPublicMembersReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListPublicMembersReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListPublicMembersReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListPublicMembersResponseBody200
      is a response body for orgs/list-public-members\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#public-members-list\n+*/\n+type
      OrgsListPublicMembersResponseBody200 []struct {\n+\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsBlockUserReq
      builds requests for \"orgs/block-user\"\n+\n+Block a user.\n+\n+  PUT /orgs/{org}/blocks/{username}\n+\n+https://developer.github.com/v3/orgs/blocking/#block-a-user\n+*/\n+type
      OrgsBlockUserReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsBlockUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/blocks/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsBlockUserReq) method() string {\n+\treturn
      \"PUT\"\n+}\n+\n+func (r OrgsBlockUserReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsBlockUserReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsBlockUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsUnblockUserReq
      builds requests for \"orgs/unblock-user\"\n+\n+Unblock a user.\n+\n+  DELETE
      /orgs/{org}/blocks/{username}\n+\n+https://developer.github.com/v3/orgs/blocking/#unblock-a-user\n+*/\n+type
      OrgsUnblockUserReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsUnblockUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/blocks/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsUnblockUserReq) method() string {\n+\treturn
      \"DELETE\"\n+}\n+\n+func (r OrgsUnblockUserReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsUnblockUserReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsUnblockUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OrgsCheckBlockedUserReq builds requests for \"orgs/check-blocked-user\"\n+\n+Check
      whether a user is blocked from an organization.\n+\n+  GET /orgs/{org}/blocks/{username}\n+\n+https://developer.github.com/v3/orgs/blocking/#check-whether-a-user-is-blocked-from-an-organization\n+*/\n+type
      OrgsCheckBlockedUserReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsCheckBlockedUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/blocks/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsCheckBlockedUserReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsCheckBlockedUserReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsCheckBlockedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsCheckBlockedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListPendingInvitationsReq
      builds requests for \"orgs/list-pending-invitations\"\n+\n+List pending organization
      invitations.\n+\n+  GET /orgs/{org}/invitations\n+\n+https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations\n+*/\n+type
      OrgsListPendingInvitationsReq struct {\n+\tOrg string\n+\n+\t// Results per
      page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r OrgsListPendingInvitationsReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/invitations\", r.Org)\n+}\n+\n+func (r OrgsListPendingInvitationsReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsListPendingInvitationsReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListPendingInvitationsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListPendingInvitationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListPendingInvitationsResponseBody200
      is a response body for orgs/list-pending-invitations\n+\n+API documentation:
      https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations\n+*/\n+type
      OrgsListPendingInvitationsResponseBody200 []struct {\n+\tCreatedAt         string
      `json:\"created_at,omitempty\"`\n+\tEmail             string `json:\"email,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tInvitationTeamUrl
      string `json:\"invitation_team_url,omitempty\"`\n+\tInviter           struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"inviter,omitempty\"`\n+\tLogin     string `json:\"login,omitempty\"`\n+\tRole      string
      `json:\"role,omitempty\"`\n+\tTeamCount int64  `json:\"team_count,omitempty\"`\n+}\n+\n+/*\n+OrgsCreateInvitationReq
      builds requests for \"orgs/create-invitation\"\n+\n+Create organization invitation.\n+\n+  POST
      /orgs/{org}/invitations\n+\n+https://developer.github.com/v3/orgs/members/#create-organization-invitation\n+*/\n+type
      OrgsCreateInvitationReq struct {\n+\tOrg         string\n+\tRequestBody OrgsCreateInvitationReqBody\n+}\n+\n+func
      (r OrgsCreateInvitationReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/invitations\",
      r.Org)\n+}\n+\n+func (r OrgsCreateInvitationReq) method() string {\n+\treturn
      \"POST\"\n+}\n+\n+func (r OrgsCreateInvitationReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsCreateInvitationReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsCreateInvitationReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+OrgsCreateInvitationReqBody is a request body
      for orgs/create-invitation\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#create-organization-invitation\n+*/\n+type
      OrgsCreateInvitationReqBody struct {\n+\n+\t/*\n+\t   **Required unless you
      provide `invitee_id`**. Email address of the person you\n+\t   are inviting,
      which can be an existing GitHub user.\n+\t*/\n+\tEmail *string `json:\"email,omitempty\"`\n+\n+\t/*\n+\t   **Required
      unless you provide `email`**. GitHub user ID for the person you are\n+\t   inviting.\n+\t*/\n+\tInviteeId
      *int64 `json:\"invitee_id,omitempty\"`\n+\n+\t/*\n+\t   Specify role for new
      member. Can be one of:\n+\t   \\* `admin` - Organization owners with full administrative
      rights to the\n+\t   organization and complete access to all repositories and
      teams.\n+\t   \\* `direct_member` - Non-owner organization members with ability
      to see other\n+\t   members and join teams by invitation.\n+\t   \\* `billing_manager`
      - Non-owner organization members with ability to manage the\n+\t   billing settings
      of your organization.\n+\t*/\n+\tRole *string `json:\"role,omitempty\"`\n+\n+\t//
      Specify IDs for the teams you want to invite new members to.\n+\tTeamIds []int64
      `json:\"team_ids,omitempty\"`\n+}\n+\n+/*\n+OrgsCreateInvitationResponseBody201
      is a response body for orgs/create-invitation\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#create-organization-invitation\n+*/\n+type
      OrgsCreateInvitationResponseBody201 struct {\n+\tCreatedAt         string `json:\"created_at,omitempty\"`\n+\tEmail             string
      `json:\"email,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tInvitationTeamUrl
      string `json:\"invitation_team_url,omitempty\"`\n+\tInviter           struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"inviter,omitempty\"`\n+\tLogin     string `json:\"login,omitempty\"`\n+\tRole      string
      `json:\"role,omitempty\"`\n+\tTeamCount int64  `json:\"team_count,omitempty\"`\n+}\n+\n+/*\n+OrgsListBlockedUsersReq
      builds requests for \"orgs/list-blocked-users\"\n+\n+List blocked users.\n+\n+  GET
      /orgs/{org}/blocks\n+\n+https://developer.github.com/v3/orgs/blocking/#list-blocked-users\n+*/\n+type
      OrgsListBlockedUsersReq struct {\n+\tOrg string\n+}\n+\n+func (r OrgsListBlockedUsersReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/blocks\", r.Org)\n+}\n+\n+func
      (r OrgsListBlockedUsersReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r OrgsListBlockedUsersReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r OrgsListBlockedUsersReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OrgsListBlockedUsersReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListBlockedUsersResponseBody200
      is a response body for orgs/list-blocked-users\n+\n+API documentation: https://developer.github.com/v3/orgs/blocking/#list-blocked-users\n+*/\n+type
      OrgsListBlockedUsersResponseBody200 []struct {\n+\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsListForAuthenticatedUserReq
      builds requests for \"orgs/list-for-authenticated-user\"\n+\n+List your organizations.\n+\n+  GET
      /user/orgs\n+\n+https://developer.github.com/v3/orgs/#list-your-organizations\n+*/\n+type
      OrgsListForAuthenticatedUserReq struct {\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func
      (r OrgsListForAuthenticatedUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/user/orgs\")\n+}\n+\n+func
      (r OrgsListForAuthenticatedUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r OrgsListForAuthenticatedUserReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListForAuthenticatedUserResponseBody200
      is a response body for orgs/list-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/orgs/#list-your-organizations\n+*/\n+type OrgsListForAuthenticatedUserResponseBody200
      []struct {\n+\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\tDescription      string
      `json:\"description,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tLogin            string `json:\"login,omitempty\"`\n+\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\tNodeId           string `json:\"node_id,omitempty\"`\n+\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\tReposUrl         string `json:\"repos_url,omitempty\"`\n+\tUrl              string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsListForUserReq builds requests for
      \"orgs/list-for-user\"\n+\n+List user organizations.\n+\n+  GET /users/{username}/orgs\n+\n+https://developer.github.com/v3/orgs/#list-user-organizations\n+*/\n+type
      OrgsListForUserReq struct {\n+\tUsername string\n+\n+\t// Results per page (max
      100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+}\n+\n+func (r OrgsListForUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/orgs\",
      r.Username)\n+}\n+\n+func (r OrgsListForUserReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r OrgsListForUserReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListForUserReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsListForUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OrgsListForUserResponseBody200 is a response body for
      orgs/list-for-user\n+\n+API documentation: https://developer.github.com/v3/orgs/#list-user-organizations\n+*/\n+type
      OrgsListForUserResponseBody200 []struct {\n+\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\tDescription      string
      `json:\"description,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tLogin            string `json:\"login,omitempty\"`\n+\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\tNodeId           string `json:\"node_id,omitempty\"`\n+\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\tReposUrl         string `json:\"repos_url,omitempty\"`\n+\tUrl              string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsRemoveOutsideCollaboratorReq builds
      requests for \"orgs/remove-outside-collaborator\"\n+\n+Remove outside collaborator.\n+\n+  DELETE
      /orgs/{org}/outside_collaborators/{username}\n+\n+https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator\n+*/\n+type
      OrgsRemoveOutsideCollaboratorReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsRemoveOutsideCollaboratorReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/outside_collaborators/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsRemoveOutsideCollaboratorReq) method()
      string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r OrgsRemoveOutsideCollaboratorReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OrgsRemoveOutsideCollaboratorReq) header() http.Header {\n+\theaderVals :=
      map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OrgsRemoveOutsideCollaboratorReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsRemoveOutsideCollaboratorResponseBody422
      is a response body for orgs/remove-outside-collaborator\n+\n+API documentation:
      https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator\n+*/\n+type
      OrgsRemoveOutsideCollaboratorResponseBody422 struct {\n+\tDocumentationUrl string
      `json:\"documentation_url,omitempty\"`\n+\tMessage          string `json:\"message,omitempty\"`\n+}\n+\n+/*\n+OrgsConvertMemberToOutsideCollaboratorReq
      builds requests for \"orgs/convert-member-to-outside-collaborator\"\n+\n+Convert
      member to outside collaborator.\n+\n+  PUT /orgs/{org}/outside_collaborators/{username}\n+\n+https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator\n+*/\n+type
      OrgsConvertMemberToOutsideCollaboratorReq struct {\n+\tOrg      string\n+\tUsername
      string\n+}\n+\n+func (r OrgsConvertMemberToOutsideCollaboratorReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/orgs/%v/outside_collaborators/%v\", r.Org,
      r.Username)\n+}\n+\n+func (r OrgsConvertMemberToOutsideCollaboratorReq) method()
      string {\n+\treturn \"PUT\"\n+}\n+\n+func (r OrgsConvertMemberToOutsideCollaboratorReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OrgsConvertMemberToOutsideCollaboratorReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OrgsConvertMemberToOutsideCollaboratorReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsConvertMemberToOutsideCollaboratorResponseBody403
      is a response body for orgs/convert-member-to-outside-collaborator\n+\n+API
      documentation: https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator\n+*/\n+type
      OrgsConvertMemberToOutsideCollaboratorResponseBody403 struct {\n+\tDocumentationUrl
      string `json:\"documentation_url,omitempty\"`\n+\tMessage          string `json:\"message,omitempty\"`\n+}\n+\n+/*\n+OrgsListInvitationTeamsReq
      builds requests for \"orgs/list-invitation-teams\"\n+\n+List organization invitation
      teams.\n+\n+  GET /orgs/{org}/invitations/{invitation_id}/teams\n+\n+https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams\n+*/\n+type
      OrgsListInvitationTeamsReq struct {\n+\tOrg          string\n+\tInvitationId
      int64\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func (r OrgsListInvitationTeamsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/invitations/%v/teams\",
      r.Org, r.InvitationId)\n+}\n+\n+func (r OrgsListInvitationTeamsReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsListInvitationTeamsReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\",
      strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\",
      strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListInvitationTeamsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListInvitationTeamsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListInvitationTeamsResponseBody200
      is a response body for orgs/list-invitation-teams\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#list-organization-invitation-teams\n+*/\n+type
      OrgsListInvitationTeamsResponseBody200 []struct {\n+\tDescription     string
      `json:\"description,omitempty\"`\n+\tHtmlUrl         string `json:\"html_url,omitempty\"`\n+\tId              int64  `json:\"id,omitempty\"`\n+\tMembersUrl      string
      `json:\"members_url,omitempty\"`\n+\tName            string `json:\"name,omitempty\"`\n+\tNodeId          string
      `json:\"node_id,omitempty\"`\n+\tParent          string `json:\"parent,omitempty\"`\n+\tPermission      string
      `json:\"permission,omitempty\"`\n+\tPrivacy         string `json:\"privacy,omitempty\"`\n+\tRepositoriesUrl
      string `json:\"repositories_url,omitempty\"`\n+\tSlug            string `json:\"slug,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsListMembershipsReq builds requests
      for \"orgs/list-memberships\"\n+\n+List your organization memberships.\n+\n+  GET
      /user/memberships/orgs\n+\n+https://developer.github.com/v3/orgs/members/#list-your-organization-memberships\n+*/\n+type
      OrgsListMembershipsReq struct {\n+\n+\t/*\n+\tIndicates the state of the memberships
      to return. Can be either `active` or\n+\t`pending`. If not specified, the API
      returns both active and pending\n+\tmemberships.\n+\t*/\n+\tState *string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r OrgsListMembershipsReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/user/memberships/orgs\")\n+}\n+\n+func (r
      OrgsListMembershipsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r
      OrgsListMembershipsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.State != nil {\n+\t\tquery.Set(\"state\", *r.State)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r OrgsListMembershipsReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OrgsListMembershipsReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListMembershipsResponseBody200
      is a response body for orgs/list-memberships\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#list-your-organization-memberships\n+*/\n+type
      OrgsListMembershipsResponseBody200 []struct {\n+\tOrganization struct {\n+\t\tAvatarUrl        string
      `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string `json:\"description,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"organization,omitempty\"`\n+\tOrganizationUrl string `json:\"organization_url,omitempty\"`\n+\tRole            string
      `json:\"role,omitempty\"`\n+\tState           string `json:\"state,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+\tUser            struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+OrgsDeleteHookReq builds requests for
      \"orgs/delete-hook\"\n+\n+Delete a hook.\n+\n+  DELETE /orgs/{org}/hooks/{hook_id}\n+\n+https://developer.github.com/v3/orgs/hooks/#delete-a-hook\n+*/\n+type
      OrgsDeleteHookReq struct {\n+\tOrg    string\n+\tHookId int64\n+}\n+\n+func
      (r OrgsDeleteHookReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/hooks/%v\",
      r.Org, r.HookId)\n+}\n+\n+func (r OrgsDeleteHookReq) method() string {\n+\treturn
      \"DELETE\"\n+}\n+\n+func (r OrgsDeleteHookReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsDeleteHookReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsDeleteHookReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OrgsGetHookReq builds requests for \"orgs/get-hook\"\n+\n+Get
      single hook.\n+\n+  GET /orgs/{org}/hooks/{hook_id}\n+\n+https://developer.github.com/v3/orgs/hooks/#get-single-hook\n+*/\n+type
      OrgsGetHookReq struct {\n+\tOrg    string\n+\tHookId int64\n+}\n+\n+func (r
      OrgsGetHookReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/hooks/%v\",
      r.Org, r.HookId)\n+}\n+\n+func (r OrgsGetHookReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r OrgsGetHookReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsGetHookReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsGetHookReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsGetHookResponseBody200
      is a response body for orgs/get-hook\n+\n+API documentation: https://developer.github.com/v3/orgs/hooks/#get-single-hook\n+*/\n+type
      OrgsGetHookResponseBody200 struct {\n+\tActive bool `json:\"active,omitempty\"`\n+\tConfig
      struct {\n+\t\tContentType string `json:\"content_type,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t} `json:\"config,omitempty\"`\n+\tCreatedAt string   `json:\"created_at,omitempty\"`\n+\tEvents    []string
      `json:\"events,omitempty\"`\n+\tId        int64    `json:\"id,omitempty\"`\n+\tName      string   `json:\"name,omitempty\"`\n+\tPingUrl   string   `json:\"ping_url,omitempty\"`\n+\tUpdatedAt
      string   `json:\"updated_at,omitempty\"`\n+\tUrl       string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsUpdateHookReq
      builds requests for \"orgs/update-hook\"\n+\n+Edit a hook.\n+\n+  PATCH /orgs/{org}/hooks/{hook_id}\n+\n+https://developer.github.com/v3/orgs/hooks/#edit-a-hook\n+*/\n+type
      OrgsUpdateHookReq struct {\n+\tOrg         string\n+\tHookId      int64\n+\tRequestBody
      OrgsUpdateHookReqBody\n+}\n+\n+func (r OrgsUpdateHookReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/orgs/%v/hooks/%v\", r.Org, r.HookId)\n+}\n+\n+func (r OrgsUpdateHookReq)
      method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func (r OrgsUpdateHookReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsUpdateHookReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsUpdateHookReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+OrgsUpdateHookReqBody
      is a request body for orgs/update-hook\n+\n+API documentation: https://developer.github.com/v3/orgs/hooks/#edit-a-hook\n+*/\n+type
      OrgsUpdateHookReqBody struct {\n+\n+\t/*\n+\t   Determines if notifications
      are sent when the webhook is triggered. Set to\n+\t   `true` to send notifications.\n+\t*/\n+\tActive
      *bool `json:\"active,omitempty\"`\n+\n+\t/*\n+\t   Key/value pairs to provide
      settings for this webhook. [These are defined\n+\t   below](https://developer.github.com/v3/orgs/hooks/#update-hook-config-params).\n+\t*/\n+\tConfig
      *struct {\n+\n+\t\t/*\n+\t\t   The media type used to serialize the payloads.
      Supported values include `json`\n+\t\t   and `form`. The default is `form`.\n+\t\t*/\n+\t\tContentType
      *string `json:\"content_type,omitempty\"`\n+\n+\t\t/*\n+\t\t   Determines whether
      the SSL certificate of the host for `url` will be verified\n+\t\t   when delivering
      payloads. Supported values include `0` (verification is\n+\t\t   performed)
      and `1` (verification is not performed). The default is `0`. **We\n+\t\t   strongly
      recommend not setting this to `1` as you are subject to\n+\t\t   man-in-the-middle
      and other attacks.**\n+\t\t*/\n+\t\tInsecureSsl *string `json:\"insecure_ssl,omitempty\"`\n+\n+\t\t/*\n+\t\t   If
      provided, the `secret` will be used as the `key` to generate the HMAC hex\n+\t\t   digest
      value in the\n+\t\t   [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers)\n+\t\t   header.\n+\t\t*/\n+\t\tSecret
      *string `json:\"secret,omitempty\"`\n+\n+\t\t// The URL to which the payloads
      will be delivered.\n+\t\tUrl *string `json:\"url\"`\n+\t} `json:\"config,omitempty\"`\n+\n+\t/*\n+\t   Determines
      what [events](https://developer.github.com/webhooks/event-payloads)\n+\t   the
      hook is triggered for.\n+\t*/\n+\tEvents []string `json:\"events,omitempty\"`\n+}\n+\n+/*\n+OrgsUpdateHookResponseBody200
      is a response body for orgs/update-hook\n+\n+API documentation: https://developer.github.com/v3/orgs/hooks/#edit-a-hook\n+*/\n+type
      OrgsUpdateHookResponseBody200 struct {\n+\tActive bool `json:\"active,omitempty\"`\n+\tConfig
      struct {\n+\t\tContentType string `json:\"content_type,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t} `json:\"config,omitempty\"`\n+\tCreatedAt string   `json:\"created_at,omitempty\"`\n+\tEvents    []string
      `json:\"events,omitempty\"`\n+\tId        int64    `json:\"id,omitempty\"`\n+\tName      string   `json:\"name,omitempty\"`\n+\tPingUrl   string   `json:\"ping_url,omitempty\"`\n+\tUpdatedAt
      string   `json:\"updated_at,omitempty\"`\n+\tUrl       string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsListInstallationsReq
      builds requests for \"orgs/list-installations\"\n+\n+List installations for
      an organization.\n+\n+  GET /orgs/{org}/installations\n+\n+https://developer.github.com/v3/orgs/#list-installations-for-an-organization\n+*/\n+type
      OrgsListInstallationsReq struct {\n+\tOrg string\n+\n+\t// Results per page
      (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+\n+\t/*\n+\tTo access the API with your GitHub App, you must set this
      to true for your\n+\trequests.\n+\t*/\n+\tMachineManPreview bool\n+}\n+\n+func
      (r OrgsListInstallationsReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/installations\",
      r.Org)\n+}\n+\n+func (r OrgsListInstallationsReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r OrgsListInstallationsReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListInstallationsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"machine-man\":
      r.MachineManPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListInstallationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListInstallationsResponseBody200
      is a response body for orgs/list-installations\n+\n+API documentation: https://developer.github.com/v3/orgs/#list-installations-for-an-organization\n+*/\n+type
      OrgsListInstallationsResponseBody200 struct {\n+\tInstallations []struct {\n+\t\tAccessTokensUrl
      string `json:\"access_tokens_url,omitempty\"`\n+\t\tAccount         struct {\n+\t\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\t\tId                int64  `json:\"id,omitempty\"`\n+\t\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\t\tType              string
      `json:\"type,omitempty\"`\n+\t\t\tUrl               string `json:\"url,omitempty\"`\n+\t\t}
      `json:\"account,omitempty\"`\n+\t\tAppId       int64    `json:\"app_id,omitempty\"`\n+\t\tCreatedAt   string   `json:\"created_at,omitempty\"`\n+\t\tEvents      []string
      `json:\"events,omitempty\"`\n+\t\tHtmlUrl     string   `json:\"html_url,omitempty\"`\n+\t\tId          int64    `json:\"id,omitempty\"`\n+\t\tPermissions
      struct {\n+\t\t\tDeployments  string `json:\"deployments,omitempty\"`\n+\t\t\tMetadata     string
      `json:\"metadata,omitempty\"`\n+\t\t\tPullRequests string `json:\"pull_requests,omitempty\"`\n+\t\t\tStatuses     string
      `json:\"statuses,omitempty\"`\n+\t\t} `json:\"permissions,omitempty\"`\n+\t\tRepositoriesUrl     string
      `json:\"repositories_url,omitempty\"`\n+\t\tRepositorySelection string `json:\"repository_selection,omitempty\"`\n+\t\tSingleFileName      string
      `json:\"single_file_name,omitempty\"`\n+\t\tTargetId            int64  `json:\"target_id,omitempty\"`\n+\t\tTargetType          string
      `json:\"target_type,omitempty\"`\n+\t\tUpdatedAt           string `json:\"updated_at,omitempty\"`\n+\t}
      `json:\"installations,omitempty\"`\n+\tTotalCount int64 `json:\"total_count,omitempty\"`\n+}\n+\n+/*\n+OrgsPublicizeMembershipReq
      builds requests for \"orgs/publicize-membership\"\n+\n+Publicize a user''s membership.\n+\n+  PUT
      /orgs/{org}/public_members/{username}\n+\n+https://developer.github.com/v3/orgs/members/#publicize-a-users-membership\n+*/\n+type
      OrgsPublicizeMembershipReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsPublicizeMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/public_members/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsPublicizeMembershipReq) method() string
      {\n+\treturn \"PUT\"\n+}\n+\n+func (r OrgsPublicizeMembershipReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsPublicizeMembershipReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsPublicizeMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsConcealMembershipReq builds
      requests for \"orgs/conceal-membership\"\n+\n+Conceal a user''s membership.\n+\n+  DELETE
      /orgs/{org}/public_members/{username}\n+\n+https://developer.github.com/v3/orgs/members/#conceal-a-users-membership\n+*/\n+type
      OrgsConcealMembershipReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsConcealMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/public_members/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsConcealMembershipReq) method() string
      {\n+\treturn \"DELETE\"\n+}\n+\n+func (r OrgsConcealMembershipReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsConcealMembershipReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsConcealMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsCheckPublicMembershipReq
      builds requests for \"orgs/check-public-membership\"\n+\n+Check public membership.\n+\n+  GET
      /orgs/{org}/public_members/{username}\n+\n+https://developer.github.com/v3/orgs/members/#check-public-membership\n+*/\n+type
      OrgsCheckPublicMembershipReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsCheckPublicMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/public_members/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsCheckPublicMembershipReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsCheckPublicMembershipReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsCheckPublicMembershipReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsCheckPublicMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsCheckMembershipReq builds
      requests for \"orgs/check-membership\"\n+\n+Check membership.\n+\n+  GET /orgs/{org}/members/{username}\n+\n+https://developer.github.com/v3/orgs/members/#check-membership\n+*/\n+type
      OrgsCheckMembershipReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsCheckMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/members/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsCheckMembershipReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsCheckMembershipReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsCheckMembershipReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsCheckMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsRemoveMemberReq builds
      requests for \"orgs/remove-member\"\n+\n+Remove a member.\n+\n+  DELETE /orgs/{org}/members/{username}\n+\n+https://developer.github.com/v3/orgs/members/#remove-a-member\n+*/\n+type
      OrgsRemoveMemberReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsRemoveMemberReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/members/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsRemoveMemberReq) method() string {\n+\treturn
      \"DELETE\"\n+}\n+\n+func (r OrgsRemoveMemberReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsRemoveMemberReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsRemoveMemberReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OrgsListMembersReq builds requests for \"orgs/list-members\"\n+\n+Members
      list.\n+\n+  GET /orgs/{org}/members\n+\n+https://developer.github.com/v3/orgs/members/#members-list\n+*/\n+type
      OrgsListMembersReq struct {\n+\tOrg string\n+\n+\t/*\n+\tFilter members returned
      in the list. Can be one of:\n+\t\\* `2fa_disabled` - Members without [two-factor\n+\tauthentication](https://github.com/blog/1614-two-factor-authentication)
      enabled.\n+\tAvailable for organization owners.\n+\t\\* `all` - All members
      the authenticated user can see.\n+\t*/\n+\tFilter *string\n+\n+\t/*\n+\tFilter
      members returned by their role. Can be one of:\n+\t\\* `all` - All members of
      the organization, regardless of role.\n+\t\\* `admin` - Organization owners.\n+\t\\*
      `member` - Non-owner organization members.\n+\t*/\n+\tRole *string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r OrgsListMembersReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/orgs/%v/members\", r.Org)\n+}\n+\n+func (r OrgsListMembersReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsListMembersReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.Filter != nil {\n+\t\tquery.Set(\"filter\",
      *r.Filter)\n+\t}\n+\tif r.Role != nil {\n+\t\tquery.Set(\"role\", *r.Role)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListMembersReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsListMembersReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OrgsListMembersResponseBody200 is a response body for
      orgs/list-members\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#members-list\n+*/\n+type
      OrgsListMembersResponseBody200 []struct {\n+\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsRemoveMembershipReq
      builds requests for \"orgs/remove-membership\"\n+\n+Remove organization membership.\n+\n+  DELETE
      /orgs/{org}/memberships/{username}\n+\n+https://developer.github.com/v3/orgs/members/#remove-organization-membership\n+*/\n+type
      OrgsRemoveMembershipReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsRemoveMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/memberships/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsRemoveMembershipReq) method() string
      {\n+\treturn \"DELETE\"\n+}\n+\n+func (r OrgsRemoveMembershipReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsRemoveMembershipReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsRemoveMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsGetMembershipReq builds
      requests for \"orgs/get-membership\"\n+\n+Get organization membership.\n+\n+  GET
      /orgs/{org}/memberships/{username}\n+\n+https://developer.github.com/v3/orgs/members/#get-organization-membership\n+*/\n+type
      OrgsGetMembershipReq struct {\n+\tOrg      string\n+\tUsername string\n+}\n+\n+func
      (r OrgsGetMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/memberships/%v\",
      r.Org, r.Username)\n+}\n+\n+func (r OrgsGetMembershipReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r OrgsGetMembershipReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsGetMembershipReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsGetMembershipReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+OrgsGetMembershipResponseBody200 is a response body
      for orgs/get-membership\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#get-organization-membership\n+*/\n+type
      OrgsGetMembershipResponseBody200 struct {\n+\tOrganization struct {\n+\t\tAvatarUrl        string
      `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string `json:\"description,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"organization,omitempty\"`\n+\tOrganizationUrl string `json:\"organization_url,omitempty\"`\n+\tRole            string
      `json:\"role,omitempty\"`\n+\tState           string `json:\"state,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+\tUser            struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+OrgsAddOrUpdateMembershipReq builds
      requests for \"orgs/add-or-update-membership\"\n+\n+Add or update organization
      membership.\n+\n+  PUT /orgs/{org}/memberships/{username}\n+\n+https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership\n+*/\n+type
      OrgsAddOrUpdateMembershipReq struct {\n+\tOrg         string\n+\tUsername    string\n+\tRequestBody
      OrgsAddOrUpdateMembershipReqBody\n+}\n+\n+func (r OrgsAddOrUpdateMembershipReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/memberships/%v\", r.Org,
      r.Username)\n+}\n+\n+func (r OrgsAddOrUpdateMembershipReq) method() string {\n+\treturn
      \"PUT\"\n+}\n+\n+func (r OrgsAddOrUpdateMembershipReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsAddOrUpdateMembershipReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsAddOrUpdateMembershipReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+OrgsAddOrUpdateMembershipReqBody
      is a request body for orgs/add-or-update-membership\n+\n+API documentation:
      https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership\n+*/\n+type
      OrgsAddOrUpdateMembershipReqBody struct {\n+\n+\t/*\n+\t   The role to give
      the user in the organization. Can be one of:\n+\t   \\* `admin` - The user will
      become an owner of the organization.\n+\t   \\* `member` - The user will become
      a non-owner member of the organization.\n+\t*/\n+\tRole *string `json:\"role,omitempty\"`\n+}\n+\n+/*\n+OrgsAddOrUpdateMembershipResponseBody200
      is a response body for orgs/add-or-update-membership\n+\n+API documentation:
      https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership\n+*/\n+type
      OrgsAddOrUpdateMembershipResponseBody200 struct {\n+\tOrganization struct {\n+\t\tAvatarUrl        string
      `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string `json:\"description,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"organization,omitempty\"`\n+\tOrganizationUrl string `json:\"organization_url,omitempty\"`\n+\tRole            string
      `json:\"role,omitempty\"`\n+\tState           string `json:\"state,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+\tUser            struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+OrgsListReq builds requests for \"orgs/list\"\n+\n+List
      all organizations.\n+\n+  GET /organizations\n+\n+https://developer.github.com/v3/orgs/#list-all-organizations\n+*/\n+type
      OrgsListReq struct {\n+\n+\t// The integer ID of the last organization that
      you''ve seen.\n+\tSince *int64\n+}\n+\n+func (r OrgsListReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/organizations\")\n+}\n+\n+func (r OrgsListReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsListReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\tif r.Since != nil {\n+\t\tquery.Set(\"since\",
      strconv.FormatInt(*r.Since, 10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListResponseBody200 is a response body
      for orgs/list\n+\n+API documentation: https://developer.github.com/v3/orgs/#list-all-organizations\n+*/\n+type
      OrgsListResponseBody200 []struct {\n+\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\tDescription      string
      `json:\"description,omitempty\"`\n+\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\tId               int64  `json:\"id,omitempty\"`\n+\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\tLogin            string `json:\"login,omitempty\"`\n+\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\tNodeId           string `json:\"node_id,omitempty\"`\n+\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\tReposUrl         string `json:\"repos_url,omitempty\"`\n+\tUrl              string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsGetReq builds requests for \"orgs/get\"\n+\n+Get
      an organization.\n+\n+  GET /orgs/{org}\n+\n+https://developer.github.com/v3/orgs/#get-an-organization\n+*/\n+type
      OrgsGetReq struct {\n+\tOrg string\n+\n+\t/*\n+\tNew repository creation permissions
      are available to preview. You can now use\n+\t`members_can_create_public_repositories`,\n+\t`members_can_create_private_repositories`,
      and\n+\t`members_can_create_internal_repositories`. You can only allow members
      to create\n+\tinternal repositories if your organization is associated with
      an enterprise\n+\taccount using GitHub Enterprise Cloud or GitHub Enterprise
      Server 2.20+. These\n+\tparameters provide more granular permissions to configure
      the type of\n+\trepositories organization members can create.\n+\n+\tTo access
      these new parameters during the preview period, you must set this to\n+\ttrue.\n+\t*/\n+\tSurturPreview
      bool\n+}\n+\n+func (r OrgsGetReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v\",
      r.Org)\n+}\n+\n+func (r OrgsGetReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r OrgsGetReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r OrgsGetReq) header() http.Header {\n+\theaderVals :=
      map[string]*string{}\n+\tpreviewVals := map[string]bool{\"surtur\": r.SurturPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsGetReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsGetResponseBody200
      is a response body for orgs/get\n+\n+API documentation: https://developer.github.com/v3/orgs/#get-an-organization\n+*/\n+type
      OrgsGetResponseBody200 struct {\n+\tAvatarUrl                            string      `json:\"avatar_url,omitempty\"`\n+\tBillingEmail                         string      `json:\"billing_email,omitempty\"`\n+\tBlog                                 string      `json:\"blog,omitempty\"`\n+\tCollaborators                        int64       `json:\"collaborators,omitempty\"`\n+\tCompany                              string      `json:\"company,omitempty\"`\n+\tCreatedAt                            string      `json:\"created_at,omitempty\"`\n+\tDefaultRepositoryPermission          string      `json:\"default_repository_permission,omitempty\"`\n+\tDescription                          string      `json:\"description,omitempty\"`\n+\tDiskUsage                            json.Number
      `json:\"disk_usage,omitempty\"`\n+\tEmail                                string      `json:\"email,omitempty\"`\n+\tEventsUrl                            string      `json:\"events_url,omitempty\"`\n+\tFollowers                            int64       `json:\"followers,omitempty\"`\n+\tFollowing                            int64       `json:\"following,omitempty\"`\n+\tHasOrganizationProjects              bool        `json:\"has_organization_projects,omitempty\"`\n+\tHasRepositoryProjects                bool        `json:\"has_repository_projects,omitempty\"`\n+\tHooksUrl                             string      `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl                              string      `json:\"html_url,omitempty\"`\n+\tId                                   int64       `json:\"id,omitempty\"`\n+\tIsVerified                           bool        `json:\"is_verified,omitempty\"`\n+\tIssuesUrl                            string      `json:\"issues_url,omitempty\"`\n+\tLocation                             string      `json:\"location,omitempty\"`\n+\tLogin                                string      `json:\"login,omitempty\"`\n+\tMembersAllowedRepositoryCreationType
      string      `json:\"members_allowed_repository_creation_type,omitempty\"`\n+\tMembersCanCreateInternalRepositories
      bool        `json:\"members_can_create_internal_repositories,omitempty\"`\n+\tMembersCanCreatePrivateRepositories  bool        `json:\"members_can_create_private_repositories,omitempty\"`\n+\tMembersCanCreatePublicRepositories   bool        `json:\"members_can_create_public_repositories,omitempty\"`\n+\tMembersCanCreateRepositories         bool        `json:\"members_can_create_repositories,omitempty\"`\n+\tMembersUrl                           string      `json:\"members_url,omitempty\"`\n+\tName                                 string      `json:\"name,omitempty\"`\n+\tNodeId                               string      `json:\"node_id,omitempty\"`\n+\tOwnedPrivateRepos                    int64       `json:\"owned_private_repos,omitempty\"`\n+\tPlan                                 struct
      {\n+\t\tName         string      `json:\"name,omitempty\"`\n+\t\tPrivateRepos
      int64       `json:\"private_repos,omitempty\"`\n+\t\tSpace        json.Number
      `json:\"space,omitempty\"`\n+\t} `json:\"plan,omitempty\"`\n+\tPrivateGists                int64  `json:\"private_gists,omitempty\"`\n+\tPublicGists                 int64  `json:\"public_gists,omitempty\"`\n+\tPublicMembersUrl            string
      `json:\"public_members_url,omitempty\"`\n+\tPublicRepos                 int64  `json:\"public_repos,omitempty\"`\n+\tReposUrl                    string
      `json:\"repos_url,omitempty\"`\n+\tTotalPrivateRepos           int64  `json:\"total_private_repos,omitempty\"`\n+\tTwoFactorRequirementEnabled
      bool   `json:\"two_factor_requirement_enabled,omitempty\"`\n+\tType                        string
      `json:\"type,omitempty\"`\n+\tUrl                         string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsUpdateReq
      builds requests for \"orgs/update\"\n+\n+Edit an organization.\n+\n+  PATCH
      /orgs/{org}\n+\n+https://developer.github.com/v3/orgs/#edit-an-organization\n+*/\n+type
      OrgsUpdateReq struct {\n+\tOrg         string\n+\tRequestBody OrgsUpdateReqBody\n+\n+\t/*\n+\tNew
      repository creation permissions are available to preview. You can now use\n+\t`members_can_create_public_repositories`,\n+\t`members_can_create_private_repositories`,
      and\n+\t`members_can_create_internal_repositories`. You can only allow members
      to create\n+\tinternal repositories if your organization is associated with
      an enterprise\n+\taccount using GitHub Enterprise Cloud or GitHub Enterprise
      Server 2.20+. These\n+\tparameters provide more granular permissions to configure
      the type of\n+\trepositories organization members can create.\n+\n+\tTo access
      these new parameters during the preview period, you must set this to\n+\ttrue.\n+\t*/\n+\tSurturPreview
      bool\n+}\n+\n+func (r OrgsUpdateReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v\",
      r.Org)\n+}\n+\n+func (r OrgsUpdateReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r OrgsUpdateReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r OrgsUpdateReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"surtur\": r.SurturPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsUpdateReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+OrgsUpdateReqBody
      is a request body for orgs/update\n+\n+API documentation: https://developer.github.com/v3/orgs/#edit-an-organization\n+*/\n+type
      OrgsUpdateReqBody struct {\n+\n+\t// Billing email address. This address is
      not publicized.\n+\tBillingEmail *string `json:\"billing_email,omitempty\"`\n+\n+\t//
      The company name.\n+\tCompany *string `json:\"company,omitempty\"`\n+\n+\t/*\n+\t   Default
      permission level members have for organization repositories:\n+\t   \\* `read`
      - can pull, but not push to or administer this repository.\n+\t   \\* `write`
      - can pull and push, but not administer this repository.\n+\t   \\* `admin`
      - can pull, push, and administer this repository.\n+\t   \\* `none` - no permissions
      granted by default.\n+\t*/\n+\tDefaultRepositoryPermission *string `json:\"default_repository_permission,omitempty\"`\n+\n+\t//
      The description of the company.\n+\tDescription *string `json:\"description,omitempty\"`\n+\n+\t//
      The publicly visible email address.\n+\tEmail *string `json:\"email,omitempty\"`\n+\n+\t//
      Toggles whether an organization can use organization projects.\n+\tHasOrganizationProjects
      *bool `json:\"has_organization_projects,omitempty\"`\n+\n+\t/*\n+\t   Toggles
      whether repositories that belong to the organization can use repository\n+\t   projects.\n+\t*/\n+\tHasRepositoryProjects
      *bool `json:\"has_repository_projects,omitempty\"`\n+\n+\t// The location.\n+\tLocation
      *string `json:\"location,omitempty\"`\n+\n+\t/*\n+\t   Specifies which types
      of repositories non-admin organization members can create.\n+\t   Can be one
      of:\n+\t   \\* `all` - all organization members can create public and private
      repositories.\n+\t   \\* `private` - members can create private repositories.
      This option is only\n+\t   available to repositories that are part of an organization
      on GitHub Enterprise\n+\t   Cloud.\n+\t   \\* `none` - only admin members can
      create repositories.\n+\t   **Note:** This parameter is deprecated and will
      be removed in the future. Its\n+\t   return value ignores internal repositories.
      Using this parameter overrides\n+\t   values set in `members_can_create_repositories`.
      See [this\n+\t   note](https://developer.github.com/v3/orgs/#members_can_create_repositories)
      for\n+\t   details.\n+\t*/\n+\tMembersAllowedRepositoryCreationType *string
      `json:\"members_allowed_repository_creation_type,omitempty\"`\n+\n+\t/*\n+\t   Toggles
      whether organization members can create internal repositories, which are\n+\t   visible
      to all enterprise members. You can only allow members to create internal\n+\t   repositories
      if your organization is associated with an enterprise account using\n+\t   GitHub
      Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:\n+\t   \\*
      `true` - all organization members can create internal repositories.\n+\t   \\*
      `false` - only organization owners can create internal repositories.\n+\t   Default:
      `true`. For more information, see \"[Restricting repository creation in\n+\t   your\n+\t   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\"\n+\t   in
      the GitHub Help documentation.\n+\t*/\n+\tMembersCanCreateInternalRepositories
      *bool `json:\"members_can_create_internal_repositories,omitempty\"`\n+\n+\t/*\n+\t   Toggles
      whether organization members can create private repositories, which are\n+\t   visible
      to organization members with permission. Can be one of:\n+\t   \\* `true` -
      all organization members can create private repositories.\n+\t   \\* `false`
      - only organization owners can create private repositories.\n+\t   Default:
      `true`. For more information, see \"[Restricting repository creation in\n+\t   your\n+\t   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\"\n+\t   in
      the GitHub Help documentation.\n+\t*/\n+\tMembersCanCreatePrivateRepositories
      *bool `json:\"members_can_create_private_repositories,omitempty\"`\n+\n+\t/*\n+\t   Toggles
      whether organization members can create public repositories, which are\n+\t   visible
      to anyone. Can be one of:\n+\t   \\* `true` - all organization members can create
      public repositories.\n+\t   \\* `false` - only organization owners can create
      public repositories.\n+\t   Default: `true`. For more information, see \"[Restricting
      repository creation in\n+\t   your\n+\t   organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\"\n+\t   in
      the GitHub Help documentation.\n+\t*/\n+\tMembersCanCreatePublicRepositories
      *bool `json:\"members_can_create_public_repositories,omitempty\"`\n+\n+\t/*\n+\t   Toggles
      the ability of non-admin organization members to create repositories.\n+\t   Can
      be one of:\n+\t   \\* `true` - all organization members can create repositories.\n+\t   \\*
      `false` - only organization owners can create repositories.\n+\t   Default:
      `true`\n+\t   **Note:** A parameter can override this parameter. See\n+\t   `members_allowed_repository_creation_type`
      in this table for details. **Note:**\n+\t   A parameter can override this parameter.
      See\n+\t   `members_allowed_repository_creation_type` in this table for details.\n+\t*/\n+\tMembersCanCreateRepositories
      *bool `json:\"members_can_create_repositories,omitempty\"`\n+\n+\t// The shorthand
      name of the company.\n+\tName *string `json:\"name,omitempty\"`\n+}\n+\n+/*\n+OrgsUpdateResponseBody200
      is a response body for orgs/update\n+\n+API documentation: https://developer.github.com/v3/orgs/#edit-an-organization\n+*/\n+type
      OrgsUpdateResponseBody200 struct {\n+\tAvatarUrl                            string      `json:\"avatar_url,omitempty\"`\n+\tBillingEmail                         string      `json:\"billing_email,omitempty\"`\n+\tBlog                                 string      `json:\"blog,omitempty\"`\n+\tCollaborators                        int64       `json:\"collaborators,omitempty\"`\n+\tCompany                              string      `json:\"company,omitempty\"`\n+\tCreatedAt                            string      `json:\"created_at,omitempty\"`\n+\tDefaultRepositoryPermission          string      `json:\"default_repository_permission,omitempty\"`\n+\tDescription                          string      `json:\"description,omitempty\"`\n+\tDiskUsage                            json.Number
      `json:\"disk_usage,omitempty\"`\n+\tEmail                                string      `json:\"email,omitempty\"`\n+\tEventsUrl                            string      `json:\"events_url,omitempty\"`\n+\tFollowers                            int64       `json:\"followers,omitempty\"`\n+\tFollowing                            int64       `json:\"following,omitempty\"`\n+\tHasOrganizationProjects              bool        `json:\"has_organization_projects,omitempty\"`\n+\tHasRepositoryProjects                bool        `json:\"has_repository_projects,omitempty\"`\n+\tHooksUrl                             string      `json:\"hooks_url,omitempty\"`\n+\tHtmlUrl                              string      `json:\"html_url,omitempty\"`\n+\tId                                   int64       `json:\"id,omitempty\"`\n+\tIsVerified                           bool        `json:\"is_verified,omitempty\"`\n+\tIssuesUrl                            string      `json:\"issues_url,omitempty\"`\n+\tLocation                             string      `json:\"location,omitempty\"`\n+\tLogin                                string      `json:\"login,omitempty\"`\n+\tMembersAllowedRepositoryCreationType
      string      `json:\"members_allowed_repository_creation_type,omitempty\"`\n+\tMembersCanCreateInternalRepositories
      bool        `json:\"members_can_create_internal_repositories,omitempty\"`\n+\tMembersCanCreatePrivateRepositories  bool        `json:\"members_can_create_private_repositories,omitempty\"`\n+\tMembersCanCreatePublicRepositories   bool        `json:\"members_can_create_public_repositories,omitempty\"`\n+\tMembersCanCreateRepositories         bool        `json:\"members_can_create_repositories,omitempty\"`\n+\tMembersUrl                           string      `json:\"members_url,omitempty\"`\n+\tName                                 string      `json:\"name,omitempty\"`\n+\tNodeId                               string      `json:\"node_id,omitempty\"`\n+\tOwnedPrivateRepos                    int64       `json:\"owned_private_repos,omitempty\"`\n+\tPlan                                 struct
      {\n+\t\tName         string      `json:\"name,omitempty\"`\n+\t\tPrivateRepos
      int64       `json:\"private_repos,omitempty\"`\n+\t\tSpace        json.Number
      `json:\"space,omitempty\"`\n+\t} `json:\"plan,omitempty\"`\n+\tPrivateGists                int64  `json:\"private_gists,omitempty\"`\n+\tPublicGists                 int64  `json:\"public_gists,omitempty\"`\n+\tPublicMembersUrl            string
      `json:\"public_members_url,omitempty\"`\n+\tPublicRepos                 int64  `json:\"public_repos,omitempty\"`\n+\tReposUrl                    string
      `json:\"repos_url,omitempty\"`\n+\tTotalPrivateRepos           int64  `json:\"total_private_repos,omitempty\"`\n+\tTwoFactorRequirementEnabled
      bool   `json:\"two_factor_requirement_enabled,omitempty\"`\n+\tType                        string
      `json:\"type,omitempty\"`\n+\tUrl                         string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsRemoveCredentialAuthorizationReq
      builds requests for \"orgs/remove-credential-authorization\"\n+\n+Remove a credential
      authorization for an organization.\n+\n+  DELETE /orgs/{org}/credential-authorizations/{credential_id}\n+\n+https://developer.github.com/v3/orgs/#remove-a-credential-authorization-for-an-organization\n+*/\n+type
      OrgsRemoveCredentialAuthorizationReq struct {\n+\tOrg          string\n+\tCredentialId
      int64\n+}\n+\n+func (r OrgsRemoveCredentialAuthorizationReq) urlPath() string
      {\n+\treturn fmt.Sprintf(\"/orgs/%v/credential-authorizations/%v\", r.Org, r.CredentialId)\n+}\n+\n+func
      (r OrgsRemoveCredentialAuthorizationReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r OrgsRemoveCredentialAuthorizationReq) urlQuery() url.Values {\n+\tquery :=
      url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsRemoveCredentialAuthorizationReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsRemoveCredentialAuthorizationReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsPingHookReq
      builds requests for \"orgs/ping-hook\"\n+\n+Ping a hook.\n+\n+  POST /orgs/{org}/hooks/{hook_id}/pings\n+\n+https://developer.github.com/v3/orgs/hooks/#ping-a-hook\n+*/\n+type
      OrgsPingHookReq struct {\n+\tOrg    string\n+\tHookId int64\n+}\n+\n+func (r
      OrgsPingHookReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/hooks/%v/pings\",
      r.Org, r.HookId)\n+}\n+\n+func (r OrgsPingHookReq) method() string {\n+\treturn
      \"POST\"\n+}\n+\n+func (r OrgsPingHookReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsPingHookReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsPingHookReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListHooksReq
      builds requests for \"orgs/list-hooks\"\n+\n+List hooks.\n+\n+  GET /orgs/{org}/hooks\n+\n+https://developer.github.com/v3/orgs/hooks/#list-hooks\n+*/\n+type
      OrgsListHooksReq struct {\n+\tOrg string\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+}\n+\n+func
      (r OrgsListHooksReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/hooks\",
      r.Org)\n+}\n+\n+func (r OrgsListHooksReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r OrgsListHooksReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListHooksReq) header() http.Header
      {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsListHooksReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListHooksResponseBody200
      is a response body for orgs/list-hooks\n+\n+API documentation: https://developer.github.com/v3/orgs/hooks/#list-hooks\n+*/\n+type
      OrgsListHooksResponseBody200 []struct {\n+\tActive bool `json:\"active,omitempty\"`\n+\tConfig
      struct {\n+\t\tContentType string `json:\"content_type,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t} `json:\"config,omitempty\"`\n+\tCreatedAt string   `json:\"created_at,omitempty\"`\n+\tEvents    []string
      `json:\"events,omitempty\"`\n+\tId        int64    `json:\"id,omitempty\"`\n+\tName      string   `json:\"name,omitempty\"`\n+\tPingUrl   string   `json:\"ping_url,omitempty\"`\n+\tUpdatedAt
      string   `json:\"updated_at,omitempty\"`\n+\tUrl       string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsCreateHookReq
      builds requests for \"orgs/create-hook\"\n+\n+Create a hook.\n+\n+  POST /orgs/{org}/hooks\n+\n+https://developer.github.com/v3/orgs/hooks/#create-a-hook\n+*/\n+type
      OrgsCreateHookReq struct {\n+\tOrg         string\n+\tRequestBody OrgsCreateHookReqBody\n+}\n+\n+func
      (r OrgsCreateHookReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/hooks\",
      r.Org)\n+}\n+\n+func (r OrgsCreateHookReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r OrgsCreateHookReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r OrgsCreateHookReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OrgsCreateHookReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+OrgsCreateHookReqBody
      is a request body for orgs/create-hook\n+\n+API documentation: https://developer.github.com/v3/orgs/hooks/#create-a-hook\n+*/\n+type
      OrgsCreateHookReqBody struct {\n+\n+\t/*\n+\t   Determines if notifications
      are sent when the webhook is triggered. Set to\n+\t   `true` to send notifications.\n+\t*/\n+\tActive
      *bool `json:\"active,omitempty\"`\n+\n+\t/*\n+\t   Key/value pairs to provide
      settings for this webhook. [These are defined\n+\t   below](https://developer.github.com/v3/orgs/hooks/#create-hook-config-params).\n+\t*/\n+\tConfig
      *struct {\n+\n+\t\t/*\n+\t\t   The media type used to serialize the payloads.
      Supported values include `json`\n+\t\t   and `form`. The default is `form`.\n+\t\t*/\n+\t\tContentType
      *string `json:\"content_type,omitempty\"`\n+\n+\t\t/*\n+\t\t   Determines whether
      the SSL certificate of the host for `url` will be verified\n+\t\t   when delivering
      payloads. Supported values include `0` (verification is\n+\t\t   performed)
      and `1` (verification is not performed). The default is `0`. **We\n+\t\t   strongly
      recommend not setting this to `1` as you are subject to\n+\t\t   man-in-the-middle
      and other attacks.**\n+\t\t*/\n+\t\tInsecureSsl *string `json:\"insecure_ssl,omitempty\"`\n+\n+\t\t/*\n+\t\t   If
      provided, the `secret` will be used as the `key` to generate the HMAC hex\n+\t\t   digest
      value in the\n+\t\t   [`X-Hub-Signature`](https://developer.github.com/webhooks/event-payloads/#delivery-headers)\n+\t\t   header.\n+\t\t*/\n+\t\tSecret
      *string `json:\"secret,omitempty\"`\n+\n+\t\t// The URL to which the payloads
      will be delivered.\n+\t\tUrl *string `json:\"url\"`\n+\t} `json:\"config\"`\n+\n+\t/*\n+\t   Determines
      what [events](https://developer.github.com/webhooks/event-payloads)\n+\t   the
      hook is triggered for.\n+\t*/\n+\tEvents []string `json:\"events,omitempty\"`\n+\n+\t//
      Must be passed as \"web\".\n+\tName *string `json:\"name\"`\n+}\n+\n+/*\n+OrgsCreateHookResponseBody201
      is a response body for orgs/create-hook\n+\n+API documentation: https://developer.github.com/v3/orgs/hooks/#create-a-hook\n+*/\n+type
      OrgsCreateHookResponseBody201 struct {\n+\tActive bool `json:\"active,omitempty\"`\n+\tConfig
      struct {\n+\t\tContentType string `json:\"content_type,omitempty\"`\n+\t\tUrl         string
      `json:\"url,omitempty\"`\n+\t} `json:\"config,omitempty\"`\n+\tCreatedAt string   `json:\"created_at,omitempty\"`\n+\tEvents    []string
      `json:\"events,omitempty\"`\n+\tId        int64    `json:\"id,omitempty\"`\n+\tName      string   `json:\"name,omitempty\"`\n+\tPingUrl   string   `json:\"ping_url,omitempty\"`\n+\tUpdatedAt
      string   `json:\"updated_at,omitempty\"`\n+\tUrl       string   `json:\"url,omitempty\"`\n+}\n+\n+/*\n+OrgsListCredentialAuthorizationsReq
      builds requests for \"orgs/list-credential-authorizations\"\n+\n+List credential
      authorizations for an organization.\n+\n+  GET /orgs/{org}/credential-authorizations\n+\n+https://developer.github.com/v3/orgs/#list-credential-authorizations-for-an-organization\n+*/\n+type
      OrgsListCredentialAuthorizationsReq struct {\n+\tOrg string\n+}\n+\n+func (r
      OrgsListCredentialAuthorizationsReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/credential-authorizations\",
      r.Org)\n+}\n+\n+func (r OrgsListCredentialAuthorizationsReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsListCredentialAuthorizationsReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsListCredentialAuthorizationsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListCredentialAuthorizationsReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListCredentialAuthorizationsResponseBody200
      is a response body for orgs/list-credential-authorizations\n+\n+API documentation:
      https://developer.github.com/v3/orgs/#list-credential-authorizations-for-an-organization\n+*/\n+type
      OrgsListCredentialAuthorizationsResponseBody200 []struct {\n+\tCredentialAuthorizedAt
      string   `json:\"credential_authorized_at,omitempty\"`\n+\tCredentialId           string   `json:\"credential_id,omitempty\"`\n+\tCredentialType         string   `json:\"credential_type,omitempty\"`\n+\tLogin                  string   `json:\"login,omitempty\"`\n+\tScopes                 []string
      `json:\"scopes,omitempty\"`\n+\tTokenLastEight         string   `json:\"token_last_eight,omitempty\"`\n+}\n+\n+/*\n+OrgsGetMembershipForAuthenticatedUserReq
      builds requests for \"orgs/get-membership-for-authenticated-user\"\n+\n+Get
      your organization membership.\n+\n+  GET /user/memberships/orgs/{org}\n+\n+https://developer.github.com/v3/orgs/members/#get-your-organization-membership\n+*/\n+type
      OrgsGetMembershipForAuthenticatedUserReq struct {\n+\tOrg string\n+}\n+\n+func
      (r OrgsGetMembershipForAuthenticatedUserReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/user/memberships/orgs/%v\",
      r.Org)\n+}\n+\n+func (r OrgsGetMembershipForAuthenticatedUserReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r OrgsGetMembershipForAuthenticatedUserReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r OrgsGetMembershipForAuthenticatedUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r OrgsGetMembershipForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsGetMembershipForAuthenticatedUserResponseBody200
      is a response body for orgs/get-membership-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/orgs/members/#get-your-organization-membership\n+*/\n+type
      OrgsGetMembershipForAuthenticatedUserResponseBody200 struct {\n+\tOrganization
      struct {\n+\t\tAvatarUrl        string `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string
      `json:\"description,omitempty\"`\n+\t\tEventsUrl        string `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string
      `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"organization,omitempty\"`\n+\tOrganizationUrl string `json:\"organization_url,omitempty\"`\n+\tRole            string
      `json:\"role,omitempty\"`\n+\tState           string `json:\"state,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+\tUser            struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+OrgsUpdateMembershipReq builds requests
      for \"orgs/update-membership\"\n+\n+Edit your organization membership.\n+\n+  PATCH
      /user/memberships/orgs/{org}\n+\n+https://developer.github.com/v3/orgs/members/#edit-your-organization-membership\n+*/\n+type
      OrgsUpdateMembershipReq struct {\n+\tOrg         string\n+\tRequestBody OrgsUpdateMembershipReqBody\n+}\n+\n+func
      (r OrgsUpdateMembershipReq) urlPath() string {\n+\treturn fmt.Sprintf(\"/user/memberships/orgs/%v\",
      r.Org)\n+}\n+\n+func (r OrgsUpdateMembershipReq) method() string {\n+\treturn
      \"PATCH\"\n+}\n+\n+func (r OrgsUpdateMembershipReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r OrgsUpdateMembershipReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r OrgsUpdateMembershipReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+OrgsUpdateMembershipReqBody is a request body
      for orgs/update-membership\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#edit-your-organization-membership\n+*/\n+type
      OrgsUpdateMembershipReqBody struct {\n+\n+\t// The state that the membership
      should be in. Only `\"active\"` will be accepted.\n+\tState *string `json:\"state\"`\n+}\n+\n+/*\n+OrgsUpdateMembershipResponseBody200
      is a response body for orgs/update-membership\n+\n+API documentation: https://developer.github.com/v3/orgs/members/#edit-your-organization-membership\n+*/\n+type
      OrgsUpdateMembershipResponseBody200 struct {\n+\tOrganization struct {\n+\t\tAvatarUrl        string
      `json:\"avatar_url,omitempty\"`\n+\t\tDescription      string `json:\"description,omitempty\"`\n+\t\tEventsUrl        string
      `json:\"events_url,omitempty\"`\n+\t\tHooksUrl         string `json:\"hooks_url,omitempty\"`\n+\t\tId               int64  `json:\"id,omitempty\"`\n+\t\tIssuesUrl        string
      `json:\"issues_url,omitempty\"`\n+\t\tLogin            string `json:\"login,omitempty\"`\n+\t\tMembersUrl       string
      `json:\"members_url,omitempty\"`\n+\t\tNodeId           string `json:\"node_id,omitempty\"`\n+\t\tPublicMembersUrl
      string `json:\"public_members_url,omitempty\"`\n+\t\tReposUrl         string
      `json:\"repos_url,omitempty\"`\n+\t\tUrl              string `json:\"url,omitempty\"`\n+\t}
      `json:\"organization,omitempty\"`\n+\tOrganizationUrl string `json:\"organization_url,omitempty\"`\n+\tRole            string
      `json:\"role,omitempty\"`\n+\tState           string `json:\"state,omitempty\"`\n+\tUrl             string
      `json:\"url,omitempty\"`\n+\tUser            struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+OrgsListOutsideCollaboratorsReq builds
      requests for \"orgs/list-outside-collaborators\"\n+\n+List outside collaborators.\n+\n+  GET
      /orgs/{org}/outside_collaborators\n+\n+https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\n+*/\n+type
      OrgsListOutsideCollaboratorsReq struct {\n+\tOrg string\n+\n+\t/*\n+\tFilter
      the list of outside collaborators. Can be one of:\n+\t\\* `2fa_disabled`: Outside
      collaborators without [two-factor\n+\tauthentication](https://github.com/blog/1614-two-factor-authentication)
      enabled.\n+\t\\* `all`: All outside collaborators.\n+\t*/\n+\tFilter *string\n+\n+\t//
      Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results
      to fetch.\n+\tPage *int64\n+}\n+\n+func (r OrgsListOutsideCollaboratorsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/outside_collaborators\",
      r.Org)\n+}\n+\n+func (r OrgsListOutsideCollaboratorsReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r OrgsListOutsideCollaboratorsReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\tif r.Filter != nil {\n+\t\tquery.Set(\"filter\",
      *r.Filter)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r OrgsListOutsideCollaboratorsReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r OrgsListOutsideCollaboratorsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+OrgsListOutsideCollaboratorsResponseBody200
      is a response body for orgs/list-outside-collaborators\n+\n+API documentation:
      https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators\n+*/\n+type
      OrgsListOutsideCollaboratorsResponseBody200 []struct {\n+\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}"},{"sha":"b83b09a2729e0796a2eb25ab2d28e39387dd670e","filename":"zz_projects_gen.go","status":"added","additions":1962,"deletions":0,"changes":1962,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_projects_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_projects_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_projects_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,1962 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+ProjectsDeleteReq
      builds requests for \"projects/delete\"\n+\n+Delete a project.\n+\n+  DELETE
      /projects/{project_id}\n+\n+https://developer.github.com/v3/projects/#delete-a-project\n+*/\n+type
      ProjectsDeleteReq struct {\n+\tProjectId int64\n+\n+\t/*\n+\tThe Projects API
      is currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsDeleteReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/projects/%v\", r.ProjectId)\n+}\n+\n+func
      (r ProjectsDeleteReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r ProjectsDeleteReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsDeleteReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsDeleteReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsGetReq builds requests for \"projects/get\"\n+\n+Get
      a project.\n+\n+  GET /projects/{project_id}\n+\n+https://developer.github.com/v3/projects/#get-a-project\n+*/\n+type
      ProjectsGetReq struct {\n+\tProjectId int64\n+\n+\t/*\n+\tThe Projects API is
      currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsGetReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/projects/%v\", r.ProjectId)\n+}\n+\n+func
      (r ProjectsGetReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ProjectsGetReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ProjectsGetReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ProjectsGetReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ProjectsGetResponseBody200
      is a response body for projects/get\n+\n+API documentation: https://developer.github.com/v3/projects/#get-a-project\n+*/\n+type
      ProjectsGetResponseBody200 struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsUpdateReq
      builds requests for \"projects/update\"\n+\n+Update a project.\n+\n+  PATCH
      /projects/{project_id}\n+\n+https://developer.github.com/v3/projects/#update-a-project\n+*/\n+type
      ProjectsUpdateReq struct {\n+\tProjectId   int64\n+\tRequestBody ProjectsUpdateReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsUpdateReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/projects/%v\", r.ProjectId)\n+}\n+\n+func
      (r ProjectsUpdateReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func (r
      ProjectsUpdateReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsUpdateReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsUpdateReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsUpdateReqBody is a request body for
      projects/update\n+\n+API documentation: https://developer.github.com/v3/projects/#update-a-project\n+*/\n+type
      ProjectsUpdateReqBody struct {\n+\n+\t// The description of the project.\n+\tBody
      *string `json:\"body,omitempty\"`\n+\n+\t// The name of the project.\n+\tName
      *string `json:\"name,omitempty\"`\n+\n+\t/*\n+\t   The permission level that
      determines whether all members of the project''s\n+\t   organization can see
      and/or make changes to the project. Setting\n+\t   `organization_permission`
      is only available for organization projects. If an\n+\t   organization member
      belongs to a team with a higher level of access or is a\n+\t   collaborator
      with a higher level of access, their permission level is not\n+\t   lowered
      by `organization_permission`. For information on changing access for a\n+\t   team
      or collaborator, see [Add or update team\n+\t   project](https://developer.github.com/v3/teams/#add-or-update-team-project)
      or\n+\t   [Add user as a\n+\t   collaborator](https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator).\n+\n+\t   **Note:**
      Updating a project''s `organization_permission` requires `admin` access\n+\t   to
      the project.\n+\n+\t   Can be one of:\n+\t   \\* `read` - Organization members
      can read, but not write to or administer this\n+\t   project.\n+\t   \\* `write`
      - Organization members can read and write, but not administer this\n+\t   project.\n+\t   \\*
      `admin` - Organization members can read, write and administer this project.\n+\t   \\*
      `none` - Organization members can only see this project if it is public.\n+\t*/\n+\tOrganizationPermission
      *string `json:\"organization_permission,omitempty\"`\n+\n+\t/*\n+\t   Sets the
      visibility of a project board. Setting `private` is only available for\n+\t   organization
      and user projects. **Note:** Updating a project''s visibility\n+\t   requires
      `admin` access to the project.\n+\n+\t   Can be one of:\n+\t   \\* `false` -
      Anyone can see the project.\n+\t   \\* `true` - Only the user can view a project
      board created on a user account.\n+\t   Organization members with the appropriate
      `organization_permission` can see\n+\t   project boards in an organization account.\n+\t*/\n+\tPrivate
      *bool `json:\"private,omitempty\"`\n+\n+\t// State of the project. Either `open`
      or `closed`.\n+\tState *string `json:\"state,omitempty\"`\n+}\n+\n+/*\n+ProjectsUpdateResponseBody200
      is a response body for projects/update\n+\n+API documentation: https://developer.github.com/v3/projects/#update-a-project\n+*/\n+type
      ProjectsUpdateResponseBody200 struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsListForOrgReq
      builds requests for \"projects/list-for-org\"\n+\n+List organization projects.\n+\n+  GET
      /orgs/{org}/projects\n+\n+https://developer.github.com/v3/projects/#list-organization-projects\n+*/\n+type
      ProjectsListForOrgReq struct {\n+\tOrg string\n+\n+\t/*\n+\tIndicates the state
      of the projects to return. Can be either `open`, `closed`,\n+\tor `all`.\n+\t*/\n+\tState
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe Projects API
      is currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsListForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/projects\", r.Org)\n+}\n+\n+func
      (r ProjectsListForOrgReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ProjectsListForOrgReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.State != nil {\n+\t\tquery.Set(\"state\", *r.State)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r ProjectsListForOrgReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsListForOrgReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsListForOrgResponseBody200 is a response body
      for projects/list-for-org\n+\n+API documentation: https://developer.github.com/v3/projects/#list-organization-projects\n+*/\n+type
      ProjectsListForOrgResponseBody200 []struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsCreateForOrgReq
      builds requests for \"projects/create-for-org\"\n+\n+Create an organization
      project.\n+\n+  POST /orgs/{org}/projects\n+\n+https://developer.github.com/v3/projects/#create-an-organization-project\n+*/\n+type
      ProjectsCreateForOrgReq struct {\n+\tOrg         string\n+\tRequestBody ProjectsCreateForOrgReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsCreateForOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/projects\", r.Org)\n+}\n+\n+func
      (r ProjectsCreateForOrgReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r ProjectsCreateForOrgReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsCreateForOrgReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsCreateForOrgReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsCreateForOrgReqBody is a request body
      for projects/create-for-org\n+\n+API documentation: https://developer.github.com/v3/projects/#create-an-organization-project\n+*/\n+type
      ProjectsCreateForOrgReqBody struct {\n+\n+\t// The description of the project.\n+\tBody
      *string `json:\"body,omitempty\"`\n+\n+\t// The name of the project.\n+\tName
      *string `json:\"name\"`\n+}\n+\n+/*\n+ProjectsCreateForOrgResponseBody201 is
      a response body for projects/create-for-org\n+\n+API documentation: https://developer.github.com/v3/projects/#create-an-organization-project\n+*/\n+type
      ProjectsCreateForOrgResponseBody201 struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsGetColumnReq
      builds requests for \"projects/get-column\"\n+\n+Get a project column.\n+\n+  GET
      /projects/columns/{column_id}\n+\n+https://developer.github.com/v3/projects/columns/#get-a-project-column\n+*/\n+type
      ProjectsGetColumnReq struct {\n+\tColumnId int64\n+\n+\t/*\n+\tThe Projects
      API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsGetColumnReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/%v\", r.ColumnId)\n+}\n+\n+func
      (r ProjectsGetColumnReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ProjectsGetColumnReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsGetColumnReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsGetColumnReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsUpdateColumnReq builds requests for \"projects/update-column\"\n+\n+Update
      a project column.\n+\n+  PATCH /projects/columns/{column_id}\n+\n+https://developer.github.com/v3/projects/columns/#update-a-project-column\n+*/\n+type
      ProjectsUpdateColumnReq struct {\n+\tColumnId    int64\n+\tRequestBody ProjectsUpdateColumnReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsUpdateColumnReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/%v\", r.ColumnId)\n+}\n+\n+func
      (r ProjectsUpdateColumnReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r ProjectsUpdateColumnReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsUpdateColumnReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsUpdateColumnReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsUpdateColumnReqBody is a request body
      for projects/update-column\n+\n+API documentation: https://developer.github.com/v3/projects/columns/#update-a-project-column\n+*/\n+type
      ProjectsUpdateColumnReqBody struct {\n+\n+\t// The new name of the column.\n+\tName
      *string `json:\"name\"`\n+}\n+\n+/*\n+ProjectsDeleteColumnReq builds requests
      for \"projects/delete-column\"\n+\n+Delete a project column.\n+\n+  DELETE /projects/columns/{column_id}\n+\n+https://developer.github.com/v3/projects/columns/#delete-a-project-column\n+*/\n+type
      ProjectsDeleteColumnReq struct {\n+\tColumnId int64\n+\n+\t/*\n+\tThe Projects
      API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsDeleteColumnReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/%v\", r.ColumnId)\n+}\n+\n+func
      (r ProjectsDeleteColumnReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r ProjectsDeleteColumnReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsDeleteColumnReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsDeleteColumnReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsGetCardReq builds requests for \"projects/get-card\"\n+\n+Get
      a project card.\n+\n+  GET /projects/columns/cards/{card_id}\n+\n+https://developer.github.com/v3/projects/cards/#get-a-project-card\n+*/\n+type
      ProjectsGetCardReq struct {\n+\tCardId int64\n+\n+\t/*\n+\tThe Projects API
      is currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsGetCardReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/projects/columns/cards/%v\", r.CardId)\n+}\n+\n+func
      (r ProjectsGetCardReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r
      ProjectsGetCardReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsGetCardReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsGetCardReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsUpdateCardReq builds requests for \"projects/update-card\"\n+\n+Update
      a project card.\n+\n+  PATCH /projects/columns/cards/{card_id}\n+\n+https://developer.github.com/v3/projects/cards/#update-a-project-card\n+*/\n+type
      ProjectsUpdateCardReq struct {\n+\tCardId      int64\n+\tRequestBody ProjectsUpdateCardReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsUpdateCardReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/cards/%v\", r.CardId)\n+}\n+\n+func
      (r ProjectsUpdateCardReq) method() string {\n+\treturn \"PATCH\"\n+}\n+\n+func
      (r ProjectsUpdateCardReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsUpdateCardReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsUpdateCardReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsUpdateCardReqBody is a request body
      for projects/update-card\n+\n+API documentation: https://developer.github.com/v3/projects/cards/#update-a-project-card\n+*/\n+type
      ProjectsUpdateCardReqBody struct {\n+\n+\t/*\n+\t   Use `true` to archive a
      project card. Specify `false` if you need to restore a\n+\t   previously archived
      project card.\n+\t*/\n+\tArchived *bool `json:\"archived,omitempty\"`\n+\n+\t/*\n+\t   The
      card''s note content. Only valid for cards without another type of content,\n+\t   so
      this cannot be specified if the card already has a `content_id` and\n+\t   `content_type`.\n+\t*/\n+\tNote
      *string `json:\"note,omitempty\"`\n+}\n+\n+/*\n+ProjectsDeleteCardReq builds
      requests for \"projects/delete-card\"\n+\n+Delete a project card.\n+\n+  DELETE
      /projects/columns/cards/{card_id}\n+\n+https://developer.github.com/v3/projects/cards/#delete-a-project-card\n+*/\n+type
      ProjectsDeleteCardReq struct {\n+\tCardId int64\n+\n+\t/*\n+\tThe Projects API
      is currently available for developers to preview. During the\n+\tpreview period,
      the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsDeleteCardReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/cards/%v\", r.CardId)\n+}\n+\n+func
      (r ProjectsDeleteCardReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r ProjectsDeleteCardReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsDeleteCardReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsDeleteCardReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsReviewUserPermissionLevelReq builds requests
      for \"projects/review-user-permission-level\"\n+\n+Review a user''s permission
      level.\n+\n+  GET /projects/{project_id}/collaborators/{username}/permission\n+\n+https://developer.github.com/v3/projects/collaborators/#review-a-users-permission-level\n+*/\n+type
      ProjectsReviewUserPermissionLevelReq struct {\n+\tProjectId int64\n+\tUsername  string\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsReviewUserPermissionLevelReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/%v/collaborators/%v/permission\",
      r.ProjectId, r.Username)\n+}\n+\n+func (r ProjectsReviewUserPermissionLevelReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ProjectsReviewUserPermissionLevelReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ProjectsReviewUserPermissionLevelReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsReviewUserPermissionLevelReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsReviewUserPermissionLevelResponseBody200 is
      a response body for projects/review-user-permission-level\n+\n+API documentation:
      https://developer.github.com/v3/projects/collaborators/#review-a-users-permission-level\n+*/\n+type
      ProjectsReviewUserPermissionLevelResponseBody200 struct {\n+\tPermission string
      `json:\"permission,omitempty\"`\n+\tUser       struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ProjectsListColumnsReq builds requests
      for \"projects/list-columns\"\n+\n+List project columns.\n+\n+  GET /projects/{project_id}/columns\n+\n+https://developer.github.com/v3/projects/columns/#list-project-columns\n+*/\n+type
      ProjectsListColumnsReq struct {\n+\tProjectId int64\n+\n+\t// Results per page
      (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+\n+\t/*\n+\tThe Projects API is currently available for developers
      to preview. During the\n+\tpreview period, the API may change without advance
      notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsListColumnsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/%v/columns\", r.ProjectId)\n+}\n+\n+func
      (r ProjectsListColumnsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ProjectsListColumnsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ProjectsListColumnsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\":
      r.InertiaPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ProjectsListColumnsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ProjectsListColumnsResponseBody200
      is a response body for projects/list-columns\n+\n+API documentation: https://developer.github.com/v3/projects/columns/#list-project-columns\n+*/\n+type
      ProjectsListColumnsResponseBody200 []struct {\n+\tCardsUrl   string `json:\"cards_url,omitempty\"`\n+\tCreatedAt  string
      `json:\"created_at,omitempty\"`\n+\tId         int64  `json:\"id,omitempty\"`\n+\tName       string
      `json:\"name,omitempty\"`\n+\tNodeId     string `json:\"node_id,omitempty\"`\n+\tProjectUrl
      string `json:\"project_url,omitempty\"`\n+\tUpdatedAt  string `json:\"updated_at,omitempty\"`\n+\tUrl        string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsCreateColumnReq builds requests
      for \"projects/create-column\"\n+\n+Create a project column.\n+\n+  POST /projects/{project_id}/columns\n+\n+https://developer.github.com/v3/projects/columns/#create-a-project-column\n+*/\n+type
      ProjectsCreateColumnReq struct {\n+\tProjectId   int64\n+\tRequestBody ProjectsCreateColumnReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsCreateColumnReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/%v/columns\", r.ProjectId)\n+}\n+\n+func
      (r ProjectsCreateColumnReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r ProjectsCreateColumnReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsCreateColumnReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsCreateColumnReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsCreateColumnReqBody is a request body
      for projects/create-column\n+\n+API documentation: https://developer.github.com/v3/projects/columns/#create-a-project-column\n+*/\n+type
      ProjectsCreateColumnReqBody struct {\n+\n+\t// The name of the column.\n+\tName
      *string `json:\"name\"`\n+}\n+\n+/*\n+ProjectsMoveCardReq builds requests for
      \"projects/move-card\"\n+\n+Move a project card.\n+\n+  POST /projects/columns/cards/{card_id}/moves\n+\n+https://developer.github.com/v3/projects/cards/#move-a-project-card\n+*/\n+type
      ProjectsMoveCardReq struct {\n+\tCardId      int64\n+\tRequestBody ProjectsMoveCardReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsMoveCardReq) urlPath()
      string {\n+\treturn fmt.Sprintf(\"/projects/columns/cards/%v/moves\", r.CardId)\n+}\n+\n+func
      (r ProjectsMoveCardReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r ProjectsMoveCardReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsMoveCardReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsMoveCardReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsMoveCardReqBody is a request body
      for projects/move-card\n+\n+API documentation: https://developer.github.com/v3/projects/cards/#move-a-project-card\n+*/\n+type
      ProjectsMoveCardReqBody struct {\n+\n+\t// The `id` value of a column in the
      same project.\n+\tColumnId *int64 `json:\"column_id,omitempty\"`\n+\n+\t/*\n+\t   Can
      be one of `top`, `bottom`, or `after:<card_id>`, where `<card_id>` is the\n+\t   `id`
      value of a card in the same column, or in the new column specified by\n+\t   `column_id`.\n+\t*/\n+\tPosition
      *string `json:\"position\"`\n+}\n+\n+/*\n+ProjectsListCollaboratorsReq builds
      requests for \"projects/list-collaborators\"\n+\n+List collaborators.\n+\n+  GET
      /projects/{project_id}/collaborators\n+\n+https://developer.github.com/v3/projects/collaborators/#list-collaborators\n+*/\n+type
      ProjectsListCollaboratorsReq struct {\n+\tProjectId int64\n+\n+\t/*\n+\tFilters
      the collaborators by their affiliation. Can be one of:\n+\t\\* `outside`: Outside
      collaborators of a project that are not a member of the\n+\tproject''s organization.\n+\t\\*
      `direct`: Collaborators with permissions to a project, regardless of\n+\torganization
      membership status.\n+\t\\* `all`: All collaborators the authenticated user can
      see.\n+\t*/\n+\tAffiliation *string\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsListCollaboratorsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/%v/collaborators\", r.ProjectId)\n+}\n+\n+func
      (r ProjectsListCollaboratorsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ProjectsListCollaboratorsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.Affiliation != nil {\n+\t\tquery.Set(\"affiliation\", *r.Affiliation)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ProjectsListCollaboratorsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\":
      r.InertiaPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ProjectsListCollaboratorsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ProjectsListCollaboratorsResponseBody200
      is a response body for projects/list-collaborators\n+\n+API documentation: https://developer.github.com/v3/projects/collaborators/#list-collaborators\n+*/\n+type
      ProjectsListCollaboratorsResponseBody200 []struct {\n+\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\tId                int64  `json:\"id,omitempty\"`\n+\tLogin             string
      `json:\"login,omitempty\"`\n+\tNodeId            string `json:\"node_id,omitempty\"`\n+\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\tType              string
      `json:\"type,omitempty\"`\n+\tUrl               string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsListForRepoReq
      builds requests for \"projects/list-for-repo\"\n+\n+List repository projects.\n+\n+  GET
      /repos/{owner}/{repo}/projects\n+\n+https://developer.github.com/v3/projects/#list-repository-projects\n+*/\n+type
      ProjectsListForRepoReq struct {\n+\tOwner string\n+\tRepo  string\n+\n+\t/*\n+\tIndicates
      the state of the projects to return. Can be either `open`, `closed`,\n+\tor
      `all`.\n+\t*/\n+\tState *string\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsListForRepoReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/projects\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ProjectsListForRepoReq) method() string {\n+\treturn
      \"GET\"\n+}\n+\n+func (r ProjectsListForRepoReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\tif r.State != nil {\n+\t\tquery.Set(\"state\", *r.State)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ProjectsListForRepoReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\":
      r.InertiaPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ProjectsListForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ProjectsListForRepoResponseBody200
      is a response body for projects/list-for-repo\n+\n+API documentation: https://developer.github.com/v3/projects/#list-repository-projects\n+*/\n+type
      ProjectsListForRepoResponseBody200 []struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsCreateForRepoReq
      builds requests for \"projects/create-for-repo\"\n+\n+Create a repository project.\n+\n+  POST
      /repos/{owner}/{repo}/projects\n+\n+https://developer.github.com/v3/projects/#create-a-repository-project\n+*/\n+type
      ProjectsCreateForRepoReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tRequestBody
      ProjectsCreateForRepoReqBody\n+\n+\t/*\n+\tThe Projects API is currently available
      for developers to preview. During the\n+\tpreview period, the API may change
      without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsCreateForRepoReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/projects\", r.Owner,
      r.Repo)\n+}\n+\n+func (r ProjectsCreateForRepoReq) method() string {\n+\treturn
      \"POST\"\n+}\n+\n+func (r ProjectsCreateForRepoReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r ProjectsCreateForRepoReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ProjectsCreateForRepoReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsCreateForRepoReqBody
      is a request body for projects/create-for-repo\n+\n+API documentation: https://developer.github.com/v3/projects/#create-a-repository-project\n+*/\n+type
      ProjectsCreateForRepoReqBody struct {\n+\n+\t// The description of the project.\n+\tBody
      *string `json:\"body,omitempty\"`\n+\n+\t// The name of the project.\n+\tName
      *string `json:\"name\"`\n+}\n+\n+/*\n+ProjectsCreateForRepoResponseBody201 is
      a response body for projects/create-for-repo\n+\n+API documentation: https://developer.github.com/v3/projects/#create-a-repository-project\n+*/\n+type
      ProjectsCreateForRepoResponseBody201 struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsCreateCardReq
      builds requests for \"projects/create-card\"\n+\n+Create a project card.\n+\n+  POST
      /projects/columns/{column_id}/cards\n+\n+https://developer.github.com/v3/projects/cards/#create-a-project-card\n+*/\n+type
      ProjectsCreateCardReq struct {\n+\tColumnId    int64\n+\tRequestBody ProjectsCreateCardReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsCreateCardReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/%v/cards\", r.ColumnId)\n+}\n+\n+func
      (r ProjectsCreateCardReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r ProjectsCreateCardReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsCreateCardReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsCreateCardReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsCreateCardReqBody is a request body
      for projects/create-card\n+\n+API documentation: https://developer.github.com/v3/projects/cards/#create-a-project-card\n+*/\n+type
      ProjectsCreateCardReqBody struct {\n+\n+\t/*\n+\t   The issue or pull request
      id you want to associate with this card. You can use\n+\t   the [List repository\n+\t   issues](https://developer.github.com/v3/issues/#list-repository-issues)
      and\n+\t   [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\n+\t   endpoints
      to find this id.\n+\t   **Note:** Depending on whether you use the issue id
      or pull request id, you will\n+\t   need to specify `Issue` or `PullRequest`
      as the `content_type`.\n+\t*/\n+\tContentId *int64 `json:\"content_id,omitempty\"`\n+\n+\t/*\n+\t   **Required
      if you provide `content_id`**. The type of content you want to\n+\t   associate
      with this card. Use `Issue` when `content_id` is an issue id and use\n+\t   `PullRequest`
      when `content_id` is a pull request id.\n+\t*/\n+\tContentType *string `json:\"content_type,omitempty\"`\n+\n+\t/*\n+\t   The
      card''s note content. Only valid for cards without another type of content,\n+\t   so
      you must omit when specifying `content_id` and `content_type`.\n+\t*/\n+\tNote
      *string `json:\"note,omitempty\"`\n+}\n+\n+/*\n+ProjectsCreateCardResponseBody201
      is a response body for projects/create-card\n+\n+API documentation: https://developer.github.com/v3/projects/cards/#create-a-project-card\n+*/\n+type
      ProjectsCreateCardResponseBody201 struct {\n+\tArchived   bool   `json:\"archived,omitempty\"`\n+\tColumnUrl  string
      `json:\"column_url,omitempty\"`\n+\tContentUrl string `json:\"content_url,omitempty\"`\n+\tCreatedAt  string
      `json:\"created_at,omitempty\"`\n+\tCreator    struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tId         int64  `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tNote       string `json:\"note,omitempty\"`\n+\tProjectUrl
      string `json:\"project_url,omitempty\"`\n+\tUpdatedAt  string `json:\"updated_at,omitempty\"`\n+\tUrl        string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsListCardsReq builds requests
      for \"projects/list-cards\"\n+\n+List project cards.\n+\n+  GET /projects/columns/{column_id}/cards\n+\n+https://developer.github.com/v3/projects/cards/#list-project-cards\n+*/\n+type
      ProjectsListCardsReq struct {\n+\tColumnId int64\n+\n+\t/*\n+\tFilters the project
      cards that are returned by the card''s state. Can be one of\n+\t`all`,`archived`,
      or `not_archived`.\n+\t*/\n+\tArchivedState *string\n+\n+\t// Results per page
      (max 100)\n+\tPerPage *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage
      *int64\n+\n+\t/*\n+\tThe Projects API is currently available for developers
      to preview. During the\n+\tpreview period, the API may change without advance
      notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsListCardsReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/%v/cards\", r.ColumnId)\n+}\n+\n+func
      (r ProjectsListCardsReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ProjectsListCardsReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.ArchivedState != nil {\n+\t\tquery.Set(\"archived_state\", *r.ArchivedState)\n+\t}\n+\tif
      r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ProjectsListCardsReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\":
      r.InertiaPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ProjectsListCardsReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ProjectsListCardsResponseBody200
      is a response body for projects/list-cards\n+\n+API documentation: https://developer.github.com/v3/projects/cards/#list-project-cards\n+*/\n+type
      ProjectsListCardsResponseBody200 []struct {\n+\tArchived   bool   `json:\"archived,omitempty\"`\n+\tColumnUrl  string
      `json:\"column_url,omitempty\"`\n+\tContentUrl string `json:\"content_url,omitempty\"`\n+\tCreatedAt  string
      `json:\"created_at,omitempty\"`\n+\tCreator    struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tId         int64  `json:\"id,omitempty\"`\n+\tNodeId     string
      `json:\"node_id,omitempty\"`\n+\tNote       string `json:\"note,omitempty\"`\n+\tProjectUrl
      string `json:\"project_url,omitempty\"`\n+\tUpdatedAt  string `json:\"updated_at,omitempty\"`\n+\tUrl        string
      `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsCreateForAuthenticatedUserReq
      builds requests for \"projects/create-for-authenticated-user\"\n+\n+Create a
      user project.\n+\n+  POST /user/projects\n+\n+https://developer.github.com/v3/projects/#create-a-user-project\n+*/\n+type
      ProjectsCreateForAuthenticatedUserReq struct {\n+\tRequestBody ProjectsCreateForAuthenticatedUserReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsCreateForAuthenticatedUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/user/projects\")\n+}\n+\n+func
      (r ProjectsCreateForAuthenticatedUserReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r ProjectsCreateForAuthenticatedUserReq) urlQuery() url.Values {\n+\tquery
      := url.Values{}\n+\treturn query\n+}\n+\n+func (r ProjectsCreateForAuthenticatedUserReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ProjectsCreateForAuthenticatedUserReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsCreateForAuthenticatedUserReqBody
      is a request body for projects/create-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/projects/#create-a-user-project\n+*/\n+type
      ProjectsCreateForAuthenticatedUserReqBody struct {\n+\n+\t// The description
      of the project.\n+\tBody *string `json:\"body,omitempty\"`\n+\n+\t// The name
      of the project.\n+\tName *string `json:\"name\"`\n+}\n+\n+/*\n+ProjectsCreateForAuthenticatedUserResponseBody201
      is a response body for projects/create-for-authenticated-user\n+\n+API documentation:
      https://developer.github.com/v3/projects/#create-a-user-project\n+*/\n+type
      ProjectsCreateForAuthenticatedUserResponseBody201 struct {\n+\tBody       string
      `json:\"body,omitempty\"`\n+\tColumnsUrl string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string
      `json:\"created_at,omitempty\"`\n+\tCreator    struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsRemoveCollaboratorReq
      builds requests for \"projects/remove-collaborator\"\n+\n+Remove user as a collaborator.\n+\n+  DELETE
      /projects/{project_id}/collaborators/{username}\n+\n+https://developer.github.com/v3/projects/collaborators/#remove-user-as-a-collaborator\n+*/\n+type
      ProjectsRemoveCollaboratorReq struct {\n+\tProjectId int64\n+\tUsername  string\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsRemoveCollaboratorReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/%v/collaborators/%v\",
      r.ProjectId, r.Username)\n+}\n+\n+func (r ProjectsRemoveCollaboratorReq) method()
      string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ProjectsRemoveCollaboratorReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ProjectsRemoveCollaboratorReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ProjectsRemoveCollaboratorReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ProjectsAddCollaboratorReq
      builds requests for \"projects/add-collaborator\"\n+\n+Add user as a collaborator.\n+\n+  PUT
      /projects/{project_id}/collaborators/{username}\n+\n+https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator\n+*/\n+type
      ProjectsAddCollaboratorReq struct {\n+\tProjectId   int64\n+\tUsername    string\n+\tRequestBody
      ProjectsAddCollaboratorReqBody\n+\n+\t/*\n+\tThe Projects API is currently available
      for developers to preview. During the\n+\tpreview period, the API may change
      without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsAddCollaboratorReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/%v/collaborators/%v\",
      r.ProjectId, r.Username)\n+}\n+\n+func (r ProjectsAddCollaboratorReq) method()
      string {\n+\treturn \"PUT\"\n+}\n+\n+func (r ProjectsAddCollaboratorReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ProjectsAddCollaboratorReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ProjectsAddCollaboratorReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsAddCollaboratorReqBody
      is a request body for projects/add-collaborator\n+\n+API documentation: https://developer.github.com/v3/projects/collaborators/#add-user-as-a-collaborator\n+*/\n+type
      ProjectsAddCollaboratorReqBody struct {\n+\n+\t/*\n+\t   The permission to grant
      the collaborator. Note that, if you choose not to pass\n+\t   any parameters,
      you''ll need to set `Content-Length` to zero when calling out to\n+\t   this
      endpoint. For more information, see \"[HTTP\n+\t   verbs](https://developer.github.com/v3/#http-verbs).\"
      Can be one of:\n+\t   \\* `read` - can read, but not write to or administer
      this project.\n+\t   \\* `write` - can read and write, but not administer this
      project.\n+\t   \\* `admin` - can read, write and administer this project.\n+\t*/\n+\tPermission
      *string `json:\"permission,omitempty\"`\n+}\n+\n+/*\n+ProjectsListForUserReq
      builds requests for \"projects/list-for-user\"\n+\n+List user projects.\n+\n+  GET
      /users/{username}/projects\n+\n+https://developer.github.com/v3/projects/#list-user-projects\n+*/\n+type
      ProjectsListForUserReq struct {\n+\tUsername string\n+\n+\t/*\n+\tIndicates
      the state of the projects to return. Can be either `open`, `closed`,\n+\tor
      `all`.\n+\t*/\n+\tState *string\n+\n+\t// Results per page (max 100)\n+\tPerPage
      *int64\n+\n+\t// Page number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsListForUserReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/users/%v/projects\", r.Username)\n+}\n+\n+func
      (r ProjectsListForUserReq) method() string {\n+\treturn \"GET\"\n+}\n+\n+func
      (r ProjectsListForUserReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif
      r.State != nil {\n+\t\tquery.Set(\"state\", *r.State)\n+\t}\n+\tif r.PerPage
      != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage, 10))\n+\t}\n+\tif
      r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page, 10))\n+\t}\n+\treturn
      query\n+}\n+\n+func (r ProjectsListForUserReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsListForUserReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ProjectsListForUserResponseBody200 is a response body
      for projects/list-for-user\n+\n+API documentation: https://developer.github.com/v3/projects/#list-user-projects\n+*/\n+type
      ProjectsListForUserResponseBody200 []struct {\n+\tBody       string `json:\"body,omitempty\"`\n+\tColumnsUrl
      string `json:\"columns_url,omitempty\"`\n+\tCreatedAt  string `json:\"created_at,omitempty\"`\n+\tCreator    struct
      {\n+\t\tAvatarUrl         string `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string
      `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string
      `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string
      `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"creator,omitempty\"`\n+\tHtmlUrl   string `json:\"html_url,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tName      string
      `json:\"name,omitempty\"`\n+\tNodeId    string `json:\"node_id,omitempty\"`\n+\tNumber    int64  `json:\"number,omitempty\"`\n+\tOwnerUrl  string
      `json:\"owner_url,omitempty\"`\n+\tState     string `json:\"state,omitempty\"`\n+\tUpdatedAt
      string `json:\"updated_at,omitempty\"`\n+\tUrl       string `json:\"url,omitempty\"`\n+}\n+\n+/*\n+ProjectsMoveColumnReq
      builds requests for \"projects/move-column\"\n+\n+Move a project column.\n+\n+  POST
      /projects/columns/{column_id}/moves\n+\n+https://developer.github.com/v3/projects/columns/#move-a-project-column\n+*/\n+type
      ProjectsMoveColumnReq struct {\n+\tColumnId    int64\n+\tRequestBody ProjectsMoveColumnReqBody\n+\n+\t/*\n+\tThe
      Projects API is currently available for developers to preview. During the\n+\tpreview
      period, the API may change without advance notice. Please see the [blog\n+\tpost](https://developer.github.com/changes/2016-10-27-changes-to-projects-api)\n+\tfor
      full details. To access the API during the preview period, you must set this\n+\tto
      true.\n+\t*/\n+\tInertiaPreview bool\n+}\n+\n+func (r ProjectsMoveColumnReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/projects/columns/%v/moves\", r.ColumnId)\n+}\n+\n+func
      (r ProjectsMoveColumnReq) method() string {\n+\treturn \"POST\"\n+}\n+\n+func
      (r ProjectsMoveColumnReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ProjectsMoveColumnReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"inertia\": r.InertiaPreview}\n+\treturn
      requestHeaders(headerVals, previewVals)\n+}\n+\n+func (r ProjectsMoveColumnReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      r.RequestBody, opt)\n+}\n+\n+/*\n+ProjectsMoveColumnReqBody is a request body
      for projects/move-column\n+\n+API documentation: https://developer.github.com/v3/projects/columns/#move-a-project-column\n+*/\n+type
      ProjectsMoveColumnReqBody struct {\n+\n+\t/*\n+\t   Can be one of `first`, `last`,
      or `after:<column_id>`, where `<column_id>` is\n+\t   the `id` value of a column
      in the same project.\n+\t*/\n+\tPosition *string `json:\"position\"`\n+}"},{"sha":"464d471c4d640115b20668493931eb391396dcf6","filename":"zz_pulls_gen.go","status":"added","additions":4982,"deletions":0,"changes":4982,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_pulls_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_pulls_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_pulls_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"b3b6307723d05888a04bac4706cdcaa02a29a6e2","filename":"zz_rate_limit_gen.go","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_rate_limit_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_rate_limit_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_rate_limit_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,79 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+)\n+\n+/*\n+RateLimitGetReq
      builds requests for \"rate-limit/get\"\n+\n+Get your current rate limit status.\n+\n+  GET
      /rate_limit\n+\n+https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status\n+*/\n+type
      RateLimitGetReq struct{}\n+\n+func (r RateLimitGetReq) urlPath() string {\n+\treturn
      fmt.Sprintf(\"/rate_limit\")\n+}\n+\n+func (r RateLimitGetReq) method() string
      {\n+\treturn \"GET\"\n+}\n+\n+func (r RateLimitGetReq) urlQuery() url.Values
      {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r RateLimitGetReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r RateLimitGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request,
      error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(),
      r.header(), nil, opt)\n+}\n+\n+/*\n+RateLimitGetResponseBody200 is a response
      body for rate-limit/get\n+\n+API documentation: https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status\n+*/\n+type
      RateLimitGetResponseBody200 struct {\n+\tRate struct {\n+\t\tLimit     int64
      `json:\"limit,omitempty\"`\n+\t\tRemaining int64 `json:\"remaining,omitempty\"`\n+\t\tReset     int64
      `json:\"reset,omitempty\"`\n+\t} `json:\"rate,omitempty\"`\n+\tResources struct
      {\n+\t\tCore struct {\n+\t\t\tLimit     int64 `json:\"limit,omitempty\"`\n+\t\t\tRemaining
      int64 `json:\"remaining,omitempty\"`\n+\t\t\tReset     int64 `json:\"reset,omitempty\"`\n+\t\t}
      `json:\"core,omitempty\"`\n+\t\tGraphql struct {\n+\t\t\tLimit     int64 `json:\"limit,omitempty\"`\n+\t\t\tRemaining
      int64 `json:\"remaining,omitempty\"`\n+\t\t\tReset     int64 `json:\"reset,omitempty\"`\n+\t\t}
      `json:\"graphql,omitempty\"`\n+\t\tIntegrationManifest struct {\n+\t\t\tLimit     int64
      `json:\"limit,omitempty\"`\n+\t\t\tRemaining int64 `json:\"remaining,omitempty\"`\n+\t\t\tReset     int64
      `json:\"reset,omitempty\"`\n+\t\t} `json:\"integration_manifest,omitempty\"`\n+\t\tSearch
      struct {\n+\t\t\tLimit     int64 `json:\"limit,omitempty\"`\n+\t\t\tRemaining
      int64 `json:\"remaining,omitempty\"`\n+\t\t\tReset     int64 `json:\"reset,omitempty\"`\n+\t\t}
      `json:\"search,omitempty\"`\n+\t} `json:\"resources,omitempty\"`\n+}"},{"sha":"2bfec7228446e2326e8716c38df8102cfa28e8ac","filename":"zz_reactions_gen.go","status":"added","additions":1905,"deletions":0,"changes":1905,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_reactions_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_reactions_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_reactions_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a","patch":"@@
      -0,0 +1,1905 @@\n+// Code generated by octo-go; DO NOT EDIT.\n+\n+package octo\n+\n+import
      (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"net/url\"\n+\t\"strconv\"\n+)\n+\n+/*\n+ReactionsListForTeamDiscussionCommentInOrgReq
      builds requests for \"reactions/list-for-team-discussion-comment-in-org\"\n+\n+List
      reactions for a team discussion comment.\n+\n+  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment\n+*/\n+type
      ReactionsListForTeamDiscussionCommentInOrgReq struct {\n+\tOrg              string\n+\tTeamSlug         string\n+\tDiscussionNumber
      int64\n+\tCommentNumber    int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to a team discussion comment.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentInOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions\",
      r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber)\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentInOrgReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentInOrgReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentInOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentInOrgReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionCommentInOrgResponseBody200
      is a response body for reactions/list-for-team-discussion-comment-in-org\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment\n+*/\n+type
      ReactionsListForTeamDiscussionCommentInOrgResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionCommentInOrgReq
      builds requests for \"reactions/create-for-team-discussion-comment-in-org\"\n+\n+Create
      reaction for a team discussion comment.\n+\n+  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment\n+*/\n+type
      ReactionsCreateForTeamDiscussionCommentInOrgReq struct {\n+\tOrg              string\n+\tTeamSlug         string\n+\tDiscussionNumber
      int64\n+\tCommentNumber    int64\n+\tRequestBody      ReactionsCreateForTeamDiscussionCommentInOrgReqBody\n+\n+\t/*\n+\tAPIs
      for managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionCommentInOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions\",
      r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber)\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionCommentInOrgReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionCommentInOrgReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionCommentInOrgReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionCommentInOrgReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionCommentInOrgReqBody
      is a request body for reactions/create-for-team-discussion-comment-in-org\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment\n+*/\n+type
      ReactionsCreateForTeamDiscussionCommentInOrgReqBody struct {\n+\n+\t/*\n+\t   The
      [reaction type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to
      add to the team discussion comment.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionCommentInOrgResponseBody201
      is a response body for reactions/create-for-team-discussion-comment-in-org\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment\n+*/\n+type
      ReactionsCreateForTeamDiscussionCommentInOrgResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsDeleteForTeamDiscussionReq
      builds requests for \"reactions/delete-for-team-discussion\"\n+\n+Delete team
      discussion reaction.\n+\n+  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-team-discussion-reaction\n+*/\n+type
      ReactionsDeleteForTeamDiscussionReq struct {\n+\tOrg              string\n+\tTeamSlug         string\n+\tDiscussionNumber
      int64\n+\tReactionId       int64\n+\n+\t/*\n+\tAPIs for managing reactions are
      currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/teams/%v/discussions/%v/reactions/%v\",
      r.Org, r.TeamSlug, r.DiscussionNumber, r.ReactionId)\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsDeleteForTeamDiscussionReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsDeleteForTeamDiscussionReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForPullRequestReviewCommentReq
      builds requests for \"reactions/list-for-pull-request-review-comment\"\n+\n+List
      reactions for a pull request review comment.\n+\n+  GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment\n+*/\n+type
      ReactionsListForPullRequestReviewCommentReq struct {\n+\tOwner     string\n+\tRepo      string\n+\tCommentId
      int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to a pull request review comment.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForPullRequestReviewCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/pulls/comments/%v/reactions\",
      r.Owner, r.Repo, r.CommentId)\n+}\n+\n+func (r ReactionsListForPullRequestReviewCommentReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForPullRequestReviewCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForPullRequestReviewCommentReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForPullRequestReviewCommentReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForPullRequestReviewCommentResponseBody200
      is a response body for reactions/list-for-pull-request-review-comment\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment\n+*/\n+type
      ReactionsListForPullRequestReviewCommentResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForPullRequestReviewCommentReq
      builds requests for \"reactions/create-for-pull-request-review-comment\"\n+\n+Create
      reaction for a pull request review comment.\n+\n+  POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment\n+*/\n+type
      ReactionsCreateForPullRequestReviewCommentReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tCommentId   int64\n+\tRequestBody
      ReactionsCreateForPullRequestReviewCommentReqBody\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForPullRequestReviewCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/pulls/comments/%v/reactions\",
      r.Owner, r.Repo, r.CommentId)\n+}\n+\n+func (r ReactionsCreateForPullRequestReviewCommentReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForPullRequestReviewCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForPullRequestReviewCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForPullRequestReviewCommentReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForPullRequestReviewCommentReqBody
      is a request body for reactions/create-for-pull-request-review-comment\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment\n+*/\n+type
      ReactionsCreateForPullRequestReviewCommentReqBody struct {\n+\n+\t/*\n+\t   The
      [reaction type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to
      add to the pull request review comment.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForPullRequestReviewCommentResponseBody201
      is a response body for reactions/create-for-pull-request-review-comment\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-pull-request-review-comment\n+*/\n+type
      ReactionsCreateForPullRequestReviewCommentResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionLegacyReq
      builds requests for \"reactions/list-for-team-discussion-legacy\"\n+\n+List
      reactions for a team discussion (Legacy).\n+\n+  GET /teams/{team_id}/discussions/{discussion_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy\n+*/\n+type
      ReactionsListForTeamDiscussionLegacyReq struct {\n+\tTeamId           int64\n+\tDiscussionNumber
      int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to a team discussion.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForTeamDiscussionLegacyReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/teams/%v/discussions/%v/reactions\",
      r.TeamId, r.DiscussionNumber)\n+}\n+\n+func (r ReactionsListForTeamDiscussionLegacyReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForTeamDiscussionLegacyReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForTeamDiscussionLegacyReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForTeamDiscussionLegacyReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionLegacyResponseBody200
      is a response body for reactions/list-for-team-discussion-legacy\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-legacy\n+*/\n+type
      ReactionsListForTeamDiscussionLegacyResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionLegacyReq
      builds requests for \"reactions/create-for-team-discussion-legacy\"\n+\n+Create
      reaction for a team discussion (Legacy).\n+\n+  POST /teams/{team_id}/discussions/{discussion_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy\n+*/\n+type
      ReactionsCreateForTeamDiscussionLegacyReq struct {\n+\tTeamId           int64\n+\tDiscussionNumber
      int64\n+\tRequestBody      ReactionsCreateForTeamDiscussionLegacyReqBody\n+\n+\t/*\n+\tAPIs
      for managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionLegacyReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/teams/%v/discussions/%v/reactions\",
      r.TeamId, r.DiscussionNumber)\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionLegacyReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionLegacyReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionLegacyReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionLegacyReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionLegacyReqBody
      is a request body for reactions/create-for-team-discussion-legacy\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy\n+*/\n+type
      ReactionsCreateForTeamDiscussionLegacyReqBody struct {\n+\n+\t/*\n+\t   The
      [reaction type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to
      add to the team discussion.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionLegacyResponseBody201
      is a response body for reactions/create-for-team-discussion-legacy\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-legacy\n+*/\n+type
      ReactionsCreateForTeamDiscussionLegacyResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsListForIssueCommentReq builds
      requests for \"reactions/list-for-issue-comment\"\n+\n+List reactions for an
      issue comment.\n+\n+  GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment\n+*/\n+type
      ReactionsListForIssueCommentReq struct {\n+\tOwner     string\n+\tRepo      string\n+\tCommentId
      int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to an issue comment.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForIssueCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/issues/comments/%v/reactions\",
      r.Owner, r.Repo, r.CommentId)\n+}\n+\n+func (r ReactionsListForIssueCommentReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForIssueCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForIssueCommentReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForIssueCommentReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForIssueCommentResponseBody200
      is a response body for reactions/list-for-issue-comment\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment\n+*/\n+type
      ReactionsListForIssueCommentResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForIssueCommentReq builds
      requests for \"reactions/create-for-issue-comment\"\n+\n+Create reaction for
      an issue comment.\n+\n+  POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment\n+*/\n+type
      ReactionsCreateForIssueCommentReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tCommentId   int64\n+\tRequestBody
      ReactionsCreateForIssueCommentReqBody\n+\n+\t/*\n+\tAPIs for managing reactions
      are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForIssueCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/issues/comments/%v/reactions\",
      r.Owner, r.Repo, r.CommentId)\n+}\n+\n+func (r ReactionsCreateForIssueCommentReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForIssueCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForIssueCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForIssueCommentReqBody
      is a request body for reactions/create-for-issue-comment\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment\n+*/\n+type
      ReactionsCreateForIssueCommentReqBody struct {\n+\n+\t/*\n+\t   The [reaction
      type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to add
      to the issue comment.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForIssueCommentResponseBody201
      is a response body for reactions/create-for-issue-comment\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#create-reaction-for-an-issue-comment\n+*/\n+type
      ReactionsCreateForIssueCommentResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsDeleteForCommitCommentReq builds
      requests for \"reactions/delete-for-commit-comment\"\n+\n+Delete a commit comment
      reaction.\n+\n+  DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction\n+*/\n+type
      ReactionsDeleteForCommitCommentReq struct {\n+\tOwner      string\n+\tRepo       string\n+\tCommentId  int64\n+\tReactionId
      int64\n+\n+\t/*\n+\tAPIs for managing reactions are currently available for
      developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteForCommitCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/comments/%v/reactions/%v\",
      r.Owner, r.Repo, r.CommentId, r.ReactionId)\n+}\n+\n+func (r ReactionsDeleteForCommitCommentReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ReactionsDeleteForCommitCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsDeleteForCommitCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsDeleteForCommitCommentReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsDeleteLegacyReq
      builds requests for \"reactions/delete-legacy\"\n+\n+Delete a reaction (Legacy).\n+\n+  DELETE
      /reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-a-reaction-legacy\n+*/\n+type
      ReactionsDeleteLegacyReq struct {\n+\tReactionId int64\n+\n+\t/*\n+\tAPIs for
      managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteLegacyReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/reactions/%v\", r.ReactionId)\n+}\n+\n+func
      (r ReactionsDeleteLegacyReq) method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func
      (r ReactionsDeleteLegacyReq) urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn
      query\n+}\n+\n+func (r ReactionsDeleteLegacyReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsDeleteLegacyReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsDeleteForIssueReq
      builds requests for \"reactions/delete-for-issue\"\n+\n+Delete an issue reaction.\n+\n+  DELETE
      /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-an-issue-reaction\n+*/\n+type
      ReactionsDeleteForIssueReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tIssueNumber
      int64\n+\tReactionId  int64\n+\n+\t/*\n+\tAPIs for managing reactions are currently
      available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteForIssueReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/issues/%v/reactions/%v\",
      r.Owner, r.Repo, r.IssueNumber, r.ReactionId)\n+}\n+\n+func (r ReactionsDeleteForIssueReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ReactionsDeleteForIssueReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsDeleteForIssueReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsDeleteForIssueReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForIssueReq
      builds requests for \"reactions/list-for-issue\"\n+\n+List reactions for an
      issue.\n+\n+  GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-an-issue\n+*/\n+type
      ReactionsListForIssueReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tIssueNumber
      int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to an issue.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForIssueReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/issues/%v/reactions\",
      r.Owner, r.Repo, r.IssueNumber)\n+}\n+\n+func (r ReactionsListForIssueReq) method()
      string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForIssueReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForIssueReq) header()
      http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsListForIssueReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForIssueResponseBody200
      is a response body for reactions/list-for-issue\n+\n+API documentation: https://developer.github.com/v3/reactions/#list-reactions-for-an-issue\n+*/\n+type
      ReactionsListForIssueResponseBody200 []struct {\n+\tContent   string `json:\"content,omitempty\"`\n+\tCreatedAt
      string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForIssueReq builds requests
      for \"reactions/create-for-issue\"\n+\n+Create reaction for an issue.\n+\n+  POST
      /repos/{owner}/{repo}/issues/{issue_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-an-issue\n+*/\n+type
      ReactionsCreateForIssueReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tIssueNumber
      int64\n+\tRequestBody ReactionsCreateForIssueReqBody\n+\n+\t/*\n+\tAPIs for
      managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForIssueReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/issues/%v/reactions\",
      r.Owner, r.Repo, r.IssueNumber)\n+}\n+\n+func (r ReactionsCreateForIssueReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForIssueReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForIssueReq) header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsCreateForIssueReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForIssueReqBody
      is a request body for reactions/create-for-issue\n+\n+API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue\n+*/\n+type
      ReactionsCreateForIssueReqBody struct {\n+\n+\t/*\n+\t   The [reaction type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to
      add to the issue.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForIssueResponseBody201
      is a response body for reactions/create-for-issue\n+\n+API documentation: https://developer.github.com/v3/reactions/#create-reaction-for-an-issue\n+*/\n+type
      ReactionsCreateForIssueResponseBody201 struct {\n+\tContent   string `json:\"content,omitempty\"`\n+\tCreatedAt
      string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsDeleteForPullRequestCommentReq
      builds requests for \"reactions/delete-for-pull-request-comment\"\n+\n+Delete
      a pull request comment reaction.\n+\n+  DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction\n+*/\n+type
      ReactionsDeleteForPullRequestCommentReq struct {\n+\tOwner      string\n+\tRepo       string\n+\tCommentId  int64\n+\tReactionId
      int64\n+\n+\t/*\n+\tAPIs for managing reactions are currently available for
      developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteForPullRequestCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/pulls/comments/%v/reactions/%v\",
      r.Owner, r.Repo, r.CommentId, r.ReactionId)\n+}\n+\n+func (r ReactionsDeleteForPullRequestCommentReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ReactionsDeleteForPullRequestCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsDeleteForPullRequestCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsDeleteForPullRequestCommentReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionCommentLegacyReq
      builds requests for \"reactions/list-for-team-discussion-comment-legacy\"\n+\n+List
      reactions for a team discussion comment (Legacy).\n+\n+  GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy\n+*/\n+type
      ReactionsListForTeamDiscussionCommentLegacyReq struct {\n+\tTeamId           int64\n+\tDiscussionNumber
      int64\n+\tCommentNumber    int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to a team discussion comment.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentLegacyReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/teams/%v/discussions/%v/comments/%v/reactions\",
      r.TeamId, r.DiscussionNumber, r.CommentNumber)\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentLegacyReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentLegacyReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentLegacyReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForTeamDiscussionCommentLegacyReq)
      HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error)
      {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(),
      nil, opt)\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionCommentLegacyResponseBody200
      is a response body for reactions/list-for-team-discussion-comment-legacy\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment-legacy\n+*/\n+type
      ReactionsListForTeamDiscussionCommentLegacyResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionCommentLegacyReq
      builds requests for \"reactions/create-for-team-discussion-comment-legacy\"\n+\n+Create
      reaction for a team discussion comment (Legacy).\n+\n+  POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy\n+*/\n+type
      ReactionsCreateForTeamDiscussionCommentLegacyReq struct {\n+\tTeamId           int64\n+\tDiscussionNumber
      int64\n+\tCommentNumber    int64\n+\tRequestBody      ReactionsCreateForTeamDiscussionCommentLegacyReqBody\n+\n+\t/*\n+\tAPIs
      for managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionCommentLegacyReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/teams/%v/discussions/%v/comments/%v/reactions\",
      r.TeamId, r.DiscussionNumber, r.CommentNumber)\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionCommentLegacyReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionCommentLegacyReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionCommentLegacyReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionCommentLegacyReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionCommentLegacyReqBody
      is a request body for reactions/create-for-team-discussion-comment-legacy\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy\n+*/\n+type
      ReactionsCreateForTeamDiscussionCommentLegacyReqBody struct {\n+\n+\t/*\n+\t   The
      [reaction type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to
      add to the team discussion comment.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionCommentLegacyResponseBody201
      is a response body for reactions/create-for-team-discussion-comment-legacy\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion-comment-legacy\n+*/\n+type
      ReactionsCreateForTeamDiscussionCommentLegacyResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionInOrgReq
      builds requests for \"reactions/list-for-team-discussion-in-org\"\n+\n+List
      reactions for a team discussion.\n+\n+  GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion\n+*/\n+type
      ReactionsListForTeamDiscussionInOrgReq struct {\n+\tOrg              string\n+\tTeamSlug         string\n+\tDiscussionNumber
      int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to a team discussion.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForTeamDiscussionInOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/teams/%v/discussions/%v/reactions\",
      r.Org, r.TeamSlug, r.DiscussionNumber)\n+}\n+\n+func (r ReactionsListForTeamDiscussionInOrgReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForTeamDiscussionInOrgReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForTeamDiscussionInOrgReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForTeamDiscussionInOrgReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForTeamDiscussionInOrgResponseBody200
      is a response body for reactions/list-for-team-discussion-in-org\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion\n+*/\n+type
      ReactionsListForTeamDiscussionInOrgResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionInOrgReq
      builds requests for \"reactions/create-for-team-discussion-in-org\"\n+\n+Create
      reaction for a team discussion.\n+\n+  POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion\n+*/\n+type
      ReactionsCreateForTeamDiscussionInOrgReq struct {\n+\tOrg              string\n+\tTeamSlug         string\n+\tDiscussionNumber
      int64\n+\tRequestBody      ReactionsCreateForTeamDiscussionInOrgReqBody\n+\n+\t/*\n+\tAPIs
      for managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionInOrgReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/teams/%v/discussions/%v/reactions\",
      r.Org, r.TeamSlug, r.DiscussionNumber)\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionInOrgReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForTeamDiscussionInOrgReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionInOrgReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForTeamDiscussionInOrgReq) HTTPRequest(ctx context.Context,
      opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionInOrgReqBody
      is a request body for reactions/create-for-team-discussion-in-org\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion\n+*/\n+type
      ReactionsCreateForTeamDiscussionInOrgReqBody struct {\n+\n+\t/*\n+\t   The [reaction
      type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to add
      to the team discussion.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForTeamDiscussionInOrgResponseBody201
      is a response body for reactions/create-for-team-discussion-in-org\n+\n+API
      documentation: https://developer.github.com/v3/reactions/#create-reaction-for-a-team-discussion\n+*/\n+type
      ReactionsCreateForTeamDiscussionInOrgResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsDeleteForTeamDiscussionCommentReq
      builds requests for \"reactions/delete-for-team-discussion-comment\"\n+\n+Delete
      team discussion comment reaction.\n+\n+  DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction\n+*/\n+type
      ReactionsDeleteForTeamDiscussionCommentReq struct {\n+\tOrg              string\n+\tTeamSlug         string\n+\tDiscussionNumber
      int64\n+\tCommentNumber    int64\n+\tReactionId       int64\n+\n+\t/*\n+\tAPIs
      for managing reactions are currently available for developers to preview.\n+\tSee
      the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/orgs/%v/teams/%v/discussions/%v/comments/%v/reactions/%v\",
      r.Org, r.TeamSlug, r.DiscussionNumber, r.CommentNumber, r.ReactionId)\n+}\n+\n+func
      (r ReactionsDeleteForTeamDiscussionCommentReq) method() string {\n+\treturn
      \"DELETE\"\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionCommentReq) urlQuery()
      url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionCommentReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsDeleteForTeamDiscussionCommentReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForCommitCommentReq
      builds requests for \"reactions/list-for-commit-comment\"\n+\n+List reactions
      for a commit comment.\n+\n+  GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\n+\n+https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment\n+*/\n+type
      ReactionsListForCommitCommentReq struct {\n+\tOwner     string\n+\tRepo      string\n+\tCommentId
      int64\n+\n+\t/*\n+\tReturns a single [reaction\n+\ttype](https://developer.github.com/v3/reactions/#reaction-types).
      Omit this\n+\tparameter to list all reactions to a commit comment.\n+\t*/\n+\tContent
      *string\n+\n+\t// Results per page (max 100)\n+\tPerPage *int64\n+\n+\t// Page
      number of the results to fetch.\n+\tPage *int64\n+\n+\t/*\n+\tAPIs for managing
      reactions are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsListForCommitCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/comments/%v/reactions\",
      r.Owner, r.Repo, r.CommentId)\n+}\n+\n+func (r ReactionsListForCommitCommentReq)
      method() string {\n+\treturn \"GET\"\n+}\n+\n+func (r ReactionsListForCommitCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\tif r.Content != nil {\n+\t\tquery.Set(\"content\",
      *r.Content)\n+\t}\n+\tif r.PerPage != nil {\n+\t\tquery.Set(\"per_page\", strconv.FormatInt(*r.PerPage,
      10))\n+\t}\n+\tif r.Page != nil {\n+\t\tquery.Set(\"page\", strconv.FormatInt(*r.Page,
      10))\n+\t}\n+\treturn query\n+}\n+\n+func (r ReactionsListForCommitCommentReq)
      header() http.Header {\n+\theaderVals := map[string]*string{}\n+\tpreviewVals
      := map[string]bool{\"squirrel-girl\": r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals,
      previewVals)\n+}\n+\n+func (r ReactionsListForCommitCommentReq) HTTPRequest(ctx
      context.Context, opt ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx,
      r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)\n+}\n+\n+/*\n+ReactionsListForCommitCommentResponseBody200
      is a response body for reactions/list-for-commit-comment\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment\n+*/\n+type
      ReactionsListForCommitCommentResponseBody200 []struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsCreateForCommitCommentReq builds
      requests for \"reactions/create-for-commit-comment\"\n+\n+Create reaction for
      a commit comment.\n+\n+  POST /repos/{owner}/{repo}/comments/{comment_id}/reactions\n+\n+https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment\n+*/\n+type
      ReactionsCreateForCommitCommentReq struct {\n+\tOwner       string\n+\tRepo        string\n+\tCommentId   int64\n+\tRequestBody
      ReactionsCreateForCommitCommentReqBody\n+\n+\t/*\n+\tAPIs for managing reactions
      are currently available for developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsCreateForCommitCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/comments/%v/reactions\",
      r.Owner, r.Repo, r.CommentId)\n+}\n+\n+func (r ReactionsCreateForCommitCommentReq)
      method() string {\n+\treturn \"POST\"\n+}\n+\n+func (r ReactionsCreateForCommitCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsCreateForCommitCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsCreateForCommitCommentReq) HTTPRequest(ctx context.Context, opt
      ...RequestOption) (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(),
      r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)\n+}\n+\n+/*\n+ReactionsCreateForCommitCommentReqBody
      is a request body for reactions/create-for-commit-comment\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment\n+*/\n+type
      ReactionsCreateForCommitCommentReqBody struct {\n+\n+\t/*\n+\t   The [reaction
      type](https://developer.github.com/v3/reactions/#reaction-types)\n+\t   to add
      to the commit comment.\n+\t*/\n+\tContent *string `json:\"content\"`\n+}\n+\n+/*\n+ReactionsCreateForCommitCommentResponseBody201
      is a response body for reactions/create-for-commit-comment\n+\n+API documentation:
      https://developer.github.com/v3/reactions/#create-reaction-for-a-commit-comment\n+*/\n+type
      ReactionsCreateForCommitCommentResponseBody201 struct {\n+\tContent   string
      `json:\"content,omitempty\"`\n+\tCreatedAt string `json:\"created_at,omitempty\"`\n+\tId        int64  `json:\"id,omitempty\"`\n+\tNodeId    string
      `json:\"node_id,omitempty\"`\n+\tUser      struct {\n+\t\tAvatarUrl         string
      `json:\"avatar_url,omitempty\"`\n+\t\tEventsUrl         string `json:\"events_url,omitempty\"`\n+\t\tFollowersUrl      string
      `json:\"followers_url,omitempty\"`\n+\t\tFollowingUrl      string `json:\"following_url,omitempty\"`\n+\t\tGistsUrl          string
      `json:\"gists_url,omitempty\"`\n+\t\tGravatarId        string `json:\"gravatar_id,omitempty\"`\n+\t\tHtmlUrl           string
      `json:\"html_url,omitempty\"`\n+\t\tId                int64  `json:\"id,omitempty\"`\n+\t\tLogin             string
      `json:\"login,omitempty\"`\n+\t\tNodeId            string `json:\"node_id,omitempty\"`\n+\t\tOrganizationsUrl  string
      `json:\"organizations_url,omitempty\"`\n+\t\tReceivedEventsUrl string `json:\"received_events_url,omitempty\"`\n+\t\tReposUrl          string
      `json:\"repos_url,omitempty\"`\n+\t\tSiteAdmin         bool   `json:\"site_admin,omitempty\"`\n+\t\tStarredUrl        string
      `json:\"starred_url,omitempty\"`\n+\t\tSubscriptionsUrl  string `json:\"subscriptions_url,omitempty\"`\n+\t\tType              string
      `json:\"type,omitempty\"`\n+\t\tUrl               string `json:\"url,omitempty\"`\n+\t}
      `json:\"user,omitempty\"`\n+}\n+\n+/*\n+ReactionsDeleteForIssueCommentReq builds
      requests for \"reactions/delete-for-issue-comment\"\n+\n+Delete an issue comment
      reaction.\n+\n+  DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}\n+\n+https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction\n+*/\n+type
      ReactionsDeleteForIssueCommentReq struct {\n+\tOwner      string\n+\tRepo       string\n+\tCommentId  int64\n+\tReactionId
      int64\n+\n+\t/*\n+\tAPIs for managing reactions are currently available for
      developers to preview.\n+\tSee the [blog\n+\tpost](https://developer.github.com/changes/2016-05-12-reactions-api-preview)
      for\n+\tfull details. To access the API during the preview period, you must
      set this to\n+\ttrue.\n+\t*/\n+\tSquirrelGirlPreview bool\n+}\n+\n+func (r ReactionsDeleteForIssueCommentReq)
      urlPath() string {\n+\treturn fmt.Sprintf(\"/repos/%v/%v/issues/comments/%v/reactions/%v\",
      r.Owner, r.Repo, r.CommentId, r.ReactionId)\n+}\n+\n+func (r ReactionsDeleteForIssueCommentReq)
      method() string {\n+\treturn \"DELETE\"\n+}\n+\n+func (r ReactionsDeleteForIssueCommentReq)
      urlQuery() url.Values {\n+\tquery := url.Values{}\n+\treturn query\n+}\n+\n+func
      (r ReactionsDeleteForIssueCommentReq) header() http.Header {\n+\theaderVals
      := map[string]*string{}\n+\tpreviewVals := map[string]bool{\"squirrel-girl\":
      r.SquirrelGirlPreview}\n+\treturn requestHeaders(headerVals, previewVals)\n+}\n+\n+func
      (r ReactionsDeleteForIssueCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption)
      (*http.Request, error) {\n+\treturn httpRequest(ctx, r.urlPath(), r.method(),
      r.urlQuery(), r.header(), nil, opt)\n+}"},{"sha":"ad78c7f2bf983cc9c395a1647149593e972c2245","filename":"zz_repos_gen.go","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_repos_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_repos_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_repos_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"d35e58abfec85bdf2a633a7d6fadc95f9371223e","filename":"zz_scim_gen.go","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_scim_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_scim_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_scim_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"c03c1a4e689b42409efde6ac6a1dbda96dee4416","filename":"zz_search_gen.go","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_search_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_search_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_search_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"69824fcbf4a5d9566defdda1f0baf3b2552b2388","filename":"zz_teams_gen.go","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_teams_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_teams_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_teams_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"},{"sha":"966ee09d32ffa27781530a79ebb99e9b0f7676a2","filename":"zz_users_gen.go","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/WillAbides/octo-go/blob/ceac7c6d9a134326a0871174423bea19acbb122a/zz_users_gen.go","raw_url":"https://github.com/WillAbides/octo-go/raw/ceac7c6d9a134326a0871174423bea19acbb122a/zz_users_gen.go","contents_url":"https://api.github.com/repos/WillAbides/octo-go/contents/zz_users_gen.go?ref=ceac7c6d9a134326a0871174423bea19acbb122a"}]}'
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Access-Control-Expose-Headers:
      - ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining,
        X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval,
        X-GitHub-Media-Type, Deprecation, Sunset
      Cache-Control:
      - private, max-age=60, s-maxage=60
      Content-Security-Policy:
      - default-src 'none'
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Thu, 04 Jun 2020 21:33:57 GMT
      Etag:
      - W/"87c078490c580c234849be9104b1e8f4"
      Last-Modified:
      - Fri, 22 May 2020 15:34:27 GMT
      Referrer-Policy:
      - origin-when-cross-origin, strict-origin-when-cross-origin
      Server:
      - GitHub.com
      Status:
      - 200 OK
      Strict-Transport-Security:
      - max-age=31536000; includeSubdomains; preload
      Vary:
      - Accept, Authorization, Cookie, X-GitHub-OTP
      - Accept-Encoding, Accept, X-Requested-With
      X-Accepted-Oauth-Scopes:
      - ""
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Github-Media-Type:
      - github.v3; format=json
      X-Github-Request-Id:
      - B360:0C75:311D96:52B474:5ED968C4
      X-Oauth-Scopes:
      - admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook,
        delete_repo, gist, notifications, read:packages, repo, user, workflow, write:discussion,
        write:packages
      X-Ratelimit-Limit:
      - "5000"
      X-Ratelimit-Remaining:
      - "4987"
      X-Ratelimit-Reset:
      - "1591308992"
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
    duration: ""
