// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

/*
EmojisGet performs requests for "emojis/get"

Get emojis.

  GET /emojis

https://developer.github.com/v3/emojis/#get-emojis
*/
func EmojisGet(ctx context.Context, req *EmojisGetReq, opt ...RequestOption) (*EmojisGetResponse, error) {
	if req == nil {
		req = new(EmojisGetReq)
	}
	resp := &EmojisGetResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = EmojisGetResponseBody{}
	err = r.decodeBody(&resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
EmojisGet performs requests for "emojis/get"

Get emojis.

  GET /emojis

https://developer.github.com/v3/emojis/#get-emojis
*/
func (c Client) EmojisGet(ctx context.Context, req *EmojisGetReq, opt ...RequestOption) (*EmojisGetResponse, error) {
	return EmojisGet(ctx, req, append(c, opt...)...)
}

/*
EmojisGetReq is request data for Client.EmojisGet

https://developer.github.com/v3/emojis/#get-emojis
*/
type EmojisGetReq struct {
	_url string
}

func (r *EmojisGetReq) url() string {
	return r._url
}

func (r *EmojisGetReq) urlPath() string {
	return fmt.Sprintf("/emojis")
}

func (r *EmojisGetReq) method() string {
	return "GET"
}

func (r *EmojisGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *EmojisGetReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{"accept": String("application/json")}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *EmojisGetReq) body() interface{} {
	return nil
}

func (r *EmojisGetReq) dataStatuses() []int {
	return []int{200}
}

func (r *EmojisGetReq) validStatuses() []int {
	return []int{200, 304}
}

// HTTPRequest builds an *http.Request
func (r *EmojisGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *EmojisGetReq) Rel(link RelName, resp *EmojisGetResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
EmojisGetResponseBody is a response body for EmojisGet

https://developer.github.com/v3/emojis/#get-emojis
*/
type EmojisGetResponseBody map[string]string

/*
EmojisGetResponse is a response for EmojisGet

https://developer.github.com/v3/emojis/#get-emojis
*/
type EmojisGetResponse struct {
	response
	request *EmojisGetReq
	Data    EmojisGetResponseBody
}
