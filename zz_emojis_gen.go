// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	common "github.com/willabides/octo-go/common"
	internal "github.com/willabides/octo-go/internal"
	options "github.com/willabides/octo-go/options"
	"net/http"
	"net/url"
)

/*
EmojisGet performs requests for "emojis/get"

Get emojis.

  GET /emojis

https://developer.github.com/v3/emojis/#get-emojis
*/
func EmojisGet(ctx context.Context, req *EmojisGetReq, opt ...options.Option) (*EmojisGetResponse, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(EmojisGetReq)
	}
	resp := &EmojisGetResponse{request: req}
	builder := req.requestBuilder()
	r, err := internal.DoRequest(ctx, builder, opts)

	if r != nil {
		resp.Response = *r
	}
	if err != nil {
		return resp, err
	}

	resp.Data = EmojisGetResponseBody{}
	err = internal.DecodeResponseBody(r, builder, opts, &resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
EmojisGet performs requests for "emojis/get"

Get emojis.

  GET /emojis

https://developer.github.com/v3/emojis/#get-emojis
*/
func (c Client) EmojisGet(ctx context.Context, req *EmojisGetReq, opt ...options.Option) (*EmojisGetResponse, error) {
	return EmojisGet(ctx, req, append(c, opt...)...)
}

/*
EmojisGetReq is request data for Client.EmojisGet

https://developer.github.com/v3/emojis/#get-emojis
*/
type EmojisGetReq struct {
	_url string
}

// HTTPRequest builds an *http.Request
func (r *EmojisGetReq) HTTPRequest(ctx context.Context, opt ...options.Option) (*http.Request, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *EmojisGetReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:      []string{},
		Body:             nil,
		DataStatuses:     []int{200},
		ExplicitURL:      r._url,
		HeaderVals:       map[string]*string{"accept": String("application/json")},
		Method:           "GET",
		OperationID:      "emojis/get",
		Previews:         map[string]bool{},
		RequiredPreviews: []string{},
		URLPath:          fmt.Sprintf("/emojis"),
		URLQuery:         query,
		ValidStatuses:    []int{200, 304},
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *EmojisGetReq) Rel(link RelName, resp *EmojisGetResponse) bool {
	u := resp.RelLink(string(link))
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
EmojisGetResponseBody is a response body for EmojisGet

https://developer.github.com/v3/emojis/#get-emojis
*/
type EmojisGetResponseBody map[string]string

/*
EmojisGetResponse is a response for EmojisGet

https://developer.github.com/v3/emojis/#get-emojis
*/
type EmojisGetResponse struct {
	common.Response
	request *EmojisGetReq
	Data    EmojisGetResponseBody
}
