// Code generated by octo-go; DO NOT EDIT.

package octo_test

import (
	"encoding/json"
	"github.com/willabides/octo-go"
)

func init() {
	unmarshalResponseBodyTests = append(unmarshalResponseBodyTests, generatedUnmarshalResponseBodyTests...)
}

var generatedUnmarshalResponseBodyTests = []unmarshalResponseBodyTest{{
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRegistrationTokenForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/registration-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRegistrationTokenForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRegistrationTokenForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/registration-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRegistrationTokenForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRemoveTokenForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/remove-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRemoveTokenForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRemoveTokenForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/remove-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRemoveTokenForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetArtifactResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetArtifactResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetJobForWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/jobs/{job_id}",
	httpMethod:     "GET",
	httpStatusCode: 202,
	name:           "ActionsGetJobForWorkflowRunResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetOrgPublicKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/public-key",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetOrgPublicKeyResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetOrgSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/{secret_name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetOrgSecretResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetRepoPublicKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets/public-key",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetRepoPublicKeyResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetRepoSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetRepoSecretResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetSelfHostedRunnerForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/{runner_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetSelfHostedRunnerForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetSelfHostedRunnerForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/{runner_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetSelfHostedRunnerForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowRunResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowRunUsageResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowRunUsageResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowUsageResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowUsageResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListArtifactsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/artifacts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListArtifactsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListJobsForWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListJobsForWorkflowRunResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListOrgSecretsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListOrgSecretsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRepoSecretsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRepoSecretsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRepoWorkflowsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRepoWorkflowsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRunnerApplicationsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/downloads",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRunnerApplicationsForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRunnerApplicationsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/downloads",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRunnerApplicationsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListSelectedReposForOrgSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/{secret_name}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListSelectedReposForOrgSecretResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListSelfHostedRunnersForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListSelfHostedRunnersForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListSelfHostedRunnersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListSelfHostedRunnersForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListWorkflowRunArtifactsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListWorkflowRunArtifactsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListWorkflowRunsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListWorkflowRunsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListWorkflowRunsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListWorkflowRunsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetFeedsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/feeds",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetFeedsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetRepoSubscriptionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscription",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetRepoSubscriptionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetThreadResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetThreadResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}/subscription",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListNotificationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListNotificationsForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListRepoNotificationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/notifications",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListRepoNotificationsForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListReposStarredByAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListReposStarredByAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListReposStarredByUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListReposStarredByUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListReposWatchedByUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/subscriptions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListReposWatchedByUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListStargazersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stargazers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListStargazersForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListWatchedReposForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/subscriptions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListWatchedReposForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListWatchersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscribers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListWatchersForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivitySetRepoSubscriptionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscription",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ActivitySetRepoSubscriptionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivitySetThreadSubscriptionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}/subscription",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ActivitySetThreadSubscriptionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCheckAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/tokens/{access_token}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsCheckAuthorizationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCheckTokenResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/token",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsCheckTokenResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCreateContentAttachmentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/content_references/{content_reference_id}/attachments",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsCreateContentAttachmentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCreateFromManifestResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app-manifests/{code}/conversions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsCreateFromManifestResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCreateInstallationAccessTokenResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations/{installation_id}/access_tokens",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "AppsCreateInstallationAccessTokenResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetBySlugResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/apps/{app_slug}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetBySlugResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations/{installation_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetInstallationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetOrgInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetOrgInstallationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetRepoInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetRepoInstallationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetSubscriptionPlanForAccountResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/accounts/{account_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetSubscriptionPlanForAccountResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetSubscriptionPlanForAccountStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/accounts/{account_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetSubscriptionPlanForAccountStubbedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetUserInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetUserInstallationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListAccountsForPlanResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/plans/{plan_id}/accounts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListAccountsForPlanResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListAccountsForPlanStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListAccountsForPlanStubbedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListInstallationReposForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/installations/{installation_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListInstallationReposForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListInstallationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListInstallationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListInstallationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListInstallationsForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListPlansResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/plans",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListPlansResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListPlansStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/plans",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListPlansStubbedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListReposAccessibleToInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/installation/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListReposAccessibleToInstallationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListSubscriptionsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/marketplace_purchases",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListSubscriptionsForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListSubscriptionsForAuthenticatedUserStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/marketplace_purchases/stubbed",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListSubscriptionsForAuthenticatedUserStubbedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsResetAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/tokens/{access_token}",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsResetAuthorizationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsResetTokenResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/token",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "AppsResetTokenResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ChecksCreateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksCreateSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ChecksCreateSuiteResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksGetSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksGetSuiteResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListAnnotationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListAnnotationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/check-runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListForRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListForSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListForSuiteResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListSuitesForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/check-suites",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListSuitesForRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksSetSuitesPreferencesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/preferences",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ChecksSetSuitesPreferencesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ChecksUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodeScanningGetAlertResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/code-scanning/alerts/{alert_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodeScanningGetAlertResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodeScanningListAlertsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/code-scanning/alerts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodeScanningListAlertsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodesOfConductGetAllCodesOfConductResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/codes_of_conduct",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodesOfConductGetAllCodesOfConductResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodesOfConductGetConductCodeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/codes_of_conduct/{key}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodesOfConductGetConductCodeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodesOfConductGetForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/community/code_of_conduct",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodesOfConductGetForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GistsCreateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsCreateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GistsCreateCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsForkResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/forks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GistsForkResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsGetCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsGetCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsGetRevisionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/{sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsGetRevisionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListCommentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListCommentsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListCommitsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/gists",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListForksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/forks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListForksResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListPublicResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/public",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListPublicResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListStarredResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListStarredResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "GistsUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsUpdateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "GistsUpdateCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateBlobResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/blobs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateBlobResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/commits",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateCommitResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/refs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateTagResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/tags",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateTagResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateTreeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/trees",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateTreeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetBlobResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/blobs/{file_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetBlobResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/commits/{commit_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetCommitResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/ref/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetTagResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/tags/{tag_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetTagResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetTreeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/trees/{tree_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetTreeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitListMatchingRefsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/matching-refs/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitListMatchingRefsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitUpdateRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/refs/{ref}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "GitUpdateRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitignoreGetAllTemplatesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gitignore/templates",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitignoreGetAllTemplatesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitignoreGetTemplateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gitignore/templates/{name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitignoreGetTemplateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsGetRestrictionsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/interaction-limits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "InteractionsGetRestrictionsForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsGetRestrictionsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/interaction-limits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "InteractionsGetRestrictionsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsSetRestrictionsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/interaction-limits",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "InteractionsSetRestrictionsForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsSetRestrictionsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/interaction-limits",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "InteractionsSetRestrictionsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesAddAssigneesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesAddAssigneesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesAddLabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "IssuesAddLabelsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateLabelResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateMilestoneResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetEventResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/events/{event_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetEventResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels/{name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetLabelResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetMilestoneResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListAssigneesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/assignees",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListAssigneesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListCommentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListCommentsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListCommentsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListCommentsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListEventsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/events",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListEventsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListEventsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/events",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListEventsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListEventsForTimelineResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListEventsForTimelineResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListLabelsForMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListLabelsForMilestoneResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListLabelsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListLabelsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListLabelsOnIssueResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListLabelsOnIssueResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListMilestonesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListMilestonesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesRemoveAssigneesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "IssuesRemoveAssigneesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesRemoveLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "IssuesRemoveLabelResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesSetLabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "IssuesSetLabelsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels/{name}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateLabelResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateMilestoneResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.LicensesGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/licenses/{license}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "LicensesGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.LicensesGetAllCommonlyUsedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/licenses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "LicensesGetAllCommonlyUsedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.LicensesGetForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/license",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "LicensesGetForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MetaGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/meta",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MetaGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetCommitAuthorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/authors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetCommitAuthorsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetImportStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetImportStatusResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetLargeFilesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/large_files",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetLargeFilesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetStatusForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations/{migration_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetStatusForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetStatusForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations/{migration_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetStatusForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListReposForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations/{migration_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListReposForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListReposForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/{migration_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListReposForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsMapCommitAuthorResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/authors/{author_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "MigrationsMapCommitAuthorResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsSetLfsPreferenceResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/lfs",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "MigrationsSetLfsPreferenceResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsStartForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "MigrationsStartForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsStartForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "MigrationsStartForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsStartImportResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "MigrationsStartImportResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsUpdateImportResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "MigrationsUpdateImportResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsCreateAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "OauthAuthorizationsCreateAuthorizationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/{authorization_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetAuthorizationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetGrantResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/grants/{grant_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetGrantResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}/{fingerprint}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}/{fingerprint}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsListAuthorizationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsListAuthorizationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsListGrantsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/grants",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsListGrantsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsUpdateAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/{authorization_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsUpdateAuthorizationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsCreateInvitationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "OrgsCreateInvitationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsCreateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "OrgsCreateWebhookResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetMembershipForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs/{org}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetMembershipForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetMembershipForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetMembershipForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks/{hook_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetWebhookResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/organizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListAppInstallationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListAppInstallationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListBlockedUsersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/blocks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListBlockedUsersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListInvitationTeamsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations/{invitation_id}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListInvitationTeamsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListMembersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListMembersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListMembershipsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListMembershipsForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListOutsideCollaboratorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/outside_collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListOutsideCollaboratorsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListPendingInvitationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListPendingInvitationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListPublicMembersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/public_members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListPublicMembersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListSamlSsoAuthorizationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/credential-authorizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListSamlSsoAuthorizationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListWebhooksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListWebhooksResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsSetMembershipForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "OrgsSetMembershipForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OrgsUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsUpdateMembershipForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs/{org}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OrgsUpdateMembershipForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsUpdateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks/{hook_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OrgsUpdateWebhookResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateCardResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}/cards",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateCardResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsGetPermissionForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/collaborators/{username}/permission",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsGetPermissionForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListCardsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}/cards",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListCardsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListCollaboratorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListCollaboratorsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListColumnsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/columns",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListColumnsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ProjectsUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsCreateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateReplyForReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsCreateReplyForReviewCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "PullsCreateReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsCreateReviewCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsDeletePendingReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "PullsDeletePendingReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsDismissReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "PullsDismissReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsGetReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsGetReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsGetReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsGetReviewCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListCommentsForReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListCommentsForReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListCommitsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListFilesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/files",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListFilesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListRequestedReviewersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListRequestedReviewersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListReviewCommentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListReviewCommentsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListReviewCommentsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListReviewCommentsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListReviewsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListReviewsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsMergeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "PullsMergeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsRequestReviewersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsRequestReviewersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsSubmitReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "PullsSubmitReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "PullsUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
	httpMethod:     "PUT",
	httpStatusCode: 202,
	name:           "PullsUpdateBranchResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "PullsUpdateReviewResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "PullsUpdateReviewCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.RateLimitGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/rate_limit",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "RateLimitGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForCommitCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForIssueResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForIssueResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForIssueCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForIssueCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForPullRequestReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForPullRequestReviewCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForTeamDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForTeamDiscussionCommentInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForTeamDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForTeamDiscussionInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForCommitCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForIssueResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForIssueResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForIssueCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForIssueCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForPullRequestReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForPullRequestReviewCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForTeamDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForTeamDiscussionCommentInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForTeamDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForTeamDiscussionInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddAppAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddAppAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddCollaboratorResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "ReposAddCollaboratorResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddStatusCheckContextsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddTeamAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddTeamAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddUserAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddUserAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCompareCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/compare/{base}...{head}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposCompareCommitsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateCommitCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateCommitSignatureProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposCreateCommitSignatureProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateCommitStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/statuses/{sha}",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateCommitStatusResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateDeployKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateDeployKeyResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateDeploymentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateDeploymentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateDeploymentStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateDeploymentStatusResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repos",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateForkResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/forks",
	httpMethod:     "POST",
	httpStatusCode: 202,
	name:           "ReposCreateForkResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/repos",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateOrUpdateFileContentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposCreateOrUpdateFileContentsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateOrUpdateFileContentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "ReposCreateOrUpdateFileContentsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreatePagesSiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreatePagesSiteResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateReleaseResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateUsingTemplateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{template_owner}/{template_repo}/generate",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateUsingTemplateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateWebhookResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposDeleteFileResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposDeleteFileResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAdminBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAdminBranchProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAllStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAllStatusCheckContextsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAllTopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/topics",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAllTopicsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAppsWithAccessToProtectedBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAppsWithAccessToProtectedBranchResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetBranchResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetBranchProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetClonesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/clones",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetClonesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCodeFrequencyStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/code_frequency",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCodeFrequencyStatsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCollaboratorPermissionLevelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators/{username}/permission",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCollaboratorPermissionLevelResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCombinedStatusForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/status",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCombinedStatusForRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitActivityStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/commit_activity",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitActivityStatsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitSignatureProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitSignatureProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommunityProfileMetricsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/community/profile",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommunityProfileMetricsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetContentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetContentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetContributorsStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/contributors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetContributorsStatsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetDeployKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys/{key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetDeployKeyResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetDeploymentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetDeploymentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetDeploymentStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetDeploymentStatusResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetLatestPagesBuildResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds/latest",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetLatestPagesBuildResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetLatestReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/latest",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetLatestReleaseResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPagesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPagesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPagesBuildResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds/{build_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPagesBuildResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetParticipationStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/participation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetParticipationStatsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPunchCardStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/punch_card",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPunchCardStatsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReadmeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/readme",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReadmeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReleaseResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReleaseAssetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/assets/{asset_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReleaseAssetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReleaseByTagResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/tags/{tag}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReleaseByTagResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetStatusChecksProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetStatusChecksProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetTeamsWithAccessToProtectedBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetTeamsWithAccessToProtectedBranchResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetTopPathsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/popular/paths",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetTopPathsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetTopReferrersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/popular/referrers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetTopReferrersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetUsersWithAccessToProtectedBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetUsersWithAccessToProtectedBranchResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetViewsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/views",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetViewsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks/{hook_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetWebhookResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListBranchesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListBranchesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListBranchesForHeadCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListBranchesForHeadCommitResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCollaboratorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCollaboratorsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommentsForCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommentsForCommitResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommitCommentsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommitCommentsForRepoResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommitStatusesForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/statuses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommitStatusesForRefResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommitsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListContributorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contributors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListContributorsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListDeployKeysResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListDeployKeysResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListDeploymentStatusesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListDeploymentStatusesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListDeploymentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListDeploymentsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListForksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/forks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListForksResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListInvitationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListInvitationsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListInvitationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repository_invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListInvitationsForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListLanguagesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/languages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListLanguagesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListPagesBuildsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListPagesBuildsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListPublicResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListPublicResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListPullRequestsAssociatedWithCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListPullRequestsAssociatedWithCommitResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListReleaseAssetsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}/assets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListReleaseAssetsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListReleasesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListReleasesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListTagsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/tags",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListTagsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListTeamsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListTeamsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListWebhooksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListWebhooksResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposMergeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/merges",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposMergeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveAppAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveAppAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveStatusCheckContextsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveTeamAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveTeamAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveUserAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveUserAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposReplaceAllTopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/topics",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposReplaceAllTopicsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRequestPagesBuildResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposRequestPagesBuildResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetAdminBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposSetAdminBranchProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetAppAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetAppAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetStatusCheckContextsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetTeamAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetTeamAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetUserAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetUserAccessRestrictionsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposTransferResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/transfer",
	httpMethod:     "POST",
	httpStatusCode: 202,
	name:           "ReposTransferResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposUpdateBranchProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateCommitCommentResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateInvitationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/invitations/{invitation_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateInvitationResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdatePullRequestReviewProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdatePullRequestReviewProtectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateReleaseResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateReleaseAssetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/assets/{asset_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateReleaseAssetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateStatusCheckPotectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateStatusCheckPotectionResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks/{hook_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateWebhookResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUploadReleaseAssetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}/assets",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposUploadReleaseAssetResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimGetProvisioningInformationForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ScimGetProvisioningInformationForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimListProvisionedIdentitiesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ScimListProvisionedIdentitiesResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimProvisionAndInviteUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ScimProvisionAndInviteUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimSetInformationForProvisionedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ScimSetInformationForProvisionedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimUpdateAttributeForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ScimUpdateAttributeForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchCodeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/code",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchCodeResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchCommitsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchIssuesAndPullRequestsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchIssuesAndPullRequestsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchLabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchLabelsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchReposResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchReposResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchTopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/topics",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchTopicsResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchUsersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchUsersResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsAddOrUpdateMembershipForUserInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "TeamsAddOrUpdateMembershipForUserInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCheckPermissionsForProjectInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsCheckPermissionsForProjectInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateDiscussionCommentInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateDiscussionInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateOrUpdateIdPGroupConnectionsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsCreateOrUpdateIdPGroupConnectionsInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetByNameResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetByNameResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetDiscussionCommentInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetDiscussionInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetMembershipForUserInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetMembershipForUserInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListChildInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListChildInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListDiscussionCommentsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListDiscussionCommentsInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListDiscussionsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListDiscussionsInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListIdPGroupsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/team-sync/groups",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListIdPGroupsForOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListIdPGroupsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListIdPGroupsInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListMembersInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListMembersInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListPendingInvitationsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListPendingInvitationsInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListProjectsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListProjectsInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListReposInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListReposInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsUpdateDiscussionCommentInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsUpdateDiscussionInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}",
	httpMethod:     "PATCH",
	httpStatusCode: 201,
	name:           "TeamsUpdateInOrgResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersAddEmailForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/emails",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "UsersAddEmailForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersCreateGpgKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "UsersCreateGpgKeyForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersCreatePublicSshKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "UsersCreatePublicSshKeyForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetByUsernameResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetByUsernameResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetContextForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/hovercard",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetContextForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetGpgKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys/{gpg_key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetGpgKeyForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetPublicSshKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys/{key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetPublicSshKeyForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListBlockedByAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/blocks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListBlockedByAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListEmailsForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/emails",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListEmailsForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowedByAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/following",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowedByAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowersForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/followers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowersForAuthenticatedUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowersForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/followers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowersForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowingForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/following",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowingForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListGpgKeysForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListGpgKeysForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListGpgKeysForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/gpg_keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListGpgKeysForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListPublicEmailsForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/public_emails",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListPublicEmailsForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListPublicKeysForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListPublicKeysForUserResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListPublicSshKeysForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListPublicSshKeysForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersSetPrimaryEmailVisibilityForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/email/visibility",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "UsersSetPrimaryEmailVisibilityForAuthenticatedResponseBody",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersUpdateAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "UsersUpdateAuthenticatedResponseBody",
}}
