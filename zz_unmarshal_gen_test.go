// Code generated by octo-go; DO NOT EDIT.

package octo_test

import (
	"encoding/json"
	"github.com/willabides/octo-go"
)

func init() {
	unmarshalResponseBodyTests = append(unmarshalResponseBodyTests, generatedUnmarshalResponseBodyTests...)
}

var generatedUnmarshalResponseBodyTests = []unmarshalResponseBodyTest{{
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRegistrationTokenForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/registration-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRegistrationTokenForOrgResponseBody",
	operationID:    "actions/create-registration-token-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRegistrationTokenForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/registration-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRegistrationTokenForRepoResponseBody",
	operationID:    "actions/create-registration-token-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRemoveTokenForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/remove-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRemoveTokenForOrgResponseBody",
	operationID:    "actions/create-remove-token-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsCreateRemoveTokenForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/remove-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ActionsCreateRemoveTokenForRepoResponseBody",
	operationID:    "actions/create-remove-token-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetArtifactResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetArtifactResponseBody",
	operationID:    "actions/get-artifact",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetJobForWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/jobs/{job_id}",
	httpMethod:     "GET",
	httpStatusCode: 202,
	name:           "ActionsGetJobForWorkflowRunResponseBody",
	operationID:    "actions/get-job-for-workflow-run",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetOrgPublicKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/public-key",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetOrgPublicKeyResponseBody",
	operationID:    "actions/get-org-public-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetOrgSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/{secret_name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetOrgSecretResponseBody",
	operationID:    "actions/get-org-secret",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetRepoPublicKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets/public-key",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetRepoPublicKeyResponseBody",
	operationID:    "actions/get-repo-public-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetRepoSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetRepoSecretResponseBody",
	operationID:    "actions/get-repo-secret",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetSelfHostedRunnerForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/{runner_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetSelfHostedRunnerForOrgResponseBody",
	operationID:    "actions/get-self-hosted-runner-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetSelfHostedRunnerForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/{runner_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetSelfHostedRunnerForRepoResponseBody",
	operationID:    "actions/get-self-hosted-runner-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowResponseBody",
	operationID:    "actions/get-workflow",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowRunResponseBody",
	operationID:    "actions/get-workflow-run",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowRunUsageResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowRunUsageResponseBody",
	operationID:    "actions/get-workflow-run-usage",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsGetWorkflowUsageResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsGetWorkflowUsageResponseBody",
	operationID:    "actions/get-workflow-usage",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListArtifactsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/artifacts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListArtifactsForRepoResponseBody",
	operationID:    "actions/list-artifacts-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListJobsForWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListJobsForWorkflowRunResponseBody",
	operationID:    "actions/list-jobs-for-workflow-run",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListOrgSecretsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListOrgSecretsResponseBody",
	operationID:    "actions/list-org-secrets",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRepoSecretsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRepoSecretsResponseBody",
	operationID:    "actions/list-repo-secrets",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRepoWorkflowsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRepoWorkflowsResponseBody",
	operationID:    "actions/list-repo-workflows",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRunnerApplicationsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/downloads",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRunnerApplicationsForOrgResponseBody",
	operationID:    "actions/list-runner-applications-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListRunnerApplicationsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/downloads",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListRunnerApplicationsForRepoResponseBody",
	operationID:    "actions/list-runner-applications-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListSelectedReposForOrgSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/{secret_name}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListSelectedReposForOrgSecretResponseBody",
	operationID:    "actions/list-selected-repos-for-org-secret",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListSelfHostedRunnersForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListSelfHostedRunnersForOrgResponseBody",
	operationID:    "actions/list-self-hosted-runners-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListSelfHostedRunnersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListSelfHostedRunnersForRepoResponseBody",
	operationID:    "actions/list-self-hosted-runners-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListWorkflowRunArtifactsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListWorkflowRunArtifactsResponseBody",
	operationID:    "actions/list-workflow-run-artifacts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListWorkflowRunsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListWorkflowRunsResponseBody",
	operationID:    "actions/list-workflow-runs",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActionsListWorkflowRunsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActionsListWorkflowRunsForRepoResponseBody",
	operationID:    "actions/list-workflow-runs-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetFeedsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/feeds",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetFeedsResponseBody",
	operationID:    "activity/get-feeds",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetRepoSubscriptionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscription",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetRepoSubscriptionResponseBody",
	operationID:    "activity/get-repo-subscription",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetThreadResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetThreadResponseBody",
	operationID:    "activity/get-thread",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}/subscription",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody",
	operationID:    "activity/get-thread-subscription-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListNotificationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListNotificationsForAuthenticatedUserResponseBody",
	operationID:    "activity/list-notifications-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListRepoNotificationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/notifications",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListRepoNotificationsForAuthenticatedUserResponseBody",
	operationID:    "activity/list-repo-notifications-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListReposStarredByAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListReposStarredByAuthenticatedUserResponseBody",
	operationID:    "activity/list-repos-starred-by-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListReposStarredByUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListReposStarredByUserResponseBody",
	operationID:    "activity/list-repos-starred-by-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListReposWatchedByUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/subscriptions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListReposWatchedByUserResponseBody",
	operationID:    "activity/list-repos-watched-by-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListStargazersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stargazers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListStargazersForRepoResponseBody",
	operationID:    "activity/list-stargazers-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListWatchedReposForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/subscriptions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListWatchedReposForAuthenticatedUserResponseBody",
	operationID:    "activity/list-watched-repos-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivityListWatchersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscribers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ActivityListWatchersForRepoResponseBody",
	operationID:    "activity/list-watchers-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivitySetRepoSubscriptionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscription",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ActivitySetRepoSubscriptionResponseBody",
	operationID:    "activity/set-repo-subscription",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ActivitySetThreadSubscriptionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}/subscription",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ActivitySetThreadSubscriptionResponseBody",
	operationID:    "activity/set-thread-subscription",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCheckAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/tokens/{access_token}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsCheckAuthorizationResponseBody",
	operationID:    "apps/check-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCheckTokenResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/token",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsCheckTokenResponseBody",
	operationID:    "apps/check-token",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCreateContentAttachmentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/content_references/{content_reference_id}/attachments",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsCreateContentAttachmentResponseBody",
	operationID:    "apps/create-content-attachment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCreateFromManifestResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app-manifests/{code}/conversions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "AppsCreateFromManifestResponseBody",
	operationID:    "apps/create-from-manifest",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsCreateInstallationAccessTokenResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations/{installation_id}/access_tokens",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "AppsCreateInstallationAccessTokenResponseBody",
	operationID:    "apps/create-installation-access-token",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetAuthenticatedResponseBody",
	operationID:    "apps/get-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetBySlugResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/apps/{app_slug}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetBySlugResponseBody",
	operationID:    "apps/get-by-slug",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations/{installation_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetInstallationResponseBody",
	operationID:    "apps/get-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetOrgInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetOrgInstallationResponseBody",
	operationID:    "apps/get-org-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetRepoInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetRepoInstallationResponseBody",
	operationID:    "apps/get-repo-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetSubscriptionPlanForAccountResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/accounts/{account_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetSubscriptionPlanForAccountResponseBody",
	operationID:    "apps/get-subscription-plan-for-account",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetSubscriptionPlanForAccountStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/accounts/{account_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetSubscriptionPlanForAccountStubbedResponseBody",
	operationID:    "apps/get-subscription-plan-for-account-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsGetUserInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsGetUserInstallationResponseBody",
	operationID:    "apps/get-user-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListAccountsForPlanResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/plans/{plan_id}/accounts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListAccountsForPlanResponseBody",
	operationID:    "apps/list-accounts-for-plan",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListAccountsForPlanStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListAccountsForPlanStubbedResponseBody",
	operationID:    "apps/list-accounts-for-plan-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListInstallationReposForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/installations/{installation_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListInstallationReposForAuthenticatedUserResponseBody",
	operationID:    "apps/list-installation-repos-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListInstallationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListInstallationsResponseBody",
	operationID:    "apps/list-installations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListInstallationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListInstallationsForAuthenticatedUserResponseBody",
	operationID:    "apps/list-installations-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListPlansResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/plans",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListPlansResponseBody",
	operationID:    "apps/list-plans",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListPlansStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/plans",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListPlansStubbedResponseBody",
	operationID:    "apps/list-plans-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListReposAccessibleToInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/installation/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListReposAccessibleToInstallationResponseBody",
	operationID:    "apps/list-repos-accessible-to-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListSubscriptionsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/marketplace_purchases",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListSubscriptionsForAuthenticatedUserResponseBody",
	operationID:    "apps/list-subscriptions-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsListSubscriptionsForAuthenticatedUserStubbedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/marketplace_purchases/stubbed",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "AppsListSubscriptionsForAuthenticatedUserStubbedResponseBody",
	operationID:    "apps/list-subscriptions-for-authenticated-user-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsResetAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/tokens/{access_token}",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "AppsResetAuthorizationResponseBody",
	operationID:    "apps/reset-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.AppsResetTokenResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/token",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "AppsResetTokenResponseBody",
	operationID:    "apps/reset-token",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetGithubActionsBillingGheResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/enterprises/{enterprise_id}/settings/billing/actions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetGithubActionsBillingGheResponseBody",
	operationID:    "billing/get-github-actions-billing-ghe",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetGithubActionsBillingOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/settings/billing/actions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetGithubActionsBillingOrgResponseBody",
	operationID:    "billing/get-github-actions-billing-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetGithubActionsBillingUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/settings/billing/actions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetGithubActionsBillingUserResponseBody",
	operationID:    "billing/get-github-actions-billing-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetGithubPackagesBillingGheResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/enterprises/{enterprise_id}/settings/billing/packages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetGithubPackagesBillingGheResponseBody",
	operationID:    "billing/get-github-packages-billing-ghe",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetGithubPackagesBillingOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/settings/billing/packages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetGithubPackagesBillingOrgResponseBody",
	operationID:    "billing/get-github-packages-billing-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetGithubPackagesBillingUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/settings/billing/packages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetGithubPackagesBillingUserResponseBody",
	operationID:    "billing/get-github-packages-billing-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetSharedStorageBillingGheResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/enterprises/{enterprise_id}/settings/billing/shared-storage",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetSharedStorageBillingGheResponseBody",
	operationID:    "billing/get-shared-storage-billing-ghe",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetSharedStorageBillingOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/settings/billing/shared-storage",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetSharedStorageBillingOrgResponseBody",
	operationID:    "billing/get-shared-storage-billing-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.BillingGetSharedStorageBillingUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/settings/billing/shared-storage",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "BillingGetSharedStorageBillingUserResponseBody",
	operationID:    "billing/get-shared-storage-billing-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ChecksCreateResponseBody",
	operationID:    "checks/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksCreateSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ChecksCreateSuiteResponseBody",
	operationID:    "checks/create-suite",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksGetResponseBody",
	operationID:    "checks/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksGetSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksGetSuiteResponseBody",
	operationID:    "checks/get-suite",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListAnnotationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListAnnotationsResponseBody",
	operationID:    "checks/list-annotations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/check-runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListForRefResponseBody",
	operationID:    "checks/list-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListForSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListForSuiteResponseBody",
	operationID:    "checks/list-for-suite",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksListSuitesForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/check-suites",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ChecksListSuitesForRefResponseBody",
	operationID:    "checks/list-suites-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksSetSuitesPreferencesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/preferences",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ChecksSetSuitesPreferencesResponseBody",
	operationID:    "checks/set-suites-preferences",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ChecksUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ChecksUpdateResponseBody",
	operationID:    "checks/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodeScanningGetAlertResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/code-scanning/alerts/{alert_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodeScanningGetAlertResponseBody",
	operationID:    "code-scanning/get-alert",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodeScanningListAlertsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/code-scanning/alerts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodeScanningListAlertsForRepoResponseBody",
	operationID:    "code-scanning/list-alerts-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodesOfConductGetAllCodesOfConductResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/codes_of_conduct",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodesOfConductGetAllCodesOfConductResponseBody",
	operationID:    "codes-of-conduct/get-all-codes-of-conduct",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodesOfConductGetConductCodeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/codes_of_conduct/{key}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodesOfConductGetConductCodeResponseBody",
	operationID:    "codes-of-conduct/get-conduct-code",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.CodesOfConductGetForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/community/code_of_conduct",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "CodesOfConductGetForRepoResponseBody",
	operationID:    "codes-of-conduct/get-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GistsCreateResponseBody",
	operationID:    "gists/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsCreateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GistsCreateCommentResponseBody",
	operationID:    "gists/create-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsForkResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/forks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GistsForkResponseBody",
	operationID:    "gists/fork",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsGetResponseBody",
	operationID:    "gists/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsGetCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsGetCommentResponseBody",
	operationID:    "gists/get-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsGetRevisionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/{sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsGetRevisionResponseBody",
	operationID:    "gists/get-revision",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListResponseBody",
	operationID:    "gists/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListCommentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListCommentsResponseBody",
	operationID:    "gists/list-comments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListCommitsResponseBody",
	operationID:    "gists/list-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/gists",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListForUserResponseBody",
	operationID:    "gists/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListForksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/forks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListForksResponseBody",
	operationID:    "gists/list-forks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListPublicResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/public",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListPublicResponseBody",
	operationID:    "gists/list-public",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsListStarredResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GistsListStarredResponseBody",
	operationID:    "gists/list-starred",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "GistsUpdateResponseBody",
	operationID:    "gists/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GistsUpdateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "GistsUpdateCommentResponseBody",
	operationID:    "gists/update-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateBlobResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/blobs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateBlobResponseBody",
	operationID:    "git/create-blob",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/commits",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateCommitResponseBody",
	operationID:    "git/create-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/refs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateRefResponseBody",
	operationID:    "git/create-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateTagResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/tags",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateTagResponseBody",
	operationID:    "git/create-tag",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitCreateTreeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/trees",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "GitCreateTreeResponseBody",
	operationID:    "git/create-tree",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetBlobResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/blobs/{file_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetBlobResponseBody",
	operationID:    "git/get-blob",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/commits/{commit_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetCommitResponseBody",
	operationID:    "git/get-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/ref/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetRefResponseBody",
	operationID:    "git/get-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetTagResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/tags/{tag_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetTagResponseBody",
	operationID:    "git/get-tag",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitGetTreeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/trees/{tree_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitGetTreeResponseBody",
	operationID:    "git/get-tree",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitListMatchingRefsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/matching-refs/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitListMatchingRefsResponseBody",
	operationID:    "git/list-matching-refs",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitUpdateRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/refs/{ref}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "GitUpdateRefResponseBody",
	operationID:    "git/update-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitignoreGetAllTemplatesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gitignore/templates",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitignoreGetAllTemplatesResponseBody",
	operationID:    "gitignore/get-all-templates",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.GitignoreGetTemplateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gitignore/templates/{name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "GitignoreGetTemplateResponseBody",
	operationID:    "gitignore/get-template",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsGetRestrictionsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/interaction-limits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "InteractionsGetRestrictionsForOrgResponseBody",
	operationID:    "interactions/get-restrictions-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsGetRestrictionsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/interaction-limits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "InteractionsGetRestrictionsForRepoResponseBody",
	operationID:    "interactions/get-restrictions-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsSetRestrictionsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/interaction-limits",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "InteractionsSetRestrictionsForOrgResponseBody",
	operationID:    "interactions/set-restrictions-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.InteractionsSetRestrictionsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/interaction-limits",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "InteractionsSetRestrictionsForRepoResponseBody",
	operationID:    "interactions/set-restrictions-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesAddAssigneesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesAddAssigneesResponseBody",
	operationID:    "issues/add-assignees",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesAddLabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "IssuesAddLabelsResponseBody",
	operationID:    "issues/add-labels",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateResponseBody",
	operationID:    "issues/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateCommentResponseBody",
	operationID:    "issues/create-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateLabelResponseBody",
	operationID:    "issues/create-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesCreateMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "IssuesCreateMilestoneResponseBody",
	operationID:    "issues/create-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetResponseBody",
	operationID:    "issues/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetCommentResponseBody",
	operationID:    "issues/get-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetEventResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/events/{event_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetEventResponseBody",
	operationID:    "issues/get-event",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels/{name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetLabelResponseBody",
	operationID:    "issues/get-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesGetMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesGetMilestoneResponseBody",
	operationID:    "issues/get-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListResponseBody",
	operationID:    "issues/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListAssigneesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/assignees",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListAssigneesResponseBody",
	operationID:    "issues/list-assignees",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListCommentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListCommentsResponseBody",
	operationID:    "issues/list-comments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListCommentsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListCommentsForRepoResponseBody",
	operationID:    "issues/list-comments-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListEventsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/events",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListEventsResponseBody",
	operationID:    "issues/list-events",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListEventsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/events",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListEventsForRepoResponseBody",
	operationID:    "issues/list-events-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListEventsForTimelineResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListEventsForTimelineResponseBody",
	operationID:    "issues/list-events-for-timeline",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListForAuthenticatedUserResponseBody",
	operationID:    "issues/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListForOrgResponseBody",
	operationID:    "issues/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListForRepoResponseBody",
	operationID:    "issues/list-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListLabelsForMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListLabelsForMilestoneResponseBody",
	operationID:    "issues/list-labels-for-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListLabelsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListLabelsForRepoResponseBody",
	operationID:    "issues/list-labels-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListLabelsOnIssueResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListLabelsOnIssueResponseBody",
	operationID:    "issues/list-labels-on-issue",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesListMilestonesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "IssuesListMilestonesResponseBody",
	operationID:    "issues/list-milestones",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesRemoveAssigneesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "IssuesRemoveAssigneesResponseBody",
	operationID:    "issues/remove-assignees",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesRemoveLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "IssuesRemoveLabelResponseBody",
	operationID:    "issues/remove-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesSetLabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "IssuesSetLabelsResponseBody",
	operationID:    "issues/set-labels",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateResponseBody",
	operationID:    "issues/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateCommentResponseBody",
	operationID:    "issues/update-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateLabelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels/{name}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateLabelResponseBody",
	operationID:    "issues/update-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.IssuesUpdateMilestoneResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "IssuesUpdateMilestoneResponseBody",
	operationID:    "issues/update-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.LicensesGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/licenses/{license}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "LicensesGetResponseBody",
	operationID:    "licenses/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.LicensesGetAllCommonlyUsedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/licenses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "LicensesGetAllCommonlyUsedResponseBody",
	operationID:    "licenses/get-all-commonly-used",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.LicensesGetForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/license",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "LicensesGetForRepoResponseBody",
	operationID:    "licenses/get-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MetaGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/meta",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MetaGetResponseBody",
	operationID:    "meta/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetCommitAuthorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/authors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetCommitAuthorsResponseBody",
	operationID:    "migrations/get-commit-authors",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetImportStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetImportStatusResponseBody",
	operationID:    "migrations/get-import-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetLargeFilesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/large_files",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetLargeFilesResponseBody",
	operationID:    "migrations/get-large-files",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetStatusForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations/{migration_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetStatusForAuthenticatedUserResponseBody",
	operationID:    "migrations/get-status-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsGetStatusForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations/{migration_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsGetStatusForOrgResponseBody",
	operationID:    "migrations/get-status-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListForAuthenticatedUserResponseBody",
	operationID:    "migrations/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListForOrgResponseBody",
	operationID:    "migrations/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListReposForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations/{migration_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListReposForOrgResponseBody",
	operationID:    "migrations/list-repos-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsListReposForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations/{migration_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "MigrationsListReposForUserResponseBody",
	operationID:    "migrations/list-repos-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsMapCommitAuthorResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/authors/{author_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "MigrationsMapCommitAuthorResponseBody",
	operationID:    "migrations/map-commit-author",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsSetLfsPreferenceResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/lfs",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "MigrationsSetLfsPreferenceResponseBody",
	operationID:    "migrations/set-lfs-preference",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsStartForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "MigrationsStartForAuthenticatedUserResponseBody",
	operationID:    "migrations/start-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsStartForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "MigrationsStartForOrgResponseBody",
	operationID:    "migrations/start-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsStartImportResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "MigrationsStartImportResponseBody",
	operationID:    "migrations/start-import",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.MigrationsUpdateImportResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "MigrationsUpdateImportResponseBody",
	operationID:    "migrations/update-import",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsCreateAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "OauthAuthorizationsCreateAuthorizationResponseBody",
	operationID:    "oauth-authorizations/create-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/{authorization_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetAuthorizationResponseBody",
	operationID:    "oauth-authorizations/get-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetGrantResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/grants/{grant_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetGrantResponseBody",
	operationID:    "oauth-authorizations/get-grant",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}/{fingerprint}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}/{fingerprint}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsListAuthorizationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsListAuthorizationsResponseBody",
	operationID:    "oauth-authorizations/list-authorizations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsListGrantsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/grants",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsListGrantsResponseBody",
	operationID:    "oauth-authorizations/list-grants",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OauthAuthorizationsUpdateAuthorizationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/{authorization_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OauthAuthorizationsUpdateAuthorizationResponseBody",
	operationID:    "oauth-authorizations/update-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsCreateInvitationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "OrgsCreateInvitationResponseBody",
	operationID:    "orgs/create-invitation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsCreateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "OrgsCreateWebhookResponseBody",
	operationID:    "orgs/create-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetResponseBody",
	operationID:    "orgs/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetMembershipForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs/{org}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetMembershipForAuthenticatedUserResponseBody",
	operationID:    "orgs/get-membership-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetMembershipForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetMembershipForUserResponseBody",
	operationID:    "orgs/get-membership-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsGetWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks/{hook_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsGetWebhookResponseBody",
	operationID:    "orgs/get-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/organizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListResponseBody",
	operationID:    "orgs/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListAppInstallationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListAppInstallationsResponseBody",
	operationID:    "orgs/list-app-installations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListBlockedUsersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/blocks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListBlockedUsersResponseBody",
	operationID:    "orgs/list-blocked-users",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListForAuthenticatedUserResponseBody",
	operationID:    "orgs/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListForUserResponseBody",
	operationID:    "orgs/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListInvitationTeamsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations/{invitation_id}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListInvitationTeamsResponseBody",
	operationID:    "orgs/list-invitation-teams",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListMembersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListMembersResponseBody",
	operationID:    "orgs/list-members",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListMembershipsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListMembershipsForAuthenticatedUserResponseBody",
	operationID:    "orgs/list-memberships-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListOutsideCollaboratorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/outside_collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListOutsideCollaboratorsResponseBody",
	operationID:    "orgs/list-outside-collaborators",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListPendingInvitationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListPendingInvitationsResponseBody",
	operationID:    "orgs/list-pending-invitations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListPublicMembersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/public_members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListPublicMembersResponseBody",
	operationID:    "orgs/list-public-members",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListSamlSsoAuthorizationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/credential-authorizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListSamlSsoAuthorizationsResponseBody",
	operationID:    "orgs/list-saml-sso-authorizations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsListWebhooksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "OrgsListWebhooksResponseBody",
	operationID:    "orgs/list-webhooks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsSetMembershipForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "OrgsSetMembershipForUserResponseBody",
	operationID:    "orgs/set-membership-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OrgsUpdateResponseBody",
	operationID:    "orgs/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsUpdateMembershipForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs/{org}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OrgsUpdateMembershipForAuthenticatedUserResponseBody",
	operationID:    "orgs/update-membership-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.OrgsUpdateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks/{hook_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "OrgsUpdateWebhookResponseBody",
	operationID:    "orgs/update-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateCardResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}/cards",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateCardResponseBody",
	operationID:    "projects/create-card",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateColumnResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/columns",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateColumnResponseBody",
	operationID:    "projects/create-column",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateForAuthenticatedUserResponseBody",
	operationID:    "projects/create-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateForOrgResponseBody",
	operationID:    "projects/create-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsCreateForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ProjectsCreateForRepoResponseBody",
	operationID:    "projects/create-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsGetResponseBody",
	operationID:    "projects/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsGetCardResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/cards/{card_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsGetCardResponseBody",
	operationID:    "projects/get-card",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsGetColumnResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsGetColumnResponseBody",
	operationID:    "projects/get-column",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsGetPermissionForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/collaborators/{username}/permission",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsGetPermissionForUserResponseBody",
	operationID:    "projects/get-permission-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListCardsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}/cards",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListCardsResponseBody",
	operationID:    "projects/list-cards",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListCollaboratorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListCollaboratorsResponseBody",
	operationID:    "projects/list-collaborators",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListColumnsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/columns",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListColumnsResponseBody",
	operationID:    "projects/list-columns",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListForOrgResponseBody",
	operationID:    "projects/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListForRepoResponseBody",
	operationID:    "projects/list-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ProjectsListForUserResponseBody",
	operationID:    "projects/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ProjectsUpdateResponseBody",
	operationID:    "projects/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsUpdateCardResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/cards/{card_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ProjectsUpdateCardResponseBody",
	operationID:    "projects/update-card",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ProjectsUpdateColumnResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ProjectsUpdateColumnResponseBody",
	operationID:    "projects/update-column",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsCreateResponseBody",
	operationID:    "pulls/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateReplyForReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsCreateReplyForReviewCommentResponseBody",
	operationID:    "pulls/create-reply-for-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "PullsCreateReviewResponseBody",
	operationID:    "pulls/create-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsCreateReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsCreateReviewCommentResponseBody",
	operationID:    "pulls/create-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsDeletePendingReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "PullsDeletePendingReviewResponseBody",
	operationID:    "pulls/delete-pending-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsDismissReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "PullsDismissReviewResponseBody",
	operationID:    "pulls/dismiss-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsGetResponseBody",
	operationID:    "pulls/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsGetReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsGetReviewResponseBody",
	operationID:    "pulls/get-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsGetReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsGetReviewCommentResponseBody",
	operationID:    "pulls/get-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListResponseBody",
	operationID:    "pulls/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListCommentsForReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListCommentsForReviewResponseBody",
	operationID:    "pulls/list-comments-for-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListCommitsResponseBody",
	operationID:    "pulls/list-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListFilesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/files",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListFilesResponseBody",
	operationID:    "pulls/list-files",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListRequestedReviewersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListRequestedReviewersResponseBody",
	operationID:    "pulls/list-requested-reviewers",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListReviewCommentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListReviewCommentsResponseBody",
	operationID:    "pulls/list-review-comments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListReviewCommentsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListReviewCommentsForRepoResponseBody",
	operationID:    "pulls/list-review-comments-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsListReviewsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "PullsListReviewsResponseBody",
	operationID:    "pulls/list-reviews",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsMergeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "PullsMergeResponseBody",
	operationID:    "pulls/merge",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsRequestReviewersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "PullsRequestReviewersResponseBody",
	operationID:    "pulls/request-reviewers",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsSubmitReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "PullsSubmitReviewResponseBody",
	operationID:    "pulls/submit-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "PullsUpdateResponseBody",
	operationID:    "pulls/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
	httpMethod:     "PUT",
	httpStatusCode: 202,
	name:           "PullsUpdateBranchResponseBody",
	operationID:    "pulls/update-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateReviewResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "PullsUpdateReviewResponseBody",
	operationID:    "pulls/update-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.PullsUpdateReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "PullsUpdateReviewCommentResponseBody",
	operationID:    "pulls/update-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.RateLimitGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/rate_limit",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "RateLimitGetResponseBody",
	operationID:    "rate-limit/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReactionsCreateForCommitCommentResponseBody",
	operationID:    "reactions/create-for-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForCommitCommentResponseBody",
	operationID:    "reactions/create-for-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForIssueResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForIssueResponseBody",
	operationID:    "reactions/create-for-issue",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForIssueCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReactionsCreateForIssueCommentResponseBody",
	operationID:    "reactions/create-for-issue-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForIssueCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForIssueCommentResponseBody",
	operationID:    "reactions/create-for-issue-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForPullRequestReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReactionsCreateForPullRequestReviewCommentResponseBody",
	operationID:    "reactions/create-for-pull-request-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForPullRequestReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForPullRequestReviewCommentResponseBody",
	operationID:    "reactions/create-for-pull-request-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForTeamDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForTeamDiscussionCommentInOrgResponseBody",
	operationID:    "reactions/create-for-team-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForTeamDiscussionCommentLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForTeamDiscussionCommentLegacyResponseBody",
	operationID:    "reactions/create-for-team-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForTeamDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForTeamDiscussionInOrgResponseBody",
	operationID:    "reactions/create-for-team-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsCreateForTeamDiscussionLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReactionsCreateForTeamDiscussionLegacyResponseBody",
	operationID:    "reactions/create-for-team-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForCommitCommentResponseBody",
	operationID:    "reactions/list-for-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForIssueResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForIssueResponseBody",
	operationID:    "reactions/list-for-issue",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForIssueCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForIssueCommentResponseBody",
	operationID:    "reactions/list-for-issue-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForPullRequestReviewCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForPullRequestReviewCommentResponseBody",
	operationID:    "reactions/list-for-pull-request-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForTeamDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForTeamDiscussionCommentInOrgResponseBody",
	operationID:    "reactions/list-for-team-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForTeamDiscussionCommentLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForTeamDiscussionCommentLegacyResponseBody",
	operationID:    "reactions/list-for-team-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForTeamDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForTeamDiscussionInOrgResponseBody",
	operationID:    "reactions/list-for-team-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReactionsListForTeamDiscussionLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReactionsListForTeamDiscussionLegacyResponseBody",
	operationID:    "reactions/list-for-team-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddAppAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddAppAccessRestrictionsResponseBody",
	operationID:    "repos/add-app-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddCollaboratorResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "ReposAddCollaboratorResponseBody",
	operationID:    "repos/add-collaborator",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddStatusCheckContextsResponseBody",
	operationID:    "repos/add-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddTeamAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddTeamAccessRestrictionsResponseBody",
	operationID:    "repos/add-team-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposAddUserAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposAddUserAccessRestrictionsResponseBody",
	operationID:    "repos/add-user-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCompareCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/compare/{base}...{head}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposCompareCommitsResponseBody",
	operationID:    "repos/compare-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateCommitCommentResponseBody",
	operationID:    "repos/create-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateCommitSignatureProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposCreateCommitSignatureProtectionResponseBody",
	operationID:    "repos/create-commit-signature-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateCommitStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/statuses/{sha}",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateCommitStatusResponseBody",
	operationID:    "repos/create-commit-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateDeployKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateDeployKeyResponseBody",
	operationID:    "repos/create-deploy-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateDeploymentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateDeploymentResponseBody",
	operationID:    "repos/create-deployment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateDeploymentStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateDeploymentStatusResponseBody",
	operationID:    "repos/create-deployment-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repos",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateForAuthenticatedUserResponseBody",
	operationID:    "repos/create-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateForkResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/forks",
	httpMethod:     "POST",
	httpStatusCode: 202,
	name:           "ReposCreateForkResponseBody",
	operationID:    "repos/create-fork",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/repos",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateInOrgResponseBody",
	operationID:    "repos/create-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateOrUpdateFileContentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposCreateOrUpdateFileContentsResponseBody",
	operationID:    "repos/create-or-update-file-contents",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateOrUpdateFileContentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "ReposCreateOrUpdateFileContentsResponseBody",
	operationID:    "repos/create-or-update-file-contents",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreatePagesSiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreatePagesSiteResponseBody",
	operationID:    "repos/create-pages-site",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateReleaseResponseBody",
	operationID:    "repos/create-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateUsingTemplateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{template_owner}/{template_repo}/generate",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateUsingTemplateResponseBody",
	operationID:    "repos/create-using-template",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposCreateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposCreateWebhookResponseBody",
	operationID:    "repos/create-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposDeleteFileResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposDeleteFileResponseBody",
	operationID:    "repos/delete-file",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetResponseBody",
	operationID:    "repos/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAccessRestrictionsResponseBody",
	operationID:    "repos/get-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAdminBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAdminBranchProtectionResponseBody",
	operationID:    "repos/get-admin-branch-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAllStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAllStatusCheckContextsResponseBody",
	operationID:    "repos/get-all-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAllTopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/topics",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAllTopicsResponseBody",
	operationID:    "repos/get-all-topics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetAppsWithAccessToProtectedBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetAppsWithAccessToProtectedBranchResponseBody",
	operationID:    "repos/get-apps-with-access-to-protected-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetBranchResponseBody",
	operationID:    "repos/get-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetBranchProtectionResponseBody",
	operationID:    "repos/get-branch-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetClonesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/clones",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetClonesResponseBody",
	operationID:    "repos/get-clones",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCodeFrequencyStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/code_frequency",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCodeFrequencyStatsResponseBody",
	operationID:    "repos/get-code-frequency-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCollaboratorPermissionLevelResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators/{username}/permission",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCollaboratorPermissionLevelResponseBody",
	operationID:    "repos/get-collaborator-permission-level",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCombinedStatusForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/status",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCombinedStatusForRefResponseBody",
	operationID:    "repos/get-combined-status-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitResponseBody",
	operationID:    "repos/get-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitActivityStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/commit_activity",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitActivityStatsResponseBody",
	operationID:    "repos/get-commit-activity-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitCommentResponseBody",
	operationID:    "repos/get-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommitSignatureProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommitSignatureProtectionResponseBody",
	operationID:    "repos/get-commit-signature-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetCommunityProfileMetricsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/community/profile",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetCommunityProfileMetricsResponseBody",
	operationID:    "repos/get-community-profile-metrics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetContentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetContentResponseBody",
	operationID:    "repos/get-content",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetContributorsStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/contributors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetContributorsStatsResponseBody",
	operationID:    "repos/get-contributors-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetDeployKeyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys/{key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetDeployKeyResponseBody",
	operationID:    "repos/get-deploy-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetDeploymentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetDeploymentResponseBody",
	operationID:    "repos/get-deployment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetDeploymentStatusResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetDeploymentStatusResponseBody",
	operationID:    "repos/get-deployment-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetLatestPagesBuildResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds/latest",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetLatestPagesBuildResponseBody",
	operationID:    "repos/get-latest-pages-build",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetLatestReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/latest",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetLatestReleaseResponseBody",
	operationID:    "repos/get-latest-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPagesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPagesResponseBody",
	operationID:    "repos/get-pages",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPagesBuildResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds/{build_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPagesBuildResponseBody",
	operationID:    "repos/get-pages-build",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetParticipationStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/participation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetParticipationStatsResponseBody",
	operationID:    "repos/get-participation-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPullRequestReviewProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPullRequestReviewProtectionResponseBody",
	operationID:    "repos/get-pull-request-review-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetPunchCardStatsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/punch_card",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetPunchCardStatsResponseBody",
	operationID:    "repos/get-punch-card-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReadmeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/readme",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReadmeResponseBody",
	operationID:    "repos/get-readme",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReleaseResponseBody",
	operationID:    "repos/get-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReleaseAssetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/assets/{asset_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReleaseAssetResponseBody",
	operationID:    "repos/get-release-asset",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetReleaseByTagResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/tags/{tag}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetReleaseByTagResponseBody",
	operationID:    "repos/get-release-by-tag",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetStatusChecksProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetStatusChecksProtectionResponseBody",
	operationID:    "repos/get-status-checks-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetTeamsWithAccessToProtectedBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetTeamsWithAccessToProtectedBranchResponseBody",
	operationID:    "repos/get-teams-with-access-to-protected-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetTopPathsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/popular/paths",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetTopPathsResponseBody",
	operationID:    "repos/get-top-paths",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetTopReferrersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/popular/referrers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetTopReferrersResponseBody",
	operationID:    "repos/get-top-referrers",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetUsersWithAccessToProtectedBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetUsersWithAccessToProtectedBranchResponseBody",
	operationID:    "repos/get-users-with-access-to-protected-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetViewsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/views",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetViewsResponseBody",
	operationID:    "repos/get-views",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposGetWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks/{hook_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposGetWebhookResponseBody",
	operationID:    "repos/get-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListBranchesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListBranchesResponseBody",
	operationID:    "repos/list-branches",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListBranchesForHeadCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListBranchesForHeadCommitResponseBody",
	operationID:    "repos/list-branches-for-head-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCollaboratorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCollaboratorsResponseBody",
	operationID:    "repos/list-collaborators",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommentsForCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommentsForCommitResponseBody",
	operationID:    "repos/list-comments-for-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommitCommentsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommitCommentsForRepoResponseBody",
	operationID:    "repos/list-commit-comments-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommitStatusesForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/statuses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommitStatusesForRefResponseBody",
	operationID:    "repos/list-commit-statuses-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListCommitsResponseBody",
	operationID:    "repos/list-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListContributorsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contributors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListContributorsResponseBody",
	operationID:    "repos/list-contributors",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListDeployKeysResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListDeployKeysResponseBody",
	operationID:    "repos/list-deploy-keys",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListDeploymentStatusesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListDeploymentStatusesResponseBody",
	operationID:    "repos/list-deployment-statuses",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListDeploymentsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListDeploymentsResponseBody",
	operationID:    "repos/list-deployments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListForAuthenticatedUserResponseBody",
	operationID:    "repos/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListForOrgResponseBody",
	operationID:    "repos/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListForUserResponseBody",
	operationID:    "repos/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListForksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/forks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListForksResponseBody",
	operationID:    "repos/list-forks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListInvitationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListInvitationsResponseBody",
	operationID:    "repos/list-invitations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListInvitationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repository_invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListInvitationsForAuthenticatedUserResponseBody",
	operationID:    "repos/list-invitations-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListLanguagesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/languages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListLanguagesResponseBody",
	operationID:    "repos/list-languages",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListPagesBuildsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListPagesBuildsResponseBody",
	operationID:    "repos/list-pages-builds",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListPublicResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListPublicResponseBody",
	operationID:    "repos/list-public",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListPullRequestsAssociatedWithCommitResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListPullRequestsAssociatedWithCommitResponseBody",
	operationID:    "repos/list-pull-requests-associated-with-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListReleaseAssetsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}/assets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListReleaseAssetsResponseBody",
	operationID:    "repos/list-release-assets",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListReleasesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListReleasesResponseBody",
	operationID:    "repos/list-releases",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListTagsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/tags",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListTagsResponseBody",
	operationID:    "repos/list-tags",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListTeamsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListTeamsResponseBody",
	operationID:    "repos/list-teams",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposListWebhooksResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ReposListWebhooksResponseBody",
	operationID:    "repos/list-webhooks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposMergeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/merges",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposMergeResponseBody",
	operationID:    "repos/merge",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveAppAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveAppAccessRestrictionsResponseBody",
	operationID:    "repos/remove-app-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveStatusCheckContextsResponseBody",
	operationID:    "repos/remove-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveTeamAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveTeamAccessRestrictionsResponseBody",
	operationID:    "repos/remove-team-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRemoveUserAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "ReposRemoveUserAccessRestrictionsResponseBody",
	operationID:    "repos/remove-user-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposReplaceAllTopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/topics",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposReplaceAllTopicsResponseBody",
	operationID:    "repos/replace-all-topics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposRequestPagesBuildResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposRequestPagesBuildResponseBody",
	operationID:    "repos/request-pages-build",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetAdminBranchProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "ReposSetAdminBranchProtectionResponseBody",
	operationID:    "repos/set-admin-branch-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetAppAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetAppAccessRestrictionsResponseBody",
	operationID:    "repos/set-app-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetStatusCheckContextsResponseBody",
	operationID:    "repos/set-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetTeamAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetTeamAccessRestrictionsResponseBody",
	operationID:    "repos/set-team-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposSetUserAccessRestrictionsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ReposSetUserAccessRestrictionsResponseBody",
	operationID:    "repos/set-user-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposTransferResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/transfer",
	httpMethod:     "POST",
	httpStatusCode: 202,
	name:           "ReposTransferResponseBody",
	operationID:    "repos/transfer",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateResponseBody",
	operationID:    "repos/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateCommitCommentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateCommitCommentResponseBody",
	operationID:    "repos/update-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateInvitationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/invitations/{invitation_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateInvitationResponseBody",
	operationID:    "repos/update-invitation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdatePullRequestReviewProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdatePullRequestReviewProtectionResponseBody",
	operationID:    "repos/update-pull-request-review-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateReleaseResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateReleaseResponseBody",
	operationID:    "repos/update-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateReleaseAssetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/assets/{asset_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateReleaseAssetResponseBody",
	operationID:    "repos/update-release-asset",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateStatusCheckProtectionResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateStatusCheckProtectionResponseBody",
	operationID:    "repos/update-status-check-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUpdateWebhookResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks/{hook_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ReposUpdateWebhookResponseBody",
	operationID:    "repos/update-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ReposUploadReleaseAssetResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}/assets",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ReposUploadReleaseAssetResponseBody",
	operationID:    "repos/upload-release-asset",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimGetProvisioningInformationForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ScimGetProvisioningInformationForUserResponseBody",
	operationID:    "scim/get-provisioning-information-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimListProvisionedIdentitiesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "ScimListProvisionedIdentitiesResponseBody",
	operationID:    "scim/list-provisioned-identities",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimProvisionAndInviteUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "ScimProvisionAndInviteUserResponseBody",
	operationID:    "scim/provision-and-invite-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimSetInformationForProvisionedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "ScimSetInformationForProvisionedUserResponseBody",
	operationID:    "scim/set-information-for-provisioned-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.ScimUpdateAttributeForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "ScimUpdateAttributeForUserResponseBody",
	operationID:    "scim/update-attribute-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchCodeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/code",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchCodeResponseBody",
	operationID:    "search/code",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchCommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchCommitsResponseBody",
	operationID:    "search/commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchIssuesAndPullRequestsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchIssuesAndPullRequestsResponseBody",
	operationID:    "search/issues-and-pull-requests",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchLabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchLabelsResponseBody",
	operationID:    "search/labels",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchReposResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchReposResponseBody",
	operationID:    "search/repos",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchTopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/topics",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchTopicsResponseBody",
	operationID:    "search/topics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.SearchUsersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "SearchUsersResponseBody",
	operationID:    "search/users",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsAddOrUpdateMembershipForUserInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "TeamsAddOrUpdateMembershipForUserInOrgResponseBody",
	operationID:    "teams/add-or-update-membership-for-user-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsAddOrUpdateMembershipForUserLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "TeamsAddOrUpdateMembershipForUserLegacyResponseBody",
	operationID:    "teams/add-or-update-membership-for-user-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCheckPermissionsForProjectInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsCheckPermissionsForProjectInOrgResponseBody",
	operationID:    "teams/check-permissions-for-project-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCheckPermissionsForProjectLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsCheckPermissionsForProjectLegacyResponseBody",
	operationID:    "teams/check-permissions-for-project-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCheckPermissionsForRepoInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsCheckPermissionsForRepoInOrgResponseBody",
	operationID:    "teams/check-permissions-for-repo-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCheckPermissionsForRepoLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsCheckPermissionsForRepoLegacyResponseBody",
	operationID:    "teams/check-permissions-for-repo-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateResponseBody",
	operationID:    "teams/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateDiscussionCommentInOrgResponseBody",
	operationID:    "teams/create-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateDiscussionCommentLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateDiscussionCommentLegacyResponseBody",
	operationID:    "teams/create-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateDiscussionInOrgResponseBody",
	operationID:    "teams/create-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateDiscussionLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "TeamsCreateDiscussionLegacyResponseBody",
	operationID:    "teams/create-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsCreateOrUpdateIdpGroupConnectionsInOrgResponseBody",
	operationID:    "teams/create-or-update-idp-group-connections-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/team-sync/group-mappings",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsCreateOrUpdateIdpGroupConnectionsLegacyResponseBody",
	operationID:    "teams/create-or-update-idp-group-connections-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetByNameResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetByNameResponseBody",
	operationID:    "teams/get-by-name",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetDiscussionCommentInOrgResponseBody",
	operationID:    "teams/get-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetDiscussionCommentLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetDiscussionCommentLegacyResponseBody",
	operationID:    "teams/get-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetDiscussionInOrgResponseBody",
	operationID:    "teams/get-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetDiscussionLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetDiscussionLegacyResponseBody",
	operationID:    "teams/get-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetLegacyResponseBody",
	operationID:    "teams/get-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetMembershipForUserInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetMembershipForUserInOrgResponseBody",
	operationID:    "teams/get-membership-for-user-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsGetMembershipForUserLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsGetMembershipForUserLegacyResponseBody",
	operationID:    "teams/get-membership-for-user-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListResponseBody",
	operationID:    "teams/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListChildInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListChildInOrgResponseBody",
	operationID:    "teams/list-child-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListChildLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListChildLegacyResponseBody",
	operationID:    "teams/list-child-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListDiscussionCommentsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListDiscussionCommentsInOrgResponseBody",
	operationID:    "teams/list-discussion-comments-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListDiscussionCommentsLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListDiscussionCommentsLegacyResponseBody",
	operationID:    "teams/list-discussion-comments-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListDiscussionsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListDiscussionsInOrgResponseBody",
	operationID:    "teams/list-discussions-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListDiscussionsLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListDiscussionsLegacyResponseBody",
	operationID:    "teams/list-discussions-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListForAuthenticatedUserResponseBody",
	operationID:    "teams/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListIdpGroupsForLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/team-sync/group-mappings",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListIdpGroupsForLegacyResponseBody",
	operationID:    "teams/list-idp-groups-for-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListIdpGroupsForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/team-sync/groups",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListIdpGroupsForOrgResponseBody",
	operationID:    "teams/list-idp-groups-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListIdpGroupsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListIdpGroupsInOrgResponseBody",
	operationID:    "teams/list-idp-groups-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListMembersInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListMembersInOrgResponseBody",
	operationID:    "teams/list-members-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListMembersLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListMembersLegacyResponseBody",
	operationID:    "teams/list-members-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListPendingInvitationsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListPendingInvitationsInOrgResponseBody",
	operationID:    "teams/list-pending-invitations-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListPendingInvitationsLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListPendingInvitationsLegacyResponseBody",
	operationID:    "teams/list-pending-invitations-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListProjectsInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListProjectsInOrgResponseBody",
	operationID:    "teams/list-projects-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListProjectsLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListProjectsLegacyResponseBody",
	operationID:    "teams/list-projects-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListReposInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListReposInOrgResponseBody",
	operationID:    "teams/list-repos-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsListReposLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "TeamsListReposLegacyResponseBody",
	operationID:    "teams/list-repos-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateDiscussionCommentInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsUpdateDiscussionCommentInOrgResponseBody",
	operationID:    "teams/update-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateDiscussionCommentLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsUpdateDiscussionCommentLegacyResponseBody",
	operationID:    "teams/update-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateDiscussionInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsUpdateDiscussionInOrgResponseBody",
	operationID:    "teams/update-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateDiscussionLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "TeamsUpdateDiscussionLegacyResponseBody",
	operationID:    "teams/update-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateInOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}",
	httpMethod:     "PATCH",
	httpStatusCode: 201,
	name:           "TeamsUpdateInOrgResponseBody",
	operationID:    "teams/update-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.TeamsUpdateLegacyResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 201,
	name:           "TeamsUpdateLegacyResponseBody",
	operationID:    "teams/update-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersAddEmailForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/emails",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "UsersAddEmailForAuthenticatedResponseBody",
	operationID:    "users/add-email-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersCreateGpgKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "UsersCreateGpgKeyForAuthenticatedResponseBody",
	operationID:    "users/create-gpg-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersCreatePublicSshKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "UsersCreatePublicSshKeyForAuthenticatedResponseBody",
	operationID:    "users/create-public-ssh-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetAuthenticatedResponseBody",
	operationID:    "users/get-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetByUsernameResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetByUsernameResponseBody",
	operationID:    "users/get-by-username",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetContextForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/hovercard",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetContextForUserResponseBody",
	operationID:    "users/get-context-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetGpgKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys/{gpg_key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetGpgKeyForAuthenticatedResponseBody",
	operationID:    "users/get-gpg-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersGetPublicSshKeyForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys/{key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersGetPublicSshKeyForAuthenticatedResponseBody",
	operationID:    "users/get-public-ssh-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListResponseBody",
	operationID:    "users/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListBlockedByAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/blocks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListBlockedByAuthenticatedResponseBody",
	operationID:    "users/list-blocked-by-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListEmailsForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/emails",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListEmailsForAuthenticatedResponseBody",
	operationID:    "users/list-emails-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowedByAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/following",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowedByAuthenticatedResponseBody",
	operationID:    "users/list-followed-by-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowersForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/followers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowersForAuthenticatedUserResponseBody",
	operationID:    "users/list-followers-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowersForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/followers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowersForUserResponseBody",
	operationID:    "users/list-followers-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListFollowingForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/following",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListFollowingForUserResponseBody",
	operationID:    "users/list-following-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListGpgKeysForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListGpgKeysForAuthenticatedResponseBody",
	operationID:    "users/list-gpg-keys-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListGpgKeysForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/gpg_keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListGpgKeysForUserResponseBody",
	operationID:    "users/list-gpg-keys-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListPublicEmailsForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/public_emails",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListPublicEmailsForAuthenticatedResponseBody",
	operationID:    "users/list-public-emails-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListPublicKeysForUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListPublicKeysForUserResponseBody",
	operationID:    "users/list-public-keys-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersListPublicSshKeysForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "UsersListPublicSshKeysForAuthenticatedResponseBody",
	operationID:    "users/list-public-ssh-keys-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersSetPrimaryEmailVisibilityForAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/email/visibility",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "UsersSetPrimaryEmailVisibilityForAuthenticatedResponseBody",
	operationID:    "users/set-primary-email-visibility-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := octo.UsersUpdateAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "UsersUpdateAuthenticatedResponseBody",
	operationID:    "users/update-authenticated",
}}
