// Code generated by octo-go; DO NOT EDIT.

package octo_test

import (
	"encoding/json"
	components "github.com/willabides/octo-go/components"
	actions "github.com/willabides/octo-go/requests/actions"
	apps "github.com/willabides/octo-go/requests/apps"
	checks "github.com/willabides/octo-go/requests/checks"
	gitignore "github.com/willabides/octo-go/requests/gitignore"
	orgs "github.com/willabides/octo-go/requests/orgs"
	pulls "github.com/willabides/octo-go/requests/pulls"
	repos "github.com/willabides/octo-go/requests/repos"
	search "github.com/willabides/octo-go/requests/search"
	users "github.com/willabides/octo-go/requests/users"
)

func init() {
	unmarshalResponseBodyTests = append(unmarshalResponseBodyTests, generatedUnmarshalResponseBodyTests...)
}

var generatedUnmarshalResponseBodyTests = []unmarshalResponseBodyTest{{
	decode: func(decoder *json.Decoder) error {
		target := components.AuthenticationToken{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/registration-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.AuthenticationToken",
	operationID:    "actions/create-registration-token-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.AuthenticationToken{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/registration-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.AuthenticationToken",
	operationID:    "actions/create-registration-token-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.AuthenticationToken{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/remove-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.AuthenticationToken",
	operationID:    "actions/create-remove-token-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.AuthenticationToken{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/remove-token",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.AuthenticationToken",
	operationID:    "actions/create-remove-token-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Artifact{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Artifact",
	operationID:    "actions/get-artifact",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Job{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/jobs/{job_id}",
	httpMethod:     "GET",
	httpStatusCode: 202,
	name:           "components.Job",
	operationID:    "actions/get-job-for-workflow-run",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ActionsPublicKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/public-key",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ActionsPublicKey",
	operationID:    "actions/get-org-public-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrganizationActionsSecret{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/{secret_name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.OrganizationActionsSecret",
	operationID:    "actions/get-org-secret",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ActionsPublicKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets/public-key",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ActionsPublicKey",
	operationID:    "actions/get-repo-public-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ActionsSecret{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ActionsSecret",
	operationID:    "actions/get-repo-secret",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Runner{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/{runner_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Runner",
	operationID:    "actions/get-self-hosted-runner-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Runner{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/{runner_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Runner",
	operationID:    "actions/get-self-hosted-runner-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Workflow{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Workflow",
	operationID:    "actions/get-workflow",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.WorkflowRun{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.WorkflowRun",
	operationID:    "actions/get-workflow-run",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.WorkflowRunUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/timing",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.WorkflowRunUsage",
	operationID:    "actions/get-workflow-run-usage",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.WorkflowUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.WorkflowUsage",
	operationID:    "actions/get-workflow-usage",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListArtifactsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/artifacts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListArtifactsForRepoResponseBody",
	operationID:    "actions/list-artifacts-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListJobsForWorkflowRunResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListJobsForWorkflowRunResponseBody",
	operationID:    "actions/list-jobs-for-workflow-run",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListOrgSecretsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListOrgSecretsResponseBody",
	operationID:    "actions/list-org-secrets",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListRepoSecretsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/secrets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListRepoSecretsResponseBody",
	operationID:    "actions/list-repo-secrets",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListRepoWorkflowsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListRepoWorkflowsResponseBody",
	operationID:    "actions/list-repo-workflows",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.RunnerApplication{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners/downloads",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.RunnerApplication",
	operationID:    "actions/list-runner-applications-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.RunnerApplication{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners/downloads",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.RunnerApplication",
	operationID:    "actions/list-runner-applications-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListSelectedReposForOrgSecretResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/secrets/{secret_name}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListSelectedReposForOrgSecretResponseBody",
	operationID:    "actions/list-selected-repos-for-org-secret",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListSelfHostedRunnersForOrgResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/actions/runners",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListSelfHostedRunnersForOrgResponseBody",
	operationID:    "actions/list-self-hosted-runners-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListSelfHostedRunnersForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runners",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListSelfHostedRunnersForRepoResponseBody",
	operationID:    "actions/list-self-hosted-runners-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListWorkflowRunArtifactsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListWorkflowRunArtifactsResponseBody",
	operationID:    "actions/list-workflow-run-artifacts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListWorkflowRunsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListWorkflowRunsResponseBody",
	operationID:    "actions/list-workflow-runs",
}, {
	decode: func(decoder *json.Decoder) error {
		target := actions.ListWorkflowRunsForRepoResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/actions/runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListWorkflowRunsForRepoResponseBody",
	operationID:    "actions/list-workflow-runs-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Feed{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/feeds",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Feed",
	operationID:    "activity/get-feeds",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RepositorySubscription{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscription",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.RepositorySubscription",
	operationID:    "activity/get-repo-subscription",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Thread{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Thread",
	operationID:    "activity/get-thread",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ThreadSubscription{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}/subscription",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ThreadSubscription",
	operationID:    "activity/get-thread-subscription-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Thread{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Thread",
	operationID:    "activity/list-notifications-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Thread{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/notifications",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Thread",
	operationID:    "activity/list-repo-notifications-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.StarredRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.StarredRepository",
	operationID:    "activity/list-repos-starred-by-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.StarredRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.StarredRepository",
	operationID:    "activity/list-repos-starred-by-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/subscriptions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "activity/list-repos-watched-by-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Stargazer{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stargazers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Stargazer",
	operationID:    "activity/list-stargazers-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/subscriptions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "activity/list-watched-repos-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscribers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "activity/list-watchers-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RepositorySubscription{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/subscription",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.RepositorySubscription",
	operationID:    "activity/set-repo-subscription",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ThreadSubscription{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/notifications/threads/{thread_id}/subscription",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.ThreadSubscription",
	operationID:    "activity/set-thread-subscription",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/tokens/{access_token}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "apps/check-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/token",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "apps/check-token",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ContentReferenceAttachment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/content_references/{content_reference_id}/attachments",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.ContentReferenceAttachment",
	operationID:    "apps/create-content-attachment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := apps.CreateFromManifestResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app-manifests/{code}/conversions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "octo.CreateFromManifestResponseBody",
	operationID:    "apps/create-from-manifest",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.InstallationToken{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations/{installation_id}/access_tokens",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.InstallationToken",
	operationID:    "apps/create-installation-access-token",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Integration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Integration",
	operationID:    "apps/get-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Integration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/apps/{app_slug}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Integration",
	operationID:    "apps/get-by-slug",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Installation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations/{installation_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Installation",
	operationID:    "apps/get-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Installation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Installation",
	operationID:    "apps/get-org-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Installation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Installation",
	operationID:    "apps/get-repo-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.MarketplacePurchase{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/accounts/{account_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.MarketplacePurchase",
	operationID:    "apps/get-subscription-plan-for-account",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.MarketplacePurchase{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/accounts/{account_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.MarketplacePurchase",
	operationID:    "apps/get-subscription-plan-for-account-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Installation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/installation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Installation",
	operationID:    "apps/get-user-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MarketplacePurchase{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/plans/{plan_id}/accounts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MarketplacePurchase",
	operationID:    "apps/list-accounts-for-plan",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MarketplacePurchase{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/plans/{plan_id}/accounts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MarketplacePurchase",
	operationID:    "apps/list-accounts-for-plan-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := apps.ListInstallationReposForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/installations/{installation_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListInstallationReposForAuthenticatedUserResponseBody",
	operationID:    "apps/list-installation-repos-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Installation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/app/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Installation",
	operationID:    "apps/list-installations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := apps.ListInstallationsForAuthenticatedUserResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListInstallationsForAuthenticatedUserResponseBody",
	operationID:    "apps/list-installations-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MarketplaceListingPlan{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/plans",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MarketplaceListingPlan",
	operationID:    "apps/list-plans",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MarketplaceListingPlan{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/marketplace_listing/stubbed/plans",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MarketplaceListingPlan",
	operationID:    "apps/list-plans-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := apps.ListReposAccessibleToInstallationResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/installation/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListReposAccessibleToInstallationResponseBody",
	operationID:    "apps/list-repos-accessible-to-installation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.UserMarketplacePurchase{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/marketplace_purchases",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.UserMarketplacePurchase",
	operationID:    "apps/list-subscriptions-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.UserMarketplacePurchase{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/marketplace_purchases/stubbed",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.UserMarketplacePurchase",
	operationID:    "apps/list-subscriptions-for-authenticated-user-stubbed",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/tokens/{access_token}",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "apps/reset-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/{client_id}/token",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "apps/reset-token",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ActionsBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/enterprises/{enterprise_id}/settings/billing/actions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ActionsBillingUsage",
	operationID:    "billing/get-github-actions-billing-ghe",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ActionsBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/settings/billing/actions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ActionsBillingUsage",
	operationID:    "billing/get-github-actions-billing-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ActionsBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/settings/billing/actions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ActionsBillingUsage",
	operationID:    "billing/get-github-actions-billing-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PackagesBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/enterprises/{enterprise_id}/settings/billing/packages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PackagesBillingUsage",
	operationID:    "billing/get-github-packages-billing-ghe",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PackagesBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/settings/billing/packages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PackagesBillingUsage",
	operationID:    "billing/get-github-packages-billing-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PackagesBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/settings/billing/packages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PackagesBillingUsage",
	operationID:    "billing/get-github-packages-billing-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CombinedBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/enterprises/{enterprise_id}/settings/billing/shared-storage",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CombinedBillingUsage",
	operationID:    "billing/get-shared-storage-billing-ghe",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CombinedBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/settings/billing/shared-storage",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CombinedBillingUsage",
	operationID:    "billing/get-shared-storage-billing-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CombinedBillingUsage{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/settings/billing/shared-storage",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CombinedBillingUsage",
	operationID:    "billing/get-shared-storage-billing-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CheckRun{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.CheckRun",
	operationID:    "checks/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CheckSuite{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.CheckSuite",
	operationID:    "checks/create-suite",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CheckRun{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CheckRun",
	operationID:    "checks/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CheckSuite{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CheckSuite",
	operationID:    "checks/get-suite",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CheckAnnotation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CheckAnnotation",
	operationID:    "checks/list-annotations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := checks.ListForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/check-runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListForRefResponseBody",
	operationID:    "checks/list-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := checks.ListForSuiteResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListForSuiteResponseBody",
	operationID:    "checks/list-for-suite",
}, {
	decode: func(decoder *json.Decoder) error {
		target := checks.ListSuitesForRefResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/check-suites",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListSuitesForRefResponseBody",
	operationID:    "checks/list-suites-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CheckSuitePreference{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-suites/preferences",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.CheckSuitePreference",
	operationID:    "checks/set-suites-preferences",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CheckRun{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/check-runs/{check_run_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.CheckRun",
	operationID:    "checks/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CodeScanningAlert{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/code-scanning/alerts/{alert_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CodeScanningAlert",
	operationID:    "code-scanning/get-alert",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CodeScanningAlert{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/code-scanning/alerts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CodeScanningAlert",
	operationID:    "code-scanning/list-alerts-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CodeOfConduct{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/codes_of_conduct",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CodeOfConduct",
	operationID:    "codes-of-conduct/get-all-codes-of-conduct",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CodeOfConduct{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/codes_of_conduct/{key}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CodeOfConduct",
	operationID:    "codes-of-conduct/get-conduct-code",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CodeOfConduct{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/community/code_of_conduct",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CodeOfConduct",
	operationID:    "codes-of-conduct/get-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GistFull",
	operationID:    "gists/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GistComment",
	operationID:    "gists/create-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.BaseGist{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/forks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.BaseGist",
	operationID:    "gists/fork",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GistFull",
	operationID:    "gists/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GistComment",
	operationID:    "gists/get-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/{sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GistFull",
	operationID:    "gists/get-revision",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.BaseGist{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.BaseGist",
	operationID:    "gists/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.GistComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.GistComment",
	operationID:    "gists/list-comments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.GistCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.GistCommit",
	operationID:    "gists/list-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.BaseGist{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/gists",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.BaseGist",
	operationID:    "gists/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.GistFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/forks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.GistFull",
	operationID:    "gists/list-forks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.BaseGist{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/public",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.BaseGist",
	operationID:    "gists/list-public",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.BaseGist{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/starred",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.BaseGist",
	operationID:    "gists/list-starred",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.GistFull",
	operationID:    "gists/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GistComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gists/{gist_id}/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.GistComment",
	operationID:    "gists/update-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ShortBlob{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/blobs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.ShortBlob",
	operationID:    "git/create-blob",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/commits",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GitCommit",
	operationID:    "git/create-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitRef{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/refs",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GitRef",
	operationID:    "git/create-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitTag{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/tags",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GitTag",
	operationID:    "git/create-tag",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitTree{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/trees",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GitTree",
	operationID:    "git/create-tree",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Blob{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/blobs/{file_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Blob",
	operationID:    "git/get-blob",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/commits/{commit_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GitCommit",
	operationID:    "git/get-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitRef{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/ref/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GitRef",
	operationID:    "git/get-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitTag{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/tags/{tag_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GitTag",
	operationID:    "git/get-tag",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitTree{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/trees/{tree_sha}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GitTree",
	operationID:    "git/get-tree",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.GitRef{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/matching-refs/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.GitRef",
	operationID:    "git/list-matching-refs",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitRef{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/git/refs/{ref}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.GitRef",
	operationID:    "git/update-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := gitignore.GetAllTemplatesResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gitignore/templates",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.GetAllTemplatesResponseBody",
	operationID:    "gitignore/get-all-templates",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GitignoreTemplate{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/gitignore/templates/{name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GitignoreTemplate",
	operationID:    "gitignore/get-template",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.InteractionLimit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/interaction-limits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.InteractionLimit",
	operationID:    "interactions/get-restrictions-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.InteractionLimit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/interaction-limits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.InteractionLimit",
	operationID:    "interactions/get-restrictions-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.InteractionLimit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/interaction-limits",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.InteractionLimit",
	operationID:    "interactions/set-restrictions-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.InteractionLimit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/interaction-limits",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.InteractionLimit",
	operationID:    "interactions/set-restrictions-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.IssueSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.IssueSimple",
	operationID:    "issues/add-assignees",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "[]components.Label",
	operationID:    "issues/add-labels",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Issue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Issue",
	operationID:    "issues/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.IssueComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.IssueComment",
	operationID:    "issues/create-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Label",
	operationID:    "issues/create-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Milestone{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Milestone",
	operationID:    "issues/create-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Issue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Issue",
	operationID:    "issues/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.IssueComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.IssueComment",
	operationID:    "issues/get-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.IssueEvent{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/events/{event_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.IssueEvent",
	operationID:    "issues/get-event",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels/{name}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Label",
	operationID:    "issues/get-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Milestone{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Milestone",
	operationID:    "issues/get-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Issue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Issue",
	operationID:    "issues/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/assignees",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "issues/list-assignees",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.IssueComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.IssueComment",
	operationID:    "issues/list-comments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.IssueComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.IssueComment",
	operationID:    "issues/list-comments-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.IssueEventForIssue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/events",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.IssueEventForIssue",
	operationID:    "issues/list-events",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.IssueEvent{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/events",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.IssueEvent",
	operationID:    "issues/list-events-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.IssueEventForIssue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.IssueEventForIssue",
	operationID:    "issues/list-events-for-timeline",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Issue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Issue",
	operationID:    "issues/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Issue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Issue",
	operationID:    "issues/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.IssueSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.IssueSimple",
	operationID:    "issues/list-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Label",
	operationID:    "issues/list-labels-for-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Label",
	operationID:    "issues/list-labels-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Label",
	operationID:    "issues/list-labels-on-issue",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Milestone{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Milestone",
	operationID:    "issues/list-milestones",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.IssueSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "components.IssueSimple",
	operationID:    "issues/remove-assignees",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "[]components.Label",
	operationID:    "issues/remove-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/labels",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "[]components.Label",
	operationID:    "issues/set-labels",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Issue{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Issue",
	operationID:    "issues/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.IssueComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.IssueComment",
	operationID:    "issues/update-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Label{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/labels/{name}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Label",
	operationID:    "issues/update-label",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Milestone{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/milestones/{milestone_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Milestone",
	operationID:    "issues/update-milestone",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.License{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/licenses/{license}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.License",
	operationID:    "licenses/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.LicenseSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/licenses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.LicenseSimple",
	operationID:    "licenses/get-all-commonly-used",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.LicenseContent{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/license",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.LicenseContent",
	operationID:    "licenses/get-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ApiOverview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/meta",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ApiOverview",
	operationID:    "meta/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PorterAuthor{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/authors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PorterAuthor",
	operationID:    "migrations/get-commit-authors",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Import{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Import",
	operationID:    "migrations/get-import-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PorterLargeFile{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/large_files",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PorterLargeFile",
	operationID:    "migrations/get-large-files",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Migration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations/{migration_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Migration",
	operationID:    "migrations/get-status-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Migration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations/{migration_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Migration",
	operationID:    "migrations/get-status-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Migration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Migration",
	operationID:    "migrations/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Migration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Migration",
	operationID:    "migrations/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations/{migration_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "migrations/list-repos-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations/{migration_id}/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "migrations/list-repos-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PorterAuthor{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/authors/{author_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.PorterAuthor",
	operationID:    "migrations/map-commit-author",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Import{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import/lfs",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Import",
	operationID:    "migrations/set-lfs-preference",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Migration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/migrations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Migration",
	operationID:    "migrations/start-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Migration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/migrations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Migration",
	operationID:    "migrations/start-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Import{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "components.Import",
	operationID:    "migrations/start-import",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Import{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/import",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Import",
	operationID:    "migrations/update-import",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/create-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/{authorization_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/get-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ApplicationGrant{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/grants/{grant_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ApplicationGrant",
	operationID:    "oauth-authorizations/get-grant",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}/{fingerprint}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/clients/{client_id}/{fingerprint}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Authorization",
	operationID:    "oauth-authorizations/list-authorizations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ApplicationGrant{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/applications/grants",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ApplicationGrant",
	operationID:    "oauth-authorizations/list-grants",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Authorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/authorizations/{authorization_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Authorization",
	operationID:    "oauth-authorizations/update-authorization",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrganizationInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.OrganizationInvitation",
	operationID:    "orgs/create-invitation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgHook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.OrgHook",
	operationID:    "orgs/create-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrganizationFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.OrganizationFull",
	operationID:    "orgs/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs/{org}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.OrgMembership",
	operationID:    "orgs/get-membership-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.OrgMembership",
	operationID:    "orgs/get-membership-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgHook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks/{hook_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.OrgHook",
	operationID:    "orgs/get-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrganizationSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/organizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrganizationSimple",
	operationID:    "orgs/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := orgs.ListAppInstallationsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/installations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ListAppInstallationsResponseBody",
	operationID:    "orgs/list-app-installations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/blocks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "orgs/list-blocked-users",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrganizationSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrganizationSimple",
	operationID:    "orgs/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrganizationSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrganizationSimple",
	operationID:    "orgs/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations/{invitation_id}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "orgs/list-invitation-teams",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "orgs/list-members",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrgMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrgMembership",
	operationID:    "orgs/list-memberships-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/outside_collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "orgs/list-outside-collaborators",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrganizationInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrganizationInvitation",
	operationID:    "orgs/list-pending-invitations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/public_members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "orgs/list-public-members",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CredentialAuthorization{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/credential-authorizations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CredentialAuthorization",
	operationID:    "orgs/list-saml-sso-authorizations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrgHook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrgHook",
	operationID:    "orgs/list-webhooks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.OrgMembership",
	operationID:    "orgs/set-membership-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrganizationFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.OrganizationFull",
	operationID:    "orgs/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/memberships/orgs/{org}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.OrgMembership",
	operationID:    "orgs/update-membership-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.OrgHook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/hooks/{hook_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.OrgHook",
	operationID:    "orgs/update-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProjectCard{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}/cards",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.ProjectCard",
	operationID:    "projects/create-card",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProjectColumn{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/columns",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.ProjectColumn",
	operationID:    "projects/create-column",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Project",
	operationID:    "projects/create-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Project",
	operationID:    "projects/create-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/projects",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Project",
	operationID:    "projects/create-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Project",
	operationID:    "projects/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProjectCard{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/cards/{card_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ProjectCard",
	operationID:    "projects/get-card",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProjectColumn{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ProjectColumn",
	operationID:    "projects/get-column",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RepositoryCollaboratorPermission{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/collaborators/{username}/permission",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.RepositoryCollaboratorPermission",
	operationID:    "projects/get-permission-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ProjectCard{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}/cards",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ProjectCard",
	operationID:    "projects/list-cards",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "projects/list-collaborators",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ProjectColumn{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}/columns",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ProjectColumn",
	operationID:    "projects/list-columns",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Project",
	operationID:    "projects/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Project",
	operationID:    "projects/list-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Project",
	operationID:    "projects/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Project{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/{project_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Project",
	operationID:    "projects/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProjectCard{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/cards/{card_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.ProjectCard",
	operationID:    "projects/update-card",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProjectColumn{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/projects/columns/{column_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.ProjectColumn",
	operationID:    "projects/update-column",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequest{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.PullRequest",
	operationID:    "pulls/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.PullRequestReviewComment",
	operationID:    "pulls/create-reply-for-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.PullRequestReview",
	operationID:    "pulls/create-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.PullRequestReviewComment",
	operationID:    "pulls/create-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "components.PullRequestReview",
	operationID:    "pulls/delete-pending-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.PullRequestReview",
	operationID:    "pulls/dismiss-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequest{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PullRequest",
	operationID:    "pulls/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PullRequestReview",
	operationID:    "pulls/get-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PullRequestReviewComment",
	operationID:    "pulls/get-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PullRequestSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PullRequestSimple",
	operationID:    "pulls/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ReviewComment",
	operationID:    "pulls/list-comments-for-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleCommit",
	operationID:    "pulls/list-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.DiffEntry{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/files",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.DiffEntry",
	operationID:    "pulls/list-files",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReviewRequest{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PullRequestReviewRequest",
	operationID:    "pulls/list-requested-reviewers",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PullRequestReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PullRequestReviewComment",
	operationID:    "pulls/list-review-comments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PullRequestReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PullRequestReviewComment",
	operationID:    "pulls/list-review-comments-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PullRequestReview",
	operationID:    "pulls/list-reviews",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestMergeResult{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.PullRequestMergeResult",
	operationID:    "pulls/merge",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.PullRequestSimple",
	operationID:    "pulls/request-reviewers",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.PullRequestReview",
	operationID:    "pulls/submit-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequest{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.PullRequest",
	operationID:    "pulls/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := pulls.UpdateBranchResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
	httpMethod:     "PUT",
	httpStatusCode: 202,
	name:           "octo.UpdateBranchResponseBody",
	operationID:    "pulls/update-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.PullRequestReview",
	operationID:    "pulls/update-review",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PullRequestReviewComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.PullRequestReviewComment",
	operationID:    "pulls/update-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RateLimitOverview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/rate_limit",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.RateLimitOverview",
	operationID:    "rate-limit/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-issue",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-issue-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-issue-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-pull-request-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-pull-request-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-team-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-team-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-team-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/reactions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Reaction",
	operationID:    "reactions/create-for-team-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-issue",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-issue-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-pull-request-review-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-team-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-team-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-team-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Reaction{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/reactions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Reaction",
	operationID:    "reactions/list-for-team-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Integration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "[]components.Integration",
	operationID:    "repos/add-app-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RepositoryInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "components.RepositoryInvitation",
	operationID:    "repos/add-collaborator",
}, {
	decode: func(decoder *json.Decoder) error {
		target := repos.AddStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "octo.AddStatusCheckContextsResponseBody",
	operationID:    "repos/add-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "repos/add-team-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "repos/add-user-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CommitComparison{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/compare/{base}...{head}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CommitComparison",
	operationID:    "repos/compare-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CommitComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.CommitComment",
	operationID:    "repos/create-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProtectedBranchAdminEnforced{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.ProtectedBranchAdminEnforced",
	operationID:    "repos/create-commit-signature-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Status{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/statuses/{sha}",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Status",
	operationID:    "repos/create-commit-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.DeployKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.DeployKey",
	operationID:    "repos/create-deploy-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Deployment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Deployment",
	operationID:    "repos/create-deployment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.DeploymentStatus{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.DeploymentStatus",
	operationID:    "repos/create-deployment-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Repository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repos",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Repository",
	operationID:    "repos/create-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Repository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/forks",
	httpMethod:     "POST",
	httpStatusCode: 202,
	name:           "components.Repository",
	operationID:    "repos/create-fork",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Repository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/repos",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Repository",
	operationID:    "repos/create-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.FileCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.FileCommit",
	operationID:    "repos/create-or-update-file-contents",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.FileCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "PUT",
	httpStatusCode: 201,
	name:           "components.FileCommit",
	operationID:    "repos/create-or-update-file-contents",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Page{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Page",
	operationID:    "repos/create-pages-site",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Release{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Release",
	operationID:    "repos/create-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Repository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{template_owner}/{template_repo}/generate",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Repository",
	operationID:    "repos/create-using-template",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Hook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Hook",
	operationID:    "repos/create-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.FileCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "components.FileCommit",
	operationID:    "repos/delete-file",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.FullRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.FullRepository",
	operationID:    "repos/get",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.BranchRestrictionPolicy{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.BranchRestrictionPolicy",
	operationID:    "repos/get-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProtectedBranchAdminEnforced{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ProtectedBranchAdminEnforced",
	operationID:    "repos/get-admin-branch-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := repos.GetAllStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.GetAllStatusCheckContextsResponseBody",
	operationID:    "repos/get-all-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Topic{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/topics",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Topic",
	operationID:    "repos/get-all-topics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Integration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Integration",
	operationID:    "repos/get-apps-with-access-to-protected-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.BranchWithProtection{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.BranchWithProtection",
	operationID:    "repos/get-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.BranchProtection{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.BranchProtection",
	operationID:    "repos/get-branch-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CloneTraffic{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/clones",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CloneTraffic",
	operationID:    "repos/get-clones",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CodeFrequencyStat{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/code_frequency",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CodeFrequencyStat",
	operationID:    "repos/get-code-frequency-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RepositoryCollaboratorPermission{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators/{username}/permission",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.RepositoryCollaboratorPermission",
	operationID:    "repos/get-collaborator-permission-level",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CombinedCommitStatus{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/status",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CombinedCommitStatus",
	operationID:    "repos/get-combined-status-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Commit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Commit",
	operationID:    "repos/get-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CommitActivity{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/commit_activity",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CommitActivity",
	operationID:    "repos/get-commit-activity-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CommitComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CommitComment",
	operationID:    "repos/get-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProtectedBranchAdminEnforced{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ProtectedBranchAdminEnforced",
	operationID:    "repos/get-commit-signature-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CommunityProfile{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/community/profile",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.CommunityProfile",
	operationID:    "repos/get-community-profile-metrics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := repos.GetContentResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contents/{path}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.GetContentResponseBody",
	operationID:    "repos/get-content",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ContributorActivity{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/contributors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ContributorActivity",
	operationID:    "repos/get-contributors-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.DeployKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys/{key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.DeployKey",
	operationID:    "repos/get-deploy-key",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Deployment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Deployment",
	operationID:    "repos/get-deployment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.DeploymentStatus{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.DeploymentStatus",
	operationID:    "repos/get-deployment-status",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PageBuild{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds/latest",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PageBuild",
	operationID:    "repos/get-latest-pages-build",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Release{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/latest",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Release",
	operationID:    "repos/get-latest-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Page{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Page",
	operationID:    "repos/get-pages",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PageBuild{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds/{build_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.PageBuild",
	operationID:    "repos/get-pages-build",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ParticipationStats{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/participation",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ParticipationStats",
	operationID:    "repos/get-participation-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProtectedBranchPullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ProtectedBranchPullRequestReview",
	operationID:    "repos/get-pull-request-review-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CodeFrequencyStat{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/stats/punch_card",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CodeFrequencyStat",
	operationID:    "repos/get-punch-card-stats",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ContentFile{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/readme",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ContentFile",
	operationID:    "repos/get-readme",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Release{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Release",
	operationID:    "repos/get-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ReleaseAsset{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/assets/{asset_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ReleaseAsset",
	operationID:    "repos/get-release-asset",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Release{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/tags/{tag}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Release",
	operationID:    "repos/get-release-by-tag",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.StatusCheckPolicy{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.StatusCheckPolicy",
	operationID:    "repos/get-status-checks-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "repos/get-teams-with-access-to-protected-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ContentTraffic{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/popular/paths",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ContentTraffic",
	operationID:    "repos/get-top-paths",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ReferrerTraffic{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/popular/referrers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ReferrerTraffic",
	operationID:    "repos/get-top-referrers",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "repos/get-users-with-access-to-protected-branch",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ViewTraffic{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/traffic/views",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ViewTraffic",
	operationID:    "repos/get-views",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Hook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks/{hook_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Hook",
	operationID:    "repos/get-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ShortBranch{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ShortBranch",
	operationID:    "repos/list-branches",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.BranchShort{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.BranchShort",
	operationID:    "repos/list-branches-for-head-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Collaborator{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/collaborators",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Collaborator",
	operationID:    "repos/list-collaborators",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CommitComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CommitComment",
	operationID:    "repos/list-comments-for-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.CommitComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.CommitComment",
	operationID:    "repos/list-commit-comments-for-repo",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Status{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{ref}/statuses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Status",
	operationID:    "repos/list-commit-statuses-for-ref",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleCommit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleCommit",
	operationID:    "repos/list-commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Contributor{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/contributors",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Contributor",
	operationID:    "repos/list-contributors",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.DeployKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.DeployKey",
	operationID:    "repos/list-deploy-keys",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.DeploymentStatus{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.DeploymentStatus",
	operationID:    "repos/list-deployment-statuses",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Deployment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/deployments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Deployment",
	operationID:    "repos/list-deployments",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Repository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Repository",
	operationID:    "repos/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "repos/list-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "repos/list-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/forks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "repos/list-forks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.RepositoryInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.RepositoryInvitation",
	operationID:    "repos/list-invitations",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.RepositoryInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/repository_invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.RepositoryInvitation",
	operationID:    "repos/list-invitations-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Language{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/languages",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Language",
	operationID:    "repos/list-languages",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PageBuild{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PageBuild",
	operationID:    "repos/list-pages-builds",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "repos/list-public",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.PullRequestSimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.PullRequestSimple",
	operationID:    "repos/list-pull-requests-associated-with-commit",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.ReleaseAsset{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}/assets",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.ReleaseAsset",
	operationID:    "repos/list-release-assets",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Release{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Release",
	operationID:    "repos/list-releases",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Tag{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/tags",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Tag",
	operationID:    "repos/list-tags",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "repos/list-teams",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Hook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Hook",
	operationID:    "repos/list-webhooks",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Commit{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/merges",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Commit",
	operationID:    "repos/merge",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Integration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "[]components.Integration",
	operationID:    "repos/remove-app-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := repos.RemoveStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "octo.RemoveStatusCheckContextsResponseBody",
	operationID:    "repos/remove-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "repos/remove-team-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "DELETE",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "repos/remove-user-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Topic{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/topics",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.Topic",
	operationID:    "repos/replace-all-topics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PageBuildStatus{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/pages/builds",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.PageBuildStatus",
	operationID:    "repos/request-pages-build",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProtectedBranchAdminEnforced{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
	httpMethod:     "POST",
	httpStatusCode: 200,
	name:           "components.ProtectedBranchAdminEnforced",
	operationID:    "repos/set-admin-branch-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Integration{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "[]components.Integration",
	operationID:    "repos/set-app-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := repos.SetStatusCheckContextsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "octo.SetStatusCheckContextsResponseBody",
	operationID:    "repos/set-status-check-contexts",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "repos/set-team-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "repos/set-user-access-restrictions",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Repository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/transfer",
	httpMethod:     "POST",
	httpStatusCode: 202,
	name:           "components.Repository",
	operationID:    "repos/transfer",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.FullRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.FullRepository",
	operationID:    "repos/update",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.CommitComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/comments/{comment_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.CommitComment",
	operationID:    "repos/update-commit-comment",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.RepositoryInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/invitations/{invitation_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.RepositoryInvitation",
	operationID:    "repos/update-invitation",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ProtectedBranchPullRequestReview{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.ProtectedBranchPullRequestReview",
	operationID:    "repos/update-pull-request-review-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Release{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Release",
	operationID:    "repos/update-release",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ReleaseAsset{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/assets/{asset_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.ReleaseAsset",
	operationID:    "repos/update-release-asset",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.StatusCheckPolicy{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.StatusCheckPolicy",
	operationID:    "repos/update-status-check-protection",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Hook{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/hooks/{hook_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.Hook",
	operationID:    "repos/update-webhook",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ReleaseAsset{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/repos/{owner}/{repo}/releases/{release_id}/assets",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.ReleaseAsset",
	operationID:    "repos/upload-release-asset",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ScimUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ScimUser",
	operationID:    "scim/get-provisioning-information-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ScimUserList{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.ScimUserList",
	operationID:    "scim/list-provisioned-identities",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ScimUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.ScimUser",
	operationID:    "scim/provision-and-invite-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ScimUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.ScimUser",
	operationID:    "scim/set-information-for-provisioned-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.ScimUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/scim/v2/organizations/{org}/Users/{scim_user_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.ScimUser",
	operationID:    "scim/update-attribute-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.CodeResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/code",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.CodeResponseBody",
	operationID:    "search/code",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.CommitsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/commits",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.CommitsResponseBody",
	operationID:    "search/commits",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.IssuesAndPullRequestsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/issues",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.IssuesAndPullRequestsResponseBody",
	operationID:    "search/issues-and-pull-requests",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.LabelsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/labels",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.LabelsResponseBody",
	operationID:    "search/labels",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.ReposResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/repositories",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.ReposResponseBody",
	operationID:    "search/repos",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.TopicsResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/topics",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.TopicsResponseBody",
	operationID:    "search/topics",
}, {
	decode: func(decoder *json.Decoder) error {
		target := search.UsersResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/search/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.UsersResponseBody",
	operationID:    "search/users",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.TeamMembership",
	operationID:    "teams/add-or-update-membership-for-user-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/memberships/{username}",
	httpMethod:     "PUT",
	httpStatusCode: 200,
	name:           "components.TeamMembership",
	operationID:    "teams/add-or-update-membership-for-user-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamProject{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamProject",
	operationID:    "teams/check-permissions-for-project-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamProject{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/projects/{project_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamProject",
	operationID:    "teams/check-permissions-for-project-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamRepository",
	operationID:    "teams/check-permissions-for-repo-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/repos/{owner}/{repo}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamRepository",
	operationID:    "teams/check-permissions-for-repo-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.TeamFull",
	operationID:    "teams/create",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.TeamDiscussionComment",
	operationID:    "teams/create-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.TeamDiscussionComment",
	operationID:    "teams/create-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.TeamDiscussion",
	operationID:    "teams/create-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.TeamDiscussion",
	operationID:    "teams/create-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GroupMapping{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.GroupMapping",
	operationID:    "teams/create-or-update-idp-group-connections-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GroupMapping{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/team-sync/group-mappings",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.GroupMapping",
	operationID:    "teams/create-or-update-idp-group-connections-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamFull",
	operationID:    "teams/get-by-name",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamDiscussionComment",
	operationID:    "teams/get-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamDiscussionComment",
	operationID:    "teams/get-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamDiscussion",
	operationID:    "teams/get-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamDiscussion",
	operationID:    "teams/get-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamFull",
	operationID:    "teams/get-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamMembership",
	operationID:    "teams/get-membership-for-user-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamMembership{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/memberships/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.TeamMembership",
	operationID:    "teams/get-membership-for-user-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "teams/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "teams/list-child-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Team{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Team",
	operationID:    "teams/list-child-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamDiscussionComment",
	operationID:    "teams/list-discussion-comments-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamDiscussionComment",
	operationID:    "teams/list-discussion-comments-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamDiscussion",
	operationID:    "teams/list-discussions-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamDiscussion",
	operationID:    "teams/list-discussions-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/teams",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamFull",
	operationID:    "teams/list-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GroupMapping{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/team-sync/group-mappings",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GroupMapping",
	operationID:    "teams/list-idp-groups-for-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GroupMapping{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/team-sync/groups",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GroupMapping",
	operationID:    "teams/list-idp-groups-for-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GroupMapping{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GroupMapping",
	operationID:    "teams/list-idp-groups-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "teams/list-members-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/members",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "teams/list-members-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrganizationInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrganizationInvitation",
	operationID:    "teams/list-pending-invitations-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.OrganizationInvitation{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/invitations",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.OrganizationInvitation",
	operationID:    "teams/list-pending-invitations-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamProject{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamProject",
	operationID:    "teams/list-projects-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.TeamProject{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/projects",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.TeamProject",
	operationID:    "teams/list-projects-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "teams/list-repos-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.MinimalRepository{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/repos",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.MinimalRepository",
	operationID:    "teams/list-repos-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.TeamDiscussionComment",
	operationID:    "teams/update-discussion-comment-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussionComment{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.TeamDiscussionComment",
	operationID:    "teams/update-discussion-comment-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.TeamDiscussion",
	operationID:    "teams/update-discussion-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamDiscussion{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}/discussions/{discussion_number}",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.TeamDiscussion",
	operationID:    "teams/update-discussion-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/orgs/{org}/teams/{team_slug}",
	httpMethod:     "PATCH",
	httpStatusCode: 201,
	name:           "components.TeamFull",
	operationID:    "teams/update-in-org",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.TeamFull{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/teams/{team_id}",
	httpMethod:     "PATCH",
	httpStatusCode: 201,
	name:           "components.TeamFull",
	operationID:    "teams/update-legacy",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Email{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/emails",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "[]components.Email",
	operationID:    "users/add-email-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GpgKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.GpgKey",
	operationID:    "users/create-gpg-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Key{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys",
	httpMethod:     "POST",
	httpStatusCode: 201,
	name:           "components.Key",
	operationID:    "users/create-public-ssh-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := users.GetAuthenticatedResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.GetAuthenticatedResponseBody",
	operationID:    "users/get-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := users.GetByUsernameResponseBody{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "octo.GetByUsernameResponseBody",
	operationID:    "users/get-by-username",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Hovercard{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/hovercard",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Hovercard",
	operationID:    "users/get-context-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.GpgKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys/{gpg_key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.GpgKey",
	operationID:    "users/get-gpg-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.Key{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys/{key_id}",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "components.Key",
	operationID:    "users/get-public-ssh-key-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "users/list",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/blocks",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "users/list-blocked-by-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Email{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/emails",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Email",
	operationID:    "users/list-emails-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/following",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "users/list-followed-by-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/followers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "users/list-followers-for-authenticated-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/followers",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "users/list-followers-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.SimpleUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/following",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.SimpleUser",
	operationID:    "users/list-following-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.GpgKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/gpg_keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.GpgKey",
	operationID:    "users/list-gpg-keys-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.GpgKey{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/gpg_keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.GpgKey",
	operationID:    "users/list-gpg-keys-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Email{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/public_emails",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Email",
	operationID:    "users/list-public-emails-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.KeySimple{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/users/{username}/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.KeySimple",
	operationID:    "users/list-public-keys-for-user",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Key{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/keys",
	httpMethod:     "GET",
	httpStatusCode: 200,
	name:           "[]components.Key",
	operationID:    "users/list-public-ssh-keys-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := []components.Email{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user/email/visibility",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "[]components.Email",
	operationID:    "users/set-primary-email-visibility-for-authenticated",
}, {
	decode: func(decoder *json.Decoder) error {
		target := components.PrivateUser{}
		return decoder.Decode(&target)
	},
	endpointPath:   "/user",
	httpMethod:     "PATCH",
	httpStatusCode: 200,
	name:           "components.PrivateUser",
	operationID:    "users/update-authenticated",
}}
