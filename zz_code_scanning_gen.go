// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

/*
CodeScanningGetAlertReq builds requests for "code-scanning/get-alert"

Get a code scanning alert.

  GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}

https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert
*/
type CodeScanningGetAlertReq struct {
	Owner   string
	Repo    string
	AlertId int64
}

func (r *CodeScanningGetAlertReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/code-scanning/alerts/%v", r.Owner, r.Repo, r.AlertId)
}

func (r *CodeScanningGetAlertReq) method() string {
	return "GET"
}

func (r *CodeScanningGetAlertReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *CodeScanningGetAlertReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *CodeScanningGetAlertReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *CodeScanningGetAlertReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
CodeScanningGetAlertResponseBody200 is a response body for code-scanning/get-alert

API documentation: https://developer.github.com/v3/code-scanning/#get-a-code-scanning-alert
*/
type CodeScanningGetAlertResponseBody200 struct {
	ClosedAt        string `json:"closed_at,omitempty"`
	ClosedBy        string `json:"closed_by,omitempty"`
	CreatedAt       string `json:"created_at,omitempty"`
	HtmlUrl         string `json:"html_url,omitempty"`
	Open            bool   `json:"open,omitempty"`
	RuleDescription string `json:"rule_description,omitempty"`
	RuleId          string `json:"rule_id,omitempty"`
	RuleSeverity    string `json:"rule_severity,omitempty"`
	Tool            string `json:"tool,omitempty"`
	Url             string `json:"url,omitempty"`
}

/*
CodeScanningListAlertsForRepoReq builds requests for "code-scanning/list-alerts-for-repo"

List code scanning alerts for a repository.

  GET /repos/{owner}/{repo}/code-scanning/alerts

https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository
*/
type CodeScanningListAlertsForRepoReq struct {
	Owner string
	Repo  string

	// Set to `closed` to list only closed code scanning alerts.
	State *string

	/*
	Returns a list of code scanning alerts for a specific brach reference. The `ref`
	must be formatted as `heads/<branch name>`.
	*/
	Ref *string
}

func (r *CodeScanningListAlertsForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/code-scanning/alerts", r.Owner, r.Repo)
}

func (r *CodeScanningListAlertsForRepoReq) method() string {
	return "GET"
}

func (r *CodeScanningListAlertsForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.State != nil {
		query.Set("state", *r.State)
	}
	if r.Ref != nil {
		query.Set("ref", *r.Ref)
	}
	return query
}

func (r *CodeScanningListAlertsForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *CodeScanningListAlertsForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *CodeScanningListAlertsForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
CodeScanningListAlertsForRepoResponseBody200 is a response body for code-scanning/list-alerts-for-repo

API documentation: https://developer.github.com/v3/code-scanning/#list-code-scanning-alerts-for-a-repository
*/
type CodeScanningListAlertsForRepoResponseBody200 []struct {
	ClosedAt        string `json:"closed_at,omitempty"`
	ClosedBy        string `json:"closed_by,omitempty"`
	CreatedAt       string `json:"created_at,omitempty"`
	HtmlUrl         string `json:"html_url,omitempty"`
	Open            bool   `json:"open,omitempty"`
	RuleDescription string `json:"rule_description,omitempty"`
	RuleId          string `json:"rule_id,omitempty"`
	RuleSeverity    string `json:"rule_severity,omitempty"`
	Tool            string `json:"tool,omitempty"`
	Url             string `json:"url,omitempty"`
}
