// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

/*
ChecksListForSuiteReq builds requests for "checks/list-for-suite"

List check runs in a check suite.

  GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs

https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite
*/
type ChecksListForSuiteReq struct {
	Owner        string
	Repo         string
	CheckSuiteId int64

	// Returns check runs with the specified `name`.
	CheckName *string

	/*
	Returns check runs with the specified `status`. Can be one of `queued`,
	`in_progress`, or `completed`.
	*/
	Status *string

	/*
	Filters check runs by their `completed_at` timestamp. Can be one of `latest`
	(returning the most recent check runs) or `all`.
	*/
	Filter *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksListForSuiteReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-suites/%v/check-runs", r.Owner, r.Repo, r.CheckSuiteId)
}

func (r ChecksListForSuiteReq) method() string {
	return "GET"
}

func (r ChecksListForSuiteReq) urlQuery() url.Values {
	query := url.Values{}
	if r.CheckName != nil {
		query.Set("check_name", *r.CheckName)
	}
	if r.Status != nil {
		query.Set("status", *r.Status)
	}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ChecksListForSuiteReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksListForSuiteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksListForSuiteResponseBody200 is a response body for checks/list-for-suite

API documentation: https://developer.github.com/v3/checks/runs/#list-check-runs-in-a-check-suite
*/
type ChecksListForSuiteResponseBody200 struct {
	CheckRuns []struct {
		App struct {
			CreatedAt   string   `json:"created_at,omitempty"`
			Description string   `json:"description,omitempty"`
			Events      []string `json:"events,omitempty"`
			ExternalUrl string   `json:"external_url,omitempty"`
			HtmlUrl     string   `json:"html_url,omitempty"`
			Id          int64    `json:"id,omitempty"`
			Name        string   `json:"name,omitempty"`
			NodeId      string   `json:"node_id,omitempty"`
			Owner       struct {
				AvatarUrl        string `json:"avatar_url,omitempty"`
				Description      string `json:"description,omitempty"`
				EventsUrl        string `json:"events_url,omitempty"`
				HooksUrl         string `json:"hooks_url,omitempty"`
				Id               int64  `json:"id,omitempty"`
				IssuesUrl        string `json:"issues_url,omitempty"`
				Login            string `json:"login,omitempty"`
				MembersUrl       string `json:"members_url,omitempty"`
				NodeId           string `json:"node_id,omitempty"`
				PublicMembersUrl string `json:"public_members_url,omitempty"`
				ReposUrl         string `json:"repos_url,omitempty"`
				Url              string `json:"url,omitempty"`
			} `json:"owner,omitempty"`
			Permissions struct {
				Contents   string `json:"contents,omitempty"`
				Issues     string `json:"issues,omitempty"`
				Metadata   string `json:"metadata,omitempty"`
				SingleFile string `json:"single_file,omitempty"`
			} `json:"permissions,omitempty"`
			Slug      string `json:"slug,omitempty"`
			UpdatedAt string `json:"updated_at,omitempty"`
		} `json:"app,omitempty"`
		CheckSuite struct {
			Id int64 `json:"id,omitempty"`
		} `json:"check_suite,omitempty"`
		CompletedAt string `json:"completed_at,omitempty"`
		Conclusion  string `json:"conclusion,omitempty"`
		DetailsUrl  string `json:"details_url,omitempty"`
		ExternalId  string `json:"external_id,omitempty"`
		HeadSha     string `json:"head_sha,omitempty"`
		HtmlUrl     string `json:"html_url,omitempty"`
		Id          int64  `json:"id,omitempty"`
		Name        string `json:"name,omitempty"`
		NodeId      string `json:"node_id,omitempty"`
		Output      struct {
			AnnotationsCount int64  `json:"annotations_count,omitempty"`
			AnnotationsUrl   string `json:"annotations_url,omitempty"`
			Summary          string `json:"summary,omitempty"`
			Text             string `json:"text,omitempty"`
			Title            string `json:"title,omitempty"`
		} `json:"output,omitempty"`
		PullRequests []struct {
			Base struct {
				Ref  string `json:"ref,omitempty"`
				Repo struct {
					Id   int64  `json:"id,omitempty"`
					Name string `json:"name,omitempty"`
					Url  string `json:"url,omitempty"`
				} `json:"repo,omitempty"`
				Sha string `json:"sha,omitempty"`
			} `json:"base,omitempty"`
			Head struct {
				Ref  string `json:"ref,omitempty"`
				Repo struct {
					Id   int64  `json:"id,omitempty"`
					Name string `json:"name,omitempty"`
					Url  string `json:"url,omitempty"`
				} `json:"repo,omitempty"`
				Sha string `json:"sha,omitempty"`
			} `json:"head,omitempty"`
			Id     int64  `json:"id,omitempty"`
			Number int64  `json:"number,omitempty"`
			Url    string `json:"url,omitempty"`
		} `json:"pull_requests,omitempty"`
		StartedAt string `json:"started_at,omitempty"`
		Status    string `json:"status,omitempty"`
		Url       string `json:"url,omitempty"`
	} `json:"check_runs,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ChecksListForRefReq builds requests for "checks/list-for-ref"

List check runs for a Git reference.

  GET /repos/{owner}/{repo}/commits/{ref}/check-runs

https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference
*/
type ChecksListForRefReq struct {
	Owner string
	Repo  string
	Ref   string

	// Returns check runs with the specified `name`.
	CheckName *string

	/*
	Returns check runs with the specified `status`. Can be one of `queued`,
	`in_progress`, or `completed`.
	*/
	Status *string

	/*
	Filters check runs by their `completed_at` timestamp. Can be one of `latest`
	(returning the most recent check runs) or `all`.
	*/
	Filter *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksListForRefReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/commits/%v/check-runs", r.Owner, r.Repo, r.Ref)
}

func (r ChecksListForRefReq) method() string {
	return "GET"
}

func (r ChecksListForRefReq) urlQuery() url.Values {
	query := url.Values{}
	if r.CheckName != nil {
		query.Set("check_name", *r.CheckName)
	}
	if r.Status != nil {
		query.Set("status", *r.Status)
	}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ChecksListForRefReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksListForRefReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksListForRefResponseBody200 is a response body for checks/list-for-ref

API documentation: https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-git-reference
*/
type ChecksListForRefResponseBody200 struct {
	CheckRuns []struct {
		App struct {
			CreatedAt   string   `json:"created_at,omitempty"`
			Description string   `json:"description,omitempty"`
			Events      []string `json:"events,omitempty"`
			ExternalUrl string   `json:"external_url,omitempty"`
			HtmlUrl     string   `json:"html_url,omitempty"`
			Id          int64    `json:"id,omitempty"`
			Name        string   `json:"name,omitempty"`
			NodeId      string   `json:"node_id,omitempty"`
			Owner       struct {
				AvatarUrl        string `json:"avatar_url,omitempty"`
				Description      string `json:"description,omitempty"`
				EventsUrl        string `json:"events_url,omitempty"`
				HooksUrl         string `json:"hooks_url,omitempty"`
				Id               int64  `json:"id,omitempty"`
				IssuesUrl        string `json:"issues_url,omitempty"`
				Login            string `json:"login,omitempty"`
				MembersUrl       string `json:"members_url,omitempty"`
				NodeId           string `json:"node_id,omitempty"`
				PublicMembersUrl string `json:"public_members_url,omitempty"`
				ReposUrl         string `json:"repos_url,omitempty"`
				Url              string `json:"url,omitempty"`
			} `json:"owner,omitempty"`
			Permissions struct {
				Contents   string `json:"contents,omitempty"`
				Issues     string `json:"issues,omitempty"`
				Metadata   string `json:"metadata,omitempty"`
				SingleFile string `json:"single_file,omitempty"`
			} `json:"permissions,omitempty"`
			Slug      string `json:"slug,omitempty"`
			UpdatedAt string `json:"updated_at,omitempty"`
		} `json:"app,omitempty"`
		CheckSuite struct {
			Id int64 `json:"id,omitempty"`
		} `json:"check_suite,omitempty"`
		CompletedAt string `json:"completed_at,omitempty"`
		Conclusion  string `json:"conclusion,omitempty"`
		DetailsUrl  string `json:"details_url,omitempty"`
		ExternalId  string `json:"external_id,omitempty"`
		HeadSha     string `json:"head_sha,omitempty"`
		HtmlUrl     string `json:"html_url,omitempty"`
		Id          int64  `json:"id,omitempty"`
		Name        string `json:"name,omitempty"`
		NodeId      string `json:"node_id,omitempty"`
		Output      struct {
			AnnotationsCount int64  `json:"annotations_count,omitempty"`
			AnnotationsUrl   string `json:"annotations_url,omitempty"`
			Summary          string `json:"summary,omitempty"`
			Text             string `json:"text,omitempty"`
			Title            string `json:"title,omitempty"`
		} `json:"output,omitempty"`
		PullRequests []struct {
			Base struct {
				Ref  string `json:"ref,omitempty"`
				Repo struct {
					Id   int64  `json:"id,omitempty"`
					Name string `json:"name,omitempty"`
					Url  string `json:"url,omitempty"`
				} `json:"repo,omitempty"`
				Sha string `json:"sha,omitempty"`
			} `json:"base,omitempty"`
			Head struct {
				Ref  string `json:"ref,omitempty"`
				Repo struct {
					Id   int64  `json:"id,omitempty"`
					Name string `json:"name,omitempty"`
					Url  string `json:"url,omitempty"`
				} `json:"repo,omitempty"`
				Sha string `json:"sha,omitempty"`
			} `json:"head,omitempty"`
			Id     int64  `json:"id,omitempty"`
			Number int64  `json:"number,omitempty"`
			Url    string `json:"url,omitempty"`
		} `json:"pull_requests,omitempty"`
		StartedAt string `json:"started_at,omitempty"`
		Status    string `json:"status,omitempty"`
		Url       string `json:"url,omitempty"`
	} `json:"check_runs,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ChecksGetSuiteReq builds requests for "checks/get-suite"

Get a check suite.

  GET /repos/{owner}/{repo}/check-suites/{check_suite_id}

https://developer.github.com/v3/checks/suites/#get-a-check-suite
*/
type ChecksGetSuiteReq struct {
	Owner        string
	Repo         string
	CheckSuiteId int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksGetSuiteReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-suites/%v", r.Owner, r.Repo, r.CheckSuiteId)
}

func (r ChecksGetSuiteReq) method() string {
	return "GET"
}

func (r ChecksGetSuiteReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksGetSuiteReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksGetSuiteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksGetSuiteResponseBody200 is a response body for checks/get-suite

API documentation: https://developer.github.com/v3/checks/suites/#get-a-check-suite
*/
type ChecksGetSuiteResponseBody200 struct {
	After string `json:"after,omitempty"`
	App   struct {
		CreatedAt   string   `json:"created_at,omitempty"`
		Description string   `json:"description,omitempty"`
		Events      []string `json:"events,omitempty"`
		ExternalUrl string   `json:"external_url,omitempty"`
		HtmlUrl     string   `json:"html_url,omitempty"`
		Id          int64    `json:"id,omitempty"`
		Name        string   `json:"name,omitempty"`
		NodeId      string   `json:"node_id,omitempty"`
		Owner       struct {
			AvatarUrl        string `json:"avatar_url,omitempty"`
			Description      string `json:"description,omitempty"`
			EventsUrl        string `json:"events_url,omitempty"`
			HooksUrl         string `json:"hooks_url,omitempty"`
			Id               int64  `json:"id,omitempty"`
			IssuesUrl        string `json:"issues_url,omitempty"`
			Login            string `json:"login,omitempty"`
			MembersUrl       string `json:"members_url,omitempty"`
			NodeId           string `json:"node_id,omitempty"`
			PublicMembersUrl string `json:"public_members_url,omitempty"`
			ReposUrl         string `json:"repos_url,omitempty"`
			Url              string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Contents   string `json:"contents,omitempty"`
			Issues     string `json:"issues,omitempty"`
			Metadata   string `json:"metadata,omitempty"`
			SingleFile string `json:"single_file,omitempty"`
		} `json:"permissions,omitempty"`
		Slug      string `json:"slug,omitempty"`
		UpdatedAt string `json:"updated_at,omitempty"`
	} `json:"app,omitempty"`
	Before       string        `json:"before,omitempty"`
	Conclusion   string        `json:"conclusion,omitempty"`
	HeadBranch   string        `json:"head_branch,omitempty"`
	HeadSha      string        `json:"head_sha,omitempty"`
	Id           int64         `json:"id,omitempty"`
	NodeId       string        `json:"node_id,omitempty"`
	PullRequests []interface{} `json:"pull_requests,omitempty"`
	Repository   struct {
		AllowMergeCommit bool   `json:"allow_merge_commit,omitempty"`
		AllowRebaseMerge bool   `json:"allow_rebase_merge,omitempty"`
		AllowSquashMerge bool   `json:"allow_squash_merge,omitempty"`
		ArchiveUrl       string `json:"archive_url,omitempty"`
		Archived         bool   `json:"archived,omitempty"`
		AssigneesUrl     string `json:"assignees_url,omitempty"`
		BlobsUrl         string `json:"blobs_url,omitempty"`
		BranchesUrl      string `json:"branches_url,omitempty"`
		CloneUrl         string `json:"clone_url,omitempty"`
		CollaboratorsUrl string `json:"collaborators_url,omitempty"`
		CommentsUrl      string `json:"comments_url,omitempty"`
		CommitsUrl       string `json:"commits_url,omitempty"`
		CompareUrl       string `json:"compare_url,omitempty"`
		ContentsUrl      string `json:"contents_url,omitempty"`
		ContributorsUrl  string `json:"contributors_url,omitempty"`
		CreatedAt        string `json:"created_at,omitempty"`
		DefaultBranch    string `json:"default_branch,omitempty"`
		DeploymentsUrl   string `json:"deployments_url,omitempty"`
		Description      string `json:"description,omitempty"`
		Disabled         bool   `json:"disabled,omitempty"`
		DownloadsUrl     string `json:"downloads_url,omitempty"`
		EventsUrl        string `json:"events_url,omitempty"`
		Fork             bool   `json:"fork,omitempty"`
		ForksCount       int64  `json:"forks_count,omitempty"`
		ForksUrl         string `json:"forks_url,omitempty"`
		FullName         string `json:"full_name,omitempty"`
		GitCommitsUrl    string `json:"git_commits_url,omitempty"`
		GitRefsUrl       string `json:"git_refs_url,omitempty"`
		GitTagsUrl       string `json:"git_tags_url,omitempty"`
		GitUrl           string `json:"git_url,omitempty"`
		HasDownloads     bool   `json:"has_downloads,omitempty"`
		HasIssues        bool   `json:"has_issues,omitempty"`
		HasPages         bool   `json:"has_pages,omitempty"`
		HasProjects      bool   `json:"has_projects,omitempty"`
		HasWiki          bool   `json:"has_wiki,omitempty"`
		Homepage         string `json:"homepage,omitempty"`
		HooksUrl         string `json:"hooks_url,omitempty"`
		HtmlUrl          string `json:"html_url,omitempty"`
		Id               int64  `json:"id,omitempty"`
		IsTemplate       bool   `json:"is_template,omitempty"`
		IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl   string `json:"issue_events_url,omitempty"`
		IssuesUrl        string `json:"issues_url,omitempty"`
		KeysUrl          string `json:"keys_url,omitempty"`
		LabelsUrl        string `json:"labels_url,omitempty"`
		Language         string `json:"language,omitempty"`
		LanguagesUrl     string `json:"languages_url,omitempty"`
		MergesUrl        string `json:"merges_url,omitempty"`
		MilestonesUrl    string `json:"milestones_url,omitempty"`
		MirrorUrl        string `json:"mirror_url,omitempty"`
		Name             string `json:"name,omitempty"`
		NetworkCount     int64  `json:"network_count,omitempty"`
		NodeId           string `json:"node_id,omitempty"`
		NotificationsUrl string `json:"notifications_url,omitempty"`
		OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
		Owner            struct {
			AvatarUrl         string `json:"avatar_url,omitempty"`
			EventsUrl         string `json:"events_url,omitempty"`
			FollowersUrl      string `json:"followers_url,omitempty"`
			FollowingUrl      string `json:"following_url,omitempty"`
			GistsUrl          string `json:"gists_url,omitempty"`
			GravatarId        string `json:"gravatar_id,omitempty"`
			HtmlUrl           string `json:"html_url,omitempty"`
			Id                int64  `json:"id,omitempty"`
			Login             string `json:"login,omitempty"`
			NodeId            string `json:"node_id,omitempty"`
			OrganizationsUrl  string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl string `json:"received_events_url,omitempty"`
			ReposUrl          string `json:"repos_url,omitempty"`
			SiteAdmin         bool   `json:"site_admin,omitempty"`
			StarredUrl        string `json:"starred_url,omitempty"`
			SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
			Type              string `json:"type,omitempty"`
			Url               string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Admin bool `json:"admin,omitempty"`
			Pull  bool `json:"pull,omitempty"`
			Push  bool `json:"push,omitempty"`
		} `json:"permissions,omitempty"`
		Private            bool        `json:"private,omitempty"`
		PullsUrl           string      `json:"pulls_url,omitempty"`
		PushedAt           string      `json:"pushed_at,omitempty"`
		ReleasesUrl        string      `json:"releases_url,omitempty"`
		Size               json.Number `json:"size,omitempty"`
		SshUrl             string      `json:"ssh_url,omitempty"`
		StargazersCount    int64       `json:"stargazers_count,omitempty"`
		StargazersUrl      string      `json:"stargazers_url,omitempty"`
		StatusesUrl        string      `json:"statuses_url,omitempty"`
		SubscribersCount   int64       `json:"subscribers_count,omitempty"`
		SubscribersUrl     string      `json:"subscribers_url,omitempty"`
		SubscriptionUrl    string      `json:"subscription_url,omitempty"`
		SvnUrl             string      `json:"svn_url,omitempty"`
		TagsUrl            string      `json:"tags_url,omitempty"`
		TeamsUrl           string      `json:"teams_url,omitempty"`
		TempCloneToken     string      `json:"temp_clone_token,omitempty"`
		TemplateRepository string      `json:"template_repository,omitempty"`
		Topics             []string    `json:"topics,omitempty"`
		TreesUrl           string      `json:"trees_url,omitempty"`
		UpdatedAt          string      `json:"updated_at,omitempty"`
		Url                string      `json:"url,omitempty"`
		Visibility         string      `json:"visibility,omitempty"`
		WatchersCount      int64       `json:"watchers_count,omitempty"`
	} `json:"repository,omitempty"`
	Status string `json:"status,omitempty"`
	Url    string `json:"url,omitempty"`
}

/*
ChecksRerequestSuiteReq builds requests for "checks/rerequest-suite"

Rerequest a check suite.

  POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest

https://developer.github.com/v3/checks/suites/#rerequest-a-check-suite
*/
type ChecksRerequestSuiteReq struct {
	Owner        string
	Repo         string
	CheckSuiteId int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksRerequestSuiteReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-suites/%v/rerequest", r.Owner, r.Repo, r.CheckSuiteId)
}

func (r ChecksRerequestSuiteReq) method() string {
	return "POST"
}

func (r ChecksRerequestSuiteReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksRerequestSuiteReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksRerequestSuiteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksCreateReq builds requests for "checks/create"

Create a check run.

  POST /repos/{owner}/{repo}/check-runs

https://developer.github.com/v3/checks/runs/#create-a-check-run
*/
type ChecksCreateReq struct {
	Owner       string
	Repo        string
	RequestBody ChecksCreateReqBody

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksCreateReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-runs", r.Owner, r.Repo)
}

func (r ChecksCreateReq) method() string {
	return "POST"
}

func (r ChecksCreateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksCreateReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksCreateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ChecksCreateReqBody is a request body for checks/create

API documentation: https://developer.github.com/v3/checks/runs/#create-a-check-run
*/
type ChecksCreateReqBody struct {

	/*
	   Displays a button on GitHub that can be clicked to alert your app to do
	   additional tasks. For example, a code linting app can display a button that
	   automatically fixes detected errors. The button created in this object is
	   displayed after the check run completes. When a user clicks the button, GitHub
	   sends the [`check_run.requested_action`
	   webhook](https://developer.github.com/webhooks/event-payloads/#check_run) to
	   your app. Each action includes a `label`, `identifier` and `description`. A
	   maximum of three actions are accepted. See the [`actions`
	   object](https://developer.github.com/v3/checks/runs/#actions-object)
	   description. To learn more about check runs and requested actions, see "[Check
	   runs and requested
	   actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions)."
	   To learn more about check runs and requested actions, see "[Check runs and
	   requested
	   actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions)."
	*/
	Actions []struct {

		/*
		   A short explanation of what this action would do. The maximum size is 40
		   characters.
		*/
		Description *string `json:"description"`

		/*
		   A reference for the action on the integrator's system. The maximum size is 20
		   characters.
		*/
		Identifier *string `json:"identifier"`

		/*
		   The text to be displayed on a button in the web UI. The maximum size is 20
		   characters.
		*/
		Label *string `json:"label"`
	} `json:"actions,omitempty"`

	/*
	   The time the check completed. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	*/
	CompletedAt *string `json:"completed_at,omitempty"`

	/*
	   **Required if you provide `completed_at` or a `status` of `completed`**. The
	   final conclusion of the check. Can be one of `success`, `failure`, `neutral`,
	   `cancelled`, `skipped`, `timed_out`, or `action_required`. When the conclusion
	   is `action_required`, additional details should be provided on the site
	   specified by `details_url`.
	   **Note:** Providing `conclusion` will automatically set the `status` parameter
	   to `completed`. Only GitHub can change a check run conclusion to `stale`.
	*/
	Conclusion *string `json:"conclusion,omitempty"`

	/*
	   The URL of the integrator's site that has the full details of the check. If the
	   integrator does not provide this, then the homepage of the GitHub app is used.
	*/
	DetailsUrl *string `json:"details_url,omitempty"`

	// A reference for the run on the integrator's system.
	ExternalId *string `json:"external_id,omitempty"`

	// The SHA of the commit.
	HeadSha *string `json:"head_sha"`

	// The name of the check. For example, "code-coverage".
	Name *string `json:"name"`

	/*
	   Check runs can accept a variety of data in the `output` object, including a
	   `title` and `summary` and can optionally provide descriptive details about the
	   run. See the [`output`
	   object](https://developer.github.com/v3/checks/runs/#output-object) description.
	*/
	Output *struct {

		/*
		   Adds information from your analysis to specific lines of code. Annotations are
		   visible on GitHub in the **Checks** and **Files changed** tab of the pull
		   request. The Checks API limits the number of annotations to a maximum of 50 per
		   API request. To create more than 50 annotations, you have to make multiple
		   requests to the [Update a check
		   run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint.
		   Each time you update the check run, annotations are appended to the list of
		   annotations that already exist for the check run. For details about how you can
		   view annotations on GitHub, see "[About status
		   checks](https://help.github.com/articles/about-status-checks#checks)". See the
		   [`annotations`
		   object](https://developer.github.com/v3/checks/runs/#annotations-object)
		   description for details about how to use this parameter.
		*/
		Annotations []struct {

			// The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
			AnnotationLevel *string `json:"annotation_level"`

			/*
			   The end column of the annotation. Annotations only support `start_column` and
			   `end_column` on the same line. Omit this parameter if `start_line` and
			   `end_line` have different values.
			*/
			EndColumn *int64 `json:"end_column,omitempty"`

			// The end line of the annotation.
			EndLine *int64 `json:"end_line"`

			/*
			   A short description of the feedback for these lines of code. The maximum size is
			   64 KB.
			*/
			Message *string `json:"message"`

			/*
			   The path of the file to add an annotation to. For example,
			   `assets/css/main.css`.
			*/
			Path *string `json:"path"`

			// Details about this annotation. The maximum size is 64 KB.
			RawDetails *string `json:"raw_details,omitempty"`

			/*
			   The start column of the annotation. Annotations only support `start_column` and
			   `end_column` on the same line. Omit this parameter if `start_line` and
			   `end_line` have different values.
			*/
			StartColumn *int64 `json:"start_column,omitempty"`

			// The start line of the annotation.
			StartLine *int64 `json:"start_line"`

			// The title that represents the annotation. The maximum size is 255 characters.
			Title *string `json:"title,omitempty"`
		} `json:"annotations,omitempty"`

		/*
		   Adds images to the output displayed in the GitHub pull request UI. See the
		   [`images` object](https://developer.github.com/v3/checks/runs/#images-object)
		   description for details.
		*/
		Images []struct {

			// The alternative text for the image.
			Alt *string `json:"alt"`

			// A short image description.
			Caption *string `json:"caption,omitempty"`

			// The full URL of the image.
			ImageUrl *string `json:"image_url"`
		} `json:"images,omitempty"`

		// The summary of the check run. This parameter supports Markdown.
		Summary *string `json:"summary"`

		// The details of the check run. This parameter supports Markdown.
		Text *string `json:"text,omitempty"`

		// The title of the check run.
		Title *string `json:"title"`
	} `json:"output,omitempty"`

	/*
	   The time that the check run began. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	*/
	StartedAt *string `json:"started_at,omitempty"`

	// The current status. Can be one of `queued`, `in_progress`, or `completed`.
	Status *string `json:"status,omitempty"`
}

/*
ChecksCreateResponseBody201 is a response body for checks/create

API documentation: https://developer.github.com/v3/checks/runs/#create-a-check-run
*/
type ChecksCreateResponseBody201 struct {
	App struct {
		CreatedAt   string   `json:"created_at,omitempty"`
		Description string   `json:"description,omitempty"`
		Events      []string `json:"events,omitempty"`
		ExternalUrl string   `json:"external_url,omitempty"`
		HtmlUrl     string   `json:"html_url,omitempty"`
		Id          int64    `json:"id,omitempty"`
		Name        string   `json:"name,omitempty"`
		NodeId      string   `json:"node_id,omitempty"`
		Owner       struct {
			AvatarUrl        string `json:"avatar_url,omitempty"`
			Description      string `json:"description,omitempty"`
			EventsUrl        string `json:"events_url,omitempty"`
			HooksUrl         string `json:"hooks_url,omitempty"`
			Id               int64  `json:"id,omitempty"`
			IssuesUrl        string `json:"issues_url,omitempty"`
			Login            string `json:"login,omitempty"`
			MembersUrl       string `json:"members_url,omitempty"`
			NodeId           string `json:"node_id,omitempty"`
			PublicMembersUrl string `json:"public_members_url,omitempty"`
			ReposUrl         string `json:"repos_url,omitempty"`
			Url              string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Contents   string `json:"contents,omitempty"`
			Issues     string `json:"issues,omitempty"`
			Metadata   string `json:"metadata,omitempty"`
			SingleFile string `json:"single_file,omitempty"`
		} `json:"permissions,omitempty"`
		Slug      string `json:"slug,omitempty"`
		UpdatedAt string `json:"updated_at,omitempty"`
	} `json:"app,omitempty"`
	CheckSuite struct {
		Id int64 `json:"id,omitempty"`
	} `json:"check_suite,omitempty"`
	CompletedAt string `json:"completed_at,omitempty"`
	Conclusion  string `json:"conclusion,omitempty"`
	DetailsUrl  string `json:"details_url,omitempty"`
	ExternalId  string `json:"external_id,omitempty"`
	HeadSha     string `json:"head_sha,omitempty"`
	HtmlUrl     string `json:"html_url,omitempty"`
	Id          int64  `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	NodeId      string `json:"node_id,omitempty"`
	Output      struct {
		Summary string `json:"summary,omitempty"`
		Text    string `json:"text,omitempty"`
		Title   string `json:"title,omitempty"`
	} `json:"output,omitempty"`
	PullRequests []struct {
		Base struct {
			Ref  string `json:"ref,omitempty"`
			Repo struct {
				Id   int64  `json:"id,omitempty"`
				Name string `json:"name,omitempty"`
				Url  string `json:"url,omitempty"`
			} `json:"repo,omitempty"`
			Sha string `json:"sha,omitempty"`
		} `json:"base,omitempty"`
		Head struct {
			Ref  string `json:"ref,omitempty"`
			Repo struct {
				Id   int64  `json:"id,omitempty"`
				Name string `json:"name,omitempty"`
				Url  string `json:"url,omitempty"`
			} `json:"repo,omitempty"`
			Sha string `json:"sha,omitempty"`
		} `json:"head,omitempty"`
		Id     int64  `json:"id,omitempty"`
		Number int64  `json:"number,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"pull_requests,omitempty"`
	StartedAt string `json:"started_at,omitempty"`
	Status    string `json:"status,omitempty"`
	Url       string `json:"url,omitempty"`
}

/*
ChecksListAnnotationsReq builds requests for "checks/list-annotations"

List check run annotations.

  GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations

https://developer.github.com/v3/checks/runs/#list-check-run-annotations
*/
type ChecksListAnnotationsReq struct {
	Owner      string
	Repo       string
	CheckRunId int64

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksListAnnotationsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-runs/%v/annotations", r.Owner, r.Repo, r.CheckRunId)
}

func (r ChecksListAnnotationsReq) method() string {
	return "GET"
}

func (r ChecksListAnnotationsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ChecksListAnnotationsReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksListAnnotationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksListAnnotationsResponseBody200 is a response body for checks/list-annotations

API documentation: https://developer.github.com/v3/checks/runs/#list-check-run-annotations
*/
type ChecksListAnnotationsResponseBody200 []struct {
	AnnotationLevel string `json:"annotation_level,omitempty"`
	EndColumn       int64  `json:"end_column,omitempty"`
	EndLine         int64  `json:"end_line,omitempty"`
	Message         string `json:"message,omitempty"`
	Path            string `json:"path,omitempty"`
	RawDetails      string `json:"raw_details,omitempty"`
	StartColumn     int64  `json:"start_column,omitempty"`
	StartLine       int64  `json:"start_line,omitempty"`
	Title           string `json:"title,omitempty"`
}

/*
ChecksGetReq builds requests for "checks/get"

Get a check run.

  GET /repos/{owner}/{repo}/check-runs/{check_run_id}

https://developer.github.com/v3/checks/runs/#get-a-check-run
*/
type ChecksGetReq struct {
	Owner      string
	Repo       string
	CheckRunId int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksGetReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-runs/%v", r.Owner, r.Repo, r.CheckRunId)
}

func (r ChecksGetReq) method() string {
	return "GET"
}

func (r ChecksGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksGetReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksGetResponseBody200 is a response body for checks/get

API documentation: https://developer.github.com/v3/checks/runs/#get-a-check-run
*/
type ChecksGetResponseBody200 struct {
	App struct {
		CreatedAt   string   `json:"created_at,omitempty"`
		Description string   `json:"description,omitempty"`
		Events      []string `json:"events,omitempty"`
		ExternalUrl string   `json:"external_url,omitempty"`
		HtmlUrl     string   `json:"html_url,omitempty"`
		Id          int64    `json:"id,omitempty"`
		Name        string   `json:"name,omitempty"`
		NodeId      string   `json:"node_id,omitempty"`
		Owner       struct {
			AvatarUrl        string `json:"avatar_url,omitempty"`
			Description      string `json:"description,omitempty"`
			EventsUrl        string `json:"events_url,omitempty"`
			HooksUrl         string `json:"hooks_url,omitempty"`
			Id               int64  `json:"id,omitempty"`
			IssuesUrl        string `json:"issues_url,omitempty"`
			Login            string `json:"login,omitempty"`
			MembersUrl       string `json:"members_url,omitempty"`
			NodeId           string `json:"node_id,omitempty"`
			PublicMembersUrl string `json:"public_members_url,omitempty"`
			ReposUrl         string `json:"repos_url,omitempty"`
			Url              string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Contents   string `json:"contents,omitempty"`
			Issues     string `json:"issues,omitempty"`
			Metadata   string `json:"metadata,omitempty"`
			SingleFile string `json:"single_file,omitempty"`
		} `json:"permissions,omitempty"`
		Slug      string `json:"slug,omitempty"`
		UpdatedAt string `json:"updated_at,omitempty"`
	} `json:"app,omitempty"`
	CheckSuite struct {
		Id int64 `json:"id,omitempty"`
	} `json:"check_suite,omitempty"`
	CompletedAt string `json:"completed_at,omitempty"`
	Conclusion  string `json:"conclusion,omitempty"`
	DetailsUrl  string `json:"details_url,omitempty"`
	ExternalId  string `json:"external_id,omitempty"`
	HeadSha     string `json:"head_sha,omitempty"`
	HtmlUrl     string `json:"html_url,omitempty"`
	Id          int64  `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	NodeId      string `json:"node_id,omitempty"`
	Output      struct {
		AnnotationsCount int64  `json:"annotations_count,omitempty"`
		AnnotationsUrl   string `json:"annotations_url,omitempty"`
		Summary          string `json:"summary,omitempty"`
		Text             string `json:"text,omitempty"`
		Title            string `json:"title,omitempty"`
	} `json:"output,omitempty"`
	PullRequests []struct {
		Base struct {
			Ref  string `json:"ref,omitempty"`
			Repo struct {
				Id   int64  `json:"id,omitempty"`
				Name string `json:"name,omitempty"`
				Url  string `json:"url,omitempty"`
			} `json:"repo,omitempty"`
			Sha string `json:"sha,omitempty"`
		} `json:"base,omitempty"`
		Head struct {
			Ref  string `json:"ref,omitempty"`
			Repo struct {
				Id   int64  `json:"id,omitempty"`
				Name string `json:"name,omitempty"`
				Url  string `json:"url,omitempty"`
			} `json:"repo,omitempty"`
			Sha string `json:"sha,omitempty"`
		} `json:"head,omitempty"`
		Id     int64  `json:"id,omitempty"`
		Number int64  `json:"number,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"pull_requests,omitempty"`
	StartedAt string `json:"started_at,omitempty"`
	Status    string `json:"status,omitempty"`
	Url       string `json:"url,omitempty"`
}

/*
ChecksUpdateReq builds requests for "checks/update"

Update a check run.

  PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}

https://developer.github.com/v3/checks/runs/#update-a-check-run
*/
type ChecksUpdateReq struct {
	Owner       string
	Repo        string
	CheckRunId  int64
	RequestBody ChecksUpdateReqBody

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksUpdateReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-runs/%v", r.Owner, r.Repo, r.CheckRunId)
}

func (r ChecksUpdateReq) method() string {
	return "PATCH"
}

func (r ChecksUpdateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksUpdateReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksUpdateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ChecksUpdateReqBody is a request body for checks/update

API documentation: https://developer.github.com/v3/checks/runs/#update-a-check-run
*/
type ChecksUpdateReqBody struct {

	/*
	   Possible further actions the integrator can perform, which a user may trigger.
	   Each action includes a `label`, `identifier` and `description`. A maximum of
	   three actions are accepted. See the [`actions`
	   object](https://developer.github.com/v3/checks/runs/#actions-object)
	   description. To learn more about check runs and requested actions, see "[Check
	   runs and requested
	   actions](https://developer.github.com/v3/checks/runs/#check-runs-and-requested-actions)."
	*/
	Actions []struct {

		/*
		   A short explanation of what this action would do. The maximum size is 40
		   characters.
		*/
		Description *string `json:"description"`

		/*
		   A reference for the action on the integrator's system. The maximum size is 20
		   characters.
		*/
		Identifier *string `json:"identifier"`

		/*
		   The text to be displayed on a button in the web UI. The maximum size is 20
		   characters.
		*/
		Label *string `json:"label"`
	} `json:"actions,omitempty"`

	/*
	   The time the check completed. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	*/
	CompletedAt *string `json:"completed_at,omitempty"`

	/*
	   **Required if you provide `completed_at` or a `status` of `completed`**. The
	   final conclusion of the check. Can be one of `success`, `failure`, `neutral`,
	   `cancelled`, `skipped`, `timed_out`, or `action_required`.
	   **Note:** Providing `conclusion` will automatically set the `status` parameter
	   to `completed`. Only GitHub can change a check run conclusion to `stale`.
	*/
	Conclusion *string `json:"conclusion,omitempty"`

	// The URL of the integrator's site that has the full details of the check.
	DetailsUrl *string `json:"details_url,omitempty"`

	// A reference for the run on the integrator's system.
	ExternalId *string `json:"external_id,omitempty"`

	// The name of the check. For example, "code-coverage".
	Name *string `json:"name,omitempty"`

	/*
	   Check runs can accept a variety of data in the `output` object, including a
	   `title` and `summary` and can optionally provide descriptive details about the
	   run. See the [`output`
	   object](https://developer.github.com/v3/checks/runs/#output-object-1)
	   description.
	*/
	Output *struct {

		/*
		   Adds information from your analysis to specific lines of code. Annotations are
		   visible in GitHub's pull request UI. Annotations are visible in GitHub's pull
		   request UI. The Checks API limits the number of annotations to a maximum of 50
		   per API request. To create more than 50 annotations, you have to make multiple
		   requests to the [Update a check
		   run](https://developer.github.com/v3/checks/runs/#update-a-check-run) endpoint.
		   Each time you update the check run, annotations are appended to the list of
		   annotations that already exist for the check run. For details about annotations
		   in the UI, see "[About status
		   checks](https://help.github.com/articles/about-status-checks#checks)". See the
		   [`annotations`
		   object](https://developer.github.com/v3/checks/runs/#annotations-object-1)
		   description for details.
		*/
		Annotations []struct {

			// The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
			AnnotationLevel *string `json:"annotation_level"`

			/*
			   The end column of the annotation. Annotations only support `start_column` and
			   `end_column` on the same line. Omit this parameter if `start_line` and
			   `end_line` have different values.
			*/
			EndColumn *int64 `json:"end_column,omitempty"`

			// The end line of the annotation.
			EndLine *int64 `json:"end_line"`

			/*
			   A short description of the feedback for these lines of code. The maximum size is
			   64 KB.
			*/
			Message *string `json:"message"`

			/*
			   The path of the file to add an annotation to. For example,
			   `assets/css/main.css`.
			*/
			Path *string `json:"path"`

			// Details about this annotation. The maximum size is 64 KB.
			RawDetails *string `json:"raw_details,omitempty"`

			/*
			   The start column of the annotation. Annotations only support `start_column` and
			   `end_column` on the same line. Omit this parameter if `start_line` and
			   `end_line` have different values.
			*/
			StartColumn *int64 `json:"start_column,omitempty"`

			// The start line of the annotation.
			StartLine *int64 `json:"start_line"`

			// The title that represents the annotation. The maximum size is 255 characters.
			Title *string `json:"title,omitempty"`
		} `json:"annotations,omitempty"`

		/*
		   Adds images to the output displayed in the GitHub pull request UI. See the
		   [`images`
		   object](https://developer.github.com/v3/checks/runs/#annotations-object-1)
		   description for details.
		*/
		Images []struct {

			// The alternative text for the image.
			Alt *string `json:"alt"`

			// A short image description.
			Caption *string `json:"caption,omitempty"`

			// The full URL of the image.
			ImageUrl *string `json:"image_url"`
		} `json:"images,omitempty"`

		// Can contain Markdown.
		Summary *string `json:"summary"`

		// Can contain Markdown.
		Text *string `json:"text,omitempty"`

		// **Required**.
		Title *string `json:"title,omitempty"`
	} `json:"output,omitempty"`

	/*
	   This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	   format: `YYYY-MM-DDTHH:MM:SSZ`.
	*/
	StartedAt *string `json:"started_at,omitempty"`

	// The current status. Can be one of `queued`, `in_progress`, or `completed`.
	Status *string `json:"status,omitempty"`
}

/*
ChecksUpdateResponseBody200 is a response body for checks/update

API documentation: https://developer.github.com/v3/checks/runs/#update-a-check-run
*/
type ChecksUpdateResponseBody200 struct {
	App struct {
		CreatedAt   string   `json:"created_at,omitempty"`
		Description string   `json:"description,omitempty"`
		Events      []string `json:"events,omitempty"`
		ExternalUrl string   `json:"external_url,omitempty"`
		HtmlUrl     string   `json:"html_url,omitempty"`
		Id          int64    `json:"id,omitempty"`
		Name        string   `json:"name,omitempty"`
		NodeId      string   `json:"node_id,omitempty"`
		Owner       struct {
			AvatarUrl        string `json:"avatar_url,omitempty"`
			Description      string `json:"description,omitempty"`
			EventsUrl        string `json:"events_url,omitempty"`
			HooksUrl         string `json:"hooks_url,omitempty"`
			Id               int64  `json:"id,omitempty"`
			IssuesUrl        string `json:"issues_url,omitempty"`
			Login            string `json:"login,omitempty"`
			MembersUrl       string `json:"members_url,omitempty"`
			NodeId           string `json:"node_id,omitempty"`
			PublicMembersUrl string `json:"public_members_url,omitempty"`
			ReposUrl         string `json:"repos_url,omitempty"`
			Url              string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Contents   string `json:"contents,omitempty"`
			Issues     string `json:"issues,omitempty"`
			Metadata   string `json:"metadata,omitempty"`
			SingleFile string `json:"single_file,omitempty"`
		} `json:"permissions,omitempty"`
		Slug      string `json:"slug,omitempty"`
		UpdatedAt string `json:"updated_at,omitempty"`
	} `json:"app,omitempty"`
	CheckSuite struct {
		Id int64 `json:"id,omitempty"`
	} `json:"check_suite,omitempty"`
	CompletedAt string `json:"completed_at,omitempty"`
	Conclusion  string `json:"conclusion,omitempty"`
	DetailsUrl  string `json:"details_url,omitempty"`
	ExternalId  string `json:"external_id,omitempty"`
	HeadSha     string `json:"head_sha,omitempty"`
	HtmlUrl     string `json:"html_url,omitempty"`
	Id          int64  `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	NodeId      string `json:"node_id,omitempty"`
	Output      struct {
		AnnotationsCount int64  `json:"annotations_count,omitempty"`
		AnnotationsUrl   string `json:"annotations_url,omitempty"`
		Summary          string `json:"summary,omitempty"`
		Text             string `json:"text,omitempty"`
		Title            string `json:"title,omitempty"`
	} `json:"output,omitempty"`
	PullRequests []struct {
		Base struct {
			Ref  string `json:"ref,omitempty"`
			Repo struct {
				Id   int64  `json:"id,omitempty"`
				Name string `json:"name,omitempty"`
				Url  string `json:"url,omitempty"`
			} `json:"repo,omitempty"`
			Sha string `json:"sha,omitempty"`
		} `json:"base,omitempty"`
		Head struct {
			Ref  string `json:"ref,omitempty"`
			Repo struct {
				Id   int64  `json:"id,omitempty"`
				Name string `json:"name,omitempty"`
				Url  string `json:"url,omitempty"`
			} `json:"repo,omitempty"`
			Sha string `json:"sha,omitempty"`
		} `json:"head,omitempty"`
		Id     int64  `json:"id,omitempty"`
		Number int64  `json:"number,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"pull_requests,omitempty"`
	StartedAt string `json:"started_at,omitempty"`
	Status    string `json:"status,omitempty"`
	Url       string `json:"url,omitempty"`
}

/*
ChecksListSuitesForRefReq builds requests for "checks/list-suites-for-ref"

List check suites for a Git reference.

  GET /repos/{owner}/{repo}/commits/{ref}/check-suites

https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference
*/
type ChecksListSuitesForRefReq struct {
	Owner string
	Repo  string
	Ref   string

	// Filters check suites by GitHub App `id`.
	AppId *int64

	/*
	Filters checks suites by the name of the [check
	run](https://developer.github.com/v3/checks/runs/).
	*/
	CheckName *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksListSuitesForRefReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/commits/%v/check-suites", r.Owner, r.Repo, r.Ref)
}

func (r ChecksListSuitesForRefReq) method() string {
	return "GET"
}

func (r ChecksListSuitesForRefReq) urlQuery() url.Values {
	query := url.Values{}
	if r.AppId != nil {
		query.Set("app_id", strconv.FormatInt(*r.AppId, 10))
	}
	if r.CheckName != nil {
		query.Set("check_name", *r.CheckName)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r ChecksListSuitesForRefReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksListSuitesForRefReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
ChecksListSuitesForRefResponseBody200 is a response body for checks/list-suites-for-ref

API documentation: https://developer.github.com/v3/checks/suites/#list-check-suites-for-a-git-reference
*/
type ChecksListSuitesForRefResponseBody200 struct {
	CheckSuites []struct {
		After string `json:"after,omitempty"`
		App   struct {
			CreatedAt   string   `json:"created_at,omitempty"`
			Description string   `json:"description,omitempty"`
			Events      []string `json:"events,omitempty"`
			ExternalUrl string   `json:"external_url,omitempty"`
			HtmlUrl     string   `json:"html_url,omitempty"`
			Id          int64    `json:"id,omitempty"`
			Name        string   `json:"name,omitempty"`
			NodeId      string   `json:"node_id,omitempty"`
			Owner       struct {
				AvatarUrl        string `json:"avatar_url,omitempty"`
				Description      string `json:"description,omitempty"`
				EventsUrl        string `json:"events_url,omitempty"`
				HooksUrl         string `json:"hooks_url,omitempty"`
				Id               int64  `json:"id,omitempty"`
				IssuesUrl        string `json:"issues_url,omitempty"`
				Login            string `json:"login,omitempty"`
				MembersUrl       string `json:"members_url,omitempty"`
				NodeId           string `json:"node_id,omitempty"`
				PublicMembersUrl string `json:"public_members_url,omitempty"`
				ReposUrl         string `json:"repos_url,omitempty"`
				Url              string `json:"url,omitempty"`
			} `json:"owner,omitempty"`
			Permissions struct {
				Contents   string `json:"contents,omitempty"`
				Issues     string `json:"issues,omitempty"`
				Metadata   string `json:"metadata,omitempty"`
				SingleFile string `json:"single_file,omitempty"`
			} `json:"permissions,omitempty"`
			Slug      string `json:"slug,omitempty"`
			UpdatedAt string `json:"updated_at,omitempty"`
		} `json:"app,omitempty"`
		Before       string        `json:"before,omitempty"`
		Conclusion   string        `json:"conclusion,omitempty"`
		HeadBranch   string        `json:"head_branch,omitempty"`
		HeadSha      string        `json:"head_sha,omitempty"`
		Id           int64         `json:"id,omitempty"`
		NodeId       string        `json:"node_id,omitempty"`
		PullRequests []interface{} `json:"pull_requests,omitempty"`
		Repository   struct {
			AllowMergeCommit bool   `json:"allow_merge_commit,omitempty"`
			AllowRebaseMerge bool   `json:"allow_rebase_merge,omitempty"`
			AllowSquashMerge bool   `json:"allow_squash_merge,omitempty"`
			ArchiveUrl       string `json:"archive_url,omitempty"`
			Archived         bool   `json:"archived,omitempty"`
			AssigneesUrl     string `json:"assignees_url,omitempty"`
			BlobsUrl         string `json:"blobs_url,omitempty"`
			BranchesUrl      string `json:"branches_url,omitempty"`
			CloneUrl         string `json:"clone_url,omitempty"`
			CollaboratorsUrl string `json:"collaborators_url,omitempty"`
			CommentsUrl      string `json:"comments_url,omitempty"`
			CommitsUrl       string `json:"commits_url,omitempty"`
			CompareUrl       string `json:"compare_url,omitempty"`
			ContentsUrl      string `json:"contents_url,omitempty"`
			ContributorsUrl  string `json:"contributors_url,omitempty"`
			CreatedAt        string `json:"created_at,omitempty"`
			DefaultBranch    string `json:"default_branch,omitempty"`
			DeploymentsUrl   string `json:"deployments_url,omitempty"`
			Description      string `json:"description,omitempty"`
			Disabled         bool   `json:"disabled,omitempty"`
			DownloadsUrl     string `json:"downloads_url,omitempty"`
			EventsUrl        string `json:"events_url,omitempty"`
			Fork             bool   `json:"fork,omitempty"`
			ForksCount       int64  `json:"forks_count,omitempty"`
			ForksUrl         string `json:"forks_url,omitempty"`
			FullName         string `json:"full_name,omitempty"`
			GitCommitsUrl    string `json:"git_commits_url,omitempty"`
			GitRefsUrl       string `json:"git_refs_url,omitempty"`
			GitTagsUrl       string `json:"git_tags_url,omitempty"`
			GitUrl           string `json:"git_url,omitempty"`
			HasDownloads     bool   `json:"has_downloads,omitempty"`
			HasIssues        bool   `json:"has_issues,omitempty"`
			HasPages         bool   `json:"has_pages,omitempty"`
			HasProjects      bool   `json:"has_projects,omitempty"`
			HasWiki          bool   `json:"has_wiki,omitempty"`
			Homepage         string `json:"homepage,omitempty"`
			HooksUrl         string `json:"hooks_url,omitempty"`
			HtmlUrl          string `json:"html_url,omitempty"`
			Id               int64  `json:"id,omitempty"`
			IsTemplate       bool   `json:"is_template,omitempty"`
			IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
			IssueEventsUrl   string `json:"issue_events_url,omitempty"`
			IssuesUrl        string `json:"issues_url,omitempty"`
			KeysUrl          string `json:"keys_url,omitempty"`
			LabelsUrl        string `json:"labels_url,omitempty"`
			Language         string `json:"language,omitempty"`
			LanguagesUrl     string `json:"languages_url,omitempty"`
			MergesUrl        string `json:"merges_url,omitempty"`
			MilestonesUrl    string `json:"milestones_url,omitempty"`
			MirrorUrl        string `json:"mirror_url,omitempty"`
			Name             string `json:"name,omitempty"`
			NetworkCount     int64  `json:"network_count,omitempty"`
			NodeId           string `json:"node_id,omitempty"`
			NotificationsUrl string `json:"notifications_url,omitempty"`
			OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
			Owner            struct {
				AvatarUrl         string `json:"avatar_url,omitempty"`
				EventsUrl         string `json:"events_url,omitempty"`
				FollowersUrl      string `json:"followers_url,omitempty"`
				FollowingUrl      string `json:"following_url,omitempty"`
				GistsUrl          string `json:"gists_url,omitempty"`
				GravatarId        string `json:"gravatar_id,omitempty"`
				HtmlUrl           string `json:"html_url,omitempty"`
				Id                int64  `json:"id,omitempty"`
				Login             string `json:"login,omitempty"`
				NodeId            string `json:"node_id,omitempty"`
				OrganizationsUrl  string `json:"organizations_url,omitempty"`
				ReceivedEventsUrl string `json:"received_events_url,omitempty"`
				ReposUrl          string `json:"repos_url,omitempty"`
				SiteAdmin         bool   `json:"site_admin,omitempty"`
				StarredUrl        string `json:"starred_url,omitempty"`
				SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
				Type              string `json:"type,omitempty"`
				Url               string `json:"url,omitempty"`
			} `json:"owner,omitempty"`
			Permissions struct {
				Admin bool `json:"admin,omitempty"`
				Pull  bool `json:"pull,omitempty"`
				Push  bool `json:"push,omitempty"`
			} `json:"permissions,omitempty"`
			Private            bool        `json:"private,omitempty"`
			PullsUrl           string      `json:"pulls_url,omitempty"`
			PushedAt           string      `json:"pushed_at,omitempty"`
			ReleasesUrl        string      `json:"releases_url,omitempty"`
			Size               json.Number `json:"size,omitempty"`
			SshUrl             string      `json:"ssh_url,omitempty"`
			StargazersCount    int64       `json:"stargazers_count,omitempty"`
			StargazersUrl      string      `json:"stargazers_url,omitempty"`
			StatusesUrl        string      `json:"statuses_url,omitempty"`
			SubscribersCount   int64       `json:"subscribers_count,omitempty"`
			SubscribersUrl     string      `json:"subscribers_url,omitempty"`
			SubscriptionUrl    string      `json:"subscription_url,omitempty"`
			SvnUrl             string      `json:"svn_url,omitempty"`
			TagsUrl            string      `json:"tags_url,omitempty"`
			TeamsUrl           string      `json:"teams_url,omitempty"`
			TempCloneToken     string      `json:"temp_clone_token,omitempty"`
			TemplateRepository string      `json:"template_repository,omitempty"`
			Topics             []string    `json:"topics,omitempty"`
			TreesUrl           string      `json:"trees_url,omitempty"`
			UpdatedAt          string      `json:"updated_at,omitempty"`
			Url                string      `json:"url,omitempty"`
			Visibility         string      `json:"visibility,omitempty"`
			WatchersCount      int64       `json:"watchers_count,omitempty"`
		} `json:"repository,omitempty"`
		Status string `json:"status,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"check_suites,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ChecksCreateSuiteReq builds requests for "checks/create-suite"

Create a check suite.

  POST /repos/{owner}/{repo}/check-suites

https://developer.github.com/v3/checks/suites/#create-a-check-suite
*/
type ChecksCreateSuiteReq struct {
	Owner       string
	Repo        string
	RequestBody ChecksCreateSuiteReqBody

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksCreateSuiteReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-suites", r.Owner, r.Repo)
}

func (r ChecksCreateSuiteReq) method() string {
	return "POST"
}

func (r ChecksCreateSuiteReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksCreateSuiteReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksCreateSuiteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ChecksCreateSuiteReqBody is a request body for checks/create-suite

API documentation: https://developer.github.com/v3/checks/suites/#create-a-check-suite
*/
type ChecksCreateSuiteReqBody struct {

	// The sha of the head commit.
	HeadSha *string `json:"head_sha"`
}

/*
ChecksCreateSuiteResponseBody201 is a response body for checks/create-suite

API documentation: https://developer.github.com/v3/checks/suites/#create-a-check-suite
*/
type ChecksCreateSuiteResponseBody201 struct {
	After string `json:"after,omitempty"`
	App   struct {
		CreatedAt   string   `json:"created_at,omitempty"`
		Description string   `json:"description,omitempty"`
		Events      []string `json:"events,omitempty"`
		ExternalUrl string   `json:"external_url,omitempty"`
		HtmlUrl     string   `json:"html_url,omitempty"`
		Id          int64    `json:"id,omitempty"`
		Name        string   `json:"name,omitempty"`
		NodeId      string   `json:"node_id,omitempty"`
		Owner       struct {
			AvatarUrl        string `json:"avatar_url,omitempty"`
			Description      string `json:"description,omitempty"`
			EventsUrl        string `json:"events_url,omitempty"`
			HooksUrl         string `json:"hooks_url,omitempty"`
			Id               int64  `json:"id,omitempty"`
			IssuesUrl        string `json:"issues_url,omitempty"`
			Login            string `json:"login,omitempty"`
			MembersUrl       string `json:"members_url,omitempty"`
			NodeId           string `json:"node_id,omitempty"`
			PublicMembersUrl string `json:"public_members_url,omitempty"`
			ReposUrl         string `json:"repos_url,omitempty"`
			Url              string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Contents   string `json:"contents,omitempty"`
			Issues     string `json:"issues,omitempty"`
			Metadata   string `json:"metadata,omitempty"`
			SingleFile string `json:"single_file,omitempty"`
		} `json:"permissions,omitempty"`
		Slug      string `json:"slug,omitempty"`
		UpdatedAt string `json:"updated_at,omitempty"`
	} `json:"app,omitempty"`
	Before       string        `json:"before,omitempty"`
	Conclusion   string        `json:"conclusion,omitempty"`
	HeadBranch   string        `json:"head_branch,omitempty"`
	HeadSha      string        `json:"head_sha,omitempty"`
	Id           int64         `json:"id,omitempty"`
	NodeId       string        `json:"node_id,omitempty"`
	PullRequests []interface{} `json:"pull_requests,omitempty"`
	Repository   struct {
		AllowMergeCommit bool   `json:"allow_merge_commit,omitempty"`
		AllowRebaseMerge bool   `json:"allow_rebase_merge,omitempty"`
		AllowSquashMerge bool   `json:"allow_squash_merge,omitempty"`
		ArchiveUrl       string `json:"archive_url,omitempty"`
		Archived         bool   `json:"archived,omitempty"`
		AssigneesUrl     string `json:"assignees_url,omitempty"`
		BlobsUrl         string `json:"blobs_url,omitempty"`
		BranchesUrl      string `json:"branches_url,omitempty"`
		CloneUrl         string `json:"clone_url,omitempty"`
		CollaboratorsUrl string `json:"collaborators_url,omitempty"`
		CommentsUrl      string `json:"comments_url,omitempty"`
		CommitsUrl       string `json:"commits_url,omitempty"`
		CompareUrl       string `json:"compare_url,omitempty"`
		ContentsUrl      string `json:"contents_url,omitempty"`
		ContributorsUrl  string `json:"contributors_url,omitempty"`
		CreatedAt        string `json:"created_at,omitempty"`
		DefaultBranch    string `json:"default_branch,omitempty"`
		DeploymentsUrl   string `json:"deployments_url,omitempty"`
		Description      string `json:"description,omitempty"`
		Disabled         bool   `json:"disabled,omitempty"`
		DownloadsUrl     string `json:"downloads_url,omitempty"`
		EventsUrl        string `json:"events_url,omitempty"`
		Fork             bool   `json:"fork,omitempty"`
		ForksCount       int64  `json:"forks_count,omitempty"`
		ForksUrl         string `json:"forks_url,omitempty"`
		FullName         string `json:"full_name,omitempty"`
		GitCommitsUrl    string `json:"git_commits_url,omitempty"`
		GitRefsUrl       string `json:"git_refs_url,omitempty"`
		GitTagsUrl       string `json:"git_tags_url,omitempty"`
		GitUrl           string `json:"git_url,omitempty"`
		HasDownloads     bool   `json:"has_downloads,omitempty"`
		HasIssues        bool   `json:"has_issues,omitempty"`
		HasPages         bool   `json:"has_pages,omitempty"`
		HasProjects      bool   `json:"has_projects,omitempty"`
		HasWiki          bool   `json:"has_wiki,omitempty"`
		Homepage         string `json:"homepage,omitempty"`
		HooksUrl         string `json:"hooks_url,omitempty"`
		HtmlUrl          string `json:"html_url,omitempty"`
		Id               int64  `json:"id,omitempty"`
		IsTemplate       bool   `json:"is_template,omitempty"`
		IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl   string `json:"issue_events_url,omitempty"`
		IssuesUrl        string `json:"issues_url,omitempty"`
		KeysUrl          string `json:"keys_url,omitempty"`
		LabelsUrl        string `json:"labels_url,omitempty"`
		Language         string `json:"language,omitempty"`
		LanguagesUrl     string `json:"languages_url,omitempty"`
		MergesUrl        string `json:"merges_url,omitempty"`
		MilestonesUrl    string `json:"milestones_url,omitempty"`
		MirrorUrl        string `json:"mirror_url,omitempty"`
		Name             string `json:"name,omitempty"`
		NetworkCount     int64  `json:"network_count,omitempty"`
		NodeId           string `json:"node_id,omitempty"`
		NotificationsUrl string `json:"notifications_url,omitempty"`
		OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
		Owner            struct {
			AvatarUrl         string `json:"avatar_url,omitempty"`
			EventsUrl         string `json:"events_url,omitempty"`
			FollowersUrl      string `json:"followers_url,omitempty"`
			FollowingUrl      string `json:"following_url,omitempty"`
			GistsUrl          string `json:"gists_url,omitempty"`
			GravatarId        string `json:"gravatar_id,omitempty"`
			HtmlUrl           string `json:"html_url,omitempty"`
			Id                int64  `json:"id,omitempty"`
			Login             string `json:"login,omitempty"`
			NodeId            string `json:"node_id,omitempty"`
			OrganizationsUrl  string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl string `json:"received_events_url,omitempty"`
			ReposUrl          string `json:"repos_url,omitempty"`
			SiteAdmin         bool   `json:"site_admin,omitempty"`
			StarredUrl        string `json:"starred_url,omitempty"`
			SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
			Type              string `json:"type,omitempty"`
			Url               string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Admin bool `json:"admin,omitempty"`
			Pull  bool `json:"pull,omitempty"`
			Push  bool `json:"push,omitempty"`
		} `json:"permissions,omitempty"`
		Private            bool        `json:"private,omitempty"`
		PullsUrl           string      `json:"pulls_url,omitempty"`
		PushedAt           string      `json:"pushed_at,omitempty"`
		ReleasesUrl        string      `json:"releases_url,omitempty"`
		Size               json.Number `json:"size,omitempty"`
		SshUrl             string      `json:"ssh_url,omitempty"`
		StargazersCount    int64       `json:"stargazers_count,omitempty"`
		StargazersUrl      string      `json:"stargazers_url,omitempty"`
		StatusesUrl        string      `json:"statuses_url,omitempty"`
		SubscribersCount   int64       `json:"subscribers_count,omitempty"`
		SubscribersUrl     string      `json:"subscribers_url,omitempty"`
		SubscriptionUrl    string      `json:"subscription_url,omitempty"`
		SvnUrl             string      `json:"svn_url,omitempty"`
		TagsUrl            string      `json:"tags_url,omitempty"`
		TeamsUrl           string      `json:"teams_url,omitempty"`
		TempCloneToken     string      `json:"temp_clone_token,omitempty"`
		TemplateRepository string      `json:"template_repository,omitempty"`
		Topics             []string    `json:"topics,omitempty"`
		TreesUrl           string      `json:"trees_url,omitempty"`
		UpdatedAt          string      `json:"updated_at,omitempty"`
		Url                string      `json:"url,omitempty"`
		Visibility         string      `json:"visibility,omitempty"`
		WatchersCount      int64       `json:"watchers_count,omitempty"`
	} `json:"repository,omitempty"`
	Status string `json:"status,omitempty"`
	Url    string `json:"url,omitempty"`
}

/*
ChecksSetSuitesPreferencesReq builds requests for "checks/set-suites-preferences"

Update repository preferences for check suites.

  PATCH /repos/{owner}/{repo}/check-suites/preferences

https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites
*/
type ChecksSetSuitesPreferencesReq struct {
	Owner       string
	Repo        string
	RequestBody ChecksSetSuitesPreferencesReqBody

	/*
	The Checks API is currently available for developers to preview. During the
	preview period, the API may change without advance notice. Please see the [blog
	post](https://developer.github.com/changes/2018-05-07-new-checks-api-public-beta/)
	for full details. To access the API during the preview period, you must set this
	to true.
	*/
	AntiopePreview bool
}

func (r ChecksSetSuitesPreferencesReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/check-suites/preferences", r.Owner, r.Repo)
}

func (r ChecksSetSuitesPreferencesReq) method() string {
	return "PATCH"
}

func (r ChecksSetSuitesPreferencesReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r ChecksSetSuitesPreferencesReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{"antiope": r.AntiopePreview}
	return requestHeaders(headerVals, previewVals)
}

func (r ChecksSetSuitesPreferencesReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
ChecksSetSuitesPreferencesReqBody is a request body for checks/set-suites-preferences

API documentation: https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites
*/
type ChecksSetSuitesPreferencesReqBody struct {

	/*
	   Enables or disables automatic creation of CheckSuite events upon pushes to the
	   repository. Enabled by default. See the [`auto_trigger_checks`
	   object](https://developer.github.com/v3/checks/suites/#auto_trigger_checks-object)
	   description for details.
	*/
	AutoTriggerChecks []struct {

		// The `id` of the GitHub App.
		AppId *int64 `json:"app_id"`

		/*
		   Set to `true` to enable automatic creation of CheckSuite events upon pushes to
		   the repository, or `false` to disable them.
		*/
		Setting *bool `json:"setting"`
	} `json:"auto_trigger_checks,omitempty"`
}

/*
ChecksSetSuitesPreferencesResponseBody200 is a response body for checks/set-suites-preferences

API documentation: https://developer.github.com/v3/checks/suites/#update-repository-preferences-for-check-suites
*/
type ChecksSetSuitesPreferencesResponseBody200 struct {
	Preferences struct {
		AutoTriggerChecks []struct {
			AppId   int64 `json:"app_id"`
			Setting bool  `json:"setting"`
		} `json:"auto_trigger_checks,omitempty"`
	} `json:"preferences,omitempty"`
	Repository struct {
		AllowMergeCommit bool   `json:"allow_merge_commit,omitempty"`
		AllowRebaseMerge bool   `json:"allow_rebase_merge,omitempty"`
		AllowSquashMerge bool   `json:"allow_squash_merge,omitempty"`
		ArchiveUrl       string `json:"archive_url,omitempty"`
		Archived         bool   `json:"archived,omitempty"`
		AssigneesUrl     string `json:"assignees_url,omitempty"`
		BlobsUrl         string `json:"blobs_url,omitempty"`
		BranchesUrl      string `json:"branches_url,omitempty"`
		CloneUrl         string `json:"clone_url,omitempty"`
		CollaboratorsUrl string `json:"collaborators_url,omitempty"`
		CommentsUrl      string `json:"comments_url,omitempty"`
		CommitsUrl       string `json:"commits_url,omitempty"`
		CompareUrl       string `json:"compare_url,omitempty"`
		ContentsUrl      string `json:"contents_url,omitempty"`
		ContributorsUrl  string `json:"contributors_url,omitempty"`
		CreatedAt        string `json:"created_at,omitempty"`
		DefaultBranch    string `json:"default_branch,omitempty"`
		DeploymentsUrl   string `json:"deployments_url,omitempty"`
		Description      string `json:"description,omitempty"`
		Disabled         bool   `json:"disabled,omitempty"`
		DownloadsUrl     string `json:"downloads_url,omitempty"`
		EventsUrl        string `json:"events_url,omitempty"`
		Fork             bool   `json:"fork,omitempty"`
		ForksCount       int64  `json:"forks_count,omitempty"`
		ForksUrl         string `json:"forks_url,omitempty"`
		FullName         string `json:"full_name,omitempty"`
		GitCommitsUrl    string `json:"git_commits_url,omitempty"`
		GitRefsUrl       string `json:"git_refs_url,omitempty"`
		GitTagsUrl       string `json:"git_tags_url,omitempty"`
		GitUrl           string `json:"git_url,omitempty"`
		HasDownloads     bool   `json:"has_downloads,omitempty"`
		HasIssues        bool   `json:"has_issues,omitempty"`
		HasPages         bool   `json:"has_pages,omitempty"`
		HasProjects      bool   `json:"has_projects,omitempty"`
		HasWiki          bool   `json:"has_wiki,omitempty"`
		Homepage         string `json:"homepage,omitempty"`
		HooksUrl         string `json:"hooks_url,omitempty"`
		HtmlUrl          string `json:"html_url,omitempty"`
		Id               int64  `json:"id,omitempty"`
		IsTemplate       bool   `json:"is_template,omitempty"`
		IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl   string `json:"issue_events_url,omitempty"`
		IssuesUrl        string `json:"issues_url,omitempty"`
		KeysUrl          string `json:"keys_url,omitempty"`
		LabelsUrl        string `json:"labels_url,omitempty"`
		Language         string `json:"language,omitempty"`
		LanguagesUrl     string `json:"languages_url,omitempty"`
		MergesUrl        string `json:"merges_url,omitempty"`
		MilestonesUrl    string `json:"milestones_url,omitempty"`
		MirrorUrl        string `json:"mirror_url,omitempty"`
		Name             string `json:"name,omitempty"`
		NetworkCount     int64  `json:"network_count,omitempty"`
		NodeId           string `json:"node_id,omitempty"`
		NotificationsUrl string `json:"notifications_url,omitempty"`
		OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
		Owner            struct {
			AvatarUrl         string `json:"avatar_url,omitempty"`
			EventsUrl         string `json:"events_url,omitempty"`
			FollowersUrl      string `json:"followers_url,omitempty"`
			FollowingUrl      string `json:"following_url,omitempty"`
			GistsUrl          string `json:"gists_url,omitempty"`
			GravatarId        string `json:"gravatar_id,omitempty"`
			HtmlUrl           string `json:"html_url,omitempty"`
			Id                int64  `json:"id,omitempty"`
			Login             string `json:"login,omitempty"`
			NodeId            string `json:"node_id,omitempty"`
			OrganizationsUrl  string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl string `json:"received_events_url,omitempty"`
			ReposUrl          string `json:"repos_url,omitempty"`
			SiteAdmin         bool   `json:"site_admin,omitempty"`
			StarredUrl        string `json:"starred_url,omitempty"`
			SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
			Type              string `json:"type,omitempty"`
			Url               string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Permissions struct {
			Admin bool `json:"admin,omitempty"`
			Pull  bool `json:"pull,omitempty"`
			Push  bool `json:"push,omitempty"`
		} `json:"permissions,omitempty"`
		Private            bool        `json:"private,omitempty"`
		PullsUrl           string      `json:"pulls_url,omitempty"`
		PushedAt           string      `json:"pushed_at,omitempty"`
		ReleasesUrl        string      `json:"releases_url,omitempty"`
		Size               json.Number `json:"size,omitempty"`
		SshUrl             string      `json:"ssh_url,omitempty"`
		StargazersCount    int64       `json:"stargazers_count,omitempty"`
		StargazersUrl      string      `json:"stargazers_url,omitempty"`
		StatusesUrl        string      `json:"statuses_url,omitempty"`
		SubscribersCount   int64       `json:"subscribers_count,omitempty"`
		SubscribersUrl     string      `json:"subscribers_url,omitempty"`
		SubscriptionUrl    string      `json:"subscription_url,omitempty"`
		SvnUrl             string      `json:"svn_url,omitempty"`
		TagsUrl            string      `json:"tags_url,omitempty"`
		TeamsUrl           string      `json:"teams_url,omitempty"`
		TempCloneToken     string      `json:"temp_clone_token,omitempty"`
		TemplateRepository string      `json:"template_repository,omitempty"`
		Topics             []string    `json:"topics,omitempty"`
		TreesUrl           string      `json:"trees_url,omitempty"`
		UpdatedAt          string      `json:"updated_at,omitempty"`
		Url                string      `json:"url,omitempty"`
		Visibility         string      `json:"visibility,omitempty"`
		WatchersCount      int64       `json:"watchers_count,omitempty"`
	} `json:"repository,omitempty"`
}
