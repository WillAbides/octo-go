// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
GistsCheckIsStarredReq builds requests for "gists/check-is-starred"

Check if a gist is starred.

  GET /gists/{gist_id}/star

https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
*/
type GistsCheckIsStarredReq struct {
	GistId string
}

func (r *GistsCheckIsStarredReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/star", r.GistId)
}

func (r *GistsCheckIsStarredReq) method() string {
	return "GET"
}

func (r *GistsCheckIsStarredReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsCheckIsStarredReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsCheckIsStarredReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsCheckIsStarredReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsCreateReq builds requests for "gists/create"

Create a gist.

  POST /gists

https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateReq struct {
	RequestBody GistsCreateReqBody
}

func (r *GistsCreateReq) urlPath() string {
	return fmt.Sprintf("/gists")
}

func (r *GistsCreateReq) method() string {
	return "POST"
}

func (r *GistsCreateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsCreateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsCreateReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *GistsCreateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

// GistsCreateReqBodyFiles is a value for GistsCreateReqBody's Files field
type GistsCreateReqBodyFiles struct {

	// The content of the file.
	Content *string `json:"content,omitempty"`
}

/*
GistsCreateReqBody is a request body for gists/create

API documentation: https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateReqBody struct {

	// A descriptive name for this gist.
	Description *string `json:"description,omitempty"`

	/*
	   The filenames and content of each file in the gist. The keys in the `files`
	   object represent the filename and have the type `string`.
	*/
	Files map[string]*GistsCreateReqBodyFiles `json:"files"`

	// When `true`, the gist will be public and available for anyone to see.
	Public *bool `json:"public,omitempty"`
}

/*
GistsCreateResponseBody201 is a response body for gists/create

API documentation: https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateResponseBody201 struct {
	components.Gist
}

/*
GistsCreateCommentReq builds requests for "gists/create-comment"

Create a comment.

  POST /gists/{gist_id}/comments

https://developer.github.com/v3/gists/comments/#create-a-comment
*/
type GistsCreateCommentReq struct {
	GistId      string
	RequestBody GistsCreateCommentReqBody
}

func (r *GistsCreateCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments", r.GistId)
}

func (r *GistsCreateCommentReq) method() string {
	return "POST"
}

func (r *GistsCreateCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsCreateCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsCreateCommentReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *GistsCreateCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsCreateCommentReqBody is a request body for gists/create-comment

API documentation: https://developer.github.com/v3/gists/comments/#create-a-comment
*/
type GistsCreateCommentReqBody struct {

	// The comment text.
	Body *string `json:"body"`
}

/*
GistsCreateCommentResponseBody201 is a response body for gists/create-comment

API documentation: https://developer.github.com/v3/gists/comments/#create-a-comment
*/
type GistsCreateCommentResponseBody201 struct {
	components.GistComment
}

/*
GistsDeleteReq builds requests for "gists/delete"

Delete a gist.

  DELETE /gists/{gist_id}

https://developer.github.com/v3/gists/#delete-a-gist
*/
type GistsDeleteReq struct {
	GistId string
}

func (r *GistsDeleteReq) urlPath() string {
	return fmt.Sprintf("/gists/%v", r.GistId)
}

func (r *GistsDeleteReq) method() string {
	return "DELETE"
}

func (r *GistsDeleteReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsDeleteReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsDeleteReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsDeleteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsDeleteCommentReq builds requests for "gists/delete-comment"

Delete a comment.

  DELETE /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#delete-a-comment
*/
type GistsDeleteCommentReq struct {
	GistId    string
	CommentId int64
}

func (r *GistsDeleteCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments/%v", r.GistId, r.CommentId)
}

func (r *GistsDeleteCommentReq) method() string {
	return "DELETE"
}

func (r *GistsDeleteCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsDeleteCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsDeleteCommentReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsDeleteCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsForkReq builds requests for "gists/fork"

Fork a gist.

  POST /gists/{gist_id}/forks

https://developer.github.com/v3/gists/#fork-a-gist
*/
type GistsForkReq struct {
	GistId string
}

func (r *GistsForkReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/forks", r.GistId)
}

func (r *GistsForkReq) method() string {
	return "POST"
}

func (r *GistsForkReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsForkReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsForkReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsForkReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsForkResponseBody201 is a response body for gists/fork

API documentation: https://developer.github.com/v3/gists/#fork-a-gist
*/
type GistsForkResponseBody201 struct {
	components.BaseGist
}

/*
GistsGetReq builds requests for "gists/get"

Get a gist.

  GET /gists/{gist_id}

https://developer.github.com/v3/gists/#get-a-gist
*/
type GistsGetReq struct {
	GistId string
}

func (r *GistsGetReq) urlPath() string {
	return fmt.Sprintf("/gists/%v", r.GistId)
}

func (r *GistsGetReq) method() string {
	return "GET"
}

func (r *GistsGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsGetReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsGetReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsGetResponseBody200 is a response body for gists/get

API documentation: https://developer.github.com/v3/gists/#get-a-gist
*/
type GistsGetResponseBody200 struct {
	components.Gist
}

/*
GistsGetCommentReq builds requests for "gists/get-comment"

Get a single comment.

  GET /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#get-a-single-comment
*/
type GistsGetCommentReq struct {
	GistId    string
	CommentId int64
}

func (r *GistsGetCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments/%v", r.GistId, r.CommentId)
}

func (r *GistsGetCommentReq) method() string {
	return "GET"
}

func (r *GistsGetCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsGetCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsGetCommentReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsGetCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsGetCommentResponseBody200 is a response body for gists/get-comment

API documentation: https://developer.github.com/v3/gists/comments/#get-a-single-comment
*/
type GistsGetCommentResponseBody200 struct {
	components.GistComment
}

/*
GistsGetRevisionReq builds requests for "gists/get-revision"

Get a specific revision of a gist.

  GET /gists/{gist_id}/{sha}

https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist
*/
type GistsGetRevisionReq struct {
	GistId string
	Sha    string
}

func (r *GistsGetRevisionReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/%v", r.GistId, r.Sha)
}

func (r *GistsGetRevisionReq) method() string {
	return "GET"
}

func (r *GistsGetRevisionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsGetRevisionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsGetRevisionReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsGetRevisionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsGetRevisionResponseBody200 is a response body for gists/get-revision

API documentation: https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist
*/
type GistsGetRevisionResponseBody200 struct {
	components.Gist
}

/*
GistsListReq builds requests for "gists/list"

List gists for the authenticated user.

  GET /gists

https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
type GistsListReq struct {

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListReq) urlPath() string {
	return fmt.Sprintf("/gists")
}

func (r *GistsListReq) method() string {
	return "GET"
}

func (r *GistsListReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListResponseBody200 is a response body for gists/list

API documentation: https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
type GistsListResponseBody200 []struct {
	components.BaseGist
}

/*
GistsListCommentsReq builds requests for "gists/list-comments"

List comments on a gist.

  GET /gists/{gist_id}/comments

https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist
*/
type GistsListCommentsReq struct {
	GistId string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListCommentsReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments", r.GistId)
}

func (r *GistsListCommentsReq) method() string {
	return "GET"
}

func (r *GistsListCommentsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListCommentsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListCommentsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListCommentsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListCommentsResponseBody200 is a response body for gists/list-comments

API documentation: https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist
*/
type GistsListCommentsResponseBody200 []struct {
	components.GistComment
}

/*
GistsListCommitsReq builds requests for "gists/list-commits"

List gist commits.

  GET /gists/{gist_id}/commits

https://developer.github.com/v3/gists/#list-gist-commits
*/
type GistsListCommitsReq struct {
	GistId string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListCommitsReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/commits", r.GistId)
}

func (r *GistsListCommitsReq) method() string {
	return "GET"
}

func (r *GistsListCommitsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListCommitsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListCommitsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListCommitsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListCommitsResponseBody200 is a response body for gists/list-commits

API documentation: https://developer.github.com/v3/gists/#list-gist-commits
*/
type GistsListCommitsResponseBody200 []struct {
	components.GistCommit
}

/*
GistsListForUserReq builds requests for "gists/list-for-user"

List gists for a user.

  GET /users/{username}/gists

https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
type GistsListForUserReq struct {
	Username string

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/gists", r.Username)
}

func (r *GistsListForUserReq) method() string {
	return "GET"
}

func (r *GistsListForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListForUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListForUserResponseBody200 is a response body for gists/list-for-user

API documentation: https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
type GistsListForUserResponseBody200 []struct {
	components.BaseGist
}

/*
GistsListForksReq builds requests for "gists/list-forks"

List gist forks.

  GET /gists/{gist_id}/forks

https://developer.github.com/v3/gists/#list-gist-forks
*/
type GistsListForksReq struct {
	GistId string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListForksReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/forks", r.GistId)
}

func (r *GistsListForksReq) method() string {
	return "GET"
}

func (r *GistsListForksReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListForksReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListForksReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListForksReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListForksResponseBody200 is a response body for gists/list-forks

API documentation: https://developer.github.com/v3/gists/#list-gist-forks
*/
type GistsListForksResponseBody200 []struct {
	components.GistFork
}

/*
GistsListPublicReq builds requests for "gists/list-public"

List public gists.

  GET /gists/public

https://developer.github.com/v3/gists/#list-public-gists
*/
type GistsListPublicReq struct {

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListPublicReq) urlPath() string {
	return fmt.Sprintf("/gists/public")
}

func (r *GistsListPublicReq) method() string {
	return "GET"
}

func (r *GistsListPublicReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListPublicReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListPublicReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListPublicReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListPublicResponseBody200 is a response body for gists/list-public

API documentation: https://developer.github.com/v3/gists/#list-public-gists
*/
type GistsListPublicResponseBody200 []struct {
	components.BaseGist
}

/*
GistsListStarredReq builds requests for "gists/list-starred"

List starred gists.

  GET /gists/starred

https://developer.github.com/v3/gists/#list-starred-gists
*/
type GistsListStarredReq struct {

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListStarredReq) urlPath() string {
	return fmt.Sprintf("/gists/starred")
}

func (r *GistsListStarredReq) method() string {
	return "GET"
}

func (r *GistsListStarredReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListStarredReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListStarredReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsListStarredReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsListStarredResponseBody200 is a response body for gists/list-starred

API documentation: https://developer.github.com/v3/gists/#list-starred-gists
*/
type GistsListStarredResponseBody200 []struct {
	components.BaseGist
}

/*
GistsStarReq builds requests for "gists/star"

Star a gist.

  PUT /gists/{gist_id}/star

https://developer.github.com/v3/gists/#star-a-gist
*/
type GistsStarReq struct {
	GistId string
}

func (r *GistsStarReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/star", r.GistId)
}

func (r *GistsStarReq) method() string {
	return "PUT"
}

func (r *GistsStarReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsStarReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsStarReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsStarReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsUnstarReq builds requests for "gists/unstar"

Unstar a gist.

  DELETE /gists/{gist_id}/star

https://developer.github.com/v3/gists/#unstar-a-gist
*/
type GistsUnstarReq struct {
	GistId string
}

func (r *GistsUnstarReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/star", r.GistId)
}

func (r *GistsUnstarReq) method() string {
	return "DELETE"
}

func (r *GistsUnstarReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsUnstarReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsUnstarReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *GistsUnstarReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsUpdateReq builds requests for "gists/update"

Update a gist.

  PATCH /gists/{gist_id}

https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateReq struct {
	GistId      string
	RequestBody GistsUpdateReqBody
}

func (r *GistsUpdateReq) urlPath() string {
	return fmt.Sprintf("/gists/%v", r.GistId)
}

func (r *GistsUpdateReq) method() string {
	return "PATCH"
}

func (r *GistsUpdateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsUpdateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsUpdateReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *GistsUpdateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

// GistsUpdateReqBodyFiles is a value for GistsUpdateReqBody's Files field
type GistsUpdateReqBodyFiles struct {

	// The updated content of the file.
	Content *string `json:"content,omitempty"`

	/*
	   The new name for this file. To delete a file, set the value of the filename to
	   `null`.
	*/
	Filename *string `json:"filename,omitempty"`
}

/*
GistsUpdateReqBody is a request body for gists/update

API documentation: https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateReqBody struct {

	// A descriptive name for this gist.
	Description *string `json:"description,omitempty"`

	// The filenames and content that make up this gist.
	Files map[string]*GistsUpdateReqBodyFiles `json:"files,omitempty"`
}

/*
GistsUpdateResponseBody200 is a response body for gists/update

API documentation: https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateResponseBody200 struct {
	components.Gist
}

/*
GistsUpdateCommentReq builds requests for "gists/update-comment"

Edit a comment.

  PATCH /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#edit-a-comment
*/
type GistsUpdateCommentReq struct {
	GistId      string
	CommentId   int64
	RequestBody GistsUpdateCommentReqBody
}

func (r *GistsUpdateCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments/%v", r.GistId, r.CommentId)
}

func (r *GistsUpdateCommentReq) method() string {
	return "PATCH"
}

func (r *GistsUpdateCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsUpdateCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsUpdateCommentReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *GistsUpdateCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
GistsUpdateCommentReqBody is a request body for gists/update-comment

API documentation: https://developer.github.com/v3/gists/comments/#edit-a-comment
*/
type GistsUpdateCommentReqBody struct {

	// The comment text.
	Body *string `json:"body"`
}

/*
GistsUpdateCommentResponseBody200 is a response body for gists/update-comment

API documentation: https://developer.github.com/v3/gists/comments/#edit-a-comment
*/
type GistsUpdateCommentResponseBody200 struct {
	components.GistComment
}
