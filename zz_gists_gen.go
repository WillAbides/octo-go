// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
GistsCheckIsStarred performs requests for "gists/check-is-starred"

Check if a gist is starred.

  GET /gists/{gist_id}/star

https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
*/
func GistsCheckIsStarred(ctx context.Context, req *GistsCheckIsStarredReq, opt ...RequestOption) (*GistsCheckIsStarredResponse, error) {
	if req == nil {
		req = new(GistsCheckIsStarredReq)
	}
	resp := &GistsCheckIsStarredResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.setBoolResult(&resp.Data)
	if err != nil {
		return nil, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsCheckIsStarred performs requests for "gists/check-is-starred"

Check if a gist is starred.

  GET /gists/{gist_id}/star

https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
*/
func (c Client) GistsCheckIsStarred(ctx context.Context, req *GistsCheckIsStarredReq, opt ...RequestOption) (*GistsCheckIsStarredResponse, error) {
	return GistsCheckIsStarred(ctx, req, append(c, opt...)...)
}

/*
GistsCheckIsStarredReq is request data for Client.GistsCheckIsStarred

https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
*/
type GistsCheckIsStarredReq struct {
	_url   string
	GistId string
}

func (r *GistsCheckIsStarredReq) url() string {
	return r._url
}

func (r *GistsCheckIsStarredReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/star", r.GistId)
}

func (r *GistsCheckIsStarredReq) method() string {
	return "GET"
}

func (r *GistsCheckIsStarredReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsCheckIsStarredReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsCheckIsStarredReq) body() interface{} {
	return nil
}

func (r *GistsCheckIsStarredReq) dataStatuses() []int {
	return []int{}
}

func (r *GistsCheckIsStarredReq) validStatuses() []int {
	return []int{204}
}

func (r *GistsCheckIsStarredReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrBoolean}
}

// HTTPRequest builds an *http.Request
func (r *GistsCheckIsStarredReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsCheckIsStarredReq) Rel(link RelName, resp *GistsCheckIsStarredResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsCheckIsStarredResponse is a response for GistsCheckIsStarred

https://developer.github.com/v3/gists/#check-if-a-gist-is-starred
*/
type GistsCheckIsStarredResponse struct {
	response
	request *GistsCheckIsStarredReq
	Data    bool
}

/*
GistsCreate performs requests for "gists/create"

Create a gist.

  POST /gists

https://developer.github.com/v3/gists/#create-a-gist
*/
func GistsCreate(ctx context.Context, req *GistsCreateReq, opt ...RequestOption) (*GistsCreateResponse, error) {
	if req == nil {
		req = new(GistsCreateReq)
	}
	resp := &GistsCreateResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsCreateResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsCreate performs requests for "gists/create"

Create a gist.

  POST /gists

https://developer.github.com/v3/gists/#create-a-gist
*/
func (c Client) GistsCreate(ctx context.Context, req *GistsCreateReq, opt ...RequestOption) (*GistsCreateResponse, error) {
	return GistsCreate(ctx, req, append(c, opt...)...)
}

/*
GistsCreateReq is request data for Client.GistsCreate

https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateReq struct {
	_url        string
	RequestBody GistsCreateReqBody
}

func (r *GistsCreateReq) url() string {
	return r._url
}

func (r *GistsCreateReq) urlPath() string {
	return fmt.Sprintf("/gists")
}

func (r *GistsCreateReq) method() string {
	return "POST"
}

func (r *GistsCreateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsCreateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsCreateReq) body() interface{} {
	return r.RequestBody
}

func (r *GistsCreateReq) dataStatuses() []int {
	return []int{201}
}

func (r *GistsCreateReq) validStatuses() []int {
	return []int{201}
}

func (r *GistsCreateReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *GistsCreateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsCreateReq) Rel(link RelName, resp *GistsCreateResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

// GistsCreateReqBodyFiles is a value for GistsCreateReqBody's Files field
type GistsCreateReqBodyFiles struct {

	// The content of the file.
	Content *string `json:"content,omitempty"`
}

/*
GistsCreateReqBody is a request body for gists/create

https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateReqBody struct {

	// A descriptive name for this gist.
	Description *string `json:"description,omitempty"`

	/*
	   The filenames and content of each file in the gist. The keys in the `files`
	   object represent the filename and have the type `string`.
	*/
	Files map[string]GistsCreateReqBodyFiles `json:"files"`

	// When `true`, the gist will be public and available for anyone to see.
	Public *bool `json:"public,omitempty"`
}

/*
GistsCreateResponseBody is a response body for GistsCreate

https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateResponseBody struct {
	components.Gist
}

/*
GistsCreateResponse is a response for GistsCreate

https://developer.github.com/v3/gists/#create-a-gist
*/
type GistsCreateResponse struct {
	response
	request *GistsCreateReq
	Data    *GistsCreateResponseBody
}

/*
GistsCreateComment performs requests for "gists/create-comment"

Create a gist comment.

  POST /gists/{gist_id}/comments

https://developer.github.com/v3/gists/comments/#create-a-gist-comment
*/
func GistsCreateComment(ctx context.Context, req *GistsCreateCommentReq, opt ...RequestOption) (*GistsCreateCommentResponse, error) {
	if req == nil {
		req = new(GistsCreateCommentReq)
	}
	resp := &GistsCreateCommentResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsCreateCommentResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsCreateComment performs requests for "gists/create-comment"

Create a gist comment.

  POST /gists/{gist_id}/comments

https://developer.github.com/v3/gists/comments/#create-a-gist-comment
*/
func (c Client) GistsCreateComment(ctx context.Context, req *GistsCreateCommentReq, opt ...RequestOption) (*GistsCreateCommentResponse, error) {
	return GistsCreateComment(ctx, req, append(c, opt...)...)
}

/*
GistsCreateCommentReq is request data for Client.GistsCreateComment

https://developer.github.com/v3/gists/comments/#create-a-gist-comment
*/
type GistsCreateCommentReq struct {
	_url        string
	GistId      string
	RequestBody GistsCreateCommentReqBody
}

func (r *GistsCreateCommentReq) url() string {
	return r._url
}

func (r *GistsCreateCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments", r.GistId)
}

func (r *GistsCreateCommentReq) method() string {
	return "POST"
}

func (r *GistsCreateCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsCreateCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsCreateCommentReq) body() interface{} {
	return r.RequestBody
}

func (r *GistsCreateCommentReq) dataStatuses() []int {
	return []int{201}
}

func (r *GistsCreateCommentReq) validStatuses() []int {
	return []int{201}
}

func (r *GistsCreateCommentReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *GistsCreateCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsCreateCommentReq) Rel(link RelName, resp *GistsCreateCommentResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsCreateCommentReqBody is a request body for gists/create-comment

https://developer.github.com/v3/gists/comments/#create-a-gist-comment
*/
type GistsCreateCommentReqBody struct {

	// The comment text.
	Body *string `json:"body"`
}

/*
GistsCreateCommentResponseBody is a response body for GistsCreateComment

https://developer.github.com/v3/gists/comments/#create-a-gist-comment
*/
type GistsCreateCommentResponseBody struct {
	components.GistComment
}

/*
GistsCreateCommentResponse is a response for GistsCreateComment

https://developer.github.com/v3/gists/comments/#create-a-gist-comment
*/
type GistsCreateCommentResponse struct {
	response
	request *GistsCreateCommentReq
	Data    *GistsCreateCommentResponseBody
}

/*
GistsDelete performs requests for "gists/delete"

Delete a gist.

  DELETE /gists/{gist_id}

https://developer.github.com/v3/gists/#delete-a-gist
*/
func GistsDelete(ctx context.Context, req *GistsDeleteReq, opt ...RequestOption) (*GistsDeleteResponse, error) {
	if req == nil {
		req = new(GistsDeleteReq)
	}
	resp := &GistsDeleteResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsDelete performs requests for "gists/delete"

Delete a gist.

  DELETE /gists/{gist_id}

https://developer.github.com/v3/gists/#delete-a-gist
*/
func (c Client) GistsDelete(ctx context.Context, req *GistsDeleteReq, opt ...RequestOption) (*GistsDeleteResponse, error) {
	return GistsDelete(ctx, req, append(c, opt...)...)
}

/*
GistsDeleteReq is request data for Client.GistsDelete

https://developer.github.com/v3/gists/#delete-a-gist
*/
type GistsDeleteReq struct {
	_url   string
	GistId string
}

func (r *GistsDeleteReq) url() string {
	return r._url
}

func (r *GistsDeleteReq) urlPath() string {
	return fmt.Sprintf("/gists/%v", r.GistId)
}

func (r *GistsDeleteReq) method() string {
	return "DELETE"
}

func (r *GistsDeleteReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsDeleteReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsDeleteReq) body() interface{} {
	return nil
}

func (r *GistsDeleteReq) dataStatuses() []int {
	return []int{}
}

func (r *GistsDeleteReq) validStatuses() []int {
	return []int{204}
}

func (r *GistsDeleteReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsDeleteReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsDeleteReq) Rel(link RelName, resp *GistsDeleteResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsDeleteResponse is a response for GistsDelete

https://developer.github.com/v3/gists/#delete-a-gist
*/
type GistsDeleteResponse struct {
	response
	request *GistsDeleteReq
}

/*
GistsDeleteComment performs requests for "gists/delete-comment"

Delete a gist comment.

  DELETE /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#delete-a-gist-comment
*/
func GistsDeleteComment(ctx context.Context, req *GistsDeleteCommentReq, opt ...RequestOption) (*GistsDeleteCommentResponse, error) {
	if req == nil {
		req = new(GistsDeleteCommentReq)
	}
	resp := &GistsDeleteCommentResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsDeleteComment performs requests for "gists/delete-comment"

Delete a gist comment.

  DELETE /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#delete-a-gist-comment
*/
func (c Client) GistsDeleteComment(ctx context.Context, req *GistsDeleteCommentReq, opt ...RequestOption) (*GistsDeleteCommentResponse, error) {
	return GistsDeleteComment(ctx, req, append(c, opt...)...)
}

/*
GistsDeleteCommentReq is request data for Client.GistsDeleteComment

https://developer.github.com/v3/gists/comments/#delete-a-gist-comment
*/
type GistsDeleteCommentReq struct {
	_url      string
	GistId    string
	CommentId int64
}

func (r *GistsDeleteCommentReq) url() string {
	return r._url
}

func (r *GistsDeleteCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments/%v", r.GistId, r.CommentId)
}

func (r *GistsDeleteCommentReq) method() string {
	return "DELETE"
}

func (r *GistsDeleteCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsDeleteCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsDeleteCommentReq) body() interface{} {
	return nil
}

func (r *GistsDeleteCommentReq) dataStatuses() []int {
	return []int{}
}

func (r *GistsDeleteCommentReq) validStatuses() []int {
	return []int{204}
}

func (r *GistsDeleteCommentReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsDeleteCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsDeleteCommentReq) Rel(link RelName, resp *GistsDeleteCommentResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsDeleteCommentResponse is a response for GistsDeleteComment

https://developer.github.com/v3/gists/comments/#delete-a-gist-comment
*/
type GistsDeleteCommentResponse struct {
	response
	request *GistsDeleteCommentReq
}

/*
GistsFork performs requests for "gists/fork"

Fork a gist.

  POST /gists/{gist_id}/forks

https://developer.github.com/v3/gists/#fork-a-gist
*/
func GistsFork(ctx context.Context, req *GistsForkReq, opt ...RequestOption) (*GistsForkResponse, error) {
	if req == nil {
		req = new(GistsForkReq)
	}
	resp := &GistsForkResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsForkResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsFork performs requests for "gists/fork"

Fork a gist.

  POST /gists/{gist_id}/forks

https://developer.github.com/v3/gists/#fork-a-gist
*/
func (c Client) GistsFork(ctx context.Context, req *GistsForkReq, opt ...RequestOption) (*GistsForkResponse, error) {
	return GistsFork(ctx, req, append(c, opt...)...)
}

/*
GistsForkReq is request data for Client.GistsFork

https://developer.github.com/v3/gists/#fork-a-gist
*/
type GistsForkReq struct {
	_url   string
	GistId string
}

func (r *GistsForkReq) url() string {
	return r._url
}

func (r *GistsForkReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/forks", r.GistId)
}

func (r *GistsForkReq) method() string {
	return "POST"
}

func (r *GistsForkReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsForkReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsForkReq) body() interface{} {
	return nil
}

func (r *GistsForkReq) dataStatuses() []int {
	return []int{201}
}

func (r *GistsForkReq) validStatuses() []int {
	return []int{201}
}

func (r *GistsForkReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsForkReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsForkReq) Rel(link RelName, resp *GistsForkResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsForkResponseBody is a response body for GistsFork

https://developer.github.com/v3/gists/#fork-a-gist
*/
type GistsForkResponseBody struct {
	components.BaseGist
}

/*
GistsForkResponse is a response for GistsFork

https://developer.github.com/v3/gists/#fork-a-gist
*/
type GistsForkResponse struct {
	response
	request *GistsForkReq
	Data    *GistsForkResponseBody
}

/*
GistsGet performs requests for "gists/get"

Get a gist.

  GET /gists/{gist_id}

https://developer.github.com/v3/gists/#get-a-gist
*/
func GistsGet(ctx context.Context, req *GistsGetReq, opt ...RequestOption) (*GistsGetResponse, error) {
	if req == nil {
		req = new(GistsGetReq)
	}
	resp := &GistsGetResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsGetResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsGet performs requests for "gists/get"

Get a gist.

  GET /gists/{gist_id}

https://developer.github.com/v3/gists/#get-a-gist
*/
func (c Client) GistsGet(ctx context.Context, req *GistsGetReq, opt ...RequestOption) (*GistsGetResponse, error) {
	return GistsGet(ctx, req, append(c, opt...)...)
}

/*
GistsGetReq is request data for Client.GistsGet

https://developer.github.com/v3/gists/#get-a-gist
*/
type GistsGetReq struct {
	_url   string
	GistId string
}

func (r *GistsGetReq) url() string {
	return r._url
}

func (r *GistsGetReq) urlPath() string {
	return fmt.Sprintf("/gists/%v", r.GistId)
}

func (r *GistsGetReq) method() string {
	return "GET"
}

func (r *GistsGetReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsGetReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsGetReq) body() interface{} {
	return nil
}

func (r *GistsGetReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsGetReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsGetReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsGetReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsGetReq) Rel(link RelName, resp *GistsGetResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsGetResponseBody is a response body for GistsGet

https://developer.github.com/v3/gists/#get-a-gist
*/
type GistsGetResponseBody struct {
	components.Gist
}

/*
GistsGetResponse is a response for GistsGet

https://developer.github.com/v3/gists/#get-a-gist
*/
type GistsGetResponse struct {
	response
	request *GistsGetReq
	Data    *GistsGetResponseBody
}

/*
GistsGetComment performs requests for "gists/get-comment"

Get a gist comment.

  GET /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#get-a-gist-comment
*/
func GistsGetComment(ctx context.Context, req *GistsGetCommentReq, opt ...RequestOption) (*GistsGetCommentResponse, error) {
	if req == nil {
		req = new(GistsGetCommentReq)
	}
	resp := &GistsGetCommentResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsGetCommentResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsGetComment performs requests for "gists/get-comment"

Get a gist comment.

  GET /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#get-a-gist-comment
*/
func (c Client) GistsGetComment(ctx context.Context, req *GistsGetCommentReq, opt ...RequestOption) (*GistsGetCommentResponse, error) {
	return GistsGetComment(ctx, req, append(c, opt...)...)
}

/*
GistsGetCommentReq is request data for Client.GistsGetComment

https://developer.github.com/v3/gists/comments/#get-a-gist-comment
*/
type GistsGetCommentReq struct {
	_url      string
	GistId    string
	CommentId int64
}

func (r *GistsGetCommentReq) url() string {
	return r._url
}

func (r *GistsGetCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments/%v", r.GistId, r.CommentId)
}

func (r *GistsGetCommentReq) method() string {
	return "GET"
}

func (r *GistsGetCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsGetCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsGetCommentReq) body() interface{} {
	return nil
}

func (r *GistsGetCommentReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsGetCommentReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsGetCommentReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsGetCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsGetCommentReq) Rel(link RelName, resp *GistsGetCommentResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsGetCommentResponseBody is a response body for GistsGetComment

https://developer.github.com/v3/gists/comments/#get-a-gist-comment
*/
type GistsGetCommentResponseBody struct {
	components.GistComment
}

/*
GistsGetCommentResponse is a response for GistsGetComment

https://developer.github.com/v3/gists/comments/#get-a-gist-comment
*/
type GistsGetCommentResponse struct {
	response
	request *GistsGetCommentReq
	Data    *GistsGetCommentResponseBody
}

/*
GistsGetRevision performs requests for "gists/get-revision"

Get a gist revision.

  GET /gists/{gist_id}/{sha}

https://developer.github.com/v3/gists/#get-a-gist-revision
*/
func GistsGetRevision(ctx context.Context, req *GistsGetRevisionReq, opt ...RequestOption) (*GistsGetRevisionResponse, error) {
	if req == nil {
		req = new(GistsGetRevisionReq)
	}
	resp := &GistsGetRevisionResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsGetRevisionResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsGetRevision performs requests for "gists/get-revision"

Get a gist revision.

  GET /gists/{gist_id}/{sha}

https://developer.github.com/v3/gists/#get-a-gist-revision
*/
func (c Client) GistsGetRevision(ctx context.Context, req *GistsGetRevisionReq, opt ...RequestOption) (*GistsGetRevisionResponse, error) {
	return GistsGetRevision(ctx, req, append(c, opt...)...)
}

/*
GistsGetRevisionReq is request data for Client.GistsGetRevision

https://developer.github.com/v3/gists/#get-a-gist-revision
*/
type GistsGetRevisionReq struct {
	_url   string
	GistId string
	Sha    string
}

func (r *GistsGetRevisionReq) url() string {
	return r._url
}

func (r *GistsGetRevisionReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/%v", r.GistId, r.Sha)
}

func (r *GistsGetRevisionReq) method() string {
	return "GET"
}

func (r *GistsGetRevisionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsGetRevisionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsGetRevisionReq) body() interface{} {
	return nil
}

func (r *GistsGetRevisionReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsGetRevisionReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsGetRevisionReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsGetRevisionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsGetRevisionReq) Rel(link RelName, resp *GistsGetRevisionResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsGetRevisionResponseBody is a response body for GistsGetRevision

https://developer.github.com/v3/gists/#get-a-gist-revision
*/
type GistsGetRevisionResponseBody struct {
	components.Gist
}

/*
GistsGetRevisionResponse is a response for GistsGetRevision

https://developer.github.com/v3/gists/#get-a-gist-revision
*/
type GistsGetRevisionResponse struct {
	response
	request *GistsGetRevisionReq
	Data    *GistsGetRevisionResponseBody
}

/*
GistsList performs requests for "gists/list"

List gists for the authenticated user.

  GET /gists

https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
func GistsList(ctx context.Context, req *GistsListReq, opt ...RequestOption) (*GistsListResponse, error) {
	if req == nil {
		req = new(GistsListReq)
	}
	resp := &GistsListResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsList performs requests for "gists/list"

List gists for the authenticated user.

  GET /gists

https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
func (c Client) GistsList(ctx context.Context, req *GistsListReq, opt ...RequestOption) (*GistsListResponse, error) {
	return GistsList(ctx, req, append(c, opt...)...)
}

/*
GistsListReq is request data for Client.GistsList

https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
type GistsListReq struct {
	_url string

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListReq) url() string {
	return r._url
}

func (r *GistsListReq) urlPath() string {
	return fmt.Sprintf("/gists")
}

func (r *GistsListReq) method() string {
	return "GET"
}

func (r *GistsListReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListReq) body() interface{} {
	return nil
}

func (r *GistsListReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListReq) Rel(link RelName, resp *GistsListResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListResponseBody is a response body for GistsList

https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
type GistsListResponseBody []struct {
	components.BaseGist
}

/*
GistsListResponse is a response for GistsList

https://developer.github.com/v3/gists/#list-gists-for-the-authenticated-user
*/
type GistsListResponse struct {
	response
	request *GistsListReq
	Data    *GistsListResponseBody
}

/*
GistsListComments performs requests for "gists/list-comments"

List gist comments.

  GET /gists/{gist_id}/comments

https://developer.github.com/v3/gists/comments/#list-gist-comments
*/
func GistsListComments(ctx context.Context, req *GistsListCommentsReq, opt ...RequestOption) (*GistsListCommentsResponse, error) {
	if req == nil {
		req = new(GistsListCommentsReq)
	}
	resp := &GistsListCommentsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListCommentsResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsListComments performs requests for "gists/list-comments"

List gist comments.

  GET /gists/{gist_id}/comments

https://developer.github.com/v3/gists/comments/#list-gist-comments
*/
func (c Client) GistsListComments(ctx context.Context, req *GistsListCommentsReq, opt ...RequestOption) (*GistsListCommentsResponse, error) {
	return GistsListComments(ctx, req, append(c, opt...)...)
}

/*
GistsListCommentsReq is request data for Client.GistsListComments

https://developer.github.com/v3/gists/comments/#list-gist-comments
*/
type GistsListCommentsReq struct {
	_url   string
	GistId string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListCommentsReq) url() string {
	return r._url
}

func (r *GistsListCommentsReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments", r.GistId)
}

func (r *GistsListCommentsReq) method() string {
	return "GET"
}

func (r *GistsListCommentsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListCommentsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListCommentsReq) body() interface{} {
	return nil
}

func (r *GistsListCommentsReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListCommentsReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListCommentsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListCommentsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListCommentsReq) Rel(link RelName, resp *GistsListCommentsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListCommentsResponseBody is a response body for GistsListComments

https://developer.github.com/v3/gists/comments/#list-gist-comments
*/
type GistsListCommentsResponseBody []struct {
	components.GistComment
}

/*
GistsListCommentsResponse is a response for GistsListComments

https://developer.github.com/v3/gists/comments/#list-gist-comments
*/
type GistsListCommentsResponse struct {
	response
	request *GistsListCommentsReq
	Data    *GistsListCommentsResponseBody
}

/*
GistsListCommits performs requests for "gists/list-commits"

List gist commits.

  GET /gists/{gist_id}/commits

https://developer.github.com/v3/gists/#list-gist-commits
*/
func GistsListCommits(ctx context.Context, req *GistsListCommitsReq, opt ...RequestOption) (*GistsListCommitsResponse, error) {
	if req == nil {
		req = new(GistsListCommitsReq)
	}
	resp := &GistsListCommitsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListCommitsResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsListCommits performs requests for "gists/list-commits"

List gist commits.

  GET /gists/{gist_id}/commits

https://developer.github.com/v3/gists/#list-gist-commits
*/
func (c Client) GistsListCommits(ctx context.Context, req *GistsListCommitsReq, opt ...RequestOption) (*GistsListCommitsResponse, error) {
	return GistsListCommits(ctx, req, append(c, opt...)...)
}

/*
GistsListCommitsReq is request data for Client.GistsListCommits

https://developer.github.com/v3/gists/#list-gist-commits
*/
type GistsListCommitsReq struct {
	_url   string
	GistId string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListCommitsReq) url() string {
	return r._url
}

func (r *GistsListCommitsReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/commits", r.GistId)
}

func (r *GistsListCommitsReq) method() string {
	return "GET"
}

func (r *GistsListCommitsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListCommitsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListCommitsReq) body() interface{} {
	return nil
}

func (r *GistsListCommitsReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListCommitsReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListCommitsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListCommitsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListCommitsReq) Rel(link RelName, resp *GistsListCommitsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListCommitsResponseBody is a response body for GistsListCommits

https://developer.github.com/v3/gists/#list-gist-commits
*/
type GistsListCommitsResponseBody []struct {
	components.GistCommit
}

/*
GistsListCommitsResponse is a response for GistsListCommits

https://developer.github.com/v3/gists/#list-gist-commits
*/
type GistsListCommitsResponse struct {
	response
	request *GistsListCommitsReq
	Data    *GistsListCommitsResponseBody
}

/*
GistsListForUser performs requests for "gists/list-for-user"

List gists for a user.

  GET /users/{username}/gists

https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
func GistsListForUser(ctx context.Context, req *GistsListForUserReq, opt ...RequestOption) (*GistsListForUserResponse, error) {
	if req == nil {
		req = new(GistsListForUserReq)
	}
	resp := &GistsListForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListForUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsListForUser performs requests for "gists/list-for-user"

List gists for a user.

  GET /users/{username}/gists

https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
func (c Client) GistsListForUser(ctx context.Context, req *GistsListForUserReq, opt ...RequestOption) (*GistsListForUserResponse, error) {
	return GistsListForUser(ctx, req, append(c, opt...)...)
}

/*
GistsListForUserReq is request data for Client.GistsListForUser

https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
type GistsListForUserReq struct {
	_url     string
	Username string

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListForUserReq) url() string {
	return r._url
}

func (r *GistsListForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/gists", r.Username)
}

func (r *GistsListForUserReq) method() string {
	return "GET"
}

func (r *GistsListForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListForUserReq) body() interface{} {
	return nil
}

func (r *GistsListForUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListForUserReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListForUserReq) Rel(link RelName, resp *GistsListForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListForUserResponseBody is a response body for GistsListForUser

https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
type GistsListForUserResponseBody []struct {
	components.BaseGist
}

/*
GistsListForUserResponse is a response for GistsListForUser

https://developer.github.com/v3/gists/#list-gists-for-a-user
*/
type GistsListForUserResponse struct {
	response
	request *GistsListForUserReq
	Data    *GistsListForUserResponseBody
}

/*
GistsListForks performs requests for "gists/list-forks"

List gist forks.

  GET /gists/{gist_id}/forks

https://developer.github.com/v3/gists/#list-gist-forks
*/
func GistsListForks(ctx context.Context, req *GistsListForksReq, opt ...RequestOption) (*GistsListForksResponse, error) {
	if req == nil {
		req = new(GistsListForksReq)
	}
	resp := &GistsListForksResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListForksResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsListForks performs requests for "gists/list-forks"

List gist forks.

  GET /gists/{gist_id}/forks

https://developer.github.com/v3/gists/#list-gist-forks
*/
func (c Client) GistsListForks(ctx context.Context, req *GistsListForksReq, opt ...RequestOption) (*GistsListForksResponse, error) {
	return GistsListForks(ctx, req, append(c, opt...)...)
}

/*
GistsListForksReq is request data for Client.GistsListForks

https://developer.github.com/v3/gists/#list-gist-forks
*/
type GistsListForksReq struct {
	_url   string
	GistId string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListForksReq) url() string {
	return r._url
}

func (r *GistsListForksReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/forks", r.GistId)
}

func (r *GistsListForksReq) method() string {
	return "GET"
}

func (r *GistsListForksReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListForksReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListForksReq) body() interface{} {
	return nil
}

func (r *GistsListForksReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListForksReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListForksReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListForksReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListForksReq) Rel(link RelName, resp *GistsListForksResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListForksResponseBody is a response body for GistsListForks

https://developer.github.com/v3/gists/#list-gist-forks
*/
type GistsListForksResponseBody []struct {
	components.GistFork
}

/*
GistsListForksResponse is a response for GistsListForks

https://developer.github.com/v3/gists/#list-gist-forks
*/
type GistsListForksResponse struct {
	response
	request *GistsListForksReq
	Data    *GistsListForksResponseBody
}

/*
GistsListPublic performs requests for "gists/list-public"

List public gists.

  GET /gists/public

https://developer.github.com/v3/gists/#list-public-gists
*/
func GistsListPublic(ctx context.Context, req *GistsListPublicReq, opt ...RequestOption) (*GistsListPublicResponse, error) {
	if req == nil {
		req = new(GistsListPublicReq)
	}
	resp := &GistsListPublicResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListPublicResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsListPublic performs requests for "gists/list-public"

List public gists.

  GET /gists/public

https://developer.github.com/v3/gists/#list-public-gists
*/
func (c Client) GistsListPublic(ctx context.Context, req *GistsListPublicReq, opt ...RequestOption) (*GistsListPublicResponse, error) {
	return GistsListPublic(ctx, req, append(c, opt...)...)
}

/*
GistsListPublicReq is request data for Client.GistsListPublic

https://developer.github.com/v3/gists/#list-public-gists
*/
type GistsListPublicReq struct {
	_url string

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListPublicReq) url() string {
	return r._url
}

func (r *GistsListPublicReq) urlPath() string {
	return fmt.Sprintf("/gists/public")
}

func (r *GistsListPublicReq) method() string {
	return "GET"
}

func (r *GistsListPublicReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListPublicReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListPublicReq) body() interface{} {
	return nil
}

func (r *GistsListPublicReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListPublicReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListPublicReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListPublicReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListPublicReq) Rel(link RelName, resp *GistsListPublicResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListPublicResponseBody is a response body for GistsListPublic

https://developer.github.com/v3/gists/#list-public-gists
*/
type GistsListPublicResponseBody []struct {
	components.BaseGist
}

/*
GistsListPublicResponse is a response for GistsListPublic

https://developer.github.com/v3/gists/#list-public-gists
*/
type GistsListPublicResponse struct {
	response
	request *GistsListPublicReq
	Data    *GistsListPublicResponseBody
}

/*
GistsListStarred performs requests for "gists/list-starred"

List starred gists.

  GET /gists/starred

https://developer.github.com/v3/gists/#list-starred-gists
*/
func GistsListStarred(ctx context.Context, req *GistsListStarredReq, opt ...RequestOption) (*GistsListStarredResponse, error) {
	if req == nil {
		req = new(GistsListStarredReq)
	}
	resp := &GistsListStarredResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsListStarredResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsListStarred performs requests for "gists/list-starred"

List starred gists.

  GET /gists/starred

https://developer.github.com/v3/gists/#list-starred-gists
*/
func (c Client) GistsListStarred(ctx context.Context, req *GistsListStarredReq, opt ...RequestOption) (*GistsListStarredResponse, error) {
	return GistsListStarred(ctx, req, append(c, opt...)...)
}

/*
GistsListStarredReq is request data for Client.GistsListStarred

https://developer.github.com/v3/gists/#list-starred-gists
*/
type GistsListStarredReq struct {
	_url string

	/*
	This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	format: `YYYY-MM-DDTHH:MM:SSZ`. Only gists updated at or after this time are
	returned.
	*/
	Since *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *GistsListStarredReq) url() string {
	return r._url
}

func (r *GistsListStarredReq) urlPath() string {
	return fmt.Sprintf("/gists/starred")
}

func (r *GistsListStarredReq) method() string {
	return "GET"
}

func (r *GistsListStarredReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *GistsListStarredReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsListStarredReq) body() interface{} {
	return nil
}

func (r *GistsListStarredReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsListStarredReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsListStarredReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsListStarredReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsListStarredReq) Rel(link RelName, resp *GistsListStarredResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsListStarredResponseBody is a response body for GistsListStarred

https://developer.github.com/v3/gists/#list-starred-gists
*/
type GistsListStarredResponseBody []struct {
	components.BaseGist
}

/*
GistsListStarredResponse is a response for GistsListStarred

https://developer.github.com/v3/gists/#list-starred-gists
*/
type GistsListStarredResponse struct {
	response
	request *GistsListStarredReq
	Data    *GistsListStarredResponseBody
}

/*
GistsStar performs requests for "gists/star"

Star a gist.

  PUT /gists/{gist_id}/star

https://developer.github.com/v3/gists/#star-a-gist
*/
func GistsStar(ctx context.Context, req *GistsStarReq, opt ...RequestOption) (*GistsStarResponse, error) {
	if req == nil {
		req = new(GistsStarReq)
	}
	resp := &GistsStarResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsStar performs requests for "gists/star"

Star a gist.

  PUT /gists/{gist_id}/star

https://developer.github.com/v3/gists/#star-a-gist
*/
func (c Client) GistsStar(ctx context.Context, req *GistsStarReq, opt ...RequestOption) (*GistsStarResponse, error) {
	return GistsStar(ctx, req, append(c, opt...)...)
}

/*
GistsStarReq is request data for Client.GistsStar

https://developer.github.com/v3/gists/#star-a-gist
*/
type GistsStarReq struct {
	_url   string
	GistId string
}

func (r *GistsStarReq) url() string {
	return r._url
}

func (r *GistsStarReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/star", r.GistId)
}

func (r *GistsStarReq) method() string {
	return "PUT"
}

func (r *GistsStarReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsStarReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsStarReq) body() interface{} {
	return nil
}

func (r *GistsStarReq) dataStatuses() []int {
	return []int{}
}

func (r *GistsStarReq) validStatuses() []int {
	return []int{204}
}

func (r *GistsStarReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsStarReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsStarReq) Rel(link RelName, resp *GistsStarResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsStarResponse is a response for GistsStar

https://developer.github.com/v3/gists/#star-a-gist
*/
type GistsStarResponse struct {
	response
	request *GistsStarReq
}

/*
GistsUnstar performs requests for "gists/unstar"

Unstar a gist.

  DELETE /gists/{gist_id}/star

https://developer.github.com/v3/gists/#unstar-a-gist
*/
func GistsUnstar(ctx context.Context, req *GistsUnstarReq, opt ...RequestOption) (*GistsUnstarResponse, error) {
	if req == nil {
		req = new(GistsUnstarReq)
	}
	resp := &GistsUnstarResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsUnstar performs requests for "gists/unstar"

Unstar a gist.

  DELETE /gists/{gist_id}/star

https://developer.github.com/v3/gists/#unstar-a-gist
*/
func (c Client) GistsUnstar(ctx context.Context, req *GistsUnstarReq, opt ...RequestOption) (*GistsUnstarResponse, error) {
	return GistsUnstar(ctx, req, append(c, opt...)...)
}

/*
GistsUnstarReq is request data for Client.GistsUnstar

https://developer.github.com/v3/gists/#unstar-a-gist
*/
type GistsUnstarReq struct {
	_url   string
	GistId string
}

func (r *GistsUnstarReq) url() string {
	return r._url
}

func (r *GistsUnstarReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/star", r.GistId)
}

func (r *GistsUnstarReq) method() string {
	return "DELETE"
}

func (r *GistsUnstarReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsUnstarReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsUnstarReq) body() interface{} {
	return nil
}

func (r *GistsUnstarReq) dataStatuses() []int {
	return []int{}
}

func (r *GistsUnstarReq) validStatuses() []int {
	return []int{204}
}

func (r *GistsUnstarReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// HTTPRequest builds an *http.Request
func (r *GistsUnstarReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsUnstarReq) Rel(link RelName, resp *GistsUnstarResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsUnstarResponse is a response for GistsUnstar

https://developer.github.com/v3/gists/#unstar-a-gist
*/
type GistsUnstarResponse struct {
	response
	request *GistsUnstarReq
}

/*
GistsUpdate performs requests for "gists/update"

Update a gist.

  PATCH /gists/{gist_id}

https://developer.github.com/v3/gists/#update-a-gist
*/
func GistsUpdate(ctx context.Context, req *GistsUpdateReq, opt ...RequestOption) (*GistsUpdateResponse, error) {
	if req == nil {
		req = new(GistsUpdateReq)
	}
	resp := &GistsUpdateResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsUpdateResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsUpdate performs requests for "gists/update"

Update a gist.

  PATCH /gists/{gist_id}

https://developer.github.com/v3/gists/#update-a-gist
*/
func (c Client) GistsUpdate(ctx context.Context, req *GistsUpdateReq, opt ...RequestOption) (*GistsUpdateResponse, error) {
	return GistsUpdate(ctx, req, append(c, opt...)...)
}

/*
GistsUpdateReq is request data for Client.GistsUpdate

https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateReq struct {
	_url        string
	GistId      string
	RequestBody GistsUpdateReqBody
}

func (r *GistsUpdateReq) url() string {
	return r._url
}

func (r *GistsUpdateReq) urlPath() string {
	return fmt.Sprintf("/gists/%v", r.GistId)
}

func (r *GistsUpdateReq) method() string {
	return "PATCH"
}

func (r *GistsUpdateReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsUpdateReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsUpdateReq) body() interface{} {
	return r.RequestBody
}

func (r *GistsUpdateReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsUpdateReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsUpdateReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *GistsUpdateReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsUpdateReq) Rel(link RelName, resp *GistsUpdateResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

// GistsUpdateReqBodyFiles is a value for GistsUpdateReqBody's Files field
type GistsUpdateReqBodyFiles struct {

	// The updated content of the file.
	Content *string `json:"content,omitempty"`

	/*
	   The new name for this file. To delete a file, set the value of the filename to
	   `null`.
	*/
	Filename *string `json:"filename,omitempty"`
}

/*
GistsUpdateReqBody is a request body for gists/update

https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateReqBody struct {

	// A descriptive name for this gist.
	Description *string `json:"description,omitempty"`

	// The filenames and content that make up this gist.
	Files map[string]GistsUpdateReqBodyFiles `json:"files,omitempty"`
}

/*
GistsUpdateResponseBody is a response body for GistsUpdate

https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateResponseBody struct {
	components.Gist
}

/*
GistsUpdateResponse is a response for GistsUpdate

https://developer.github.com/v3/gists/#update-a-gist
*/
type GistsUpdateResponse struct {
	response
	request *GistsUpdateReq
	Data    *GistsUpdateResponseBody
}

/*
GistsUpdateComment performs requests for "gists/update-comment"

Update a gist comment.

  PATCH /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#update-a-gist-comment
*/
func GistsUpdateComment(ctx context.Context, req *GistsUpdateCommentReq, opt ...RequestOption) (*GistsUpdateCommentResponse, error) {
	if req == nil {
		req = new(GistsUpdateCommentReq)
	}
	resp := &GistsUpdateCommentResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(GistsUpdateCommentResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
GistsUpdateComment performs requests for "gists/update-comment"

Update a gist comment.

  PATCH /gists/{gist_id}/comments/{comment_id}

https://developer.github.com/v3/gists/comments/#update-a-gist-comment
*/
func (c Client) GistsUpdateComment(ctx context.Context, req *GistsUpdateCommentReq, opt ...RequestOption) (*GistsUpdateCommentResponse, error) {
	return GistsUpdateComment(ctx, req, append(c, opt...)...)
}

/*
GistsUpdateCommentReq is request data for Client.GistsUpdateComment

https://developer.github.com/v3/gists/comments/#update-a-gist-comment
*/
type GistsUpdateCommentReq struct {
	_url        string
	GistId      string
	CommentId   int64
	RequestBody GistsUpdateCommentReqBody
}

func (r *GistsUpdateCommentReq) url() string {
	return r._url
}

func (r *GistsUpdateCommentReq) urlPath() string {
	return fmt.Sprintf("/gists/%v/comments/%v", r.GistId, r.CommentId)
}

func (r *GistsUpdateCommentReq) method() string {
	return "PATCH"
}

func (r *GistsUpdateCommentReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *GistsUpdateCommentReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *GistsUpdateCommentReq) body() interface{} {
	return r.RequestBody
}

func (r *GistsUpdateCommentReq) dataStatuses() []int {
	return []int{200}
}

func (r *GistsUpdateCommentReq) validStatuses() []int {
	return []int{200}
}

func (r *GistsUpdateCommentReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// HTTPRequest builds an *http.Request
func (r *GistsUpdateCommentReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *GistsUpdateCommentReq) Rel(link RelName, resp *GistsUpdateCommentResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
GistsUpdateCommentReqBody is a request body for gists/update-comment

https://developer.github.com/v3/gists/comments/#update-a-gist-comment
*/
type GistsUpdateCommentReqBody struct {

	// The comment text.
	Body *string `json:"body"`
}

/*
GistsUpdateCommentResponseBody is a response body for GistsUpdateComment

https://developer.github.com/v3/gists/comments/#update-a-gist-comment
*/
type GistsUpdateCommentResponseBody struct {
	components.GistComment
}

/*
GistsUpdateCommentResponse is a response for GistsUpdateComment

https://developer.github.com/v3/gists/comments/#update-a-gist-comment
*/
type GistsUpdateCommentResponse struct {
	response
	request *GistsUpdateCommentReq
	Data    *GistsUpdateCommentResponseBody
}
