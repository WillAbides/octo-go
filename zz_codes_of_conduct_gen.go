// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	common "github.com/willabides/octo-go/common"
	components "github.com/willabides/octo-go/components"
	internal "github.com/willabides/octo-go/internal"
	options "github.com/willabides/octo-go/options"
	"net/http"
	"net/url"
)

/*
CodesOfConductGetAllCodesOfConduct performs requests for "codes-of-conduct/get-all-codes-of-conduct"

Get all codes of conduct.

  GET /codes_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
func CodesOfConductGetAllCodesOfConduct(ctx context.Context, req *CodesOfConductGetAllCodesOfConductReq, opt ...options.Option) (*CodesOfConductGetAllCodesOfConductResponse, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CodesOfConductGetAllCodesOfConductReq)
	}
	resp := &CodesOfConductGetAllCodesOfConductResponse{request: req}
	builder := req.requestBuilder()
	r, err := internal.DoRequest(ctx, builder, opts)

	if r != nil {
		resp.Response = *r
	}
	if err != nil {
		return resp, err
	}

	resp.Data = []components.CodeOfConduct{}
	err = internal.DecodeResponseBody(r, builder, opts, &resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
CodesOfConductGetAllCodesOfConduct performs requests for "codes-of-conduct/get-all-codes-of-conduct"

Get all codes of conduct.

  GET /codes_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
func (c Client) CodesOfConductGetAllCodesOfConduct(ctx context.Context, req *CodesOfConductGetAllCodesOfConductReq, opt ...options.Option) (*CodesOfConductGetAllCodesOfConductResponse, error) {
	return CodesOfConductGetAllCodesOfConduct(ctx, req, append(c, opt...)...)
}

/*
CodesOfConductGetAllCodesOfConductReq is request data for Client.CodesOfConductGetAllCodesOfConduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
type CodesOfConductGetAllCodesOfConductReq struct {
	_url string

	/*
	The Codes of Conduct API is currently available for developers to preview.

	To access the API during the preview period, you must set this to true.
	*/
	ScarletWitchPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CodesOfConductGetAllCodesOfConductReq) HTTPRequest(ctx context.Context, opt ...options.Option) (*http.Request, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CodesOfConductGetAllCodesOfConductReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:      []string{"scarlet-witch"},
		Body:             nil,
		DataStatuses:     []int{200},
		ExplicitURL:      r._url,
		HeaderVals:       map[string]*string{"accept": String("application/json")},
		Method:           "GET",
		OperationID:      "codes-of-conduct/get-all-codes-of-conduct",
		Previews:         map[string]bool{"scarlet-witch": r.ScarletWitchPreview},
		RequiredPreviews: []string{"scarlet-witch"},
		URLPath:          fmt.Sprintf("/codes_of_conduct"),
		URLQuery:         query,
		ValidStatuses:    []int{200, 304},
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CodesOfConductGetAllCodesOfConductReq) Rel(link string, resp *CodesOfConductGetAllCodesOfConductResponse) bool {
	u := resp.RelLink(string(link))
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CodesOfConductGetAllCodesOfConductResponse is a response for CodesOfConductGetAllCodesOfConduct

https://developer.github.com/v3/codes_of_conduct/#get-all-codes-of-conduct
*/
type CodesOfConductGetAllCodesOfConductResponse struct {
	common.Response
	request *CodesOfConductGetAllCodesOfConductReq
	Data    []components.CodeOfConduct
}

/*
CodesOfConductGetConductCode performs requests for "codes-of-conduct/get-conduct-code"

Get a code of conduct.

  GET /codes_of_conduct/{key}

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
func CodesOfConductGetConductCode(ctx context.Context, req *CodesOfConductGetConductCodeReq, opt ...options.Option) (*CodesOfConductGetConductCodeResponse, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CodesOfConductGetConductCodeReq)
	}
	resp := &CodesOfConductGetConductCodeResponse{request: req}
	builder := req.requestBuilder()
	r, err := internal.DoRequest(ctx, builder, opts)

	if r != nil {
		resp.Response = *r
	}
	if err != nil {
		return resp, err
	}

	resp.Data = components.CodeOfConduct{}
	err = internal.DecodeResponseBody(r, builder, opts, &resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
CodesOfConductGetConductCode performs requests for "codes-of-conduct/get-conduct-code"

Get a code of conduct.

  GET /codes_of_conduct/{key}

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
func (c Client) CodesOfConductGetConductCode(ctx context.Context, req *CodesOfConductGetConductCodeReq, opt ...options.Option) (*CodesOfConductGetConductCodeResponse, error) {
	return CodesOfConductGetConductCode(ctx, req, append(c, opt...)...)
}

/*
CodesOfConductGetConductCodeReq is request data for Client.CodesOfConductGetConductCode

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
type CodesOfConductGetConductCodeReq struct {
	_url string

	// key parameter
	Key string

	/*
	The Codes of Conduct API is currently available for developers to preview.

	To access the API during the preview period, you must set this to true.
	*/
	ScarletWitchPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CodesOfConductGetConductCodeReq) HTTPRequest(ctx context.Context, opt ...options.Option) (*http.Request, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CodesOfConductGetConductCodeReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:      []string{"scarlet-witch"},
		Body:             nil,
		DataStatuses:     []int{200},
		ExplicitURL:      r._url,
		HeaderVals:       map[string]*string{"accept": String("application/json")},
		Method:           "GET",
		OperationID:      "codes-of-conduct/get-conduct-code",
		Previews:         map[string]bool{"scarlet-witch": r.ScarletWitchPreview},
		RequiredPreviews: []string{"scarlet-witch"},
		URLPath:          fmt.Sprintf("/codes_of_conduct/%v", r.Key),
		URLQuery:         query,
		ValidStatuses:    []int{200, 304},
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CodesOfConductGetConductCodeReq) Rel(link string, resp *CodesOfConductGetConductCodeResponse) bool {
	u := resp.RelLink(string(link))
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CodesOfConductGetConductCodeResponse is a response for CodesOfConductGetConductCode

https://developer.github.com/v3/codes_of_conduct/#get-a-code-of-conduct
*/
type CodesOfConductGetConductCodeResponse struct {
	common.Response
	request *CodesOfConductGetConductCodeReq
	Data    components.CodeOfConduct
}

/*
CodesOfConductGetForRepo performs requests for "codes-of-conduct/get-for-repo"

Get the code of conduct for a repository.

  GET /repos/{owner}/{repo}/community/code_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
func CodesOfConductGetForRepo(ctx context.Context, req *CodesOfConductGetForRepoReq, opt ...options.Option) (*CodesOfConductGetForRepoResponse, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(CodesOfConductGetForRepoReq)
	}
	resp := &CodesOfConductGetForRepoResponse{request: req}
	builder := req.requestBuilder()
	r, err := internal.DoRequest(ctx, builder, opts)

	if r != nil {
		resp.Response = *r
	}
	if err != nil {
		return resp, err
	}

	resp.Data = components.CodeOfConduct{}
	err = internal.DecodeResponseBody(r, builder, opts, &resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
CodesOfConductGetForRepo performs requests for "codes-of-conduct/get-for-repo"

Get the code of conduct for a repository.

  GET /repos/{owner}/{repo}/community/code_of_conduct

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
func (c Client) CodesOfConductGetForRepo(ctx context.Context, req *CodesOfConductGetForRepoReq, opt ...options.Option) (*CodesOfConductGetForRepoResponse, error) {
	return CodesOfConductGetForRepo(ctx, req, append(c, opt...)...)
}

/*
CodesOfConductGetForRepoReq is request data for Client.CodesOfConductGetForRepo

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
type CodesOfConductGetForRepoReq struct {
	_url  string
	Owner string
	Repo  string

	/*
	The Codes of Conduct API is currently available for developers to preview.

	To access the API during the preview period, you must set this to true.
	*/
	ScarletWitchPreview bool
}

// HTTPRequest builds an *http.Request
func (r *CodesOfConductGetForRepoReq) HTTPRequest(ctx context.Context, opt ...options.Option) (*http.Request, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *CodesOfConductGetForRepoReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:      []string{"scarlet-witch"},
		Body:             nil,
		DataStatuses:     []int{200},
		ExplicitURL:      r._url,
		HeaderVals:       map[string]*string{"accept": String("application/json")},
		Method:           "GET",
		OperationID:      "codes-of-conduct/get-for-repo",
		Previews:         map[string]bool{"scarlet-witch": r.ScarletWitchPreview},
		RequiredPreviews: []string{"scarlet-witch"},
		URLPath:          fmt.Sprintf("/repos/%v/%v/community/code_of_conduct", r.Owner, r.Repo),
		URLQuery:         query,
		ValidStatuses:    []int{200},
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *CodesOfConductGetForRepoReq) Rel(link string, resp *CodesOfConductGetForRepoResponse) bool {
	u := resp.RelLink(string(link))
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
CodesOfConductGetForRepoResponse is a response for CodesOfConductGetForRepo

https://developer.github.com/v3/codes_of_conduct/#get-the-code-of-conduct-for-a-repository
*/
type CodesOfConductGetForRepoResponse struct {
	common.Response
	request *CodesOfConductGetForRepoReq
	Data    components.CodeOfConduct
}
