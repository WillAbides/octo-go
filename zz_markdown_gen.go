// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	common "github.com/willabides/octo-go/common"
	internal "github.com/willabides/octo-go/internal"
	options "github.com/willabides/octo-go/options"
	"io"
	"net/http"
	"net/url"
)

/*
MarkdownRender performs requests for "markdown/render"

Render a Markdown document.

  POST /markdown

https://developer.github.com/v3/markdown/#render-a-markdown-document
*/
func MarkdownRender(ctx context.Context, req *MarkdownRenderReq, opt ...options.Option) (*MarkdownRenderResponse, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(MarkdownRenderReq)
	}
	resp := &MarkdownRenderResponse{request: req}
	builder := req.requestBuilder()
	r, err := internal.DoRequest(ctx, builder, opts)

	if r != nil {
		resp.Response = *r
	}
	if err != nil {
		return resp, err
	}

	err = internal.DecodeResponseBody(r, builder, opts, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
MarkdownRender performs requests for "markdown/render"

Render a Markdown document.

  POST /markdown

https://developer.github.com/v3/markdown/#render-a-markdown-document
*/
func (c Client) MarkdownRender(ctx context.Context, req *MarkdownRenderReq, opt ...options.Option) (*MarkdownRenderResponse, error) {
	return MarkdownRender(ctx, req, append(c, opt...)...)
}

/*
MarkdownRenderReq is request data for Client.MarkdownRender

https://developer.github.com/v3/markdown/#render-a-markdown-document
*/
type MarkdownRenderReq struct {
	_url        string
	RequestBody MarkdownRenderReqBody
}

// HTTPRequest builds an *http.Request
func (r *MarkdownRenderReq) HTTPRequest(ctx context.Context, opt ...options.Option) (*http.Request, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *MarkdownRenderReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:      []string{},
		Body:             r.RequestBody,
		DataStatuses:     []int{},
		ExplicitURL:      r._url,
		HeaderVals:       map[string]*string{"content-type": String("application/json")},
		Method:           "POST",
		OperationID:      "markdown/render",
		Previews:         map[string]bool{},
		RequiredPreviews: []string{},
		URLPath:          fmt.Sprintf("/markdown"),
		URLQuery:         query,
		ValidStatuses:    []int{200, 304},
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *MarkdownRenderReq) Rel(link string, resp *MarkdownRenderResponse) bool {
	u := resp.RelLink(string(link))
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
MarkdownRenderReqBody is a request body for markdown/render

https://developer.github.com/v3/markdown/#render-a-markdown-document
*/
type MarkdownRenderReqBody struct {

	// The repository context to use when creating references in `gfm` mode.
	Context *string `json:"context,omitempty"`

	// The rendering mode.
	Mode *string `json:"mode,omitempty"`

	// The Markdown text to render in HTML.
	Text *string `json:"text"`
}

/*
MarkdownRenderResponse is a response for MarkdownRender

https://developer.github.com/v3/markdown/#render-a-markdown-document
*/
type MarkdownRenderResponse struct {
	common.Response
	request *MarkdownRenderReq
}

/*
MarkdownRenderRaw performs requests for "markdown/render-raw"

Render a Markdown document in raw mode.

  POST /markdown/raw

https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
*/
func MarkdownRenderRaw(ctx context.Context, req *MarkdownRenderRawReq, opt ...options.Option) (*MarkdownRenderRawResponse, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	if req == nil {
		req = new(MarkdownRenderRawReq)
	}
	resp := &MarkdownRenderRawResponse{request: req}
	builder := req.requestBuilder()
	r, err := internal.DoRequest(ctx, builder, opts)

	if r != nil {
		resp.Response = *r
	}
	if err != nil {
		return resp, err
	}

	err = internal.DecodeResponseBody(r, builder, opts, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
MarkdownRenderRaw performs requests for "markdown/render-raw"

Render a Markdown document in raw mode.

  POST /markdown/raw

https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
*/
func (c Client) MarkdownRenderRaw(ctx context.Context, req *MarkdownRenderRawReq, opt ...options.Option) (*MarkdownRenderRawResponse, error) {
	return MarkdownRenderRaw(ctx, req, append(c, opt...)...)
}

/*
MarkdownRenderRawReq is request data for Client.MarkdownRenderRaw

https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
*/
type MarkdownRenderRawReq struct {
	_url string

	// http request's body
	RequestBody io.Reader
}

// HTTPRequest builds an *http.Request
func (r *MarkdownRenderRawReq) HTTPRequest(ctx context.Context, opt ...options.Option) (*http.Request, error) {
	opts, err := options.BuildOptions(opt...)
	if err != nil {
		return nil, err
	}
	return r.requestBuilder().HTTPRequest(ctx, opts)
}

func (r *MarkdownRenderRawReq) requestBuilder() *internal.RequestBuilder {
	query := url.Values{}

	builder := &internal.RequestBuilder{
		AllPreviews:      []string{},
		Body:             r.RequestBody,
		DataStatuses:     []int{},
		ExplicitURL:      r._url,
		HeaderVals:       map[string]*string{"content-type": String("text/x-markdown")},
		Method:           "POST",
		OperationID:      "markdown/render-raw",
		Previews:         map[string]bool{},
		RequiredPreviews: []string{},
		URLPath:          fmt.Sprintf("/markdown/raw"),
		URLQuery:         query,
		ValidStatuses:    []int{200, 304},
	}
	return builder
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *MarkdownRenderRawReq) Rel(link string, resp *MarkdownRenderRawResponse) bool {
	u := resp.RelLink(string(link))
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
MarkdownRenderRawResponse is a response for MarkdownRenderRaw

https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
*/
type MarkdownRenderRawResponse struct {
	common.Response
	request *MarkdownRenderRawReq
}
