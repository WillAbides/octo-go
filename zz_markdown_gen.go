// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

/*
MarkdownRenderReq builds requests for "markdown/render"

Render an arbitrary Markdown document.

  POST /markdown

https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document
*/
type MarkdownRenderReq struct {
	RequestBody MarkdownRenderReqBody
}

func (r MarkdownRenderReq) urlPath() string {
	return fmt.Sprintf("/markdown")
}

func (r MarkdownRenderReq) method() string {
	return "POST"
}

func (r MarkdownRenderReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r MarkdownRenderReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r MarkdownRenderReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
MarkdownRenderReqBody is a request body for markdown/render

API documentation: https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document
*/
type MarkdownRenderReqBody struct {

	/*
	   The repository context to use when creating references in `gfm` mode. Omit this
	   parameter when using `markdown` mode.
	*/
	Context *string `json:"context,omitempty"`

	/*
	   The rendering mode. Can be either:
	   \* `markdown` to render a document in plain Markdown, just like README.md files
	   are rendered.
	   \* `gfm` to render a document in [GitHub Flavored
	   Markdown](https://github.github.com/gfm/), which creates links for user mentions
	   as well as references to SHA-1 hashes, issues, and pull requests.
	*/
	Mode *string `json:"mode,omitempty"`

	// The Markdown text to render in HTML. Markdown content must be 400 KB or less.
	Text *string `json:"text"`
}

/*
MarkdownRenderRawReq builds requests for "markdown/render-raw"

Render a Markdown document in raw mode.

  POST /markdown/raw

https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
*/
type MarkdownRenderRawReq struct {
	RequestBody MarkdownRenderRawReqBody

	// Setting content-type header is required for this endpoint
	ContentTypeHeader *string
}

func (r MarkdownRenderRawReq) urlPath() string {
	return fmt.Sprintf("/markdown/raw")
}

func (r MarkdownRenderRawReq) method() string {
	return "POST"
}

func (r MarkdownRenderRawReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r MarkdownRenderRawReq) header() http.Header {
	headerVals := map[string]*string{"content-type": r.ContentTypeHeader}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

// HTTPRequest creates an http request
func (r MarkdownRenderRawReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
MarkdownRenderRawReqBody is a request body for markdown/render-raw

API documentation: https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode
*/
type MarkdownRenderRawReqBody string
