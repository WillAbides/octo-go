// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
ActivityCheckRepoIsStarredByAuthenticatedUser performs requests for "activity/check-repo-is-starred-by-authenticated-user"

Check if a repository is starred by the authenticated user.

  GET /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user
*/
func ActivityCheckRepoIsStarredByAuthenticatedUser(ctx context.Context, req *ActivityCheckRepoIsStarredByAuthenticatedUserReq, opt ...RequestOption) (*ActivityCheckRepoIsStarredByAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityCheckRepoIsStarredByAuthenticatedUserReq)
	}
	resp := &ActivityCheckRepoIsStarredByAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.setBoolResult(&resp.Data)
	if err != nil {
		return nil, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityCheckRepoIsStarredByAuthenticatedUser performs requests for "activity/check-repo-is-starred-by-authenticated-user"

Check if a repository is starred by the authenticated user.

  GET /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user
*/
func (c Client) ActivityCheckRepoIsStarredByAuthenticatedUser(ctx context.Context, req *ActivityCheckRepoIsStarredByAuthenticatedUserReq, opt ...RequestOption) (*ActivityCheckRepoIsStarredByAuthenticatedUserResponse, error) {
	return ActivityCheckRepoIsStarredByAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityCheckRepoIsStarredByAuthenticatedUserReq is request data for Client.ActivityCheckRepoIsStarredByAuthenticatedUser

https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user
*/
type ActivityCheckRepoIsStarredByAuthenticatedUserReq struct {
	_url  string
	Owner string
	Repo  string
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred/%v/%v", r.Owner, r.Repo)
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) validStatuses() []int {
	return []int{204}
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrBoolean}
}

// httpRequest creates an http request
func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) Rel(link RelName, resp *ActivityCheckRepoIsStarredByAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityCheckRepoIsStarredByAuthenticatedUserResponse is a response for ActivityCheckRepoIsStarredByAuthenticatedUser

https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user
*/
type ActivityCheckRepoIsStarredByAuthenticatedUserResponse struct {
	response
	request *ActivityCheckRepoIsStarredByAuthenticatedUserReq
	Data    bool
}

/*
ActivityDeleteRepoSubscription performs requests for "activity/delete-repo-subscription"

Delete a repository subscription.

  DELETE /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
*/
func ActivityDeleteRepoSubscription(ctx context.Context, req *ActivityDeleteRepoSubscriptionReq, opt ...RequestOption) (*ActivityDeleteRepoSubscriptionResponse, error) {
	if req == nil {
		req = new(ActivityDeleteRepoSubscriptionReq)
	}
	resp := &ActivityDeleteRepoSubscriptionResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityDeleteRepoSubscription performs requests for "activity/delete-repo-subscription"

Delete a repository subscription.

  DELETE /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
*/
func (c Client) ActivityDeleteRepoSubscription(ctx context.Context, req *ActivityDeleteRepoSubscriptionReq, opt ...RequestOption) (*ActivityDeleteRepoSubscriptionResponse, error) {
	return ActivityDeleteRepoSubscription(ctx, req, append(c, opt...)...)
}

/*
ActivityDeleteRepoSubscriptionReq is request data for Client.ActivityDeleteRepoSubscription

https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
*/
type ActivityDeleteRepoSubscriptionReq struct {
	_url  string
	Owner string
	Repo  string
}

func (r *ActivityDeleteRepoSubscriptionReq) url() string {
	return r._url
}

func (r *ActivityDeleteRepoSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscription", r.Owner, r.Repo)
}

func (r *ActivityDeleteRepoSubscriptionReq) method() string {
	return "DELETE"
}

func (r *ActivityDeleteRepoSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityDeleteRepoSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityDeleteRepoSubscriptionReq) body() interface{} {
	return nil
}

func (r *ActivityDeleteRepoSubscriptionReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityDeleteRepoSubscriptionReq) validStatuses() []int {
	return []int{204}
}

func (r *ActivityDeleteRepoSubscriptionReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityDeleteRepoSubscriptionReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityDeleteRepoSubscriptionReq) Rel(link RelName, resp *ActivityDeleteRepoSubscriptionResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityDeleteRepoSubscriptionResponse is a response for ActivityDeleteRepoSubscription

https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
*/
type ActivityDeleteRepoSubscriptionResponse struct {
	response
	request *ActivityDeleteRepoSubscriptionReq
}

/*
ActivityDeleteThreadSubscription performs requests for "activity/delete-thread-subscription"

Delete a thread subscription.

  DELETE /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
*/
func ActivityDeleteThreadSubscription(ctx context.Context, req *ActivityDeleteThreadSubscriptionReq, opt ...RequestOption) (*ActivityDeleteThreadSubscriptionResponse, error) {
	if req == nil {
		req = new(ActivityDeleteThreadSubscriptionReq)
	}
	resp := &ActivityDeleteThreadSubscriptionResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityDeleteThreadSubscription performs requests for "activity/delete-thread-subscription"

Delete a thread subscription.

  DELETE /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
*/
func (c Client) ActivityDeleteThreadSubscription(ctx context.Context, req *ActivityDeleteThreadSubscriptionReq, opt ...RequestOption) (*ActivityDeleteThreadSubscriptionResponse, error) {
	return ActivityDeleteThreadSubscription(ctx, req, append(c, opt...)...)
}

/*
ActivityDeleteThreadSubscriptionReq is request data for Client.ActivityDeleteThreadSubscription

https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
*/
type ActivityDeleteThreadSubscriptionReq struct {
	_url     string
	ThreadId int64
}

func (r *ActivityDeleteThreadSubscriptionReq) url() string {
	return r._url
}

func (r *ActivityDeleteThreadSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v/subscription", r.ThreadId)
}

func (r *ActivityDeleteThreadSubscriptionReq) method() string {
	return "DELETE"
}

func (r *ActivityDeleteThreadSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityDeleteThreadSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityDeleteThreadSubscriptionReq) body() interface{} {
	return nil
}

func (r *ActivityDeleteThreadSubscriptionReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityDeleteThreadSubscriptionReq) validStatuses() []int {
	return []int{204}
}

func (r *ActivityDeleteThreadSubscriptionReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityDeleteThreadSubscriptionReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityDeleteThreadSubscriptionReq) Rel(link RelName, resp *ActivityDeleteThreadSubscriptionResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityDeleteThreadSubscriptionResponse is a response for ActivityDeleteThreadSubscription

https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
*/
type ActivityDeleteThreadSubscriptionResponse struct {
	response
	request *ActivityDeleteThreadSubscriptionReq
}

/*
ActivityGetFeeds performs requests for "activity/get-feeds"

Get feeds.

  GET /feeds

https://developer.github.com/v3/activity/feeds/#get-feeds
*/
func ActivityGetFeeds(ctx context.Context, req *ActivityGetFeedsReq, opt ...RequestOption) (*ActivityGetFeedsResponse, error) {
	if req == nil {
		req = new(ActivityGetFeedsReq)
	}
	resp := &ActivityGetFeedsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityGetFeedsResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityGetFeeds performs requests for "activity/get-feeds"

Get feeds.

  GET /feeds

https://developer.github.com/v3/activity/feeds/#get-feeds
*/
func (c Client) ActivityGetFeeds(ctx context.Context, req *ActivityGetFeedsReq, opt ...RequestOption) (*ActivityGetFeedsResponse, error) {
	return ActivityGetFeeds(ctx, req, append(c, opt...)...)
}

/*
ActivityGetFeedsReq is request data for Client.ActivityGetFeeds

https://developer.github.com/v3/activity/feeds/#get-feeds
*/
type ActivityGetFeedsReq struct {
	_url string
}

func (r *ActivityGetFeedsReq) url() string {
	return r._url
}

func (r *ActivityGetFeedsReq) urlPath() string {
	return fmt.Sprintf("/feeds")
}

func (r *ActivityGetFeedsReq) method() string {
	return "GET"
}

func (r *ActivityGetFeedsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetFeedsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetFeedsReq) body() interface{} {
	return nil
}

func (r *ActivityGetFeedsReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityGetFeedsReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityGetFeedsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityGetFeedsReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityGetFeedsReq) Rel(link RelName, resp *ActivityGetFeedsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityGetFeedsResponseBody is a response body for ActivityGetFeeds

https://developer.github.com/v3/activity/feeds/#get-feeds
*/
type ActivityGetFeedsResponseBody struct {
	components.Feed
}

/*
ActivityGetFeedsResponse is a response for ActivityGetFeeds

https://developer.github.com/v3/activity/feeds/#get-feeds
*/
type ActivityGetFeedsResponse struct {
	response
	request *ActivityGetFeedsReq
	Data    *ActivityGetFeedsResponseBody
}

/*
ActivityGetRepoSubscription performs requests for "activity/get-repo-subscription"

Get a repository subscription.

  GET /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
func ActivityGetRepoSubscription(ctx context.Context, req *ActivityGetRepoSubscriptionReq, opt ...RequestOption) (*ActivityGetRepoSubscriptionResponse, error) {
	if req == nil {
		req = new(ActivityGetRepoSubscriptionReq)
	}
	resp := &ActivityGetRepoSubscriptionResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityGetRepoSubscriptionResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityGetRepoSubscription performs requests for "activity/get-repo-subscription"

Get a repository subscription.

  GET /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
func (c Client) ActivityGetRepoSubscription(ctx context.Context, req *ActivityGetRepoSubscriptionReq, opt ...RequestOption) (*ActivityGetRepoSubscriptionResponse, error) {
	return ActivityGetRepoSubscription(ctx, req, append(c, opt...)...)
}

/*
ActivityGetRepoSubscriptionReq is request data for Client.ActivityGetRepoSubscription

https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
type ActivityGetRepoSubscriptionReq struct {
	_url  string
	Owner string
	Repo  string
}

func (r *ActivityGetRepoSubscriptionReq) url() string {
	return r._url
}

func (r *ActivityGetRepoSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscription", r.Owner, r.Repo)
}

func (r *ActivityGetRepoSubscriptionReq) method() string {
	return "GET"
}

func (r *ActivityGetRepoSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetRepoSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetRepoSubscriptionReq) body() interface{} {
	return nil
}

func (r *ActivityGetRepoSubscriptionReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityGetRepoSubscriptionReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityGetRepoSubscriptionReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityGetRepoSubscriptionReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityGetRepoSubscriptionReq) Rel(link RelName, resp *ActivityGetRepoSubscriptionResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityGetRepoSubscriptionResponseBody is a response body for ActivityGetRepoSubscription

https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
type ActivityGetRepoSubscriptionResponseBody struct {
	components.RepositorySubscription
}

/*
ActivityGetRepoSubscriptionResponse is a response for ActivityGetRepoSubscription

https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
type ActivityGetRepoSubscriptionResponse struct {
	response
	request *ActivityGetRepoSubscriptionReq
	Data    *ActivityGetRepoSubscriptionResponseBody
}

/*
ActivityGetThread performs requests for "activity/get-thread"

Get a thread.

  GET /notifications/threads/{thread_id}

https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
func ActivityGetThread(ctx context.Context, req *ActivityGetThreadReq, opt ...RequestOption) (*ActivityGetThreadResponse, error) {
	if req == nil {
		req = new(ActivityGetThreadReq)
	}
	resp := &ActivityGetThreadResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityGetThreadResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityGetThread performs requests for "activity/get-thread"

Get a thread.

  GET /notifications/threads/{thread_id}

https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
func (c Client) ActivityGetThread(ctx context.Context, req *ActivityGetThreadReq, opt ...RequestOption) (*ActivityGetThreadResponse, error) {
	return ActivityGetThread(ctx, req, append(c, opt...)...)
}

/*
ActivityGetThreadReq is request data for Client.ActivityGetThread

https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
type ActivityGetThreadReq struct {
	_url     string
	ThreadId int64
}

func (r *ActivityGetThreadReq) url() string {
	return r._url
}

func (r *ActivityGetThreadReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v", r.ThreadId)
}

func (r *ActivityGetThreadReq) method() string {
	return "GET"
}

func (r *ActivityGetThreadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetThreadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetThreadReq) body() interface{} {
	return nil
}

func (r *ActivityGetThreadReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityGetThreadReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityGetThreadReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityGetThreadReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityGetThreadReq) Rel(link RelName, resp *ActivityGetThreadResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityGetThreadResponseBody is a response body for ActivityGetThread

https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
type ActivityGetThreadResponseBody struct {
	components.Thread
}

/*
ActivityGetThreadResponse is a response for ActivityGetThread

https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
type ActivityGetThreadResponse struct {
	response
	request *ActivityGetThreadReq
	Data    *ActivityGetThreadResponseBody
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUser performs requests for "activity/get-thread-subscription-for-authenticated-user"

Get a thread subscription for the authenticated user.

  GET /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
func ActivityGetThreadSubscriptionForAuthenticatedUser(ctx context.Context, req *ActivityGetThreadSubscriptionForAuthenticatedUserReq, opt ...RequestOption) (*ActivityGetThreadSubscriptionForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityGetThreadSubscriptionForAuthenticatedUserReq)
	}
	resp := &ActivityGetThreadSubscriptionForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUser performs requests for "activity/get-thread-subscription-for-authenticated-user"

Get a thread subscription for the authenticated user.

  GET /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
func (c Client) ActivityGetThreadSubscriptionForAuthenticatedUser(ctx context.Context, req *ActivityGetThreadSubscriptionForAuthenticatedUserReq, opt ...RequestOption) (*ActivityGetThreadSubscriptionForAuthenticatedUserResponse, error) {
	return ActivityGetThreadSubscriptionForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUserReq is request data for Client.ActivityGetThreadSubscriptionForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
type ActivityGetThreadSubscriptionForAuthenticatedUserReq struct {
	_url     string
	ThreadId int64
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v/subscription", r.ThreadId)
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) Rel(link RelName, resp *ActivityGetThreadSubscriptionForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody is a response body for ActivityGetThreadSubscriptionForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
type ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody struct {
	components.ThreadSubscription
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUserResponse is a response for ActivityGetThreadSubscriptionForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
type ActivityGetThreadSubscriptionForAuthenticatedUserResponse struct {
	response
	request *ActivityGetThreadSubscriptionForAuthenticatedUserReq
	Data    *ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody
}

/*
ActivityListEventsForAuthenticatedUser performs requests for "activity/list-events-for-authenticated-user"

List events for the authenticated user.

  GET /users/{username}/events

https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user
*/
func ActivityListEventsForAuthenticatedUser(ctx context.Context, req *ActivityListEventsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListEventsForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityListEventsForAuthenticatedUserReq)
	}
	resp := &ActivityListEventsForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListEventsForAuthenticatedUser performs requests for "activity/list-events-for-authenticated-user"

List events for the authenticated user.

  GET /users/{username}/events

https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user
*/
func (c Client) ActivityListEventsForAuthenticatedUser(ctx context.Context, req *ActivityListEventsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListEventsForAuthenticatedUserResponse, error) {
	return ActivityListEventsForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListEventsForAuthenticatedUserReq is request data for Client.ActivityListEventsForAuthenticatedUser

https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user
*/
type ActivityListEventsForAuthenticatedUserReq struct {
	_url     string
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListEventsForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityListEventsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/events", r.Username)
}

func (r *ActivityListEventsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListEventsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListEventsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListEventsForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityListEventsForAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListEventsForAuthenticatedUserReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListEventsForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListEventsForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListEventsForAuthenticatedUserReq) Rel(link RelName, resp *ActivityListEventsForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListEventsForAuthenticatedUserResponse is a response for ActivityListEventsForAuthenticatedUser

https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user
*/
type ActivityListEventsForAuthenticatedUserResponse struct {
	response
	request *ActivityListEventsForAuthenticatedUserReq
}

/*
ActivityListNotificationsForAuthenticatedUser performs requests for "activity/list-notifications-for-authenticated-user"

List notifications for the authenticated user.

  GET /notifications

https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
func ActivityListNotificationsForAuthenticatedUser(ctx context.Context, req *ActivityListNotificationsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListNotificationsForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityListNotificationsForAuthenticatedUserReq)
	}
	resp := &ActivityListNotificationsForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListNotificationsForAuthenticatedUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListNotificationsForAuthenticatedUser performs requests for "activity/list-notifications-for-authenticated-user"

List notifications for the authenticated user.

  GET /notifications

https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
func (c Client) ActivityListNotificationsForAuthenticatedUser(ctx context.Context, req *ActivityListNotificationsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListNotificationsForAuthenticatedUserResponse, error) {
	return ActivityListNotificationsForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListNotificationsForAuthenticatedUserReq is request data for Client.ActivityListNotificationsForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
type ActivityListNotificationsForAuthenticatedUserReq struct {
	_url string

	// If `true`, show notifications marked as read.
	All *bool

	/*
	If `true`, only shows notifications in which the user is directly participating
	or mentioned.
	*/
	Participating *bool

	/*
	Only show notifications updated after the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Since *string

	/*
	Only show notifications updated before the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Before *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/notifications")
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.All != nil {
		query.Set("all", strconv.FormatBool(*r.All))
	}
	if r.Participating != nil {
		query.Set("participating", strconv.FormatBool(*r.Participating))
	}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.Before != nil {
		query.Set("before", *r.Before)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListNotificationsForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListNotificationsForAuthenticatedUserReq) Rel(link RelName, resp *ActivityListNotificationsForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListNotificationsForAuthenticatedUserResponseBody is a response body for ActivityListNotificationsForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
type ActivityListNotificationsForAuthenticatedUserResponseBody []struct {
	components.Thread
}

/*
ActivityListNotificationsForAuthenticatedUserResponse is a response for ActivityListNotificationsForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
type ActivityListNotificationsForAuthenticatedUserResponse struct {
	response
	request *ActivityListNotificationsForAuthenticatedUserReq
	Data    *ActivityListNotificationsForAuthenticatedUserResponseBody
}

/*
ActivityListOrgEventsForAuthenticatedUser performs requests for "activity/list-org-events-for-authenticated-user"

List organization events for the authenticated user.

  GET /users/{username}/events/orgs/{org}

https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user
*/
func ActivityListOrgEventsForAuthenticatedUser(ctx context.Context, req *ActivityListOrgEventsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListOrgEventsForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityListOrgEventsForAuthenticatedUserReq)
	}
	resp := &ActivityListOrgEventsForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListOrgEventsForAuthenticatedUser performs requests for "activity/list-org-events-for-authenticated-user"

List organization events for the authenticated user.

  GET /users/{username}/events/orgs/{org}

https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user
*/
func (c Client) ActivityListOrgEventsForAuthenticatedUser(ctx context.Context, req *ActivityListOrgEventsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListOrgEventsForAuthenticatedUserResponse, error) {
	return ActivityListOrgEventsForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListOrgEventsForAuthenticatedUserReq is request data for Client.ActivityListOrgEventsForAuthenticatedUser

https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user
*/
type ActivityListOrgEventsForAuthenticatedUserReq struct {
	_url     string
	Username string
	Org      string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/events/orgs/%v", r.Username, r.Org)
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListOrgEventsForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListOrgEventsForAuthenticatedUserReq) Rel(link RelName, resp *ActivityListOrgEventsForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListOrgEventsForAuthenticatedUserResponse is a response for ActivityListOrgEventsForAuthenticatedUser

https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user
*/
type ActivityListOrgEventsForAuthenticatedUserResponse struct {
	response
	request *ActivityListOrgEventsForAuthenticatedUserReq
}

/*
ActivityListPublicEvents performs requests for "activity/list-public-events"

List public events.

  GET /events

https://developer.github.com/v3/activity/events/#list-public-events
*/
func ActivityListPublicEvents(ctx context.Context, req *ActivityListPublicEventsReq, opt ...RequestOption) (*ActivityListPublicEventsResponse, error) {
	if req == nil {
		req = new(ActivityListPublicEventsReq)
	}
	resp := &ActivityListPublicEventsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListPublicEvents performs requests for "activity/list-public-events"

List public events.

  GET /events

https://developer.github.com/v3/activity/events/#list-public-events
*/
func (c Client) ActivityListPublicEvents(ctx context.Context, req *ActivityListPublicEventsReq, opt ...RequestOption) (*ActivityListPublicEventsResponse, error) {
	return ActivityListPublicEvents(ctx, req, append(c, opt...)...)
}

/*
ActivityListPublicEventsReq is request data for Client.ActivityListPublicEvents

https://developer.github.com/v3/activity/events/#list-public-events
*/
type ActivityListPublicEventsReq struct {
	_url string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicEventsReq) url() string {
	return r._url
}

func (r *ActivityListPublicEventsReq) urlPath() string {
	return fmt.Sprintf("/events")
}

func (r *ActivityListPublicEventsReq) method() string {
	return "GET"
}

func (r *ActivityListPublicEventsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicEventsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicEventsReq) body() interface{} {
	return nil
}

func (r *ActivityListPublicEventsReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicEventsReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicEventsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListPublicEventsReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListPublicEventsReq) Rel(link RelName, resp *ActivityListPublicEventsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListPublicEventsResponse is a response for ActivityListPublicEvents

https://developer.github.com/v3/activity/events/#list-public-events
*/
type ActivityListPublicEventsResponse struct {
	response
	request *ActivityListPublicEventsReq
}

/*
ActivityListPublicEventsForRepoNetwork performs requests for "activity/list-public-events-for-repo-network"

List public events for a network of repositories.

  GET /networks/{owner}/{repo}/events

https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
*/
func ActivityListPublicEventsForRepoNetwork(ctx context.Context, req *ActivityListPublicEventsForRepoNetworkReq, opt ...RequestOption) (*ActivityListPublicEventsForRepoNetworkResponse, error) {
	if req == nil {
		req = new(ActivityListPublicEventsForRepoNetworkReq)
	}
	resp := &ActivityListPublicEventsForRepoNetworkResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListPublicEventsForRepoNetwork performs requests for "activity/list-public-events-for-repo-network"

List public events for a network of repositories.

  GET /networks/{owner}/{repo}/events

https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
*/
func (c Client) ActivityListPublicEventsForRepoNetwork(ctx context.Context, req *ActivityListPublicEventsForRepoNetworkReq, opt ...RequestOption) (*ActivityListPublicEventsForRepoNetworkResponse, error) {
	return ActivityListPublicEventsForRepoNetwork(ctx, req, append(c, opt...)...)
}

/*
ActivityListPublicEventsForRepoNetworkReq is request data for Client.ActivityListPublicEventsForRepoNetwork

https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
*/
type ActivityListPublicEventsForRepoNetworkReq struct {
	_url  string
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicEventsForRepoNetworkReq) url() string {
	return r._url
}

func (r *ActivityListPublicEventsForRepoNetworkReq) urlPath() string {
	return fmt.Sprintf("/networks/%v/%v/events", r.Owner, r.Repo)
}

func (r *ActivityListPublicEventsForRepoNetworkReq) method() string {
	return "GET"
}

func (r *ActivityListPublicEventsForRepoNetworkReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicEventsForRepoNetworkReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicEventsForRepoNetworkReq) body() interface{} {
	return nil
}

func (r *ActivityListPublicEventsForRepoNetworkReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicEventsForRepoNetworkReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicEventsForRepoNetworkReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListPublicEventsForRepoNetworkReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListPublicEventsForRepoNetworkReq) Rel(link RelName, resp *ActivityListPublicEventsForRepoNetworkResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListPublicEventsForRepoNetworkResponse is a response for ActivityListPublicEventsForRepoNetwork

https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
*/
type ActivityListPublicEventsForRepoNetworkResponse struct {
	response
	request *ActivityListPublicEventsForRepoNetworkReq
}

/*
ActivityListPublicEventsForUser performs requests for "activity/list-public-events-for-user"

List public events for a user.

  GET /users/{username}/events/public

https://developer.github.com/v3/activity/events/#list-public-events-for-a-user
*/
func ActivityListPublicEventsForUser(ctx context.Context, req *ActivityListPublicEventsForUserReq, opt ...RequestOption) (*ActivityListPublicEventsForUserResponse, error) {
	if req == nil {
		req = new(ActivityListPublicEventsForUserReq)
	}
	resp := &ActivityListPublicEventsForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListPublicEventsForUser performs requests for "activity/list-public-events-for-user"

List public events for a user.

  GET /users/{username}/events/public

https://developer.github.com/v3/activity/events/#list-public-events-for-a-user
*/
func (c Client) ActivityListPublicEventsForUser(ctx context.Context, req *ActivityListPublicEventsForUserReq, opt ...RequestOption) (*ActivityListPublicEventsForUserResponse, error) {
	return ActivityListPublicEventsForUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListPublicEventsForUserReq is request data for Client.ActivityListPublicEventsForUser

https://developer.github.com/v3/activity/events/#list-public-events-for-a-user
*/
type ActivityListPublicEventsForUserReq struct {
	_url     string
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicEventsForUserReq) url() string {
	return r._url
}

func (r *ActivityListPublicEventsForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/events/public", r.Username)
}

func (r *ActivityListPublicEventsForUserReq) method() string {
	return "GET"
}

func (r *ActivityListPublicEventsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicEventsForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicEventsForUserReq) body() interface{} {
	return nil
}

func (r *ActivityListPublicEventsForUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicEventsForUserReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicEventsForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListPublicEventsForUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListPublicEventsForUserReq) Rel(link RelName, resp *ActivityListPublicEventsForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListPublicEventsForUserResponse is a response for ActivityListPublicEventsForUser

https://developer.github.com/v3/activity/events/#list-public-events-for-a-user
*/
type ActivityListPublicEventsForUserResponse struct {
	response
	request *ActivityListPublicEventsForUserReq
}

/*
ActivityListPublicOrgEvents performs requests for "activity/list-public-org-events"

List public organization events.

  GET /orgs/{org}/events

https://developer.github.com/v3/activity/events/#list-public-organization-events
*/
func ActivityListPublicOrgEvents(ctx context.Context, req *ActivityListPublicOrgEventsReq, opt ...RequestOption) (*ActivityListPublicOrgEventsResponse, error) {
	if req == nil {
		req = new(ActivityListPublicOrgEventsReq)
	}
	resp := &ActivityListPublicOrgEventsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListPublicOrgEvents performs requests for "activity/list-public-org-events"

List public organization events.

  GET /orgs/{org}/events

https://developer.github.com/v3/activity/events/#list-public-organization-events
*/
func (c Client) ActivityListPublicOrgEvents(ctx context.Context, req *ActivityListPublicOrgEventsReq, opt ...RequestOption) (*ActivityListPublicOrgEventsResponse, error) {
	return ActivityListPublicOrgEvents(ctx, req, append(c, opt...)...)
}

/*
ActivityListPublicOrgEventsReq is request data for Client.ActivityListPublicOrgEvents

https://developer.github.com/v3/activity/events/#list-public-organization-events
*/
type ActivityListPublicOrgEventsReq struct {
	_url string
	Org  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicOrgEventsReq) url() string {
	return r._url
}

func (r *ActivityListPublicOrgEventsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/events", r.Org)
}

func (r *ActivityListPublicOrgEventsReq) method() string {
	return "GET"
}

func (r *ActivityListPublicOrgEventsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicOrgEventsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicOrgEventsReq) body() interface{} {
	return nil
}

func (r *ActivityListPublicOrgEventsReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicOrgEventsReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListPublicOrgEventsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListPublicOrgEventsReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListPublicOrgEventsReq) Rel(link RelName, resp *ActivityListPublicOrgEventsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListPublicOrgEventsResponse is a response for ActivityListPublicOrgEvents

https://developer.github.com/v3/activity/events/#list-public-organization-events
*/
type ActivityListPublicOrgEventsResponse struct {
	response
	request *ActivityListPublicOrgEventsReq
}

/*
ActivityListReceivedEventsForUser performs requests for "activity/list-received-events-for-user"

List events received by the authenticated user.

  GET /users/{username}/received_events

https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user
*/
func ActivityListReceivedEventsForUser(ctx context.Context, req *ActivityListReceivedEventsForUserReq, opt ...RequestOption) (*ActivityListReceivedEventsForUserResponse, error) {
	if req == nil {
		req = new(ActivityListReceivedEventsForUserReq)
	}
	resp := &ActivityListReceivedEventsForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListReceivedEventsForUser performs requests for "activity/list-received-events-for-user"

List events received by the authenticated user.

  GET /users/{username}/received_events

https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user
*/
func (c Client) ActivityListReceivedEventsForUser(ctx context.Context, req *ActivityListReceivedEventsForUserReq, opt ...RequestOption) (*ActivityListReceivedEventsForUserResponse, error) {
	return ActivityListReceivedEventsForUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListReceivedEventsForUserReq is request data for Client.ActivityListReceivedEventsForUser

https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user
*/
type ActivityListReceivedEventsForUserReq struct {
	_url     string
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReceivedEventsForUserReq) url() string {
	return r._url
}

func (r *ActivityListReceivedEventsForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/received_events", r.Username)
}

func (r *ActivityListReceivedEventsForUserReq) method() string {
	return "GET"
}

func (r *ActivityListReceivedEventsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReceivedEventsForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReceivedEventsForUserReq) body() interface{} {
	return nil
}

func (r *ActivityListReceivedEventsForUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListReceivedEventsForUserReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListReceivedEventsForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListReceivedEventsForUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListReceivedEventsForUserReq) Rel(link RelName, resp *ActivityListReceivedEventsForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListReceivedEventsForUserResponse is a response for ActivityListReceivedEventsForUser

https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user
*/
type ActivityListReceivedEventsForUserResponse struct {
	response
	request *ActivityListReceivedEventsForUserReq
}

/*
ActivityListReceivedPublicEventsForUser performs requests for "activity/list-received-public-events-for-user"

List public events received by a user.

  GET /users/{username}/received_events/public

https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user
*/
func ActivityListReceivedPublicEventsForUser(ctx context.Context, req *ActivityListReceivedPublicEventsForUserReq, opt ...RequestOption) (*ActivityListReceivedPublicEventsForUserResponse, error) {
	if req == nil {
		req = new(ActivityListReceivedPublicEventsForUserReq)
	}
	resp := &ActivityListReceivedPublicEventsForUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListReceivedPublicEventsForUser performs requests for "activity/list-received-public-events-for-user"

List public events received by a user.

  GET /users/{username}/received_events/public

https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user
*/
func (c Client) ActivityListReceivedPublicEventsForUser(ctx context.Context, req *ActivityListReceivedPublicEventsForUserReq, opt ...RequestOption) (*ActivityListReceivedPublicEventsForUserResponse, error) {
	return ActivityListReceivedPublicEventsForUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListReceivedPublicEventsForUserReq is request data for Client.ActivityListReceivedPublicEventsForUser

https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user
*/
type ActivityListReceivedPublicEventsForUserReq struct {
	_url     string
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReceivedPublicEventsForUserReq) url() string {
	return r._url
}

func (r *ActivityListReceivedPublicEventsForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/received_events/public", r.Username)
}

func (r *ActivityListReceivedPublicEventsForUserReq) method() string {
	return "GET"
}

func (r *ActivityListReceivedPublicEventsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReceivedPublicEventsForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReceivedPublicEventsForUserReq) body() interface{} {
	return nil
}

func (r *ActivityListReceivedPublicEventsForUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListReceivedPublicEventsForUserReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListReceivedPublicEventsForUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListReceivedPublicEventsForUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListReceivedPublicEventsForUserReq) Rel(link RelName, resp *ActivityListReceivedPublicEventsForUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListReceivedPublicEventsForUserResponse is a response for ActivityListReceivedPublicEventsForUser

https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user
*/
type ActivityListReceivedPublicEventsForUserResponse struct {
	response
	request *ActivityListReceivedPublicEventsForUserReq
}

/*
ActivityListRepoEvents performs requests for "activity/list-repo-events"

List repository events.

  GET /repos/{owner}/{repo}/events

https://developer.github.com/v3/activity/events/#list-repository-events
*/
func ActivityListRepoEvents(ctx context.Context, req *ActivityListRepoEventsReq, opt ...RequestOption) (*ActivityListRepoEventsResponse, error) {
	if req == nil {
		req = new(ActivityListRepoEventsReq)
	}
	resp := &ActivityListRepoEventsResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListRepoEvents performs requests for "activity/list-repo-events"

List repository events.

  GET /repos/{owner}/{repo}/events

https://developer.github.com/v3/activity/events/#list-repository-events
*/
func (c Client) ActivityListRepoEvents(ctx context.Context, req *ActivityListRepoEventsReq, opt ...RequestOption) (*ActivityListRepoEventsResponse, error) {
	return ActivityListRepoEvents(ctx, req, append(c, opt...)...)
}

/*
ActivityListRepoEventsReq is request data for Client.ActivityListRepoEvents

https://developer.github.com/v3/activity/events/#list-repository-events
*/
type ActivityListRepoEventsReq struct {
	_url  string
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListRepoEventsReq) url() string {
	return r._url
}

func (r *ActivityListRepoEventsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/events", r.Owner, r.Repo)
}

func (r *ActivityListRepoEventsReq) method() string {
	return "GET"
}

func (r *ActivityListRepoEventsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListRepoEventsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListRepoEventsReq) body() interface{} {
	return nil
}

func (r *ActivityListRepoEventsReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityListRepoEventsReq) validStatuses() []int {
	return []int{}
}

func (r *ActivityListRepoEventsReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListRepoEventsReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListRepoEventsReq) Rel(link RelName, resp *ActivityListRepoEventsResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListRepoEventsResponse is a response for ActivityListRepoEvents

https://developer.github.com/v3/activity/events/#list-repository-events
*/
type ActivityListRepoEventsResponse struct {
	response
	request *ActivityListRepoEventsReq
}

/*
ActivityListRepoNotificationsForAuthenticatedUser performs requests for "activity/list-repo-notifications-for-authenticated-user"

List repository notifications for the authenticated user.

  GET /repos/{owner}/{repo}/notifications

https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
func ActivityListRepoNotificationsForAuthenticatedUser(ctx context.Context, req *ActivityListRepoNotificationsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListRepoNotificationsForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityListRepoNotificationsForAuthenticatedUserReq)
	}
	resp := &ActivityListRepoNotificationsForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListRepoNotificationsForAuthenticatedUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListRepoNotificationsForAuthenticatedUser performs requests for "activity/list-repo-notifications-for-authenticated-user"

List repository notifications for the authenticated user.

  GET /repos/{owner}/{repo}/notifications

https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
func (c Client) ActivityListRepoNotificationsForAuthenticatedUser(ctx context.Context, req *ActivityListRepoNotificationsForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListRepoNotificationsForAuthenticatedUserResponse, error) {
	return ActivityListRepoNotificationsForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListRepoNotificationsForAuthenticatedUserReq is request data for Client.ActivityListRepoNotificationsForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
type ActivityListRepoNotificationsForAuthenticatedUserReq struct {
	_url  string
	Owner string
	Repo  string

	// If `true`, show notifications marked as read.
	All *bool

	/*
	If `true`, only shows notifications in which the user is directly participating
	or mentioned.
	*/
	Participating *bool

	/*
	Only show notifications updated after the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Since *string

	/*
	Only show notifications updated before the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Before *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/notifications", r.Owner, r.Repo)
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.All != nil {
		query.Set("all", strconv.FormatBool(*r.All))
	}
	if r.Participating != nil {
		query.Set("participating", strconv.FormatBool(*r.Participating))
	}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.Before != nil {
		query.Set("before", *r.Before)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) Rel(link RelName, resp *ActivityListRepoNotificationsForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListRepoNotificationsForAuthenticatedUserResponseBody is a response body for ActivityListRepoNotificationsForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
type ActivityListRepoNotificationsForAuthenticatedUserResponseBody []struct {
	components.Thread
}

/*
ActivityListRepoNotificationsForAuthenticatedUserResponse is a response for ActivityListRepoNotificationsForAuthenticatedUser

https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
type ActivityListRepoNotificationsForAuthenticatedUserResponse struct {
	response
	request *ActivityListRepoNotificationsForAuthenticatedUserReq
	Data    *ActivityListRepoNotificationsForAuthenticatedUserResponseBody
}

/*
ActivityListReposStarredByAuthenticatedUser performs requests for "activity/list-repos-starred-by-authenticated-user"

List repositories starred by the authenticated user.

  GET /user/starred

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
func ActivityListReposStarredByAuthenticatedUser(ctx context.Context, req *ActivityListReposStarredByAuthenticatedUserReq, opt ...RequestOption) (*ActivityListReposStarredByAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityListReposStarredByAuthenticatedUserReq)
	}
	resp := &ActivityListReposStarredByAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListReposStarredByAuthenticatedUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListReposStarredByAuthenticatedUser performs requests for "activity/list-repos-starred-by-authenticated-user"

List repositories starred by the authenticated user.

  GET /user/starred

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
func (c Client) ActivityListReposStarredByAuthenticatedUser(ctx context.Context, req *ActivityListReposStarredByAuthenticatedUserReq, opt ...RequestOption) (*ActivityListReposStarredByAuthenticatedUserResponse, error) {
	return ActivityListReposStarredByAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListReposStarredByAuthenticatedUserReq is request data for Client.ActivityListReposStarredByAuthenticatedUser

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
type ActivityListReposStarredByAuthenticatedUserReq struct {
	_url string

	/*
	One of `created` (when the repository was starred) or `updated` (when it was
	last pushed to).
	*/
	Sort *string

	// One of `asc` (ascending) or `desc` (descending).
	Direction *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred")
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Direction != nil {
		query.Set("direction", *r.Direction)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListReposStarredByAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListReposStarredByAuthenticatedUserReq) Rel(link RelName, resp *ActivityListReposStarredByAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListReposStarredByAuthenticatedUserResponseBody is a response body for ActivityListReposStarredByAuthenticatedUser

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
type ActivityListReposStarredByAuthenticatedUserResponseBody []struct {
	components.Repository
}

/*
ActivityListReposStarredByAuthenticatedUserResponse is a response for ActivityListReposStarredByAuthenticatedUser

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
type ActivityListReposStarredByAuthenticatedUserResponse struct {
	response
	request *ActivityListReposStarredByAuthenticatedUserReq
	Data    *ActivityListReposStarredByAuthenticatedUserResponseBody
}

/*
ActivityListReposStarredByUser performs requests for "activity/list-repos-starred-by-user"

List repositories starred by a user.

  GET /users/{username}/starred

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
func ActivityListReposStarredByUser(ctx context.Context, req *ActivityListReposStarredByUserReq, opt ...RequestOption) (*ActivityListReposStarredByUserResponse, error) {
	if req == nil {
		req = new(ActivityListReposStarredByUserReq)
	}
	resp := &ActivityListReposStarredByUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListReposStarredByUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListReposStarredByUser performs requests for "activity/list-repos-starred-by-user"

List repositories starred by a user.

  GET /users/{username}/starred

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
func (c Client) ActivityListReposStarredByUser(ctx context.Context, req *ActivityListReposStarredByUserReq, opt ...RequestOption) (*ActivityListReposStarredByUserResponse, error) {
	return ActivityListReposStarredByUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListReposStarredByUserReq is request data for Client.ActivityListReposStarredByUser

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
type ActivityListReposStarredByUserReq struct {
	_url     string
	Username string

	/*
	One of `created` (when the repository was starred) or `updated` (when it was
	last pushed to).
	*/
	Sort *string

	// One of `asc` (ascending) or `desc` (descending).
	Direction *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReposStarredByUserReq) url() string {
	return r._url
}

func (r *ActivityListReposStarredByUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/starred", r.Username)
}

func (r *ActivityListReposStarredByUserReq) method() string {
	return "GET"
}

func (r *ActivityListReposStarredByUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Direction != nil {
		query.Set("direction", *r.Direction)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReposStarredByUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReposStarredByUserReq) body() interface{} {
	return nil
}

func (r *ActivityListReposStarredByUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListReposStarredByUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListReposStarredByUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListReposStarredByUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListReposStarredByUserReq) Rel(link RelName, resp *ActivityListReposStarredByUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListReposStarredByUserResponseBody is a response body for ActivityListReposStarredByUser

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
type ActivityListReposStarredByUserResponseBody []struct {
	components.Repository
}

/*
ActivityListReposStarredByUserResponse is a response for ActivityListReposStarredByUser

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
type ActivityListReposStarredByUserResponse struct {
	response
	request *ActivityListReposStarredByUserReq
	Data    *ActivityListReposStarredByUserResponseBody
}

/*
ActivityListReposWatchedByUser performs requests for "activity/list-repos-watched-by-user"

List repositories watched by a user.

  GET /users/{username}/subscriptions

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
func ActivityListReposWatchedByUser(ctx context.Context, req *ActivityListReposWatchedByUserReq, opt ...RequestOption) (*ActivityListReposWatchedByUserResponse, error) {
	if req == nil {
		req = new(ActivityListReposWatchedByUserReq)
	}
	resp := &ActivityListReposWatchedByUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListReposWatchedByUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListReposWatchedByUser performs requests for "activity/list-repos-watched-by-user"

List repositories watched by a user.

  GET /users/{username}/subscriptions

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
func (c Client) ActivityListReposWatchedByUser(ctx context.Context, req *ActivityListReposWatchedByUserReq, opt ...RequestOption) (*ActivityListReposWatchedByUserResponse, error) {
	return ActivityListReposWatchedByUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListReposWatchedByUserReq is request data for Client.ActivityListReposWatchedByUser

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
type ActivityListReposWatchedByUserReq struct {
	_url     string
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReposWatchedByUserReq) url() string {
	return r._url
}

func (r *ActivityListReposWatchedByUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/subscriptions", r.Username)
}

func (r *ActivityListReposWatchedByUserReq) method() string {
	return "GET"
}

func (r *ActivityListReposWatchedByUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReposWatchedByUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReposWatchedByUserReq) body() interface{} {
	return nil
}

func (r *ActivityListReposWatchedByUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListReposWatchedByUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListReposWatchedByUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListReposWatchedByUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListReposWatchedByUserReq) Rel(link RelName, resp *ActivityListReposWatchedByUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListReposWatchedByUserResponseBody is a response body for ActivityListReposWatchedByUser

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
type ActivityListReposWatchedByUserResponseBody []struct {
	components.MinimalRepository
}

/*
ActivityListReposWatchedByUserResponse is a response for ActivityListReposWatchedByUser

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
type ActivityListReposWatchedByUserResponse struct {
	response
	request *ActivityListReposWatchedByUserReq
	Data    *ActivityListReposWatchedByUserResponseBody
}

/*
ActivityListStargazersForRepo performs requests for "activity/list-stargazers-for-repo"

List stargazers.

  GET /repos/{owner}/{repo}/stargazers

https://developer.github.com/v3/activity/starring/#list-stargazers
*/
func ActivityListStargazersForRepo(ctx context.Context, req *ActivityListStargazersForRepoReq, opt ...RequestOption) (*ActivityListStargazersForRepoResponse, error) {
	if req == nil {
		req = new(ActivityListStargazersForRepoReq)
	}
	resp := &ActivityListStargazersForRepoResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListStargazersForRepoResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListStargazersForRepo performs requests for "activity/list-stargazers-for-repo"

List stargazers.

  GET /repos/{owner}/{repo}/stargazers

https://developer.github.com/v3/activity/starring/#list-stargazers
*/
func (c Client) ActivityListStargazersForRepo(ctx context.Context, req *ActivityListStargazersForRepoReq, opt ...RequestOption) (*ActivityListStargazersForRepoResponse, error) {
	return ActivityListStargazersForRepo(ctx, req, append(c, opt...)...)
}

/*
ActivityListStargazersForRepoReq is request data for Client.ActivityListStargazersForRepo

https://developer.github.com/v3/activity/starring/#list-stargazers
*/
type ActivityListStargazersForRepoReq struct {
	_url  string
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListStargazersForRepoReq) url() string {
	return r._url
}

func (r *ActivityListStargazersForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/stargazers", r.Owner, r.Repo)
}

func (r *ActivityListStargazersForRepoReq) method() string {
	return "GET"
}

func (r *ActivityListStargazersForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListStargazersForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListStargazersForRepoReq) body() interface{} {
	return nil
}

func (r *ActivityListStargazersForRepoReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListStargazersForRepoReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListStargazersForRepoReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListStargazersForRepoReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListStargazersForRepoReq) Rel(link RelName, resp *ActivityListStargazersForRepoResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListStargazersForRepoResponseBody is a response body for ActivityListStargazersForRepo

https://developer.github.com/v3/activity/starring/#list-stargazers
*/
type ActivityListStargazersForRepoResponseBody []struct {
	components.SimpleUser
}

/*
ActivityListStargazersForRepoResponse is a response for ActivityListStargazersForRepo

https://developer.github.com/v3/activity/starring/#list-stargazers
*/
type ActivityListStargazersForRepoResponse struct {
	response
	request *ActivityListStargazersForRepoReq
	Data    *ActivityListStargazersForRepoResponseBody
}

/*
ActivityListWatchedReposForAuthenticatedUser performs requests for "activity/list-watched-repos-for-authenticated-user"

List repositories watched by the authenticated user.

  GET /user/subscriptions

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
func ActivityListWatchedReposForAuthenticatedUser(ctx context.Context, req *ActivityListWatchedReposForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListWatchedReposForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityListWatchedReposForAuthenticatedUserReq)
	}
	resp := &ActivityListWatchedReposForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListWatchedReposForAuthenticatedUserResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListWatchedReposForAuthenticatedUser performs requests for "activity/list-watched-repos-for-authenticated-user"

List repositories watched by the authenticated user.

  GET /user/subscriptions

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
func (c Client) ActivityListWatchedReposForAuthenticatedUser(ctx context.Context, req *ActivityListWatchedReposForAuthenticatedUserReq, opt ...RequestOption) (*ActivityListWatchedReposForAuthenticatedUserResponse, error) {
	return ActivityListWatchedReposForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityListWatchedReposForAuthenticatedUserReq is request data for Client.ActivityListWatchedReposForAuthenticatedUser

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
type ActivityListWatchedReposForAuthenticatedUserReq struct {
	_url string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/subscriptions")
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListWatchedReposForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListWatchedReposForAuthenticatedUserReq) Rel(link RelName, resp *ActivityListWatchedReposForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListWatchedReposForAuthenticatedUserResponseBody is a response body for ActivityListWatchedReposForAuthenticatedUser

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
type ActivityListWatchedReposForAuthenticatedUserResponseBody []struct {
	components.MinimalRepository
}

/*
ActivityListWatchedReposForAuthenticatedUserResponse is a response for ActivityListWatchedReposForAuthenticatedUser

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
type ActivityListWatchedReposForAuthenticatedUserResponse struct {
	response
	request *ActivityListWatchedReposForAuthenticatedUserReq
	Data    *ActivityListWatchedReposForAuthenticatedUserResponseBody
}

/*
ActivityListWatchersForRepo performs requests for "activity/list-watchers-for-repo"

List watchers.

  GET /repos/{owner}/{repo}/subscribers

https://developer.github.com/v3/activity/watching/#list-watchers
*/
func ActivityListWatchersForRepo(ctx context.Context, req *ActivityListWatchersForRepoReq, opt ...RequestOption) (*ActivityListWatchersForRepoResponse, error) {
	if req == nil {
		req = new(ActivityListWatchersForRepoReq)
	}
	resp := &ActivityListWatchersForRepoResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivityListWatchersForRepoResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityListWatchersForRepo performs requests for "activity/list-watchers-for-repo"

List watchers.

  GET /repos/{owner}/{repo}/subscribers

https://developer.github.com/v3/activity/watching/#list-watchers
*/
func (c Client) ActivityListWatchersForRepo(ctx context.Context, req *ActivityListWatchersForRepoReq, opt ...RequestOption) (*ActivityListWatchersForRepoResponse, error) {
	return ActivityListWatchersForRepo(ctx, req, append(c, opt...)...)
}

/*
ActivityListWatchersForRepoReq is request data for Client.ActivityListWatchersForRepo

https://developer.github.com/v3/activity/watching/#list-watchers
*/
type ActivityListWatchersForRepoReq struct {
	_url  string
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListWatchersForRepoReq) url() string {
	return r._url
}

func (r *ActivityListWatchersForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscribers", r.Owner, r.Repo)
}

func (r *ActivityListWatchersForRepoReq) method() string {
	return "GET"
}

func (r *ActivityListWatchersForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListWatchersForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListWatchersForRepoReq) body() interface{} {
	return nil
}

func (r *ActivityListWatchersForRepoReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivityListWatchersForRepoReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivityListWatchersForRepoReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityListWatchersForRepoReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityListWatchersForRepoReq) Rel(link RelName, resp *ActivityListWatchersForRepoResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityListWatchersForRepoResponseBody is a response body for ActivityListWatchersForRepo

https://developer.github.com/v3/activity/watching/#list-watchers
*/
type ActivityListWatchersForRepoResponseBody []struct {
	components.SimpleUser
}

/*
ActivityListWatchersForRepoResponse is a response for ActivityListWatchersForRepo

https://developer.github.com/v3/activity/watching/#list-watchers
*/
type ActivityListWatchersForRepoResponse struct {
	response
	request *ActivityListWatchersForRepoReq
	Data    *ActivityListWatchersForRepoResponseBody
}

/*
ActivityMarkNotificationsAsRead performs requests for "activity/mark-notifications-as-read"

Mark notifications as read.

  PUT /notifications

https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
func ActivityMarkNotificationsAsRead(ctx context.Context, req *ActivityMarkNotificationsAsReadReq, opt ...RequestOption) (*ActivityMarkNotificationsAsReadResponse, error) {
	if req == nil {
		req = new(ActivityMarkNotificationsAsReadReq)
	}
	resp := &ActivityMarkNotificationsAsReadResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityMarkNotificationsAsRead performs requests for "activity/mark-notifications-as-read"

Mark notifications as read.

  PUT /notifications

https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
func (c Client) ActivityMarkNotificationsAsRead(ctx context.Context, req *ActivityMarkNotificationsAsReadReq, opt ...RequestOption) (*ActivityMarkNotificationsAsReadResponse, error) {
	return ActivityMarkNotificationsAsRead(ctx, req, append(c, opt...)...)
}

/*
ActivityMarkNotificationsAsReadReq is request data for Client.ActivityMarkNotificationsAsRead

https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
type ActivityMarkNotificationsAsReadReq struct {
	_url        string
	RequestBody ActivityMarkNotificationsAsReadReqBody
}

func (r *ActivityMarkNotificationsAsReadReq) url() string {
	return r._url
}

func (r *ActivityMarkNotificationsAsReadReq) urlPath() string {
	return fmt.Sprintf("/notifications")
}

func (r *ActivityMarkNotificationsAsReadReq) method() string {
	return "PUT"
}

func (r *ActivityMarkNotificationsAsReadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityMarkNotificationsAsReadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityMarkNotificationsAsReadReq) body() interface{} {
	return r.RequestBody
}

func (r *ActivityMarkNotificationsAsReadReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityMarkNotificationsAsReadReq) validStatuses() []int {
	return []int{205}
}

func (r *ActivityMarkNotificationsAsReadReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// httpRequest creates an http request
func (r *ActivityMarkNotificationsAsReadReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityMarkNotificationsAsReadReq) Rel(link RelName, resp *ActivityMarkNotificationsAsReadResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityMarkNotificationsAsReadReqBody is a request body for activity/mark-notifications-as-read

https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
type ActivityMarkNotificationsAsReadReqBody struct {

	/*
	   Describes the last point that notifications were checked. Anything updated since
	   this time will not be marked as read. If you omit this parameter, all
	   notifications are marked as read. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	   Default: The current timestamp.
	*/
	LastReadAt *string `json:"last_read_at,omitempty"`
}

/*
ActivityMarkNotificationsAsReadResponse is a response for ActivityMarkNotificationsAsRead

https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
type ActivityMarkNotificationsAsReadResponse struct {
	response
	request *ActivityMarkNotificationsAsReadReq
}

/*
ActivityMarkRepoNotificationsAsRead performs requests for "activity/mark-repo-notifications-as-read"

Mark repository notifications as read.

  PUT /repos/{owner}/{repo}/notifications

https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
func ActivityMarkRepoNotificationsAsRead(ctx context.Context, req *ActivityMarkRepoNotificationsAsReadReq, opt ...RequestOption) (*ActivityMarkRepoNotificationsAsReadResponse, error) {
	if req == nil {
		req = new(ActivityMarkRepoNotificationsAsReadReq)
	}
	resp := &ActivityMarkRepoNotificationsAsReadResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityMarkRepoNotificationsAsRead performs requests for "activity/mark-repo-notifications-as-read"

Mark repository notifications as read.

  PUT /repos/{owner}/{repo}/notifications

https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
func (c Client) ActivityMarkRepoNotificationsAsRead(ctx context.Context, req *ActivityMarkRepoNotificationsAsReadReq, opt ...RequestOption) (*ActivityMarkRepoNotificationsAsReadResponse, error) {
	return ActivityMarkRepoNotificationsAsRead(ctx, req, append(c, opt...)...)
}

/*
ActivityMarkRepoNotificationsAsReadReq is request data for Client.ActivityMarkRepoNotificationsAsRead

https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
type ActivityMarkRepoNotificationsAsReadReq struct {
	_url        string
	Owner       string
	Repo        string
	RequestBody ActivityMarkRepoNotificationsAsReadReqBody
}

func (r *ActivityMarkRepoNotificationsAsReadReq) url() string {
	return r._url
}

func (r *ActivityMarkRepoNotificationsAsReadReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/notifications", r.Owner, r.Repo)
}

func (r *ActivityMarkRepoNotificationsAsReadReq) method() string {
	return "PUT"
}

func (r *ActivityMarkRepoNotificationsAsReadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityMarkRepoNotificationsAsReadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityMarkRepoNotificationsAsReadReq) body() interface{} {
	return r.RequestBody
}

func (r *ActivityMarkRepoNotificationsAsReadReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityMarkRepoNotificationsAsReadReq) validStatuses() []int {
	return []int{205}
}

func (r *ActivityMarkRepoNotificationsAsReadReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// httpRequest creates an http request
func (r *ActivityMarkRepoNotificationsAsReadReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityMarkRepoNotificationsAsReadReq) Rel(link RelName, resp *ActivityMarkRepoNotificationsAsReadResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityMarkRepoNotificationsAsReadReqBody is a request body for activity/mark-repo-notifications-as-read

https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
type ActivityMarkRepoNotificationsAsReadReqBody struct {

	/*
	   Describes the last point that notifications were checked. Anything updated since
	   this time will not be marked as read. If you omit this parameter, all
	   notifications are marked as read. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	   Default: The current timestamp.
	*/
	LastReadAt *string `json:"last_read_at,omitempty"`
}

/*
ActivityMarkRepoNotificationsAsReadResponse is a response for ActivityMarkRepoNotificationsAsRead

https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
type ActivityMarkRepoNotificationsAsReadResponse struct {
	response
	request *ActivityMarkRepoNotificationsAsReadReq
}

/*
ActivityMarkThreadAsRead performs requests for "activity/mark-thread-as-read"

Mark a thread as read.

  PATCH /notifications/threads/{thread_id}

https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
*/
func ActivityMarkThreadAsRead(ctx context.Context, req *ActivityMarkThreadAsReadReq, opt ...RequestOption) (*ActivityMarkThreadAsReadResponse, error) {
	if req == nil {
		req = new(ActivityMarkThreadAsReadReq)
	}
	resp := &ActivityMarkThreadAsReadResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityMarkThreadAsRead performs requests for "activity/mark-thread-as-read"

Mark a thread as read.

  PATCH /notifications/threads/{thread_id}

https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
*/
func (c Client) ActivityMarkThreadAsRead(ctx context.Context, req *ActivityMarkThreadAsReadReq, opt ...RequestOption) (*ActivityMarkThreadAsReadResponse, error) {
	return ActivityMarkThreadAsRead(ctx, req, append(c, opt...)...)
}

/*
ActivityMarkThreadAsReadReq is request data for Client.ActivityMarkThreadAsRead

https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
*/
type ActivityMarkThreadAsReadReq struct {
	_url     string
	ThreadId int64
}

func (r *ActivityMarkThreadAsReadReq) url() string {
	return r._url
}

func (r *ActivityMarkThreadAsReadReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v", r.ThreadId)
}

func (r *ActivityMarkThreadAsReadReq) method() string {
	return "PATCH"
}

func (r *ActivityMarkThreadAsReadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityMarkThreadAsReadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityMarkThreadAsReadReq) body() interface{} {
	return nil
}

func (r *ActivityMarkThreadAsReadReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityMarkThreadAsReadReq) validStatuses() []int {
	return []int{205}
}

func (r *ActivityMarkThreadAsReadReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityMarkThreadAsReadReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityMarkThreadAsReadReq) Rel(link RelName, resp *ActivityMarkThreadAsReadResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityMarkThreadAsReadResponse is a response for ActivityMarkThreadAsRead

https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
*/
type ActivityMarkThreadAsReadResponse struct {
	response
	request *ActivityMarkThreadAsReadReq
}

/*
ActivitySetRepoSubscription performs requests for "activity/set-repo-subscription"

Set a repository subscription.

  PUT /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
func ActivitySetRepoSubscription(ctx context.Context, req *ActivitySetRepoSubscriptionReq, opt ...RequestOption) (*ActivitySetRepoSubscriptionResponse, error) {
	if req == nil {
		req = new(ActivitySetRepoSubscriptionReq)
	}
	resp := &ActivitySetRepoSubscriptionResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivitySetRepoSubscriptionResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivitySetRepoSubscription performs requests for "activity/set-repo-subscription"

Set a repository subscription.

  PUT /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
func (c Client) ActivitySetRepoSubscription(ctx context.Context, req *ActivitySetRepoSubscriptionReq, opt ...RequestOption) (*ActivitySetRepoSubscriptionResponse, error) {
	return ActivitySetRepoSubscription(ctx, req, append(c, opt...)...)
}

/*
ActivitySetRepoSubscriptionReq is request data for Client.ActivitySetRepoSubscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionReq struct {
	_url        string
	Owner       string
	Repo        string
	RequestBody ActivitySetRepoSubscriptionReqBody
}

func (r *ActivitySetRepoSubscriptionReq) url() string {
	return r._url
}

func (r *ActivitySetRepoSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscription", r.Owner, r.Repo)
}

func (r *ActivitySetRepoSubscriptionReq) method() string {
	return "PUT"
}

func (r *ActivitySetRepoSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivitySetRepoSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivitySetRepoSubscriptionReq) body() interface{} {
	return r.RequestBody
}

func (r *ActivitySetRepoSubscriptionReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivitySetRepoSubscriptionReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivitySetRepoSubscriptionReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// httpRequest creates an http request
func (r *ActivitySetRepoSubscriptionReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivitySetRepoSubscriptionReq) Rel(link RelName, resp *ActivitySetRepoSubscriptionResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivitySetRepoSubscriptionReqBody is a request body for activity/set-repo-subscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionReqBody struct {

	// Determines if all notifications should be blocked from this repository.
	Ignored *bool `json:"ignored,omitempty"`

	// Determines if notifications should be received from this repository.
	Subscribed *bool `json:"subscribed,omitempty"`
}

/*
ActivitySetRepoSubscriptionResponseBody is a response body for ActivitySetRepoSubscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionResponseBody struct {
	components.RepositorySubscription
}

/*
ActivitySetRepoSubscriptionResponse is a response for ActivitySetRepoSubscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionResponse struct {
	response
	request *ActivitySetRepoSubscriptionReq
	Data    *ActivitySetRepoSubscriptionResponseBody
}

/*
ActivitySetThreadSubscription performs requests for "activity/set-thread-subscription"

Set a thread subscription.

  PUT /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
func ActivitySetThreadSubscription(ctx context.Context, req *ActivitySetThreadSubscriptionReq, opt ...RequestOption) (*ActivitySetThreadSubscriptionResponse, error) {
	if req == nil {
		req = new(ActivitySetThreadSubscriptionReq)
	}
	resp := &ActivitySetThreadSubscriptionResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	resp.Data = new(ActivitySetThreadSubscriptionResponseBody)
	err = r.decodeBody(resp.Data)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivitySetThreadSubscription performs requests for "activity/set-thread-subscription"

Set a thread subscription.

  PUT /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
func (c Client) ActivitySetThreadSubscription(ctx context.Context, req *ActivitySetThreadSubscriptionReq, opt ...RequestOption) (*ActivitySetThreadSubscriptionResponse, error) {
	return ActivitySetThreadSubscription(ctx, req, append(c, opt...)...)
}

/*
ActivitySetThreadSubscriptionReq is request data for Client.ActivitySetThreadSubscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionReq struct {
	_url        string
	ThreadId    int64
	RequestBody ActivitySetThreadSubscriptionReqBody
}

func (r *ActivitySetThreadSubscriptionReq) url() string {
	return r._url
}

func (r *ActivitySetThreadSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v/subscription", r.ThreadId)
}

func (r *ActivitySetThreadSubscriptionReq) method() string {
	return "PUT"
}

func (r *ActivitySetThreadSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivitySetThreadSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivitySetThreadSubscriptionReq) body() interface{} {
	return r.RequestBody
}

func (r *ActivitySetThreadSubscriptionReq) dataStatuses() []int {
	return []int{200}
}

func (r *ActivitySetThreadSubscriptionReq) validStatuses() []int {
	return []int{200}
}

func (r *ActivitySetThreadSubscriptionReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{attrJSONRequestBody}
}

// httpRequest creates an http request
func (r *ActivitySetThreadSubscriptionReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivitySetThreadSubscriptionReq) Rel(link RelName, resp *ActivitySetThreadSubscriptionResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivitySetThreadSubscriptionReqBody is a request body for activity/set-thread-subscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionReqBody struct {

	/*
	   Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to
	   block all notifications from this thread.
	*/
	Ignored *bool `json:"ignored,omitempty"`
}

/*
ActivitySetThreadSubscriptionResponseBody is a response body for ActivitySetThreadSubscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionResponseBody struct {
	components.ThreadSubscription
}

/*
ActivitySetThreadSubscriptionResponse is a response for ActivitySetThreadSubscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionResponse struct {
	response
	request *ActivitySetThreadSubscriptionReq
	Data    *ActivitySetThreadSubscriptionResponseBody
}

/*
ActivityStarRepoForAuthenticatedUser performs requests for "activity/star-repo-for-authenticated-user"

Star a repository for the authenticated user.

  PUT /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user
*/
func ActivityStarRepoForAuthenticatedUser(ctx context.Context, req *ActivityStarRepoForAuthenticatedUserReq, opt ...RequestOption) (*ActivityStarRepoForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityStarRepoForAuthenticatedUserReq)
	}
	resp := &ActivityStarRepoForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityStarRepoForAuthenticatedUser performs requests for "activity/star-repo-for-authenticated-user"

Star a repository for the authenticated user.

  PUT /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user
*/
func (c Client) ActivityStarRepoForAuthenticatedUser(ctx context.Context, req *ActivityStarRepoForAuthenticatedUserReq, opt ...RequestOption) (*ActivityStarRepoForAuthenticatedUserResponse, error) {
	return ActivityStarRepoForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityStarRepoForAuthenticatedUserReq is request data for Client.ActivityStarRepoForAuthenticatedUser

https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user
*/
type ActivityStarRepoForAuthenticatedUserReq struct {
	_url  string
	Owner string
	Repo  string
}

func (r *ActivityStarRepoForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityStarRepoForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred/%v/%v", r.Owner, r.Repo)
}

func (r *ActivityStarRepoForAuthenticatedUserReq) method() string {
	return "PUT"
}

func (r *ActivityStarRepoForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityStarRepoForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityStarRepoForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityStarRepoForAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityStarRepoForAuthenticatedUserReq) validStatuses() []int {
	return []int{204}
}

func (r *ActivityStarRepoForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityStarRepoForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityStarRepoForAuthenticatedUserReq) Rel(link RelName, resp *ActivityStarRepoForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityStarRepoForAuthenticatedUserResponse is a response for ActivityStarRepoForAuthenticatedUser

https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user
*/
type ActivityStarRepoForAuthenticatedUserResponse struct {
	response
	request *ActivityStarRepoForAuthenticatedUserReq
}

/*
ActivityUnstarRepoForAuthenticatedUser performs requests for "activity/unstar-repo-for-authenticated-user"

Unstar a repository for the authenticated user.

  DELETE /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user
*/
func ActivityUnstarRepoForAuthenticatedUser(ctx context.Context, req *ActivityUnstarRepoForAuthenticatedUserReq, opt ...RequestOption) (*ActivityUnstarRepoForAuthenticatedUserResponse, error) {
	if req == nil {
		req = new(ActivityUnstarRepoForAuthenticatedUserReq)
	}
	resp := &ActivityUnstarRepoForAuthenticatedUserResponse{request: req}
	r, err := doRequest(ctx, req, opt...)
	if r != nil {
		resp.response = *r
	}
	if err != nil {
		return resp, err
	}
	err = r.decodeBody(nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

/*
ActivityUnstarRepoForAuthenticatedUser performs requests for "activity/unstar-repo-for-authenticated-user"

Unstar a repository for the authenticated user.

  DELETE /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user
*/
func (c Client) ActivityUnstarRepoForAuthenticatedUser(ctx context.Context, req *ActivityUnstarRepoForAuthenticatedUserReq, opt ...RequestOption) (*ActivityUnstarRepoForAuthenticatedUserResponse, error) {
	return ActivityUnstarRepoForAuthenticatedUser(ctx, req, append(c, opt...)...)
}

/*
ActivityUnstarRepoForAuthenticatedUserReq is request data for Client.ActivityUnstarRepoForAuthenticatedUser

https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user
*/
type ActivityUnstarRepoForAuthenticatedUserReq struct {
	_url  string
	Owner string
	Repo  string
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) url() string {
	return r._url
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred/%v/%v", r.Owner, r.Repo)
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) method() string {
	return "DELETE"
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) body() interface{} {
	return nil
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) dataStatuses() []int {
	return []int{}
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) validStatuses() []int {
	return []int{204}
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) endpointAttributes() []endpointAttribute {
	return []endpointAttribute{}
}

// httpRequest creates an http request
func (r *ActivityUnstarRepoForAuthenticatedUserReq) httpRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
Rel updates this request to point to a relative link from resp. Returns false if
the link does not exist. Handy for paging.
*/
func (r *ActivityUnstarRepoForAuthenticatedUserReq) Rel(link RelName, resp *ActivityUnstarRepoForAuthenticatedUserResponse) bool {
	u := resp.RelLink(link)
	if u == "" {
		return false
	}
	r._url = u
	return true
}

/*
ActivityUnstarRepoForAuthenticatedUserResponse is a response for ActivityUnstarRepoForAuthenticatedUser

https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user
*/
type ActivityUnstarRepoForAuthenticatedUserResponse struct {
	response
	request *ActivityUnstarRepoForAuthenticatedUserReq
}
