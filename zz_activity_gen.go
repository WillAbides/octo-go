// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

/*
ActivityCheckRepoIsStarredByAuthenticatedUserReq builds requests for "activity/check-repo-is-starred-by-authenticated-user"

Check if a repository is starred by the authenticated user.

  GET /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#check-if-a-repository-is-starred-by-the-authenticated-user
*/
type ActivityCheckRepoIsStarredByAuthenticatedUserReq struct {
	Owner string
	Repo  string
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred/%v/%v", r.Owner, r.Repo)
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityCheckRepoIsStarredByAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityDeleteRepoSubscriptionReq builds requests for "activity/delete-repo-subscription"

Delete a repository subscription.

  DELETE /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#delete-a-repository-subscription
*/
type ActivityDeleteRepoSubscriptionReq struct {
	Owner string
	Repo  string
}

func (r *ActivityDeleteRepoSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscription", r.Owner, r.Repo)
}

func (r *ActivityDeleteRepoSubscriptionReq) method() string {
	return "DELETE"
}

func (r *ActivityDeleteRepoSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityDeleteRepoSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityDeleteRepoSubscriptionReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityDeleteRepoSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityDeleteThreadSubscriptionReq builds requests for "activity/delete-thread-subscription"

Delete a thread subscription.

  DELETE /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription
*/
type ActivityDeleteThreadSubscriptionReq struct {
	ThreadId int64
}

func (r *ActivityDeleteThreadSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v/subscription", r.ThreadId)
}

func (r *ActivityDeleteThreadSubscriptionReq) method() string {
	return "DELETE"
}

func (r *ActivityDeleteThreadSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityDeleteThreadSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityDeleteThreadSubscriptionReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityDeleteThreadSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityGetFeedsReq builds requests for "activity/get-feeds"

Get feeds.

  GET /feeds

https://developer.github.com/v3/activity/feeds/#get-feeds
*/
type ActivityGetFeedsReq struct{}

func (r *ActivityGetFeedsReq) urlPath() string {
	return fmt.Sprintf("/feeds")
}

func (r *ActivityGetFeedsReq) method() string {
	return "GET"
}

func (r *ActivityGetFeedsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetFeedsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetFeedsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityGetFeedsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityGetFeedsResponseBody200 is a response body for activity/get-feeds

API documentation: https://developer.github.com/v3/activity/feeds/#get-feeds
*/
type ActivityGetFeedsResponseBody200 struct {
	Links struct {
		CurrentUser struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"current_user,omitempty"`
		CurrentUserActor struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"current_user_actor,omitempty"`
		CurrentUserOrganization struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"current_user_organization,omitempty"`
		CurrentUserOrganizations []struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"current_user_organizations,omitempty"`
		CurrentUserPublic struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"current_user_public,omitempty"`
		SecurityAdvisories struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"security_advisories,omitempty"`
		Timeline struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"timeline,omitempty"`
		User struct {
			Href string `json:"href,omitempty"`
			Type string `json:"type,omitempty"`
		} `json:"user,omitempty"`
	} `json:"_links,omitempty"`
	CurrentUserActorUrl         string   `json:"current_user_actor_url,omitempty"`
	CurrentUserOrganizationUrl  string   `json:"current_user_organization_url,omitempty"`
	CurrentUserOrganizationUrls []string `json:"current_user_organization_urls,omitempty"`
	CurrentUserPublicUrl        string   `json:"current_user_public_url,omitempty"`
	CurrentUserUrl              string   `json:"current_user_url,omitempty"`
	SecurityAdvisoriesUrl       string   `json:"security_advisories_url,omitempty"`
	TimelineUrl                 string   `json:"timeline_url,omitempty"`
	UserUrl                     string   `json:"user_url,omitempty"`
}

/*
ActivityGetRepoSubscriptionReq builds requests for "activity/get-repo-subscription"

Get a repository subscription.

  GET /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
type ActivityGetRepoSubscriptionReq struct {
	Owner string
	Repo  string
}

func (r *ActivityGetRepoSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscription", r.Owner, r.Repo)
}

func (r *ActivityGetRepoSubscriptionReq) method() string {
	return "GET"
}

func (r *ActivityGetRepoSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetRepoSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetRepoSubscriptionReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityGetRepoSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityGetRepoSubscriptionResponseBody200 is a response body for activity/get-repo-subscription

API documentation: https://developer.github.com/v3/activity/watching/#get-a-repository-subscription
*/
type ActivityGetRepoSubscriptionResponseBody200 struct {
	CreatedAt     string `json:"created_at,omitempty"`
	Ignored       bool   `json:"ignored,omitempty"`
	Reason        string `json:"reason,omitempty"`
	RepositoryUrl string `json:"repository_url,omitempty"`
	Subscribed    bool   `json:"subscribed,omitempty"`
	Url           string `json:"url,omitempty"`
}

/*
ActivityGetThreadReq builds requests for "activity/get-thread"

Get a thread.

  GET /notifications/threads/{thread_id}

https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
type ActivityGetThreadReq struct {
	ThreadId int64
}

func (r *ActivityGetThreadReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v", r.ThreadId)
}

func (r *ActivityGetThreadReq) method() string {
	return "GET"
}

func (r *ActivityGetThreadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetThreadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetThreadReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityGetThreadReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityGetThreadResponseBody200 is a response body for activity/get-thread

API documentation: https://developer.github.com/v3/activity/notifications/#get-a-thread
*/
type ActivityGetThreadResponseBody200 struct {
	Id         string `json:"id,omitempty"`
	LastReadAt string `json:"last_read_at,omitempty"`
	Reason     string `json:"reason,omitempty"`
	Repository struct {
		ArchiveUrl       string `json:"archive_url,omitempty"`
		AssigneesUrl     string `json:"assignees_url,omitempty"`
		BlobsUrl         string `json:"blobs_url,omitempty"`
		BranchesUrl      string `json:"branches_url,omitempty"`
		CollaboratorsUrl string `json:"collaborators_url,omitempty"`
		CommentsUrl      string `json:"comments_url,omitempty"`
		CommitsUrl       string `json:"commits_url,omitempty"`
		CompareUrl       string `json:"compare_url,omitempty"`
		ContentsUrl      string `json:"contents_url,omitempty"`
		ContributorsUrl  string `json:"contributors_url,omitempty"`
		DeploymentsUrl   string `json:"deployments_url,omitempty"`
		Description      string `json:"description,omitempty"`
		DownloadsUrl     string `json:"downloads_url,omitempty"`
		EventsUrl        string `json:"events_url,omitempty"`
		Fork             bool   `json:"fork,omitempty"`
		ForksUrl         string `json:"forks_url,omitempty"`
		FullName         string `json:"full_name,omitempty"`
		GitCommitsUrl    string `json:"git_commits_url,omitempty"`
		GitRefsUrl       string `json:"git_refs_url,omitempty"`
		GitTagsUrl       string `json:"git_tags_url,omitempty"`
		GitUrl           string `json:"git_url,omitempty"`
		HtmlUrl          string `json:"html_url,omitempty"`
		Id               int64  `json:"id,omitempty"`
		IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl   string `json:"issue_events_url,omitempty"`
		IssuesUrl        string `json:"issues_url,omitempty"`
		KeysUrl          string `json:"keys_url,omitempty"`
		LabelsUrl        string `json:"labels_url,omitempty"`
		LanguagesUrl     string `json:"languages_url,omitempty"`
		MergesUrl        string `json:"merges_url,omitempty"`
		MilestonesUrl    string `json:"milestones_url,omitempty"`
		Name             string `json:"name,omitempty"`
		NodeId           string `json:"node_id,omitempty"`
		NotificationsUrl string `json:"notifications_url,omitempty"`
		Owner            struct {
			AvatarUrl         string `json:"avatar_url,omitempty"`
			EventsUrl         string `json:"events_url,omitempty"`
			FollowersUrl      string `json:"followers_url,omitempty"`
			FollowingUrl      string `json:"following_url,omitempty"`
			GistsUrl          string `json:"gists_url,omitempty"`
			GravatarId        string `json:"gravatar_id,omitempty"`
			HtmlUrl           string `json:"html_url,omitempty"`
			Id                int64  `json:"id,omitempty"`
			Login             string `json:"login,omitempty"`
			NodeId            string `json:"node_id,omitempty"`
			OrganizationsUrl  string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl string `json:"received_events_url,omitempty"`
			ReposUrl          string `json:"repos_url,omitempty"`
			SiteAdmin         bool   `json:"site_admin,omitempty"`
			StarredUrl        string `json:"starred_url,omitempty"`
			SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
			Type              string `json:"type,omitempty"`
			Url               string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Private         bool   `json:"private,omitempty"`
		PullsUrl        string `json:"pulls_url,omitempty"`
		ReleasesUrl     string `json:"releases_url,omitempty"`
		SshUrl          string `json:"ssh_url,omitempty"`
		StargazersUrl   string `json:"stargazers_url,omitempty"`
		StatusesUrl     string `json:"statuses_url,omitempty"`
		SubscribersUrl  string `json:"subscribers_url,omitempty"`
		SubscriptionUrl string `json:"subscription_url,omitempty"`
		TagsUrl         string `json:"tags_url,omitempty"`
		TeamsUrl        string `json:"teams_url,omitempty"`
		TreesUrl        string `json:"trees_url,omitempty"`
		Url             string `json:"url,omitempty"`
	} `json:"repository,omitempty"`
	Subject struct {
		LatestCommentUrl string `json:"latest_comment_url,omitempty"`
		Title            string `json:"title,omitempty"`
		Type             string `json:"type,omitempty"`
		Url              string `json:"url,omitempty"`
	} `json:"subject,omitempty"`
	Unread    bool   `json:"unread,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	Url       string `json:"url,omitempty"`
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUserReq builds requests for "activity/get-thread-subscription-for-authenticated-user"

Get a thread subscription for the authenticated user.

  GET /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
type ActivityGetThreadSubscriptionForAuthenticatedUserReq struct {
	ThreadId int64
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v/subscription", r.ThreadId)
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityGetThreadSubscriptionForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody200 is a response body for activity/get-thread-subscription-for-authenticated-user

API documentation: https://developer.github.com/v3/activity/notifications/#get-a-thread-subscription-for-the-authenticated-user
*/
type ActivityGetThreadSubscriptionForAuthenticatedUserResponseBody200 struct {
	CreatedAt  string `json:"created_at,omitempty"`
	Ignored    bool   `json:"ignored,omitempty"`
	Reason     string `json:"reason,omitempty"`
	Subscribed bool   `json:"subscribed,omitempty"`
	ThreadUrl  string `json:"thread_url,omitempty"`
	Url        string `json:"url,omitempty"`
}

/*
ActivityListEventsForAuthenticatedUserReq builds requests for "activity/list-events-for-authenticated-user"

List events for the authenticated user.

  GET /users/{username}/events

https://developer.github.com/v3/activity/events/#list-events-for-the-authenticated-user
*/
type ActivityListEventsForAuthenticatedUserReq struct {
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListEventsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/events", r.Username)
}

func (r *ActivityListEventsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListEventsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListEventsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListEventsForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListEventsForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListNotificationsForAuthenticatedUserReq builds requests for "activity/list-notifications-for-authenticated-user"

List notifications for the authenticated user.

  GET /notifications

https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
type ActivityListNotificationsForAuthenticatedUserReq struct {

	// If `true`, show notifications marked as read.
	All *bool

	/*
	If `true`, only shows notifications in which the user is directly participating
	or mentioned.
	*/
	Participating *bool

	/*
	Only show notifications updated after the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Since *string

	/*
	Only show notifications updated before the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Before *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/notifications")
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.All != nil {
		query.Set("all", strconv.FormatBool(*r.All))
	}
	if r.Participating != nil {
		query.Set("participating", strconv.FormatBool(*r.Participating))
	}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.Before != nil {
		query.Set("before", *r.Before)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListNotificationsForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListNotificationsForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListNotificationsForAuthenticatedUserResponseBody200 is a response body for activity/list-notifications-for-authenticated-user

API documentation: https://developer.github.com/v3/activity/notifications/#list-notifications-for-the-authenticated-user
*/
type ActivityListNotificationsForAuthenticatedUserResponseBody200 []struct {
	Id         string `json:"id,omitempty"`
	LastReadAt string `json:"last_read_at,omitempty"`
	Reason     string `json:"reason,omitempty"`
	Repository struct {
		ArchiveUrl       string `json:"archive_url,omitempty"`
		AssigneesUrl     string `json:"assignees_url,omitempty"`
		BlobsUrl         string `json:"blobs_url,omitempty"`
		BranchesUrl      string `json:"branches_url,omitempty"`
		CollaboratorsUrl string `json:"collaborators_url,omitempty"`
		CommentsUrl      string `json:"comments_url,omitempty"`
		CommitsUrl       string `json:"commits_url,omitempty"`
		CompareUrl       string `json:"compare_url,omitempty"`
		ContentsUrl      string `json:"contents_url,omitempty"`
		ContributorsUrl  string `json:"contributors_url,omitempty"`
		DeploymentsUrl   string `json:"deployments_url,omitempty"`
		Description      string `json:"description,omitempty"`
		DownloadsUrl     string `json:"downloads_url,omitempty"`
		EventsUrl        string `json:"events_url,omitempty"`
		Fork             bool   `json:"fork,omitempty"`
		ForksUrl         string `json:"forks_url,omitempty"`
		FullName         string `json:"full_name,omitempty"`
		GitCommitsUrl    string `json:"git_commits_url,omitempty"`
		GitRefsUrl       string `json:"git_refs_url,omitempty"`
		GitTagsUrl       string `json:"git_tags_url,omitempty"`
		GitUrl           string `json:"git_url,omitempty"`
		HtmlUrl          string `json:"html_url,omitempty"`
		Id               int64  `json:"id,omitempty"`
		IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl   string `json:"issue_events_url,omitempty"`
		IssuesUrl        string `json:"issues_url,omitempty"`
		KeysUrl          string `json:"keys_url,omitempty"`
		LabelsUrl        string `json:"labels_url,omitempty"`
		LanguagesUrl     string `json:"languages_url,omitempty"`
		MergesUrl        string `json:"merges_url,omitempty"`
		MilestonesUrl    string `json:"milestones_url,omitempty"`
		Name             string `json:"name,omitempty"`
		NodeId           string `json:"node_id,omitempty"`
		NotificationsUrl string `json:"notifications_url,omitempty"`
		Owner            struct {
			AvatarUrl         string `json:"avatar_url,omitempty"`
			EventsUrl         string `json:"events_url,omitempty"`
			FollowersUrl      string `json:"followers_url,omitempty"`
			FollowingUrl      string `json:"following_url,omitempty"`
			GistsUrl          string `json:"gists_url,omitempty"`
			GravatarId        string `json:"gravatar_id,omitempty"`
			HtmlUrl           string `json:"html_url,omitempty"`
			Id                int64  `json:"id,omitempty"`
			Login             string `json:"login,omitempty"`
			NodeId            string `json:"node_id,omitempty"`
			OrganizationsUrl  string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl string `json:"received_events_url,omitempty"`
			ReposUrl          string `json:"repos_url,omitempty"`
			SiteAdmin         bool   `json:"site_admin,omitempty"`
			StarredUrl        string `json:"starred_url,omitempty"`
			SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
			Type              string `json:"type,omitempty"`
			Url               string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Private         bool   `json:"private,omitempty"`
		PullsUrl        string `json:"pulls_url,omitempty"`
		ReleasesUrl     string `json:"releases_url,omitempty"`
		SshUrl          string `json:"ssh_url,omitempty"`
		StargazersUrl   string `json:"stargazers_url,omitempty"`
		StatusesUrl     string `json:"statuses_url,omitempty"`
		SubscribersUrl  string `json:"subscribers_url,omitempty"`
		SubscriptionUrl string `json:"subscription_url,omitempty"`
		TagsUrl         string `json:"tags_url,omitempty"`
		TeamsUrl        string `json:"teams_url,omitempty"`
		TreesUrl        string `json:"trees_url,omitempty"`
		Url             string `json:"url,omitempty"`
	} `json:"repository,omitempty"`
	Subject struct {
		LatestCommentUrl string `json:"latest_comment_url,omitempty"`
		Title            string `json:"title,omitempty"`
		Type             string `json:"type,omitempty"`
		Url              string `json:"url,omitempty"`
	} `json:"subject,omitempty"`
	Unread    bool   `json:"unread,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	Url       string `json:"url,omitempty"`
}

/*
ActivityListOrgEventsForAuthenticatedUserReq builds requests for "activity/list-org-events-for-authenticated-user"

List organization events for the authenticated user.

  GET /users/{username}/events/orgs/{org}

https://developer.github.com/v3/activity/events/#list-organization-events-for-the-authenticated-user
*/
type ActivityListOrgEventsForAuthenticatedUserReq struct {
	Username string
	Org      string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/events/orgs/%v", r.Username, r.Org)
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListOrgEventsForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListOrgEventsForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListPublicEventsReq builds requests for "activity/list-public-events"

List public events.

  GET /events

https://developer.github.com/v3/activity/events/#list-public-events
*/
type ActivityListPublicEventsReq struct {

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicEventsReq) urlPath() string {
	return fmt.Sprintf("/events")
}

func (r *ActivityListPublicEventsReq) method() string {
	return "GET"
}

func (r *ActivityListPublicEventsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicEventsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicEventsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListPublicEventsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListPublicEventsForRepoNetworkReq builds requests for "activity/list-public-events-for-repo-network"

List public events for a network of repositories.

  GET /networks/{owner}/{repo}/events

https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
*/
type ActivityListPublicEventsForRepoNetworkReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicEventsForRepoNetworkReq) urlPath() string {
	return fmt.Sprintf("/networks/%v/%v/events", r.Owner, r.Repo)
}

func (r *ActivityListPublicEventsForRepoNetworkReq) method() string {
	return "GET"
}

func (r *ActivityListPublicEventsForRepoNetworkReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicEventsForRepoNetworkReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicEventsForRepoNetworkReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListPublicEventsForRepoNetworkReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListPublicEventsForUserReq builds requests for "activity/list-public-events-for-user"

List public events for a user.

  GET /users/{username}/events/public

https://developer.github.com/v3/activity/events/#list-public-events-for-a-user
*/
type ActivityListPublicEventsForUserReq struct {
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicEventsForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/events/public", r.Username)
}

func (r *ActivityListPublicEventsForUserReq) method() string {
	return "GET"
}

func (r *ActivityListPublicEventsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicEventsForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicEventsForUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListPublicEventsForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListPublicOrgEventsReq builds requests for "activity/list-public-org-events"

List public organization events.

  GET /orgs/{org}/events

https://developer.github.com/v3/activity/events/#list-public-organization-events
*/
type ActivityListPublicOrgEventsReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListPublicOrgEventsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/events", r.Org)
}

func (r *ActivityListPublicOrgEventsReq) method() string {
	return "GET"
}

func (r *ActivityListPublicOrgEventsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListPublicOrgEventsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListPublicOrgEventsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListPublicOrgEventsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListReceivedEventsForUserReq builds requests for "activity/list-received-events-for-user"

List events received by the authenticated user.

  GET /users/{username}/received_events

https://developer.github.com/v3/activity/events/#list-events-received-by-the-authenticated-user
*/
type ActivityListReceivedEventsForUserReq struct {
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReceivedEventsForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/received_events", r.Username)
}

func (r *ActivityListReceivedEventsForUserReq) method() string {
	return "GET"
}

func (r *ActivityListReceivedEventsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReceivedEventsForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReceivedEventsForUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListReceivedEventsForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListReceivedPublicEventsForUserReq builds requests for "activity/list-received-public-events-for-user"

List public events received by a user.

  GET /users/{username}/received_events/public

https://developer.github.com/v3/activity/events/#list-public-events-received-by-a-user
*/
type ActivityListReceivedPublicEventsForUserReq struct {
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReceivedPublicEventsForUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/received_events/public", r.Username)
}

func (r *ActivityListReceivedPublicEventsForUserReq) method() string {
	return "GET"
}

func (r *ActivityListReceivedPublicEventsForUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReceivedPublicEventsForUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReceivedPublicEventsForUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListReceivedPublicEventsForUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListRepoEventsReq builds requests for "activity/list-repo-events"

List repository events.

  GET /repos/{owner}/{repo}/events

https://developer.github.com/v3/activity/events/#list-repository-events
*/
type ActivityListRepoEventsReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListRepoEventsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/events", r.Owner, r.Repo)
}

func (r *ActivityListRepoEventsReq) method() string {
	return "GET"
}

func (r *ActivityListRepoEventsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListRepoEventsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListRepoEventsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListRepoEventsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListRepoNotificationsForAuthenticatedUserReq builds requests for "activity/list-repo-notifications-for-authenticated-user"

List repository notifications for the authenticated user.

  GET /repos/{owner}/{repo}/notifications

https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
type ActivityListRepoNotificationsForAuthenticatedUserReq struct {
	Owner string
	Repo  string

	// If `true`, show notifications marked as read.
	All *bool

	/*
	If `true`, only shows notifications in which the user is directly participating
	or mentioned.
	*/
	Participating *bool

	/*
	Only show notifications updated after the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Since *string

	/*
	Only show notifications updated before the given time. This is a timestamp in
	[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format:
	`YYYY-MM-DDTHH:MM:SSZ`.
	*/
	Before *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/notifications", r.Owner, r.Repo)
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.All != nil {
		query.Set("all", strconv.FormatBool(*r.All))
	}
	if r.Participating != nil {
		query.Set("participating", strconv.FormatBool(*r.Participating))
	}
	if r.Since != nil {
		query.Set("since", *r.Since)
	}
	if r.Before != nil {
		query.Set("before", *r.Before)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListRepoNotificationsForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListRepoNotificationsForAuthenticatedUserResponseBody200 is a response body for activity/list-repo-notifications-for-authenticated-user

API documentation: https://developer.github.com/v3/activity/notifications/#list-repository-notifications-for-the-authenticated-user
*/
type ActivityListRepoNotificationsForAuthenticatedUserResponseBody200 []struct {
	Id         string `json:"id,omitempty"`
	LastReadAt string `json:"last_read_at,omitempty"`
	Reason     string `json:"reason,omitempty"`
	Repository struct {
		ArchiveUrl       string `json:"archive_url,omitempty"`
		AssigneesUrl     string `json:"assignees_url,omitempty"`
		BlobsUrl         string `json:"blobs_url,omitempty"`
		BranchesUrl      string `json:"branches_url,omitempty"`
		CollaboratorsUrl string `json:"collaborators_url,omitempty"`
		CommentsUrl      string `json:"comments_url,omitempty"`
		CommitsUrl       string `json:"commits_url,omitempty"`
		CompareUrl       string `json:"compare_url,omitempty"`
		ContentsUrl      string `json:"contents_url,omitempty"`
		ContributorsUrl  string `json:"contributors_url,omitempty"`
		DeploymentsUrl   string `json:"deployments_url,omitempty"`
		Description      string `json:"description,omitempty"`
		DownloadsUrl     string `json:"downloads_url,omitempty"`
		EventsUrl        string `json:"events_url,omitempty"`
		Fork             bool   `json:"fork,omitempty"`
		ForksUrl         string `json:"forks_url,omitempty"`
		FullName         string `json:"full_name,omitempty"`
		GitCommitsUrl    string `json:"git_commits_url,omitempty"`
		GitRefsUrl       string `json:"git_refs_url,omitempty"`
		GitTagsUrl       string `json:"git_tags_url,omitempty"`
		GitUrl           string `json:"git_url,omitempty"`
		HtmlUrl          string `json:"html_url,omitempty"`
		Id               int64  `json:"id,omitempty"`
		IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
		IssueEventsUrl   string `json:"issue_events_url,omitempty"`
		IssuesUrl        string `json:"issues_url,omitempty"`
		KeysUrl          string `json:"keys_url,omitempty"`
		LabelsUrl        string `json:"labels_url,omitempty"`
		LanguagesUrl     string `json:"languages_url,omitempty"`
		MergesUrl        string `json:"merges_url,omitempty"`
		MilestonesUrl    string `json:"milestones_url,omitempty"`
		Name             string `json:"name,omitempty"`
		NodeId           string `json:"node_id,omitempty"`
		NotificationsUrl string `json:"notifications_url,omitempty"`
		Owner            struct {
			AvatarUrl         string `json:"avatar_url,omitempty"`
			EventsUrl         string `json:"events_url,omitempty"`
			FollowersUrl      string `json:"followers_url,omitempty"`
			FollowingUrl      string `json:"following_url,omitempty"`
			GistsUrl          string `json:"gists_url,omitempty"`
			GravatarId        string `json:"gravatar_id,omitempty"`
			HtmlUrl           string `json:"html_url,omitempty"`
			Id                int64  `json:"id,omitempty"`
			Login             string `json:"login,omitempty"`
			NodeId            string `json:"node_id,omitempty"`
			OrganizationsUrl  string `json:"organizations_url,omitempty"`
			ReceivedEventsUrl string `json:"received_events_url,omitempty"`
			ReposUrl          string `json:"repos_url,omitempty"`
			SiteAdmin         bool   `json:"site_admin,omitempty"`
			StarredUrl        string `json:"starred_url,omitempty"`
			SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
			Type              string `json:"type,omitempty"`
			Url               string `json:"url,omitempty"`
		} `json:"owner,omitempty"`
		Private         bool   `json:"private,omitempty"`
		PullsUrl        string `json:"pulls_url,omitempty"`
		ReleasesUrl     string `json:"releases_url,omitempty"`
		SshUrl          string `json:"ssh_url,omitempty"`
		StargazersUrl   string `json:"stargazers_url,omitempty"`
		StatusesUrl     string `json:"statuses_url,omitempty"`
		SubscribersUrl  string `json:"subscribers_url,omitempty"`
		SubscriptionUrl string `json:"subscription_url,omitempty"`
		TagsUrl         string `json:"tags_url,omitempty"`
		TeamsUrl        string `json:"teams_url,omitempty"`
		TreesUrl        string `json:"trees_url,omitempty"`
		Url             string `json:"url,omitempty"`
	} `json:"repository,omitempty"`
	Subject struct {
		LatestCommentUrl string `json:"latest_comment_url,omitempty"`
		Title            string `json:"title,omitempty"`
		Type             string `json:"type,omitempty"`
		Url              string `json:"url,omitempty"`
	} `json:"subject,omitempty"`
	Unread    bool   `json:"unread,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
	Url       string `json:"url,omitempty"`
}

/*
ActivityListReposStarredByAuthenticatedUserReq builds requests for "activity/list-repos-starred-by-authenticated-user"

List repositories starred by the authenticated user.

  GET /user/starred

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
type ActivityListReposStarredByAuthenticatedUserReq struct {

	/*
	One of `created` (when the repository was starred) or `updated` (when it was
	last pushed to).
	*/
	Sort *string

	// One of `asc` (ascending) or `desc` (descending).
	Direction *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred")
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Direction != nil {
		query.Set("direction", *r.Direction)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReposStarredByAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListReposStarredByAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListReposStarredByAuthenticatedUserResponseBody200 is a response body for activity/list-repos-starred-by-authenticated-user

API documentation: https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-the-authenticated-user
*/
type ActivityListReposStarredByAuthenticatedUserResponseBody200 []struct {
	AllowMergeCommit bool   `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge bool   `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge bool   `json:"allow_squash_merge,omitempty"`
	ArchiveUrl       string `json:"archive_url,omitempty"`
	Archived         bool   `json:"archived,omitempty"`
	AssigneesUrl     string `json:"assignees_url,omitempty"`
	BlobsUrl         string `json:"blobs_url,omitempty"`
	BranchesUrl      string `json:"branches_url,omitempty"`
	CloneUrl         string `json:"clone_url,omitempty"`
	CollaboratorsUrl string `json:"collaborators_url,omitempty"`
	CommentsUrl      string `json:"comments_url,omitempty"`
	CommitsUrl       string `json:"commits_url,omitempty"`
	CompareUrl       string `json:"compare_url,omitempty"`
	ContentsUrl      string `json:"contents_url,omitempty"`
	ContributorsUrl  string `json:"contributors_url,omitempty"`
	CreatedAt        string `json:"created_at,omitempty"`
	DefaultBranch    string `json:"default_branch,omitempty"`
	DeploymentsUrl   string `json:"deployments_url,omitempty"`
	Description      string `json:"description,omitempty"`
	Disabled         bool   `json:"disabled,omitempty"`
	DownloadsUrl     string `json:"downloads_url,omitempty"`
	EventsUrl        string `json:"events_url,omitempty"`
	Fork             bool   `json:"fork,omitempty"`
	ForksCount       int64  `json:"forks_count,omitempty"`
	ForksUrl         string `json:"forks_url,omitempty"`
	FullName         string `json:"full_name,omitempty"`
	GitCommitsUrl    string `json:"git_commits_url,omitempty"`
	GitRefsUrl       string `json:"git_refs_url,omitempty"`
	GitTagsUrl       string `json:"git_tags_url,omitempty"`
	GitUrl           string `json:"git_url,omitempty"`
	HasDownloads     bool   `json:"has_downloads,omitempty"`
	HasIssues        bool   `json:"has_issues,omitempty"`
	HasPages         bool   `json:"has_pages,omitempty"`
	HasProjects      bool   `json:"has_projects,omitempty"`
	HasWiki          bool   `json:"has_wiki,omitempty"`
	Homepage         string `json:"homepage,omitempty"`
	HooksUrl         string `json:"hooks_url,omitempty"`
	HtmlUrl          string `json:"html_url,omitempty"`
	Id               int64  `json:"id,omitempty"`
	IsTemplate       bool   `json:"is_template,omitempty"`
	IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
	IssueEventsUrl   string `json:"issue_events_url,omitempty"`
	IssuesUrl        string `json:"issues_url,omitempty"`
	KeysUrl          string `json:"keys_url,omitempty"`
	LabelsUrl        string `json:"labels_url,omitempty"`
	Language         string `json:"language,omitempty"`
	LanguagesUrl     string `json:"languages_url,omitempty"`
	MergesUrl        string `json:"merges_url,omitempty"`
	MilestonesUrl    string `json:"milestones_url,omitempty"`
	MirrorUrl        string `json:"mirror_url,omitempty"`
	Name             string `json:"name,omitempty"`
	NetworkCount     int64  `json:"network_count,omitempty"`
	NodeId           string `json:"node_id,omitempty"`
	NotificationsUrl string `json:"notifications_url,omitempty"`
	OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
	Owner            struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"owner,omitempty"`
	Permissions struct {
		Admin bool `json:"admin,omitempty"`
		Pull  bool `json:"pull,omitempty"`
		Push  bool `json:"push,omitempty"`
	} `json:"permissions,omitempty"`
	Private            bool        `json:"private,omitempty"`
	PullsUrl           string      `json:"pulls_url,omitempty"`
	PushedAt           string      `json:"pushed_at,omitempty"`
	ReleasesUrl        string      `json:"releases_url,omitempty"`
	Size               json.Number `json:"size,omitempty"`
	SshUrl             string      `json:"ssh_url,omitempty"`
	StargazersCount    int64       `json:"stargazers_count,omitempty"`
	StargazersUrl      string      `json:"stargazers_url,omitempty"`
	StatusesUrl        string      `json:"statuses_url,omitempty"`
	SubscribersCount   int64       `json:"subscribers_count,omitempty"`
	SubscribersUrl     string      `json:"subscribers_url,omitempty"`
	SubscriptionUrl    string      `json:"subscription_url,omitempty"`
	SvnUrl             string      `json:"svn_url,omitempty"`
	TagsUrl            string      `json:"tags_url,omitempty"`
	TeamsUrl           string      `json:"teams_url,omitempty"`
	TempCloneToken     string      `json:"temp_clone_token,omitempty"`
	TemplateRepository string      `json:"template_repository,omitempty"`
	Topics             []string    `json:"topics,omitempty"`
	TreesUrl           string      `json:"trees_url,omitempty"`
	UpdatedAt          string      `json:"updated_at,omitempty"`
	Url                string      `json:"url,omitempty"`
	Visibility         string      `json:"visibility,omitempty"`
	WatchersCount      int64       `json:"watchers_count,omitempty"`
}

/*
ActivityListReposStarredByUserReq builds requests for "activity/list-repos-starred-by-user"

List repositories starred by a user.

  GET /users/{username}/starred

https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
type ActivityListReposStarredByUserReq struct {
	Username string

	/*
	One of `created` (when the repository was starred) or `updated` (when it was
	last pushed to).
	*/
	Sort *string

	// One of `asc` (ascending) or `desc` (descending).
	Direction *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReposStarredByUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/starred", r.Username)
}

func (r *ActivityListReposStarredByUserReq) method() string {
	return "GET"
}

func (r *ActivityListReposStarredByUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Sort != nil {
		query.Set("sort", *r.Sort)
	}
	if r.Direction != nil {
		query.Set("direction", *r.Direction)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReposStarredByUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReposStarredByUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListReposStarredByUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListReposStarredByUserResponseBody200 is a response body for activity/list-repos-starred-by-user

API documentation: https://developer.github.com/v3/activity/starring/#list-repositories-starred-by-a-user
*/
type ActivityListReposStarredByUserResponseBody200 []struct {
	AllowMergeCommit bool   `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge bool   `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge bool   `json:"allow_squash_merge,omitempty"`
	ArchiveUrl       string `json:"archive_url,omitempty"`
	Archived         bool   `json:"archived,omitempty"`
	AssigneesUrl     string `json:"assignees_url,omitempty"`
	BlobsUrl         string `json:"blobs_url,omitempty"`
	BranchesUrl      string `json:"branches_url,omitempty"`
	CloneUrl         string `json:"clone_url,omitempty"`
	CollaboratorsUrl string `json:"collaborators_url,omitempty"`
	CommentsUrl      string `json:"comments_url,omitempty"`
	CommitsUrl       string `json:"commits_url,omitempty"`
	CompareUrl       string `json:"compare_url,omitempty"`
	ContentsUrl      string `json:"contents_url,omitempty"`
	ContributorsUrl  string `json:"contributors_url,omitempty"`
	CreatedAt        string `json:"created_at,omitempty"`
	DefaultBranch    string `json:"default_branch,omitempty"`
	DeploymentsUrl   string `json:"deployments_url,omitempty"`
	Description      string `json:"description,omitempty"`
	Disabled         bool   `json:"disabled,omitempty"`
	DownloadsUrl     string `json:"downloads_url,omitempty"`
	EventsUrl        string `json:"events_url,omitempty"`
	Fork             bool   `json:"fork,omitempty"`
	ForksCount       int64  `json:"forks_count,omitempty"`
	ForksUrl         string `json:"forks_url,omitempty"`
	FullName         string `json:"full_name,omitempty"`
	GitCommitsUrl    string `json:"git_commits_url,omitempty"`
	GitRefsUrl       string `json:"git_refs_url,omitempty"`
	GitTagsUrl       string `json:"git_tags_url,omitempty"`
	GitUrl           string `json:"git_url,omitempty"`
	HasDownloads     bool   `json:"has_downloads,omitempty"`
	HasIssues        bool   `json:"has_issues,omitempty"`
	HasPages         bool   `json:"has_pages,omitempty"`
	HasProjects      bool   `json:"has_projects,omitempty"`
	HasWiki          bool   `json:"has_wiki,omitempty"`
	Homepage         string `json:"homepage,omitempty"`
	HooksUrl         string `json:"hooks_url,omitempty"`
	HtmlUrl          string `json:"html_url,omitempty"`
	Id               int64  `json:"id,omitempty"`
	IsTemplate       bool   `json:"is_template,omitempty"`
	IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
	IssueEventsUrl   string `json:"issue_events_url,omitempty"`
	IssuesUrl        string `json:"issues_url,omitempty"`
	KeysUrl          string `json:"keys_url,omitempty"`
	LabelsUrl        string `json:"labels_url,omitempty"`
	Language         string `json:"language,omitempty"`
	LanguagesUrl     string `json:"languages_url,omitempty"`
	MergesUrl        string `json:"merges_url,omitempty"`
	MilestonesUrl    string `json:"milestones_url,omitempty"`
	MirrorUrl        string `json:"mirror_url,omitempty"`
	Name             string `json:"name,omitempty"`
	NetworkCount     int64  `json:"network_count,omitempty"`
	NodeId           string `json:"node_id,omitempty"`
	NotificationsUrl string `json:"notifications_url,omitempty"`
	OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
	Owner            struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"owner,omitempty"`
	Permissions struct {
		Admin bool `json:"admin,omitempty"`
		Pull  bool `json:"pull,omitempty"`
		Push  bool `json:"push,omitempty"`
	} `json:"permissions,omitempty"`
	Private            bool        `json:"private,omitempty"`
	PullsUrl           string      `json:"pulls_url,omitempty"`
	PushedAt           string      `json:"pushed_at,omitempty"`
	ReleasesUrl        string      `json:"releases_url,omitempty"`
	Size               json.Number `json:"size,omitempty"`
	SshUrl             string      `json:"ssh_url,omitempty"`
	StargazersCount    int64       `json:"stargazers_count,omitempty"`
	StargazersUrl      string      `json:"stargazers_url,omitempty"`
	StatusesUrl        string      `json:"statuses_url,omitempty"`
	SubscribersCount   int64       `json:"subscribers_count,omitempty"`
	SubscribersUrl     string      `json:"subscribers_url,omitempty"`
	SubscriptionUrl    string      `json:"subscription_url,omitempty"`
	SvnUrl             string      `json:"svn_url,omitempty"`
	TagsUrl            string      `json:"tags_url,omitempty"`
	TeamsUrl           string      `json:"teams_url,omitempty"`
	TempCloneToken     string      `json:"temp_clone_token,omitempty"`
	TemplateRepository string      `json:"template_repository,omitempty"`
	Topics             []string    `json:"topics,omitempty"`
	TreesUrl           string      `json:"trees_url,omitempty"`
	UpdatedAt          string      `json:"updated_at,omitempty"`
	Url                string      `json:"url,omitempty"`
	Visibility         string      `json:"visibility,omitempty"`
	WatchersCount      int64       `json:"watchers_count,omitempty"`
}

/*
ActivityListReposWatchedByUserReq builds requests for "activity/list-repos-watched-by-user"

List repositories watched by a user.

  GET /users/{username}/subscriptions

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
type ActivityListReposWatchedByUserReq struct {
	Username string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListReposWatchedByUserReq) urlPath() string {
	return fmt.Sprintf("/users/%v/subscriptions", r.Username)
}

func (r *ActivityListReposWatchedByUserReq) method() string {
	return "GET"
}

func (r *ActivityListReposWatchedByUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListReposWatchedByUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListReposWatchedByUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListReposWatchedByUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListReposWatchedByUserResponseBody200 is a response body for activity/list-repos-watched-by-user

API documentation: https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-a-user
*/
type ActivityListReposWatchedByUserResponseBody200 []struct {
	ArchiveUrl       string `json:"archive_url,omitempty"`
	Archived         bool   `json:"archived,omitempty"`
	AssigneesUrl     string `json:"assignees_url,omitempty"`
	BlobsUrl         string `json:"blobs_url,omitempty"`
	BranchesUrl      string `json:"branches_url,omitempty"`
	CloneUrl         string `json:"clone_url,omitempty"`
	CollaboratorsUrl string `json:"collaborators_url,omitempty"`
	CommentsUrl      string `json:"comments_url,omitempty"`
	CommitsUrl       string `json:"commits_url,omitempty"`
	CompareUrl       string `json:"compare_url,omitempty"`
	ContentsUrl      string `json:"contents_url,omitempty"`
	ContributorsUrl  string `json:"contributors_url,omitempty"`
	CreatedAt        string `json:"created_at,omitempty"`
	DefaultBranch    string `json:"default_branch,omitempty"`
	DeploymentsUrl   string `json:"deployments_url,omitempty"`
	Description      string `json:"description,omitempty"`
	Disabled         bool   `json:"disabled,omitempty"`
	DownloadsUrl     string `json:"downloads_url,omitempty"`
	EventsUrl        string `json:"events_url,omitempty"`
	Fork             bool   `json:"fork,omitempty"`
	ForksCount       int64  `json:"forks_count,omitempty"`
	ForksUrl         string `json:"forks_url,omitempty"`
	FullName         string `json:"full_name,omitempty"`
	GitCommitsUrl    string `json:"git_commits_url,omitempty"`
	GitRefsUrl       string `json:"git_refs_url,omitempty"`
	GitTagsUrl       string `json:"git_tags_url,omitempty"`
	GitUrl           string `json:"git_url,omitempty"`
	HasDownloads     bool   `json:"has_downloads,omitempty"`
	HasIssues        bool   `json:"has_issues,omitempty"`
	HasPages         bool   `json:"has_pages,omitempty"`
	HasProjects      bool   `json:"has_projects,omitempty"`
	HasWiki          bool   `json:"has_wiki,omitempty"`
	Homepage         string `json:"homepage,omitempty"`
	HooksUrl         string `json:"hooks_url,omitempty"`
	HtmlUrl          string `json:"html_url,omitempty"`
	Id               int64  `json:"id,omitempty"`
	IsTemplate       bool   `json:"is_template,omitempty"`
	IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
	IssueEventsUrl   string `json:"issue_events_url,omitempty"`
	IssuesUrl        string `json:"issues_url,omitempty"`
	KeysUrl          string `json:"keys_url,omitempty"`
	LabelsUrl        string `json:"labels_url,omitempty"`
	Language         string `json:"language,omitempty"`
	LanguagesUrl     string `json:"languages_url,omitempty"`
	License          struct {
		Key    string `json:"key,omitempty"`
		Name   string `json:"name,omitempty"`
		NodeId string `json:"node_id,omitempty"`
		SpdxId string `json:"spdx_id,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"license,omitempty"`
	MergesUrl        string `json:"merges_url,omitempty"`
	MilestonesUrl    string `json:"milestones_url,omitempty"`
	MirrorUrl        string `json:"mirror_url,omitempty"`
	Name             string `json:"name,omitempty"`
	NetworkCount     int64  `json:"network_count,omitempty"`
	NodeId           string `json:"node_id,omitempty"`
	NotificationsUrl string `json:"notifications_url,omitempty"`
	OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
	Owner            struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"owner,omitempty"`
	Permissions struct {
		Admin bool `json:"admin,omitempty"`
		Pull  bool `json:"pull,omitempty"`
		Push  bool `json:"push,omitempty"`
	} `json:"permissions,omitempty"`
	Private            bool        `json:"private,omitempty"`
	PullsUrl           string      `json:"pulls_url,omitempty"`
	PushedAt           string      `json:"pushed_at,omitempty"`
	ReleasesUrl        string      `json:"releases_url,omitempty"`
	Size               json.Number `json:"size,omitempty"`
	SshUrl             string      `json:"ssh_url,omitempty"`
	StargazersCount    int64       `json:"stargazers_count,omitempty"`
	StargazersUrl      string      `json:"stargazers_url,omitempty"`
	StatusesUrl        string      `json:"statuses_url,omitempty"`
	SubscribersCount   int64       `json:"subscribers_count,omitempty"`
	SubscribersUrl     string      `json:"subscribers_url,omitempty"`
	SubscriptionUrl    string      `json:"subscription_url,omitempty"`
	SvnUrl             string      `json:"svn_url,omitempty"`
	TagsUrl            string      `json:"tags_url,omitempty"`
	TeamsUrl           string      `json:"teams_url,omitempty"`
	TempCloneToken     string      `json:"temp_clone_token,omitempty"`
	TemplateRepository string      `json:"template_repository,omitempty"`
	Topics             []string    `json:"topics,omitempty"`
	TreesUrl           string      `json:"trees_url,omitempty"`
	UpdatedAt          string      `json:"updated_at,omitempty"`
	Url                string      `json:"url,omitempty"`
	Visibility         string      `json:"visibility,omitempty"`
	WatchersCount      int64       `json:"watchers_count,omitempty"`
}

/*
ActivityListStargazersForRepoReq builds requests for "activity/list-stargazers-for-repo"

List stargazers.

  GET /repos/{owner}/{repo}/stargazers

https://developer.github.com/v3/activity/starring/#list-stargazers
*/
type ActivityListStargazersForRepoReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListStargazersForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/stargazers", r.Owner, r.Repo)
}

func (r *ActivityListStargazersForRepoReq) method() string {
	return "GET"
}

func (r *ActivityListStargazersForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListStargazersForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListStargazersForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListStargazersForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListStargazersForRepoResponseBody200 is a response body for activity/list-stargazers-for-repo

API documentation: https://developer.github.com/v3/activity/starring/#list-stargazers
*/
type ActivityListStargazersForRepoResponseBody200 []struct {
	AvatarUrl         string `json:"avatar_url,omitempty"`
	EventsUrl         string `json:"events_url,omitempty"`
	FollowersUrl      string `json:"followers_url,omitempty"`
	FollowingUrl      string `json:"following_url,omitempty"`
	GistsUrl          string `json:"gists_url,omitempty"`
	GravatarId        string `json:"gravatar_id,omitempty"`
	HtmlUrl           string `json:"html_url,omitempty"`
	Id                int64  `json:"id,omitempty"`
	Login             string `json:"login,omitempty"`
	NodeId            string `json:"node_id,omitempty"`
	OrganizationsUrl  string `json:"organizations_url,omitempty"`
	ReceivedEventsUrl string `json:"received_events_url,omitempty"`
	ReposUrl          string `json:"repos_url,omitempty"`
	SiteAdmin         bool   `json:"site_admin,omitempty"`
	StarredUrl        string `json:"starred_url,omitempty"`
	SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
	Type              string `json:"type,omitempty"`
	Url               string `json:"url,omitempty"`
}

/*
ActivityListWatchedReposForAuthenticatedUserReq builds requests for "activity/list-watched-repos-for-authenticated-user"

List repositories watched by the authenticated user.

  GET /user/subscriptions

https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
type ActivityListWatchedReposForAuthenticatedUserReq struct {

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/subscriptions")
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) method() string {
	return "GET"
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListWatchedReposForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListWatchedReposForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListWatchedReposForAuthenticatedUserResponseBody200 is a response body for activity/list-watched-repos-for-authenticated-user

API documentation: https://developer.github.com/v3/activity/watching/#list-repositories-watched-by-the-authenticated-user
*/
type ActivityListWatchedReposForAuthenticatedUserResponseBody200 []struct {
	ArchiveUrl       string `json:"archive_url,omitempty"`
	Archived         bool   `json:"archived,omitempty"`
	AssigneesUrl     string `json:"assignees_url,omitempty"`
	BlobsUrl         string `json:"blobs_url,omitempty"`
	BranchesUrl      string `json:"branches_url,omitempty"`
	CloneUrl         string `json:"clone_url,omitempty"`
	CollaboratorsUrl string `json:"collaborators_url,omitempty"`
	CommentsUrl      string `json:"comments_url,omitempty"`
	CommitsUrl       string `json:"commits_url,omitempty"`
	CompareUrl       string `json:"compare_url,omitempty"`
	ContentsUrl      string `json:"contents_url,omitempty"`
	ContributorsUrl  string `json:"contributors_url,omitempty"`
	CreatedAt        string `json:"created_at,omitempty"`
	DefaultBranch    string `json:"default_branch,omitempty"`
	DeploymentsUrl   string `json:"deployments_url,omitempty"`
	Description      string `json:"description,omitempty"`
	Disabled         bool   `json:"disabled,omitempty"`
	DownloadsUrl     string `json:"downloads_url,omitempty"`
	EventsUrl        string `json:"events_url,omitempty"`
	Fork             bool   `json:"fork,omitempty"`
	ForksCount       int64  `json:"forks_count,omitempty"`
	ForksUrl         string `json:"forks_url,omitempty"`
	FullName         string `json:"full_name,omitempty"`
	GitCommitsUrl    string `json:"git_commits_url,omitempty"`
	GitRefsUrl       string `json:"git_refs_url,omitempty"`
	GitTagsUrl       string `json:"git_tags_url,omitempty"`
	GitUrl           string `json:"git_url,omitempty"`
	HasDownloads     bool   `json:"has_downloads,omitempty"`
	HasIssues        bool   `json:"has_issues,omitempty"`
	HasPages         bool   `json:"has_pages,omitempty"`
	HasProjects      bool   `json:"has_projects,omitempty"`
	HasWiki          bool   `json:"has_wiki,omitempty"`
	Homepage         string `json:"homepage,omitempty"`
	HooksUrl         string `json:"hooks_url,omitempty"`
	HtmlUrl          string `json:"html_url,omitempty"`
	Id               int64  `json:"id,omitempty"`
	IsTemplate       bool   `json:"is_template,omitempty"`
	IssueCommentUrl  string `json:"issue_comment_url,omitempty"`
	IssueEventsUrl   string `json:"issue_events_url,omitempty"`
	IssuesUrl        string `json:"issues_url,omitempty"`
	KeysUrl          string `json:"keys_url,omitempty"`
	LabelsUrl        string `json:"labels_url,omitempty"`
	Language         string `json:"language,omitempty"`
	LanguagesUrl     string `json:"languages_url,omitempty"`
	License          struct {
		Key    string `json:"key,omitempty"`
		Name   string `json:"name,omitempty"`
		NodeId string `json:"node_id,omitempty"`
		SpdxId string `json:"spdx_id,omitempty"`
		Url    string `json:"url,omitempty"`
	} `json:"license,omitempty"`
	MergesUrl        string `json:"merges_url,omitempty"`
	MilestonesUrl    string `json:"milestones_url,omitempty"`
	MirrorUrl        string `json:"mirror_url,omitempty"`
	Name             string `json:"name,omitempty"`
	NetworkCount     int64  `json:"network_count,omitempty"`
	NodeId           string `json:"node_id,omitempty"`
	NotificationsUrl string `json:"notifications_url,omitempty"`
	OpenIssuesCount  int64  `json:"open_issues_count,omitempty"`
	Owner            struct {
		AvatarUrl         string `json:"avatar_url,omitempty"`
		EventsUrl         string `json:"events_url,omitempty"`
		FollowersUrl      string `json:"followers_url,omitempty"`
		FollowingUrl      string `json:"following_url,omitempty"`
		GistsUrl          string `json:"gists_url,omitempty"`
		GravatarId        string `json:"gravatar_id,omitempty"`
		HtmlUrl           string `json:"html_url,omitempty"`
		Id                int64  `json:"id,omitempty"`
		Login             string `json:"login,omitempty"`
		NodeId            string `json:"node_id,omitempty"`
		OrganizationsUrl  string `json:"organizations_url,omitempty"`
		ReceivedEventsUrl string `json:"received_events_url,omitempty"`
		ReposUrl          string `json:"repos_url,omitempty"`
		SiteAdmin         bool   `json:"site_admin,omitempty"`
		StarredUrl        string `json:"starred_url,omitempty"`
		SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
		Type              string `json:"type,omitempty"`
		Url               string `json:"url,omitempty"`
	} `json:"owner,omitempty"`
	Permissions struct {
		Admin bool `json:"admin,omitempty"`
		Pull  bool `json:"pull,omitempty"`
		Push  bool `json:"push,omitempty"`
	} `json:"permissions,omitempty"`
	Private            bool        `json:"private,omitempty"`
	PullsUrl           string      `json:"pulls_url,omitempty"`
	PushedAt           string      `json:"pushed_at,omitempty"`
	ReleasesUrl        string      `json:"releases_url,omitempty"`
	Size               json.Number `json:"size,omitempty"`
	SshUrl             string      `json:"ssh_url,omitempty"`
	StargazersCount    int64       `json:"stargazers_count,omitempty"`
	StargazersUrl      string      `json:"stargazers_url,omitempty"`
	StatusesUrl        string      `json:"statuses_url,omitempty"`
	SubscribersCount   int64       `json:"subscribers_count,omitempty"`
	SubscribersUrl     string      `json:"subscribers_url,omitempty"`
	SubscriptionUrl    string      `json:"subscription_url,omitempty"`
	SvnUrl             string      `json:"svn_url,omitempty"`
	TagsUrl            string      `json:"tags_url,omitempty"`
	TeamsUrl           string      `json:"teams_url,omitempty"`
	TempCloneToken     string      `json:"temp_clone_token,omitempty"`
	TemplateRepository string      `json:"template_repository,omitempty"`
	Topics             []string    `json:"topics,omitempty"`
	TreesUrl           string      `json:"trees_url,omitempty"`
	UpdatedAt          string      `json:"updated_at,omitempty"`
	Url                string      `json:"url,omitempty"`
	Visibility         string      `json:"visibility,omitempty"`
	WatchersCount      int64       `json:"watchers_count,omitempty"`
}

/*
ActivityListWatchersForRepoReq builds requests for "activity/list-watchers-for-repo"

List watchers.

  GET /repos/{owner}/{repo}/subscribers

https://developer.github.com/v3/activity/watching/#list-watchers
*/
type ActivityListWatchersForRepoReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActivityListWatchersForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscribers", r.Owner, r.Repo)
}

func (r *ActivityListWatchersForRepoReq) method() string {
	return "GET"
}

func (r *ActivityListWatchersForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActivityListWatchersForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityListWatchersForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityListWatchersForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityListWatchersForRepoResponseBody200 is a response body for activity/list-watchers-for-repo

API documentation: https://developer.github.com/v3/activity/watching/#list-watchers
*/
type ActivityListWatchersForRepoResponseBody200 []struct {
	AvatarUrl         string `json:"avatar_url,omitempty"`
	EventsUrl         string `json:"events_url,omitempty"`
	FollowersUrl      string `json:"followers_url,omitempty"`
	FollowingUrl      string `json:"following_url,omitempty"`
	GistsUrl          string `json:"gists_url,omitempty"`
	GravatarId        string `json:"gravatar_id,omitempty"`
	HtmlUrl           string `json:"html_url,omitempty"`
	Id                int64  `json:"id,omitempty"`
	Login             string `json:"login,omitempty"`
	NodeId            string `json:"node_id,omitempty"`
	OrganizationsUrl  string `json:"organizations_url,omitempty"`
	ReceivedEventsUrl string `json:"received_events_url,omitempty"`
	ReposUrl          string `json:"repos_url,omitempty"`
	SiteAdmin         bool   `json:"site_admin,omitempty"`
	StarredUrl        string `json:"starred_url,omitempty"`
	SubscriptionsUrl  string `json:"subscriptions_url,omitempty"`
	Type              string `json:"type,omitempty"`
	Url               string `json:"url,omitempty"`
}

/*
ActivityMarkNotificationsAsReadReq builds requests for "activity/mark-notifications-as-read"

Mark notifications as read.

  PUT /notifications

https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
type ActivityMarkNotificationsAsReadReq struct {
	RequestBody ActivityMarkNotificationsAsReadReqBody
}

func (r *ActivityMarkNotificationsAsReadReq) urlPath() string {
	return fmt.Sprintf("/notifications")
}

func (r *ActivityMarkNotificationsAsReadReq) method() string {
	return "PUT"
}

func (r *ActivityMarkNotificationsAsReadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityMarkNotificationsAsReadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityMarkNotificationsAsReadReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActivityMarkNotificationsAsReadReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityMarkNotificationsAsReadReqBody is a request body for activity/mark-notifications-as-read

API documentation: https://developer.github.com/v3/activity/notifications/#mark-notifications-as-read
*/
type ActivityMarkNotificationsAsReadReqBody struct {

	/*
	   Describes the last point that notifications were checked. Anything updated since
	   this time will not be marked as read. If you omit this parameter, all
	   notifications are marked as read. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	   Default: The current timestamp.
	*/
	LastReadAt *string `json:"last_read_at,omitempty"`
}

/*
ActivityMarkRepoNotificationsAsReadReq builds requests for "activity/mark-repo-notifications-as-read"

Mark repository notifications as read.

  PUT /repos/{owner}/{repo}/notifications

https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
type ActivityMarkRepoNotificationsAsReadReq struct {
	Owner       string
	Repo        string
	RequestBody ActivityMarkRepoNotificationsAsReadReqBody
}

func (r *ActivityMarkRepoNotificationsAsReadReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/notifications", r.Owner, r.Repo)
}

func (r *ActivityMarkRepoNotificationsAsReadReq) method() string {
	return "PUT"
}

func (r *ActivityMarkRepoNotificationsAsReadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityMarkRepoNotificationsAsReadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityMarkRepoNotificationsAsReadReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActivityMarkRepoNotificationsAsReadReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityMarkRepoNotificationsAsReadReqBody is a request body for activity/mark-repo-notifications-as-read

API documentation: https://developer.github.com/v3/activity/notifications/#mark-repository-notifications-as-read
*/
type ActivityMarkRepoNotificationsAsReadReqBody struct {

	/*
	   Describes the last point that notifications were checked. Anything updated since
	   this time will not be marked as read. If you omit this parameter, all
	   notifications are marked as read. This is a timestamp in [ISO
	   8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	   Default: The current timestamp.
	*/
	LastReadAt *string `json:"last_read_at,omitempty"`
}

/*
ActivityMarkThreadAsReadReq builds requests for "activity/mark-thread-as-read"

Mark a thread as read.

  PATCH /notifications/threads/{thread_id}

https://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read
*/
type ActivityMarkThreadAsReadReq struct {
	ThreadId int64
}

func (r *ActivityMarkThreadAsReadReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v", r.ThreadId)
}

func (r *ActivityMarkThreadAsReadReq) method() string {
	return "PATCH"
}

func (r *ActivityMarkThreadAsReadReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityMarkThreadAsReadReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityMarkThreadAsReadReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityMarkThreadAsReadReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivitySetRepoSubscriptionReq builds requests for "activity/set-repo-subscription"

Set a repository subscription.

  PUT /repos/{owner}/{repo}/subscription

https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionReq struct {
	Owner       string
	Repo        string
	RequestBody ActivitySetRepoSubscriptionReqBody
}

func (r *ActivitySetRepoSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/subscription", r.Owner, r.Repo)
}

func (r *ActivitySetRepoSubscriptionReq) method() string {
	return "PUT"
}

func (r *ActivitySetRepoSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivitySetRepoSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivitySetRepoSubscriptionReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActivitySetRepoSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivitySetRepoSubscriptionReqBody is a request body for activity/set-repo-subscription

API documentation: https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionReqBody struct {

	// Determines if all notifications should be blocked from this repository.
	Ignored *bool `json:"ignored,omitempty"`

	// Determines if notifications should be received from this repository.
	Subscribed *bool `json:"subscribed,omitempty"`
}

/*
ActivitySetRepoSubscriptionResponseBody200 is a response body for activity/set-repo-subscription

API documentation: https://developer.github.com/v3/activity/watching/#set-a-repository-subscription
*/
type ActivitySetRepoSubscriptionResponseBody200 struct {
	CreatedAt     string `json:"created_at,omitempty"`
	Ignored       bool   `json:"ignored,omitempty"`
	Reason        string `json:"reason,omitempty"`
	RepositoryUrl string `json:"repository_url,omitempty"`
	Subscribed    bool   `json:"subscribed,omitempty"`
	Url           string `json:"url,omitempty"`
}

/*
ActivitySetThreadSubscriptionReq builds requests for "activity/set-thread-subscription"

Set a thread subscription.

  PUT /notifications/threads/{thread_id}/subscription

https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionReq struct {
	ThreadId    int64
	RequestBody ActivitySetThreadSubscriptionReqBody
}

func (r *ActivitySetThreadSubscriptionReq) urlPath() string {
	return fmt.Sprintf("/notifications/threads/%v/subscription", r.ThreadId)
}

func (r *ActivitySetThreadSubscriptionReq) method() string {
	return "PUT"
}

func (r *ActivitySetThreadSubscriptionReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivitySetThreadSubscriptionReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivitySetThreadSubscriptionReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActivitySetThreadSubscriptionReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivitySetThreadSubscriptionReqBody is a request body for activity/set-thread-subscription

API documentation: https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionReqBody struct {

	/*
	   Unsubscribes and subscribes you to a conversation. Set `ignored` to `true` to
	   block all notifications from this thread.
	*/
	Ignored *bool `json:"ignored,omitempty"`
}

/*
ActivitySetThreadSubscriptionResponseBody200 is a response body for activity/set-thread-subscription

API documentation: https://developer.github.com/v3/activity/notifications/#set-a-thread-subscription
*/
type ActivitySetThreadSubscriptionResponseBody200 struct {
	CreatedAt  string `json:"created_at,omitempty"`
	Ignored    bool   `json:"ignored,omitempty"`
	Reason     string `json:"reason,omitempty"`
	Subscribed bool   `json:"subscribed,omitempty"`
	ThreadUrl  string `json:"thread_url,omitempty"`
	Url        string `json:"url,omitempty"`
}

/*
ActivityStarRepoForAuthenticatedUserReq builds requests for "activity/star-repo-for-authenticated-user"

Star a repository for the authenticated user.

  PUT /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#star-a-repository-for-the-authenticated-user
*/
type ActivityStarRepoForAuthenticatedUserReq struct {
	Owner string
	Repo  string
}

func (r *ActivityStarRepoForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred/%v/%v", r.Owner, r.Repo)
}

func (r *ActivityStarRepoForAuthenticatedUserReq) method() string {
	return "PUT"
}

func (r *ActivityStarRepoForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityStarRepoForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityStarRepoForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityStarRepoForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActivityUnstarRepoForAuthenticatedUserReq builds requests for "activity/unstar-repo-for-authenticated-user"

Unstar a repository for the authenticated user.

  DELETE /user/starred/{owner}/{repo}

https://developer.github.com/v3/activity/starring/#unstar-a-repository-for-the-authenticated-user
*/
type ActivityUnstarRepoForAuthenticatedUserReq struct {
	Owner string
	Repo  string
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) urlPath() string {
	return fmt.Sprintf("/user/starred/%v/%v", r.Owner, r.Repo)
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) method() string {
	return "DELETE"
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActivityUnstarRepoForAuthenticatedUserReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActivityUnstarRepoForAuthenticatedUserReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}
