// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	components "github.com/willabides/octo-go/components"
	"net/http"
	"net/url"
	"strconv"
)

/*
ActionsAddSelectedRepoToOrgSecretReq builds requests for "actions/add-selected-repo-to-org-secret"

Add selected repository to an organization secret.

  PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}

https://developer.github.com/v3/actions/secrets/#add-selected-repository-to-an-organization-secret
*/
type ActionsAddSelectedRepoToOrgSecretReq struct {
	Org          string
	SecretName   string
	RepositoryId int64
}

func (r *ActionsAddSelectedRepoToOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v/repositories/%v", r.Org, r.SecretName, r.RepositoryId)
}

func (r *ActionsAddSelectedRepoToOrgSecretReq) method() string {
	return "PUT"
}

func (r *ActionsAddSelectedRepoToOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsAddSelectedRepoToOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsAddSelectedRepoToOrgSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsAddSelectedRepoToOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCancelWorkflowRunReq builds requests for "actions/cancel-workflow-run"

Cancel a workflow run.

  POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel

https://developer.github.com/v3/actions/workflow-runs/#cancel-a-workflow-run
*/
type ActionsCancelWorkflowRunReq struct {
	Owner string
	Repo  string
	RunId int64
}

func (r *ActionsCancelWorkflowRunReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/cancel", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsCancelWorkflowRunReq) method() string {
	return "POST"
}

func (r *ActionsCancelWorkflowRunReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCancelWorkflowRunReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCancelWorkflowRunReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsCancelWorkflowRunReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateOrUpdateOrgSecretReq builds requests for "actions/create-or-update-org-secret"

Create or update an organization secret.

  PUT /orgs/{org}/actions/secrets/{secret_name}

https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret
*/
type ActionsCreateOrUpdateOrgSecretReq struct {
	Org         string
	SecretName  string
	RequestBody ActionsCreateOrUpdateOrgSecretReqBody
}

func (r *ActionsCreateOrUpdateOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v", r.Org, r.SecretName)
}

func (r *ActionsCreateOrUpdateOrgSecretReq) method() string {
	return "PUT"
}

func (r *ActionsCreateOrUpdateOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCreateOrUpdateOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCreateOrUpdateOrgSecretReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActionsCreateOrUpdateOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateOrUpdateOrgSecretReqBody is a request body for actions/create-or-update-org-secret

API documentation: https://developer.github.com/v3/actions/secrets/#create-or-update-an-organization-secret
*/
type ActionsCreateOrUpdateOrgSecretReqBody struct {

	/*
	   Value for your secret, encrypted with
	   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using
	   the public key retrieved from the [Get an organization public
	   key](https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key)
	   endpoint.
	*/
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`

	/*
	   An array of repository ids that can access the organization secret. You can only
	   provide a list of repository ids when the `visibility` is set to `selected`. You
	   can manage the list of selected repositories using the [List selected
	   repositories for an organization
	   secret](https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret),
	   [Set selected repositories for an organization
	   secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret),
	   and [Remove selected repository from an organization
	   secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret)
	   endpoints.
	*/
	SelectedRepositoryIds []string `json:"selected_repository_ids,omitempty"`

	/*
	   Configures the access that repositories have to the organization secret. Can be
	   one of:
	   \- `all` - All repositories in an organization can access the secret.
	   \- `private` - Private repositories in an organization can access the secret.
	   \- `selected` - Only specific repositories can access the secret.
	*/
	Visibility *string `json:"visibility,omitempty"`
}

/*
ActionsCreateOrUpdateRepoSecretReq builds requests for "actions/create-or-update-repo-secret"

Create or update a repository secret.

  PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}

https://developer.github.com/v3/actions/secrets/#create-or-update-a-repository-secret
*/
type ActionsCreateOrUpdateRepoSecretReq struct {
	Owner       string
	Repo        string
	SecretName  string
	RequestBody ActionsCreateOrUpdateRepoSecretReqBody
}

func (r *ActionsCreateOrUpdateRepoSecretReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/secrets/%v", r.Owner, r.Repo, r.SecretName)
}

func (r *ActionsCreateOrUpdateRepoSecretReq) method() string {
	return "PUT"
}

func (r *ActionsCreateOrUpdateRepoSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCreateOrUpdateRepoSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCreateOrUpdateRepoSecretReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActionsCreateOrUpdateRepoSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateOrUpdateRepoSecretReqBody is a request body for actions/create-or-update-repo-secret

API documentation: https://developer.github.com/v3/actions/secrets/#create-or-update-a-repository-secret
*/
type ActionsCreateOrUpdateRepoSecretReqBody struct {

	/*
	   Value for your secret, encrypted with
	   [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using
	   the public key retrieved from the [Get a repository public
	   key](https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key)
	   endpoint.
	*/
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyId *string `json:"key_id,omitempty"`
}

/*
ActionsCreateRegistrationTokenForOrgReq builds requests for "actions/create-registration-token-for-org"

Create a registration token for an organization.

  POST /orgs/{org}/actions/runners/registration-token

https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization
*/
type ActionsCreateRegistrationTokenForOrgReq struct {
	Org string
}

func (r *ActionsCreateRegistrationTokenForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/runners/registration-token", r.Org)
}

func (r *ActionsCreateRegistrationTokenForOrgReq) method() string {
	return "POST"
}

func (r *ActionsCreateRegistrationTokenForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCreateRegistrationTokenForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCreateRegistrationTokenForOrgReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsCreateRegistrationTokenForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateRegistrationTokenForOrgResponseBody201 is a response body for actions/create-registration-token-for-org

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-an-organization
*/
type ActionsCreateRegistrationTokenForOrgResponseBody201 struct {
	components.AuthenticationToken
}

/*
ActionsCreateRegistrationTokenForRepoReq builds requests for "actions/create-registration-token-for-repo"

Create a registration token for a repository.

  POST /repos/{owner}/{repo}/actions/runners/registration-token

https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository
*/
type ActionsCreateRegistrationTokenForRepoReq struct {
	Owner string
	Repo  string
}

func (r *ActionsCreateRegistrationTokenForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runners/registration-token", r.Owner, r.Repo)
}

func (r *ActionsCreateRegistrationTokenForRepoReq) method() string {
	return "POST"
}

func (r *ActionsCreateRegistrationTokenForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCreateRegistrationTokenForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCreateRegistrationTokenForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsCreateRegistrationTokenForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateRegistrationTokenForRepoResponseBody201 is a response body for actions/create-registration-token-for-repo

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#create-a-registration-token-for-a-repository
*/
type ActionsCreateRegistrationTokenForRepoResponseBody201 struct {
	components.AuthenticationToken
}

/*
ActionsCreateRemoveTokenForOrgReq builds requests for "actions/create-remove-token-for-org"

Create a remove token for an organization.

  POST /orgs/{org}/actions/runners/remove-token

https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization
*/
type ActionsCreateRemoveTokenForOrgReq struct {
	Org string
}

func (r *ActionsCreateRemoveTokenForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/runners/remove-token", r.Org)
}

func (r *ActionsCreateRemoveTokenForOrgReq) method() string {
	return "POST"
}

func (r *ActionsCreateRemoveTokenForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCreateRemoveTokenForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCreateRemoveTokenForOrgReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsCreateRemoveTokenForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateRemoveTokenForOrgResponseBody201 is a response body for actions/create-remove-token-for-org

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-an-organization
*/
type ActionsCreateRemoveTokenForOrgResponseBody201 struct {
	components.AuthenticationToken
}

/*
ActionsCreateRemoveTokenForRepoReq builds requests for "actions/create-remove-token-for-repo"

Create a remove token for a repository.

  POST /repos/{owner}/{repo}/actions/runners/remove-token

https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository
*/
type ActionsCreateRemoveTokenForRepoReq struct {
	Owner string
	Repo  string
}

func (r *ActionsCreateRemoveTokenForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runners/remove-token", r.Owner, r.Repo)
}

func (r *ActionsCreateRemoveTokenForRepoReq) method() string {
	return "POST"
}

func (r *ActionsCreateRemoveTokenForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsCreateRemoveTokenForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsCreateRemoveTokenForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsCreateRemoveTokenForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsCreateRemoveTokenForRepoResponseBody201 is a response body for actions/create-remove-token-for-repo

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#create-a-remove-token-for-a-repository
*/
type ActionsCreateRemoveTokenForRepoResponseBody201 struct {
	components.AuthenticationToken
}

/*
ActionsDeleteArtifactReq builds requests for "actions/delete-artifact"

Delete an artifact.

  DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}

https://developer.github.com/v3/actions/artifacts/#delete-an-artifact
*/
type ActionsDeleteArtifactReq struct {
	Owner      string
	Repo       string
	ArtifactId int64
}

func (r *ActionsDeleteArtifactReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/artifacts/%v", r.Owner, r.Repo, r.ArtifactId)
}

func (r *ActionsDeleteArtifactReq) method() string {
	return "DELETE"
}

func (r *ActionsDeleteArtifactReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDeleteArtifactReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDeleteArtifactReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDeleteArtifactReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDeleteOrgSecretReq builds requests for "actions/delete-org-secret"

Delete an organization secret.

  DELETE /orgs/{org}/actions/secrets/{secret_name}

https://developer.github.com/v3/actions/secrets/#delete-an-organization-secret
*/
type ActionsDeleteOrgSecretReq struct {
	Org        string
	SecretName string
}

func (r *ActionsDeleteOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v", r.Org, r.SecretName)
}

func (r *ActionsDeleteOrgSecretReq) method() string {
	return "DELETE"
}

func (r *ActionsDeleteOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDeleteOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDeleteOrgSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDeleteOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDeleteRepoSecretReq builds requests for "actions/delete-repo-secret"

Delete a repository secret.

  DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}

https://developer.github.com/v3/actions/secrets/#delete-a-repository-secret
*/
type ActionsDeleteRepoSecretReq struct {
	Owner      string
	Repo       string
	SecretName string
}

func (r *ActionsDeleteRepoSecretReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/secrets/%v", r.Owner, r.Repo, r.SecretName)
}

func (r *ActionsDeleteRepoSecretReq) method() string {
	return "DELETE"
}

func (r *ActionsDeleteRepoSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDeleteRepoSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDeleteRepoSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDeleteRepoSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDeleteSelfHostedRunnerFromOrgReq builds requests for "actions/delete-self-hosted-runner-from-org"

Delete a self-hosted runner from an organization.

  DELETE /orgs/{org}/actions/runners/{runner_id}

https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-an-organization
*/
type ActionsDeleteSelfHostedRunnerFromOrgReq struct {
	Org      string
	RunnerId int64
}

func (r *ActionsDeleteSelfHostedRunnerFromOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/runners/%v", r.Org, r.RunnerId)
}

func (r *ActionsDeleteSelfHostedRunnerFromOrgReq) method() string {
	return "DELETE"
}

func (r *ActionsDeleteSelfHostedRunnerFromOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDeleteSelfHostedRunnerFromOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDeleteSelfHostedRunnerFromOrgReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDeleteSelfHostedRunnerFromOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDeleteSelfHostedRunnerFromRepoReq builds requests for "actions/delete-self-hosted-runner-from-repo"

Delete a self-hosted runner from a repository.

  DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}

https://developer.github.com/v3/actions/self-hosted-runners/#delete-a-self-hosted-runner-from-a-repository
*/
type ActionsDeleteSelfHostedRunnerFromRepoReq struct {
	Owner    string
	Repo     string
	RunnerId int64
}

func (r *ActionsDeleteSelfHostedRunnerFromRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runners/%v", r.Owner, r.Repo, r.RunnerId)
}

func (r *ActionsDeleteSelfHostedRunnerFromRepoReq) method() string {
	return "DELETE"
}

func (r *ActionsDeleteSelfHostedRunnerFromRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDeleteSelfHostedRunnerFromRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDeleteSelfHostedRunnerFromRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDeleteSelfHostedRunnerFromRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDeleteWorkflowRunLogsReq builds requests for "actions/delete-workflow-run-logs"

Delete workflow run logs.

  DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs

https://developer.github.com/v3/actions/workflow-runs/#delete-workflow-run-logs
*/
type ActionsDeleteWorkflowRunLogsReq struct {
	Owner string
	Repo  string
	RunId int64
}

func (r *ActionsDeleteWorkflowRunLogsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/logs", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsDeleteWorkflowRunLogsReq) method() string {
	return "DELETE"
}

func (r *ActionsDeleteWorkflowRunLogsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDeleteWorkflowRunLogsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDeleteWorkflowRunLogsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDeleteWorkflowRunLogsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDownloadArtifactReq builds requests for "actions/download-artifact"

Download an artifact.

  GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}

https://developer.github.com/v3/actions/artifacts/#download-an-artifact
*/
type ActionsDownloadArtifactReq struct {
	Owner         string
	Repo          string
	ArtifactId    int64
	ArchiveFormat string
}

func (r *ActionsDownloadArtifactReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/artifacts/%v/%v", r.Owner, r.Repo, r.ArtifactId, r.ArchiveFormat)
}

func (r *ActionsDownloadArtifactReq) method() string {
	return "GET"
}

func (r *ActionsDownloadArtifactReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDownloadArtifactReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDownloadArtifactReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDownloadArtifactReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDownloadWorkflowJobLogsReq builds requests for "actions/download-workflow-job-logs"

Download workflow job logs.

  GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs

https://developer.github.com/v3/actions/workflow-jobs/#download-workflow-job-logs
*/
type ActionsDownloadWorkflowJobLogsReq struct {
	Owner string
	Repo  string
	JobId int64
}

func (r *ActionsDownloadWorkflowJobLogsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/jobs/%v/logs", r.Owner, r.Repo, r.JobId)
}

func (r *ActionsDownloadWorkflowJobLogsReq) method() string {
	return "GET"
}

func (r *ActionsDownloadWorkflowJobLogsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDownloadWorkflowJobLogsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDownloadWorkflowJobLogsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDownloadWorkflowJobLogsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsDownloadWorkflowRunLogsReq builds requests for "actions/download-workflow-run-logs"

Download workflow run logs.

  GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs

https://developer.github.com/v3/actions/workflow-runs/#download-workflow-run-logs
*/
type ActionsDownloadWorkflowRunLogsReq struct {
	Owner string
	Repo  string
	RunId int64
}

func (r *ActionsDownloadWorkflowRunLogsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/logs", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsDownloadWorkflowRunLogsReq) method() string {
	return "GET"
}

func (r *ActionsDownloadWorkflowRunLogsReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsDownloadWorkflowRunLogsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsDownloadWorkflowRunLogsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsDownloadWorkflowRunLogsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetArtifactReq builds requests for "actions/get-artifact"

Get an artifact.

  GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}

https://developer.github.com/v3/actions/artifacts/#get-an-artifact
*/
type ActionsGetArtifactReq struct {
	Owner      string
	Repo       string
	ArtifactId int64
}

func (r *ActionsGetArtifactReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/artifacts/%v", r.Owner, r.Repo, r.ArtifactId)
}

func (r *ActionsGetArtifactReq) method() string {
	return "GET"
}

func (r *ActionsGetArtifactReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetArtifactReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetArtifactReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetArtifactReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetArtifactResponseBody200 is a response body for actions/get-artifact

API documentation: https://developer.github.com/v3/actions/artifacts/#get-an-artifact
*/
type ActionsGetArtifactResponseBody200 struct {
	components.Artifact
}

/*
ActionsGetOrgPublicKeyReq builds requests for "actions/get-org-public-key"

Get an organization public key.

  GET /orgs/{org}/actions/secrets/public-key

https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key
*/
type ActionsGetOrgPublicKeyReq struct {
	Org string
}

func (r *ActionsGetOrgPublicKeyReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/public-key", r.Org)
}

func (r *ActionsGetOrgPublicKeyReq) method() string {
	return "GET"
}

func (r *ActionsGetOrgPublicKeyReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetOrgPublicKeyReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetOrgPublicKeyReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetOrgPublicKeyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetOrgPublicKeyResponseBody200 is a response body for actions/get-org-public-key

API documentation: https://developer.github.com/v3/actions/secrets/#get-an-organization-public-key
*/
type ActionsGetOrgPublicKeyResponseBody200 struct {
	components.ActionsPublicKey
}

/*
ActionsGetOrgSecretReq builds requests for "actions/get-org-secret"

Get an organization secret.

  GET /orgs/{org}/actions/secrets/{secret_name}

https://developer.github.com/v3/actions/secrets/#get-an-organization-secret
*/
type ActionsGetOrgSecretReq struct {
	Org        string
	SecretName string
}

func (r *ActionsGetOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v", r.Org, r.SecretName)
}

func (r *ActionsGetOrgSecretReq) method() string {
	return "GET"
}

func (r *ActionsGetOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetOrgSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetOrgSecretResponseBody200 is a response body for actions/get-org-secret

API documentation: https://developer.github.com/v3/actions/secrets/#get-an-organization-secret
*/
type ActionsGetOrgSecretResponseBody200 struct {
	components.OrganizationActionsSecret
}

/*
ActionsGetRepoPublicKeyReq builds requests for "actions/get-repo-public-key"

Get a repository public key.

  GET /repos/{owner}/{repo}/actions/secrets/public-key

https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key
*/
type ActionsGetRepoPublicKeyReq struct {
	Owner string
	Repo  string
}

func (r *ActionsGetRepoPublicKeyReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/secrets/public-key", r.Owner, r.Repo)
}

func (r *ActionsGetRepoPublicKeyReq) method() string {
	return "GET"
}

func (r *ActionsGetRepoPublicKeyReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetRepoPublicKeyReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetRepoPublicKeyReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetRepoPublicKeyReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetRepoPublicKeyResponseBody200 is a response body for actions/get-repo-public-key

API documentation: https://developer.github.com/v3/actions/secrets/#get-a-repository-public-key
*/
type ActionsGetRepoPublicKeyResponseBody200 struct {
	components.ActionsPublicKey
}

/*
ActionsGetRepoSecretReq builds requests for "actions/get-repo-secret"

Get a repository secret.

  GET /repos/{owner}/{repo}/actions/secrets/{secret_name}

https://developer.github.com/v3/actions/secrets/#get-a-repository-secret
*/
type ActionsGetRepoSecretReq struct {
	Owner      string
	Repo       string
	SecretName string
}

func (r *ActionsGetRepoSecretReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/secrets/%v", r.Owner, r.Repo, r.SecretName)
}

func (r *ActionsGetRepoSecretReq) method() string {
	return "GET"
}

func (r *ActionsGetRepoSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetRepoSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetRepoSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetRepoSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetRepoSecretResponseBody200 is a response body for actions/get-repo-secret

API documentation: https://developer.github.com/v3/actions/secrets/#get-a-repository-secret
*/
type ActionsGetRepoSecretResponseBody200 struct {
	components.ActionsSecret
}

/*
ActionsGetSelfHostedRunnerForOrgReq builds requests for "actions/get-self-hosted-runner-for-org"

Get a self-hosted runner for an organization.

  GET /orgs/{org}/actions/runners/{runner_id}

https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization
*/
type ActionsGetSelfHostedRunnerForOrgReq struct {
	Org      string
	RunnerId int64
}

func (r *ActionsGetSelfHostedRunnerForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/runners/%v", r.Org, r.RunnerId)
}

func (r *ActionsGetSelfHostedRunnerForOrgReq) method() string {
	return "GET"
}

func (r *ActionsGetSelfHostedRunnerForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetSelfHostedRunnerForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetSelfHostedRunnerForOrgReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetSelfHostedRunnerForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetSelfHostedRunnerForOrgResponseBody200 is a response body for actions/get-self-hosted-runner-for-org

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-an-organization
*/
type ActionsGetSelfHostedRunnerForOrgResponseBody200 struct {
	components.Runner
}

/*
ActionsGetSelfHostedRunnerForRepoReq builds requests for "actions/get-self-hosted-runner-for-repo"

Get a self-hosted runner for a repository.

  GET /repos/{owner}/{repo}/actions/runners/{runner_id}

https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository
*/
type ActionsGetSelfHostedRunnerForRepoReq struct {
	Owner    string
	Repo     string
	RunnerId int64
}

func (r *ActionsGetSelfHostedRunnerForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runners/%v", r.Owner, r.Repo, r.RunnerId)
}

func (r *ActionsGetSelfHostedRunnerForRepoReq) method() string {
	return "GET"
}

func (r *ActionsGetSelfHostedRunnerForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetSelfHostedRunnerForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetSelfHostedRunnerForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetSelfHostedRunnerForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetSelfHostedRunnerForRepoResponseBody200 is a response body for actions/get-self-hosted-runner-for-repo

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#get-a-self-hosted-runner-for-a-repository
*/
type ActionsGetSelfHostedRunnerForRepoResponseBody200 struct {
	components.Runner
}

/*
ActionsGetWorkflowReq builds requests for "actions/get-workflow"

Get a workflow.

  GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}

https://developer.github.com/v3/actions/workflows/#get-a-workflow
*/
type ActionsGetWorkflowReq struct {
	Owner      string
	Repo       string
	WorkflowId int64
}

func (r *ActionsGetWorkflowReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/workflows/%v", r.Owner, r.Repo, r.WorkflowId)
}

func (r *ActionsGetWorkflowReq) method() string {
	return "GET"
}

func (r *ActionsGetWorkflowReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetWorkflowReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetWorkflowReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetWorkflowReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetWorkflowResponseBody200 is a response body for actions/get-workflow

API documentation: https://developer.github.com/v3/actions/workflows/#get-a-workflow
*/
type ActionsGetWorkflowResponseBody200 struct {
	components.Workflow
}

/*
ActionsGetWorkflowJobReq builds requests for "actions/get-workflow-job"

Get a workflow job.

  GET /repos/{owner}/{repo}/actions/jobs/{job_id}

https://developer.github.com/v3/actions/workflow-jobs/#get-a-workflow-job
*/
type ActionsGetWorkflowJobReq struct {
	Owner string
	Repo  string
	JobId int64
}

func (r *ActionsGetWorkflowJobReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/jobs/%v", r.Owner, r.Repo, r.JobId)
}

func (r *ActionsGetWorkflowJobReq) method() string {
	return "GET"
}

func (r *ActionsGetWorkflowJobReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetWorkflowJobReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetWorkflowJobReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetWorkflowJobReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetWorkflowJobResponseBody202 is a response body for actions/get-workflow-job

API documentation: https://developer.github.com/v3/actions/workflow-jobs/#get-a-workflow-job
*/
type ActionsGetWorkflowJobResponseBody202 struct {
	components.Job
}

/*
ActionsGetWorkflowRunReq builds requests for "actions/get-workflow-run"

Get a workflow run.

  GET /repos/{owner}/{repo}/actions/runs/{run_id}

https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run
*/
type ActionsGetWorkflowRunReq struct {
	Owner string
	Repo  string
	RunId int64
}

func (r *ActionsGetWorkflowRunReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsGetWorkflowRunReq) method() string {
	return "GET"
}

func (r *ActionsGetWorkflowRunReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetWorkflowRunReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetWorkflowRunReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetWorkflowRunReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetWorkflowRunResponseBody200 is a response body for actions/get-workflow-run

API documentation: https://developer.github.com/v3/actions/workflow-runs/#get-a-workflow-run
*/
type ActionsGetWorkflowRunResponseBody200 struct {
	components.WorkflowRun
}

/*
ActionsGetWorkflowRunUsageReq builds requests for "actions/get-workflow-run-usage"

Get workflow run usage.

  GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing

https://developer.github.com/v3/actions/workflow-runs/#get-workflow-run-usage
*/
type ActionsGetWorkflowRunUsageReq struct {
	Owner string
	Repo  string
	RunId int64
}

func (r *ActionsGetWorkflowRunUsageReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/timing", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsGetWorkflowRunUsageReq) method() string {
	return "GET"
}

func (r *ActionsGetWorkflowRunUsageReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetWorkflowRunUsageReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetWorkflowRunUsageReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetWorkflowRunUsageReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetWorkflowRunUsageResponseBody200 is a response body for actions/get-workflow-run-usage

API documentation: https://developer.github.com/v3/actions/workflow-runs/#get-workflow-run-usage
*/
type ActionsGetWorkflowRunUsageResponseBody200 struct {
	components.WorkfloRunUsage
}

/*
ActionsGetWorkflowUsageReq builds requests for "actions/get-workflow-usage"

Get workflow usage.

  GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing

https://developer.github.com/v3/actions/workflows/#get-workflow-usage
*/
type ActionsGetWorkflowUsageReq struct {
	Owner      string
	Repo       string
	WorkflowId int64
}

func (r *ActionsGetWorkflowUsageReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/workflows/%v/timing", r.Owner, r.Repo, r.WorkflowId)
}

func (r *ActionsGetWorkflowUsageReq) method() string {
	return "GET"
}

func (r *ActionsGetWorkflowUsageReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsGetWorkflowUsageReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsGetWorkflowUsageReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsGetWorkflowUsageReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsGetWorkflowUsageResponseBody200 is a response body for actions/get-workflow-usage

API documentation: https://developer.github.com/v3/actions/workflows/#get-workflow-usage
*/
type ActionsGetWorkflowUsageResponseBody200 struct {
	components.WorkfloUsage
}

/*
ActionsListArtifactsForRepoReq builds requests for "actions/list-artifacts-for-repo"

List artifacts for a repository.

  GET /repos/{owner}/{repo}/actions/artifacts

https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository
*/
type ActionsListArtifactsForRepoReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListArtifactsForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/artifacts", r.Owner, r.Repo)
}

func (r *ActionsListArtifactsForRepoReq) method() string {
	return "GET"
}

func (r *ActionsListArtifactsForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListArtifactsForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListArtifactsForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListArtifactsForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListArtifactsForRepoResponseBody200 is a response body for actions/list-artifacts-for-repo

API documentation: https://developer.github.com/v3/actions/artifacts/#list-artifacts-for-a-repository
*/
type ActionsListArtifactsForRepoResponseBody200 struct {
	Artifacts []struct {
		components.Artifact2
	} `json:"artifacts,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListJobsForWorkflowRunReq builds requests for "actions/list-jobs-for-workflow-run"

List jobs for a workflow run.

  GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs

https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run
*/
type ActionsListJobsForWorkflowRunReq struct {
	Owner string
	Repo  string
	RunId int64

	/*
	Filters jobs by their `completed_at` timestamp. Can be one of:
	\* `latest`: Returns jobs from the most recent execution of the workflow run.
	\* `all`: Returns all jobs for a workflow run, including from old executions of
	the workflow run.
	*/
	Filter *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListJobsForWorkflowRunReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/jobs", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsListJobsForWorkflowRunReq) method() string {
	return "GET"
}

func (r *ActionsListJobsForWorkflowRunReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Filter != nil {
		query.Set("filter", *r.Filter)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListJobsForWorkflowRunReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListJobsForWorkflowRunReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListJobsForWorkflowRunReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListJobsForWorkflowRunResponseBody200 is a response body for actions/list-jobs-for-workflow-run

API documentation: https://developer.github.com/v3/actions/workflow-jobs/#list-jobs-for-a-workflow-run
*/
type ActionsListJobsForWorkflowRunResponseBody200 struct {
	Jobs []struct {
		components.Job
	} `json:"jobs,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListOrgSecretsReq builds requests for "actions/list-org-secrets"

List organization secrets.

  GET /orgs/{org}/actions/secrets

https://developer.github.com/v3/actions/secrets/#list-organization-secrets
*/
type ActionsListOrgSecretsReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListOrgSecretsReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets", r.Org)
}

func (r *ActionsListOrgSecretsReq) method() string {
	return "GET"
}

func (r *ActionsListOrgSecretsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListOrgSecretsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListOrgSecretsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListOrgSecretsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListOrgSecretsResponseBody200 is a response body for actions/list-org-secrets

API documentation: https://developer.github.com/v3/actions/secrets/#list-organization-secrets
*/
type ActionsListOrgSecretsResponseBody200 struct {
	Secrets []struct {
		components.OrganizationActionsSecret2
	} `json:"secrets,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListRepoSecretsReq builds requests for "actions/list-repo-secrets"

List repository secrets.

  GET /repos/{owner}/{repo}/actions/secrets

https://developer.github.com/v3/actions/secrets/#list-repository-secrets
*/
type ActionsListRepoSecretsReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListRepoSecretsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/secrets", r.Owner, r.Repo)
}

func (r *ActionsListRepoSecretsReq) method() string {
	return "GET"
}

func (r *ActionsListRepoSecretsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListRepoSecretsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListRepoSecretsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListRepoSecretsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListRepoSecretsResponseBody200 is a response body for actions/list-repo-secrets

API documentation: https://developer.github.com/v3/actions/secrets/#list-repository-secrets
*/
type ActionsListRepoSecretsResponseBody200 struct {
	Secrets []struct {
		components.ActionsSecret2
	} `json:"secrets,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListRepoWorkflowRunsReq builds requests for "actions/list-repo-workflow-runs"

List repository workflow runs.

  GET /repos/{owner}/{repo}/actions/runs

https://developer.github.com/v3/actions/workflow-runs/#list-repository-workflow-runs
*/
type ActionsListRepoWorkflowRunsReq struct {
	Owner string
	Repo  string

	/*
	Returns someone's workflow runs. Use the login for the user who created the
	`push` associated with the check suite or workflow run.
	*/
	Actor *string

	/*
	Returns workflow runs associated with a branch. Use the name of the branch of
	the `push`.
	*/
	Branch *string

	/*
	Returns workflow run triggered by the event you specify. For example, `push`,
	`pull_request` or `issue`. For more information, see "[Events that trigger
	workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)"
	in the GitHub Help documentation.
	*/
	Event *string

	/*
	Returns workflow runs associated with the check run `status` or `conclusion` you
	specify. For example, a conclusion can be `success` or a status can be
	`completed`. For more information, see the `status` and `conclusion` options
	available in "[Create a check
	run](https://developer.github.com/v3/checks/runs/#create-a-check-run)."
	*/
	Status *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListRepoWorkflowRunsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs", r.Owner, r.Repo)
}

func (r *ActionsListRepoWorkflowRunsReq) method() string {
	return "GET"
}

func (r *ActionsListRepoWorkflowRunsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Actor != nil {
		query.Set("actor", *r.Actor)
	}
	if r.Branch != nil {
		query.Set("branch", *r.Branch)
	}
	if r.Event != nil {
		query.Set("event", *r.Event)
	}
	if r.Status != nil {
		query.Set("status", *r.Status)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListRepoWorkflowRunsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListRepoWorkflowRunsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListRepoWorkflowRunsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListRepoWorkflowRunsResponseBody200 is a response body for actions/list-repo-workflow-runs

API documentation: https://developer.github.com/v3/actions/workflow-runs/#list-repository-workflow-runs
*/
type ActionsListRepoWorkflowRunsResponseBody200 struct {
	TotalCount   int64 `json:"total_count,omitempty"`
	WorkflowRuns []struct {
		components.WorkflowRun
	} `json:"workflow_runs,omitempty"`
}

/*
ActionsListRepoWorkflowsReq builds requests for "actions/list-repo-workflows"

List repository workflows.

  GET /repos/{owner}/{repo}/actions/workflows

https://developer.github.com/v3/actions/workflows/#list-repository-workflows
*/
type ActionsListRepoWorkflowsReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListRepoWorkflowsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/workflows", r.Owner, r.Repo)
}

func (r *ActionsListRepoWorkflowsReq) method() string {
	return "GET"
}

func (r *ActionsListRepoWorkflowsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListRepoWorkflowsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListRepoWorkflowsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListRepoWorkflowsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListRepoWorkflowsResponseBody200 is a response body for actions/list-repo-workflows

API documentation: https://developer.github.com/v3/actions/workflows/#list-repository-workflows
*/
type ActionsListRepoWorkflowsResponseBody200 struct {
	TotalCount int64 `json:"total_count,omitempty"`
	Workflows  []struct {
		components.Workflow2
	} `json:"workflows,omitempty"`
}

/*
ActionsListRunnerApplicationsForOrgReq builds requests for "actions/list-runner-applications-for-org"

List runner applications for an organization.

  GET /orgs/{org}/actions/runners/downloads

https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization
*/
type ActionsListRunnerApplicationsForOrgReq struct {
	Org string
}

func (r *ActionsListRunnerApplicationsForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/runners/downloads", r.Org)
}

func (r *ActionsListRunnerApplicationsForOrgReq) method() string {
	return "GET"
}

func (r *ActionsListRunnerApplicationsForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsListRunnerApplicationsForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListRunnerApplicationsForOrgReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListRunnerApplicationsForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListRunnerApplicationsForOrgResponseBody200 is a response body for actions/list-runner-applications-for-org

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-an-organization
*/
type ActionsListRunnerApplicationsForOrgResponseBody200 []struct {
	components.RunnerApplication
}

/*
ActionsListRunnerApplicationsForRepoReq builds requests for "actions/list-runner-applications-for-repo"

List runner applications for a repository.

  GET /repos/{owner}/{repo}/actions/runners/downloads

https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository
*/
type ActionsListRunnerApplicationsForRepoReq struct {
	Owner string
	Repo  string
}

func (r *ActionsListRunnerApplicationsForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runners/downloads", r.Owner, r.Repo)
}

func (r *ActionsListRunnerApplicationsForRepoReq) method() string {
	return "GET"
}

func (r *ActionsListRunnerApplicationsForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsListRunnerApplicationsForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListRunnerApplicationsForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListRunnerApplicationsForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListRunnerApplicationsForRepoResponseBody200 is a response body for actions/list-runner-applications-for-repo

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#list-runner-applications-for-a-repository
*/
type ActionsListRunnerApplicationsForRepoResponseBody200 []struct {
	components.RunnerApplication
}

/*
ActionsListSelectedReposForOrgSecretReq builds requests for "actions/list-selected-repos-for-org-secret"

List selected repositories for an organization secret.

  GET /orgs/{org}/actions/secrets/{secret_name}/repositories

https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret
*/
type ActionsListSelectedReposForOrgSecretReq struct {
	Org        string
	SecretName string
}

func (r *ActionsListSelectedReposForOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v/repositories", r.Org, r.SecretName)
}

func (r *ActionsListSelectedReposForOrgSecretReq) method() string {
	return "GET"
}

func (r *ActionsListSelectedReposForOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsListSelectedReposForOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListSelectedReposForOrgSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListSelectedReposForOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListSelectedReposForOrgSecretResponseBody200 is a response body for actions/list-selected-repos-for-org-secret

API documentation: https://developer.github.com/v3/actions/secrets/#list-selected-repositories-for-an-organization-secret
*/
type ActionsListSelectedReposForOrgSecretResponseBody200 struct {
	Repositories []struct {
		components.PublicRepository
	} `json:"repositories,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListSelfHostedRunnersForOrgReq builds requests for "actions/list-self-hosted-runners-for-org"

List self-hosted runners for an organization.

  GET /orgs/{org}/actions/runners

https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization
*/
type ActionsListSelfHostedRunnersForOrgReq struct {
	Org string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListSelfHostedRunnersForOrgReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/runners", r.Org)
}

func (r *ActionsListSelfHostedRunnersForOrgReq) method() string {
	return "GET"
}

func (r *ActionsListSelfHostedRunnersForOrgReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListSelfHostedRunnersForOrgReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListSelfHostedRunnersForOrgReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListSelfHostedRunnersForOrgReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListSelfHostedRunnersForOrgResponseBody200 is a response body for actions/list-self-hosted-runners-for-org

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-an-organization
*/
type ActionsListSelfHostedRunnersForOrgResponseBody200 struct {
	Runners []struct {
		components.Runner2
	} `json:"runners,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListSelfHostedRunnersForRepoReq builds requests for "actions/list-self-hosted-runners-for-repo"

List self-hosted runners for a repository.

  GET /repos/{owner}/{repo}/actions/runners

https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository
*/
type ActionsListSelfHostedRunnersForRepoReq struct {
	Owner string
	Repo  string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListSelfHostedRunnersForRepoReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runners", r.Owner, r.Repo)
}

func (r *ActionsListSelfHostedRunnersForRepoReq) method() string {
	return "GET"
}

func (r *ActionsListSelfHostedRunnersForRepoReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListSelfHostedRunnersForRepoReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListSelfHostedRunnersForRepoReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListSelfHostedRunnersForRepoReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListSelfHostedRunnersForRepoResponseBody200 is a response body for actions/list-self-hosted-runners-for-repo

API documentation: https://developer.github.com/v3/actions/self-hosted-runners/#list-self-hosted-runners-for-a-repository
*/
type ActionsListSelfHostedRunnersForRepoResponseBody200 struct {
	Runners []struct {
		components.Runner2
	} `json:"runners,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListWorkflowRunArtifactsReq builds requests for "actions/list-workflow-run-artifacts"

List workflow run artifacts.

  GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts

https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts
*/
type ActionsListWorkflowRunArtifactsReq struct {
	Owner string
	Repo  string
	RunId int64

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListWorkflowRunArtifactsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/artifacts", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsListWorkflowRunArtifactsReq) method() string {
	return "GET"
}

func (r *ActionsListWorkflowRunArtifactsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListWorkflowRunArtifactsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListWorkflowRunArtifactsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListWorkflowRunArtifactsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListWorkflowRunArtifactsResponseBody200 is a response body for actions/list-workflow-run-artifacts

API documentation: https://developer.github.com/v3/actions/artifacts/#list-workflow-run-artifacts
*/
type ActionsListWorkflowRunArtifactsResponseBody200 struct {
	Artifacts []struct {
		components.Artifact2
	} `json:"artifacts,omitempty"`
	TotalCount int64 `json:"total_count,omitempty"`
}

/*
ActionsListWorkflowRunsReq builds requests for "actions/list-workflow-runs"

List workflow runs.

  GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs

https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs
*/
type ActionsListWorkflowRunsReq struct {
	Owner      string
	Repo       string
	WorkflowId int64

	/*
	Returns someone's workflow runs. Use the login for the user who created the
	`push` associated with the check suite or workflow run.
	*/
	Actor *string

	/*
	Returns workflow runs associated with a branch. Use the name of the branch of
	the `push`.
	*/
	Branch *string

	/*
	Returns workflow run triggered by the event you specify. For example, `push`,
	`pull_request` or `issue`. For more information, see "[Events that trigger
	workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)"
	in the GitHub Help documentation.
	*/
	Event *string

	/*
	Returns workflow runs associated with the check run `status` or `conclusion` you
	specify. For example, a conclusion can be `success` or a status can be
	`completed`. For more information, see the `status` and `conclusion` options
	available in "[Create a check
	run](https://developer.github.com/v3/checks/runs/#create-a-check-run)."
	*/
	Status *string

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r *ActionsListWorkflowRunsReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/workflows/%v/runs", r.Owner, r.Repo, r.WorkflowId)
}

func (r *ActionsListWorkflowRunsReq) method() string {
	return "GET"
}

func (r *ActionsListWorkflowRunsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.Actor != nil {
		query.Set("actor", *r.Actor)
	}
	if r.Branch != nil {
		query.Set("branch", *r.Branch)
	}
	if r.Event != nil {
		query.Set("event", *r.Event)
	}
	if r.Status != nil {
		query.Set("status", *r.Status)
	}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r *ActionsListWorkflowRunsReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsListWorkflowRunsReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsListWorkflowRunsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsListWorkflowRunsResponseBody200 is a response body for actions/list-workflow-runs

API documentation: https://developer.github.com/v3/actions/workflow-runs/#list-workflow-runs
*/
type ActionsListWorkflowRunsResponseBody200 struct {
	TotalCount   int64 `json:"total_count,omitempty"`
	WorkflowRuns []struct {
		components.WorkflowRun
	} `json:"workflow_runs,omitempty"`
}

/*
ActionsReRunWorkflowReq builds requests for "actions/re-run-workflow"

Re-run a workflow.

  POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun

https://developer.github.com/v3/actions/workflow-runs/#re-run-a-workflow
*/
type ActionsReRunWorkflowReq struct {
	Owner string
	Repo  string
	RunId int64
}

func (r *ActionsReRunWorkflowReq) urlPath() string {
	return fmt.Sprintf("/repos/%v/%v/actions/runs/%v/rerun", r.Owner, r.Repo, r.RunId)
}

func (r *ActionsReRunWorkflowReq) method() string {
	return "POST"
}

func (r *ActionsReRunWorkflowReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsReRunWorkflowReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsReRunWorkflowReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsReRunWorkflowReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsRemoveSelectedRepoFromOrgSecretReq builds requests for "actions/remove-selected-repo-from-org-secret"

Remove selected repository from an organization secret.

  DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}

https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret
*/
type ActionsRemoveSelectedRepoFromOrgSecretReq struct {
	Org          string
	SecretName   string
	RepositoryId int64
}

func (r *ActionsRemoveSelectedRepoFromOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v/repositories/%v", r.Org, r.SecretName, r.RepositoryId)
}

func (r *ActionsRemoveSelectedRepoFromOrgSecretReq) method() string {
	return "DELETE"
}

func (r *ActionsRemoveSelectedRepoFromOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsRemoveSelectedRepoFromOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsRemoveSelectedRepoFromOrgSecretReq) body() interface{} {
	return nil
}

// HTTPRequest creates an http request
func (r *ActionsRemoveSelectedRepoFromOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsSetSelectedReposForOrgSecretReq builds requests for "actions/set-selected-repos-for-org-secret"

Set selected repositories for an organization secret.

  PUT /orgs/{org}/actions/secrets/{secret_name}/repositories

https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret
*/
type ActionsSetSelectedReposForOrgSecretReq struct {
	Org         string
	SecretName  string
	RequestBody ActionsSetSelectedReposForOrgSecretReqBody
}

func (r *ActionsSetSelectedReposForOrgSecretReq) urlPath() string {
	return fmt.Sprintf("/orgs/%v/actions/secrets/%v/repositories", r.Org, r.SecretName)
}

func (r *ActionsSetSelectedReposForOrgSecretReq) method() string {
	return "PUT"
}

func (r *ActionsSetSelectedReposForOrgSecretReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r *ActionsSetSelectedReposForOrgSecretReq) header(requiredPreviews, allPreviews bool) http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r *ActionsSetSelectedReposForOrgSecretReq) body() interface{} {
	return r.RequestBody
}

// HTTPRequest creates an http request
func (r *ActionsSetSelectedReposForOrgSecretReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return buildHTTPRequest(ctx, r, opt)
}

/*
ActionsSetSelectedReposForOrgSecretReqBody is a request body for actions/set-selected-repos-for-org-secret

API documentation: https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret
*/
type ActionsSetSelectedReposForOrgSecretReqBody struct {

	/*
	   An array of repository ids that can access the organization secret. You can only
	   provide a list of repository ids when the `visibility` is set to `selected`. You
	   can add and remove individual repositories using the [Set selected repositories
	   for an organization
	   secret](https://developer.github.com/v3/actions/secrets/#set-selected-repositories-for-an-organization-secret)
	   and [Remove selected repository from an organization
	   secret](https://developer.github.com/v3/actions/secrets/#remove-selected-repository-from-an-organization-secret)
	   endpoints.
	*/
	SelectedRepositoryIds []int64 `json:"selected_repository_ids,omitempty"`
}
