// Code generated by octo-go; DO NOT EDIT.

package octo

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

/*
OauthAuthorizationsDeleteGrantReq builds requests for "oauth-authorizations/delete-grant"

Delete a grant.

  DELETE /applications/grants/{grant_id}

https://developer.github.com/v3/oauth_authorizations/#delete-a-grant
*/
type OauthAuthorizationsDeleteGrantReq struct {
	GrantId int64
}

func (r OauthAuthorizationsDeleteGrantReq) urlPath() string {
	return fmt.Sprintf("/applications/grants/%v", r.GrantId)
}

func (r OauthAuthorizationsDeleteGrantReq) method() string {
	return "DELETE"
}

func (r OauthAuthorizationsDeleteGrantReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsDeleteGrantReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsDeleteGrantReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
OauthAuthorizationsGetGrantReq builds requests for "oauth-authorizations/get-grant"

Get a single grant.

  GET /applications/grants/{grant_id}

https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant
*/
type OauthAuthorizationsGetGrantReq struct {
	GrantId int64
}

func (r OauthAuthorizationsGetGrantReq) urlPath() string {
	return fmt.Sprintf("/applications/grants/%v", r.GrantId)
}

func (r OauthAuthorizationsGetGrantReq) method() string {
	return "GET"
}

func (r OauthAuthorizationsGetGrantReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsGetGrantReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsGetGrantReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
OauthAuthorizationsGetGrantResponseBody200 is a response body for oauth-authorizations/get-grant

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-a-single-grant
*/
type OauthAuthorizationsGetGrantResponseBody200 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt string   `json:"created_at,omitempty"`
	Id        int64    `json:"id,omitempty"`
	Scopes    []string `json:"scopes,omitempty"`
	UpdatedAt string   `json:"updated_at,omitempty"`
	Url       string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsCreateAuthorizationReq builds requests for "oauth-authorizations/create-authorization"

Create a new authorization.

  POST /authorizations

https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
*/
type OauthAuthorizationsCreateAuthorizationReq struct {
	RequestBody OauthAuthorizationsCreateAuthorizationReqBody
}

func (r OauthAuthorizationsCreateAuthorizationReq) urlPath() string {
	return fmt.Sprintf("/authorizations")
}

func (r OauthAuthorizationsCreateAuthorizationReq) method() string {
	return "POST"
}

func (r OauthAuthorizationsCreateAuthorizationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsCreateAuthorizationReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsCreateAuthorizationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
OauthAuthorizationsCreateAuthorizationReqBody is a request body for oauth-authorizations/create-authorization

API documentation: https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
*/
type OauthAuthorizationsCreateAuthorizationReqBody struct {

	// The 20 character OAuth app client key for which to create the token.
	ClientId *string `json:"client_id,omitempty"`

	// The 40 character OAuth app client secret for which to create the token.
	ClientSecret *string `json:"client_secret,omitempty"`

	/*
	   A unique string to distinguish an authorization from others created for the same
	   client ID and user.
	*/
	Fingerprint *string `json:"fingerprint,omitempty"`

	/*
	   A note to remind you what the OAuth token is for. Tokens not associated with a
	   specific OAuth application (i.e. personal access tokens) must have a unique
	   note.
	*/
	Note *string `json:"note"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes []string `json:"scopes,omitempty"`
}

/*
OauthAuthorizationsCreateAuthorizationResponseBody201 is a response body for oauth-authorizations/create-authorization

API documentation: https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization
*/
type OauthAuthorizationsCreateAuthorizationResponseBody201 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsListAuthorizationsReq builds requests for "oauth-authorizations/list-authorizations"

List your authorizations.

  GET /authorizations

https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations
*/
type OauthAuthorizationsListAuthorizationsReq struct {

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r OauthAuthorizationsListAuthorizationsReq) urlPath() string {
	return fmt.Sprintf("/authorizations")
}

func (r OauthAuthorizationsListAuthorizationsReq) method() string {
	return "GET"
}

func (r OauthAuthorizationsListAuthorizationsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r OauthAuthorizationsListAuthorizationsReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsListAuthorizationsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
OauthAuthorizationsListAuthorizationsResponseBody200 is a response body for oauth-authorizations/list-authorizations

API documentation: https://developer.github.com/v3/oauth_authorizations/#list-your-authorizations
*/
type OauthAuthorizationsListAuthorizationsResponseBody200 []struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsListGrantsReq builds requests for "oauth-authorizations/list-grants"

List your grants.

  GET /applications/grants

https://developer.github.com/v3/oauth_authorizations/#list-your-grants
*/
type OauthAuthorizationsListGrantsReq struct {

	// Results per page (max 100)
	PerPage *int64

	// Page number of the results to fetch.
	Page *int64
}

func (r OauthAuthorizationsListGrantsReq) urlPath() string {
	return fmt.Sprintf("/applications/grants")
}

func (r OauthAuthorizationsListGrantsReq) method() string {
	return "GET"
}

func (r OauthAuthorizationsListGrantsReq) urlQuery() url.Values {
	query := url.Values{}
	if r.PerPage != nil {
		query.Set("per_page", strconv.FormatInt(*r.PerPage, 10))
	}
	if r.Page != nil {
		query.Set("page", strconv.FormatInt(*r.Page, 10))
	}
	return query
}

func (r OauthAuthorizationsListGrantsReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsListGrantsReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
OauthAuthorizationsListGrantsResponseBody200 is a response body for oauth-authorizations/list-grants

API documentation: https://developer.github.com/v3/oauth_authorizations/#list-your-grants
*/
type OauthAuthorizationsListGrantsResponseBody200 []struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt string   `json:"created_at,omitempty"`
	Id        int64    `json:"id,omitempty"`
	Scopes    []string `json:"scopes,omitempty"`
	UpdatedAt string   `json:"updated_at,omitempty"`
	Url       string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppReq builds requests for "oauth-authorizations/get-or-create-authorization-for-app"

Get-or-create an authorization for a specific app.

  PUT /authorizations/clients/{client_id}

https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppReq struct {
	ClientId    string
	RequestBody OauthAuthorizationsGetOrCreateAuthorizationForAppReqBody
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) urlPath() string {
	return fmt.Sprintf("/authorizations/clients/%v", r.ClientId)
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) method() string {
	return "PUT"
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppReqBody is a request body for oauth-authorizations/get-or-create-authorization-for-app

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppReqBody struct {

	/*
	   The 40 character OAuth app client secret associated with the client ID specified
	   in the URL.
	*/
	ClientSecret *string `json:"client_secret"`

	/*
	   A unique string to distinguish an authorization from others created for the same
	   client and user. If provided, this API is functionally equivalent to
	   [Get-or-create an authorization for a specific app and
	   fingerprint](https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint).
	*/
	Fingerprint *string `json:"fingerprint,omitempty"`

	// A note to remind you what the OAuth token is for.
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes []string `json:"scopes,omitempty"`
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody200 is a response body for oauth-authorizations/get-or-create-authorization-for-app

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody200 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody201 is a response body for oauth-authorizations/get-or-create-authorization-for-app

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppResponseBody201 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsDeleteAuthorizationReq builds requests for "oauth-authorizations/delete-authorization"

Delete an authorization.

  DELETE /authorizations/{authorization_id}

https://developer.github.com/v3/oauth_authorizations/#delete-an-authorization
*/
type OauthAuthorizationsDeleteAuthorizationReq struct {
	AuthorizationId int64
}

func (r OauthAuthorizationsDeleteAuthorizationReq) urlPath() string {
	return fmt.Sprintf("/authorizations/%v", r.AuthorizationId)
}

func (r OauthAuthorizationsDeleteAuthorizationReq) method() string {
	return "DELETE"
}

func (r OauthAuthorizationsDeleteAuthorizationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsDeleteAuthorizationReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsDeleteAuthorizationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
OauthAuthorizationsGetAuthorizationReq builds requests for "oauth-authorizations/get-authorization"

Get a single authorization.

  GET /authorizations/{authorization_id}

https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization
*/
type OauthAuthorizationsGetAuthorizationReq struct {
	AuthorizationId int64
}

func (r OauthAuthorizationsGetAuthorizationReq) urlPath() string {
	return fmt.Sprintf("/authorizations/%v", r.AuthorizationId)
}

func (r OauthAuthorizationsGetAuthorizationReq) method() string {
	return "GET"
}

func (r OauthAuthorizationsGetAuthorizationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsGetAuthorizationReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsGetAuthorizationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), nil, opt)
}

/*
OauthAuthorizationsGetAuthorizationResponseBody200 is a response body for oauth-authorizations/get-authorization

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-a-single-authorization
*/
type OauthAuthorizationsGetAuthorizationResponseBody200 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsUpdateAuthorizationReq builds requests for "oauth-authorizations/update-authorization"

Update an existing authorization.

  PATCH /authorizations/{authorization_id}

https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
*/
type OauthAuthorizationsUpdateAuthorizationReq struct {
	AuthorizationId int64
	RequestBody     OauthAuthorizationsUpdateAuthorizationReqBody
}

func (r OauthAuthorizationsUpdateAuthorizationReq) urlPath() string {
	return fmt.Sprintf("/authorizations/%v", r.AuthorizationId)
}

func (r OauthAuthorizationsUpdateAuthorizationReq) method() string {
	return "PATCH"
}

func (r OauthAuthorizationsUpdateAuthorizationReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsUpdateAuthorizationReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsUpdateAuthorizationReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
OauthAuthorizationsUpdateAuthorizationReqBody is a request body for oauth-authorizations/update-authorization

API documentation: https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
*/
type OauthAuthorizationsUpdateAuthorizationReqBody struct {

	// A list of scopes to add to this authorization.
	AddScopes []string `json:"add_scopes,omitempty"`

	/*
	   A unique string to distinguish an authorization from others created for the same
	   client ID and user.
	*/
	Fingerprint *string `json:"fingerprint,omitempty"`

	/*
	   A note to remind you what the OAuth token is for. Tokens not associated with a
	   specific OAuth application (i.e. personal access tokens) must have a unique
	   note.
	*/
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes to remove from this authorization.
	RemoveScopes []string `json:"remove_scopes,omitempty"`

	// Replaces the authorization scopes with these.
	Scopes []string `json:"scopes,omitempty"`
}

/*
OauthAuthorizationsUpdateAuthorizationResponseBody200 is a response body for oauth-authorizations/update-authorization

API documentation: https://developer.github.com/v3/oauth_authorizations/#update-an-existing-authorization
*/
type OauthAuthorizationsUpdateAuthorizationResponseBody200 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq builds requests for "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint"

Get-or-create an authorization for a specific app and fingerprint.

  PUT /authorizations/clients/{client_id}/{fingerprint}

https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq struct {
	ClientId    string
	Fingerprint string
	RequestBody OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReqBody
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) urlPath() string {
	return fmt.Sprintf("/authorizations/clients/%v/%v", r.ClientId, r.Fingerprint)
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) method() string {
	return "PUT"
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) urlQuery() url.Values {
	query := url.Values{}
	return query
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) header() http.Header {
	headerVals := map[string]*string{}
	previewVals := map[string]bool{}
	return requestHeaders(headerVals, previewVals)
}

func (r OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReq) HTTPRequest(ctx context.Context, opt ...RequestOption) (*http.Request, error) {
	return httpRequest(ctx, r.urlPath(), r.method(), r.urlQuery(), r.header(), r.RequestBody, opt)
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReqBody is a request body for oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintReqBody struct {

	/*
	   The 40 character OAuth app client secret associated with the client ID specified
	   in the URL.
	*/
	ClientSecret *string `json:"client_secret"`

	// A note to remind you what the OAuth token is for.
	Note *string `json:"note,omitempty"`

	// A URL to remind you what app the OAuth token is for.
	NoteUrl *string `json:"note_url,omitempty"`

	// A list of scopes that this authorization is in.
	Scopes []string `json:"scopes,omitempty"`
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody200 is a response body for oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody200 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}

/*
OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody201 is a response body for oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint

API documentation: https://developer.github.com/v3/oauth_authorizations/#get-or-create-an-authorization-for-a-specific-app-and-fingerprint
*/
type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintResponseBody201 struct {
	App struct {
		ClientId string `json:"client_id,omitempty"`
		Name     string `json:"name,omitempty"`
		Url      string `json:"url,omitempty"`
	} `json:"app,omitempty"`
	CreatedAt      string   `json:"created_at,omitempty"`
	Fingerprint    string   `json:"fingerprint,omitempty"`
	HashedToken    string   `json:"hashed_token,omitempty"`
	Id             int64    `json:"id,omitempty"`
	Note           string   `json:"note,omitempty"`
	NoteUrl        string   `json:"note_url,omitempty"`
	Scopes         []string `json:"scopes,omitempty"`
	Token          string   `json:"token,omitempty"`
	TokenLastEight string   `json:"token_last_eight,omitempty"`
	UpdatedAt      string   `json:"updated_at,omitempty"`
	Url            string   `json:"url,omitempty"`
}
